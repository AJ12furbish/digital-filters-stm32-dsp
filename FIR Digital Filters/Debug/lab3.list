
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015560  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000160a0  08015830  08015830  00016830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b8d0  0802b8d0  0002d604  2**0
                  CONTENTS
  4 .ARM          00000000  0802b8d0  0802b8d0  0002d604  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802b8d0  0802b8d0  0002d604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b8d0  0802b8d0  0002c8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b8d4  0802b8d4  0002c8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000604  24000000  0802b8d8  0002d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000148c4  24000620  0802bedc  0002d620  2**5
                  ALLOC
 10 .RAM_D3       00000000  38000000  38000000  0002d604  2**0
                  CONTENTS
 11 ._user_heap_stack 00001204  24014ee4  24014ee4  0002dee4  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0002d604  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003c664  00000000  00000000  0002d632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000698b  00000000  00000000  00069c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002fc0  00000000  00000000  00070628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000238b  00000000  00000000  000735e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c2d8  00000000  00000000  00075973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000361fe  00000000  00000000  00081c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001772db  00000000  00000000  000b7e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000136  00000000  00000000  0022f124  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cd84  00000000  00000000  0022f25c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  0023bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000040d1  00000000  00000000  0023c060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000001a8  00000000  00000000  00240131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000620 	.word	0x24000620
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08015818 	.word	0x08015818

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000624 	.word	0x24000624
 800030c:	08015818 	.word	0x08015818

08000310 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d103      	bne.n	8000328 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8000320:	f04f 33ff 	mov.w	r3, #4294967295
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	e02c      	b.n	8000382 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	685a      	ldr	r2, [r3, #4]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	891a      	ldrh	r2, [r3, #8]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	68da      	ldr	r2, [r3, #12]
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	691a      	ldr	r2, [r3, #16]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	695a      	ldr	r2, [r3, #20]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a0c      	ldr	r2, [pc, #48]	@ (800038c <FT5336_RegisterBusIO+0x7c>)
 800035c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a0b      	ldr	r2, [pc, #44]	@ (8000390 <FT5336_RegisterBusIO+0x80>)
 8000362:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d004      	beq.n	800037c <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4798      	blx	r3
 8000378:	60f8      	str	r0, [r7, #12]
 800037a:	e002      	b.n	8000382 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800037c:	f04f 33ff 	mov.w	r3, #4294967295
 8000380:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000382:	68fb      	ldr	r3, [r7, #12]
}
 8000384:	4618      	mov	r0, r3
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	080003b5 	.word	0x080003b5
 8000390:	080003e9 	.word	0x080003e9

08000394 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	3318      	adds	r3, #24
 80003a2:	6839      	ldr	r1, [r7, #0]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 f850 	bl	800044a <ft5336_chip_id>
 80003aa:	4603      	mov	r3, r0
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80003b4:	b590      	push	{r4, r7, lr}
 80003b6:	b087      	sub	sp, #28
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	60f8      	str	r0, [r7, #12]
 80003bc:	607a      	str	r2, [r7, #4]
 80003be:	461a      	mov	r2, r3
 80003c0:	460b      	mov	r3, r1
 80003c2:	72fb      	strb	r3, [r7, #11]
 80003c4:	4613      	mov	r3, r2
 80003c6:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	691c      	ldr	r4, [r3, #16]
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	8918      	ldrh	r0, [r3, #8]
 80003d4:	7afb      	ldrb	r3, [r7, #11]
 80003d6:	b299      	uxth	r1, r3
 80003d8:	893b      	ldrh	r3, [r7, #8]
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	47a0      	blx	r4
 80003de:	4603      	mov	r3, r0
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	371c      	adds	r7, #28
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd90      	pop	{r4, r7, pc}

080003e8 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80003e8:	b590      	push	{r4, r7, lr}
 80003ea:	b087      	sub	sp, #28
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	607a      	str	r2, [r7, #4]
 80003f2:	461a      	mov	r2, r3
 80003f4:	460b      	mov	r3, r1
 80003f6:	72fb      	strb	r3, [r7, #11]
 80003f8:	4613      	mov	r3, r2
 80003fa:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	68dc      	ldr	r4, [r3, #12]
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	8918      	ldrh	r0, [r3, #8]
 8000408:	7afb      	ldrb	r3, [r7, #11]
 800040a:	b299      	uxth	r1, r3
 800040c:	893b      	ldrh	r3, [r7, #8]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	47a0      	blx	r4
 8000412:	4603      	mov	r3, r0
}
 8000414:	4618      	mov	r0, r3
 8000416:	371c      	adds	r7, #28
 8000418:	46bd      	mov	sp, r7
 800041a:	bd90      	pop	{r4, r7, pc}

0800041c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	607a      	str	r2, [r7, #4]
 8000426:	461a      	mov	r2, r3
 8000428:	460b      	mov	r3, r1
 800042a:	72fb      	strb	r3, [r7, #11]
 800042c:	4613      	mov	r3, r2
 800042e:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	685c      	ldr	r4, [r3, #4]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	6898      	ldr	r0, [r3, #8]
 8000438:	893b      	ldrh	r3, [r7, #8]
 800043a:	7af9      	ldrb	r1, [r7, #11]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	47a0      	blx	r4
 8000440:	4603      	mov	r3, r0
}
 8000442:	4618      	mov	r0, r3
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bd90      	pop	{r4, r7, pc}

0800044a <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b084      	sub	sp, #16
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
 8000452:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8000454:	2301      	movs	r3, #1
 8000456:	683a      	ldr	r2, [r7, #0]
 8000458:	21a8      	movs	r1, #168	@ 0xa8
 800045a:	6878      	ldr	r0, [r7, #4]
 800045c:	f7ff ffde 	bl	800041c <ft5336_read_reg>
 8000460:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d107      	bne.n	8000478 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	781a      	ldrb	r2, [r3, #0]
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	781a      	ldrb	r2, [r3, #0]
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8000478:	68fb      	ldr	r3, [r7, #12]
}
 800047a:	4618      	mov	r0, r3
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <S70KL1281_EnableMemoryMappedMode>:
  * @brief  Enable memory mapped mode for the OSPI memory.
  * @param  Ctx Component object pointer
  * @retval OSPI memory status
  */
int32_t S70KL1281_EnableMemoryMappedMode(OSPI_HandleTypeDef *Ctx)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b08a      	sub	sp, #40	@ 0x28
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
  OSPI_HyperbusCmdTypeDef  sCommand;
  OSPI_MemoryMappedTypeDef sMemMappedCfg;

  /* OctoSPI Hyperbus command configuration */
  sCommand.AddressSpace = HAL_OSPI_MEMORY_ADDRESS_SPACE;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 800048e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000492:	61fb      	str	r3, [r7, #28]
  sCommand.Address      = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	61bb      	str	r3, [r7, #24]
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000498:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800049c:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand.NbData       = 1;
 800049e:	2301      	movs	r3, #1
 80004a0:	623b      	str	r3, [r7, #32]

  if (HAL_OSPI_HyperbusCmd(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80004a2:	f107 0314 	add.w	r3, r7, #20
 80004a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80004aa:	4619      	mov	r1, r3
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f00b ff5d 	bl	800c36c <HAL_OSPI_HyperbusCmd>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d002      	beq.n	80004be <S70KL1281_EnableMemoryMappedMode+0x3c>
  {
    return S70KL1281_ERROR;
 80004b8:	f04f 33ff 	mov.w	r3, #4294967295
 80004bc:	e00e      	b.n	80004dc <S70KL1281_EnableMemoryMappedMode+0x5a>
  }

  /* OctoSPI activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]

  if (HAL_OSPI_MemoryMapped(Ctx, &sMemMappedCfg) != HAL_OK)
 80004c2:	f107 030c 	add.w	r3, r7, #12
 80004c6:	4619      	mov	r1, r3
 80004c8:	6878      	ldr	r0, [r7, #4]
 80004ca:	f00c f8c7 	bl	800c65c <HAL_OSPI_MemoryMapped>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d002      	beq.n	80004da <S70KL1281_EnableMemoryMappedMode+0x58>
  {
    return S70KL1281_ERROR;
 80004d4:	f04f 33ff 	mov.w	r3, #4294967295
 80004d8:	e000      	b.n	80004dc <S70KL1281_EnableMemoryMappedMode+0x5a>
  }

  return S70KL1281_OK;
 80004da:	2300      	movs	r3, #0
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3728      	adds	r7, #40	@ 0x28
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <S70KL1281_ReadCfgReg0>:
  * @param  Ctx Component object pointer
  * @param  Value Register value pointer
  * @retval error status
  */
int32_t S70KL1281_ReadCfgReg0(OSPI_HandleTypeDef *Ctx, uint16_t *Value)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
  OSPI_HyperbusCmdTypeDef  sCommand;

  /* Initialize the read command */
  sCommand.AddressSpace = HAL_OSPI_REGISTER_ADDRESS_SPACE;
 80004ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80004f2:	60fb      	str	r3, [r7, #12]
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 80004f4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80004f8:	617b      	str	r3, [r7, #20]
  sCommand.Address      = S70KL1281_CR0_ADDRESS;
 80004fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004fe:	613b      	str	r3, [r7, #16]
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000500:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000504:	61fb      	str	r3, [r7, #28]
  sCommand.NbData       = 2U;
 8000506:	2302      	movs	r3, #2
 8000508:	61bb      	str	r3, [r7, #24]

  /* Configure the command */
  if (HAL_OSPI_HyperbusCmd(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000512:	4619      	mov	r1, r3
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f00b ff29 	bl	800c36c <HAL_OSPI_HyperbusCmd>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d002      	beq.n	8000526 <S70KL1281_ReadCfgReg0+0x42>
  {
    return S70KL1281_ERROR;
 8000520:	f04f 33ff 	mov.w	r3, #4294967295
 8000524:	e00c      	b.n	8000540 <S70KL1281_ReadCfgReg0+0x5c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, (uint8_t *)Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800052a:	6839      	ldr	r1, [r7, #0]
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f00b fff1 	bl	800c514 <HAL_OSPI_Receive>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d002      	beq.n	800053e <S70KL1281_ReadCfgReg0+0x5a>
  {
    return S70KL1281_ERROR;
 8000538:	f04f 33ff 	mov.w	r3, #4294967295
 800053c:	e000      	b.n	8000540 <S70KL1281_ReadCfgReg0+0x5c>
  }

  return S70KL1281_OK;
 800053e:	2300      	movs	r3, #0
}
 8000540:	4618      	mov	r0, r3
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <S70KL1281_WriteCfgReg0>:
  * @param  Ctx Component object pointer
  * @param  Value Value to write to register
  * @retval error status
  */
int32_t S70KL1281_WriteCfgReg0(OSPI_HandleTypeDef *Ctx, uint16_t Value, uint32_t LatencyMode, uint32_t InitialLatency)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08e      	sub	sp, #56	@ 0x38
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	607a      	str	r2, [r7, #4]
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	460b      	mov	r3, r1
 8000556:	817b      	strh	r3, [r7, #10]
  OSPI_HyperbusCfgTypeDef sHyperbusCfg;
  OSPI_HyperbusCmdTypeDef sCommand;

  /* Reconfigure peripheral as no write latency to write in registers */
  sHyperbusCfg.RWRecoveryTime   = RW_RECOVERY_TIME;
 8000558:	2303      	movs	r3, #3
 800055a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sHyperbusCfg.AccessTime       = InitialLatency;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sHyperbusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8000560:	2302      	movs	r3, #2
 8000562:	633b      	str	r3, [r7, #48]	@ 0x30
  sHyperbusCfg.LatencyMode      = LatencyMode;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_OSPI_HyperbusCfg(Ctx, &sHyperbusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000568:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800056c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000570:	4619      	mov	r1, r3
 8000572:	68f8      	ldr	r0, [r7, #12]
 8000574:	f00b febb 	bl	800c2ee <HAL_OSPI_HyperbusCfg>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d002      	beq.n	8000584 <S70KL1281_WriteCfgReg0+0x3c>
  {
    return S70KL1281_ERROR;
 800057e:	f04f 33ff 	mov.w	r3, #4294967295
 8000582:	e03a      	b.n	80005fa <S70KL1281_WriteCfgReg0+0xb2>
  }

  /* Initialize the write command */
  sCommand.AddressSpace = HAL_OSPI_REGISTER_ADDRESS_SPACE;
 8000584:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000588:	617b      	str	r3, [r7, #20]
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 800058a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800058e:	61fb      	str	r3, [r7, #28]
  sCommand.Address      = S70KL1281_CR0_ADDRESS;
 8000590:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000594:	61bb      	str	r3, [r7, #24]
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000596:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800059a:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand.NbData       = 2U;
 800059c:	2302      	movs	r3, #2
 800059e:	623b      	str	r3, [r7, #32]

  /* Configure the command */
  if (HAL_OSPI_HyperbusCmd(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80005a8:	4619      	mov	r1, r3
 80005aa:	68f8      	ldr	r0, [r7, #12]
 80005ac:	f00b fede 	bl	800c36c <HAL_OSPI_HyperbusCmd>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d002      	beq.n	80005bc <S70KL1281_WriteCfgReg0+0x74>
  {
    return S70KL1281_ERROR;
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	e01e      	b.n	80005fa <S70KL1281_WriteCfgReg0+0xb2>
  }

  /* Transmission of the data */
  if (HAL_OSPI_Transmit(Ctx, (uint8_t *)(&Value), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80005bc:	f107 030a 	add.w	r3, r7, #10
 80005c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80005c4:	4619      	mov	r1, r3
 80005c6:	68f8      	ldr	r0, [r7, #12]
 80005c8:	f00b ff31 	bl	800c42e <HAL_OSPI_Transmit>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d002      	beq.n	80005d8 <S70KL1281_WriteCfgReg0+0x90>
  {
    return S70KL1281_ERROR;
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	e010      	b.n	80005fa <S70KL1281_WriteCfgReg0+0xb2>
  }

  /* Reconfigure peripheral for correct write access */
  sHyperbusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 80005d8:	2300      	movs	r3, #0
 80005da:	633b      	str	r3, [r7, #48]	@ 0x30

  if (HAL_OSPI_HyperbusCfg(Ctx, &sHyperbusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80005dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80005e4:	4619      	mov	r1, r3
 80005e6:	68f8      	ldr	r0, [r7, #12]
 80005e8:	f00b fe81 	bl	800c2ee <HAL_OSPI_HyperbusCfg>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <S70KL1281_WriteCfgReg0+0xb0>
  {
    return S70KL1281_ERROR;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	e000      	b.n	80005fa <S70KL1281_WriteCfgReg0+0xb2>
  }

  return S70KL1281_OK;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3738      	adds	r7, #56	@ 0x38
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <WM8994_Init>:
  * @param pObj pointer to component object
  * @param pInit pointer de component init structure
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Init(WM8994_Object_t *pObj, WM8994_Init_t *pInit)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  static uint8_t ColdStartup = 1;
  uint16_t tmp;
  
  /* wm8994 Errata Work-Arounds */
  tmp = 0x0003;
 800060e:	2303      	movs	r3, #3
 8000610:	817b      	strh	r3, [r7, #10]
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f103 0018 	add.w	r0, r3, #24
 8000618:	f107 020a 	add.w	r2, r7, #10
 800061c:	2302      	movs	r3, #2
 800061e:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000622:	f001 fdb1 	bl	8002188 <wm8994_write_reg>
 8000626:	60f8      	str	r0, [r7, #12]
  tmp = 0x0000;
 8000628:	2300      	movs	r3, #0
 800062a:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f103 0018 	add.w	r0, r3, #24
 8000632:	f107 020a 	add.w	r2, r7, #10
 8000636:	2302      	movs	r3, #2
 8000638:	f640 0117 	movw	r1, #2071	@ 0x817
 800063c:	f001 fda4 	bl	8002188 <wm8994_write_reg>
 8000640:	4602      	mov	r2, r0
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	4413      	add	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f103 0018 	add.w	r0, r3, #24
 800064e:	f107 020a 	add.w	r2, r7, #10
 8000652:	2302      	movs	r3, #2
 8000654:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000658:	f001 fd96 	bl	8002188 <wm8994_write_reg>
 800065c:	4602      	mov	r2, r0
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4413      	add	r3, r2
 8000662:	60fb      	str	r3, [r7, #12]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled: 0x006C at reg 0x39 */
  /* Bias Enable */
  tmp = 0x006C;
 8000664:	236c      	movs	r3, #108	@ 0x6c
 8000666:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f103 0018 	add.w	r0, r3, #24
 800066e:	f107 020a 	add.w	r2, r7, #10
 8000672:	2302      	movs	r3, #2
 8000674:	2139      	movs	r1, #57	@ 0x39
 8000676:	f001 fd87 	bl	8002188 <wm8994_write_reg>
 800067a:	4602      	mov	r2, r0
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4413      	add	r3, r2
 8000680:	60fb      	str	r3, [r7, #12]
  
  /* Enable bias generator, Enable VMID */
  if (pInit->InputDevice != WM8994_IN_NONE)
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d00f      	beq.n	80006aa <WM8994_Init+0xa6>
  {
    tmp = 0x0013;
 800068a:	2313      	movs	r3, #19
 800068c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);  
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f103 0018 	add.w	r0, r3, #24
 8000694:	f107 020a 	add.w	r2, r7, #10
 8000698:	2302      	movs	r3, #2
 800069a:	2101      	movs	r1, #1
 800069c:	f001 fd74 	bl	8002188 <wm8994_write_reg>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4413      	add	r3, r2
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	e00e      	b.n	80006c8 <WM8994_Init+0xc4>
  }
  else
  { 
    tmp = 0x0003;
 80006aa:	2303      	movs	r3, #3
 80006ac:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f103 0018 	add.w	r0, r3, #24
 80006b4:	f107 020a 	add.w	r2, r7, #10
 80006b8:	2302      	movs	r3, #2
 80006ba:	2101      	movs	r1, #1
 80006bc:	f001 fd64 	bl	8002188 <wm8994_write_reg>
 80006c0:	4602      	mov	r2, r0
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	4413      	add	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Add Delay */
  (void)WM8994_Delay(pObj, 50);
 80006c8:	2132      	movs	r1, #50	@ 0x32
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f001 fce4 	bl	8002098 <WM8994_Delay>
  
  /* Path Configurations for output */
  switch (pInit->OutputDevice)
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	f200 8141 	bhi.w	800095c <WM8994_Init+0x358>
 80006da:	a201      	add	r2, pc, #4	@ (adr r2, 80006e0 <WM8994_Init+0xdc>)
 80006dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e0:	080009f7 	.word	0x080009f7
 80006e4:	080006f1 	.word	0x080006f1
 80006e8:	0800078b 	.word	0x0800078b
 80006ec:	08000825 	.word	0x08000825
  {
  case WM8994_OUT_SPEAKER: 
    /* Enable DAC1 (Left), Enable DAC1 (Right),
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    tmp = 0x0C0C;
 80006f0:	f640 430c 	movw	r3, #3084	@ 0xc0c
 80006f4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f103 0018 	add.w	r0, r3, #24
 80006fc:	f107 020a 	add.w	r2, r7, #10
 8000700:	2302      	movs	r3, #2
 8000702:	2105      	movs	r1, #5
 8000704:	f001 fd40 	bl	8002188 <wm8994_write_reg>
 8000708:	4602      	mov	r2, r0
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	4413      	add	r3, r2
 800070e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0000;
 8000710:	2300      	movs	r3, #0
 8000712:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f103 0018 	add.w	r0, r3, #24
 800071a:	f107 020a 	add.w	r2, r7, #10
 800071e:	2302      	movs	r3, #2
 8000720:	f240 6101 	movw	r1, #1537	@ 0x601
 8000724:	f001 fd30 	bl	8002188 <wm8994_write_reg>
 8000728:	4602      	mov	r2, r0
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	4413      	add	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f103 0018 	add.w	r0, r3, #24
 8000736:	f107 020a 	add.w	r2, r7, #10
 800073a:	2302      	movs	r3, #2
 800073c:	f240 6102 	movw	r1, #1538	@ 0x602
 8000740:	f001 fd22 	bl	8002188 <wm8994_write_reg>
 8000744:	4602      	mov	r2, r0
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4413      	add	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0002;
 800074c:	2302      	movs	r3, #2
 800074e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f103 0018 	add.w	r0, r3, #24
 8000756:	f107 020a 	add.w	r2, r7, #10
 800075a:	2302      	movs	r3, #2
 800075c:	f240 6104 	movw	r1, #1540	@ 0x604
 8000760:	f001 fd12 	bl	8002188 <wm8994_write_reg>
 8000764:	4602      	mov	r2, r0
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f103 0018 	add.w	r0, r3, #24
 8000772:	f107 020a 	add.w	r2, r7, #10
 8000776:	2302      	movs	r3, #2
 8000778:	f240 6105 	movw	r1, #1541	@ 0x605
 800077c:	f001 fd04 	bl	8002188 <wm8994_write_reg>
 8000780:	4602      	mov	r2, r0
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	4413      	add	r3, r2
 8000786:	60fb      	str	r3, [r7, #12]
    break;
 8000788:	e136      	b.n	80009f8 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_HEADPHONE:    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 800078a:	f240 3303 	movw	r3, #771	@ 0x303
 800078e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f103 0018 	add.w	r0, r3, #24
 8000796:	f107 020a 	add.w	r2, r7, #10
 800079a:	2302      	movs	r3, #2
 800079c:	2105      	movs	r1, #5
 800079e:	f001 fcf3 	bl	8002188 <wm8994_write_reg>
 80007a2:	4602      	mov	r2, r0
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	4413      	add	r3, r2
 80007a8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 80007aa:	2301      	movs	r3, #1
 80007ac:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f103 0018 	add.w	r0, r3, #24
 80007b4:	f107 020a 	add.w	r2, r7, #10
 80007b8:	2302      	movs	r3, #2
 80007ba:	f240 6101 	movw	r1, #1537	@ 0x601
 80007be:	f001 fce3 	bl	8002188 <wm8994_write_reg>
 80007c2:	4602      	mov	r2, r0
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	4413      	add	r3, r2
 80007c8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f103 0018 	add.w	r0, r3, #24
 80007d0:	f107 020a 	add.w	r2, r7, #10
 80007d4:	2302      	movs	r3, #2
 80007d6:	f240 6102 	movw	r1, #1538	@ 0x602
 80007da:	f001 fcd5 	bl	8002188 <wm8994_write_reg>
 80007de:	4602      	mov	r2, r0
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4413      	add	r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80007e6:	2300      	movs	r3, #0
 80007e8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f103 0018 	add.w	r0, r3, #24
 80007f0:	f107 020a 	add.w	r2, r7, #10
 80007f4:	2302      	movs	r3, #2
 80007f6:	f240 6104 	movw	r1, #1540	@ 0x604
 80007fa:	f001 fcc5 	bl	8002188 <wm8994_write_reg>
 80007fe:	4602      	mov	r2, r0
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4413      	add	r3, r2
 8000804:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f103 0018 	add.w	r0, r3, #24
 800080c:	f107 020a 	add.w	r2, r7, #10
 8000810:	2302      	movs	r3, #2
 8000812:	f240 6105 	movw	r1, #1541	@ 0x605
 8000816:	f001 fcb7 	bl	8002188 <wm8994_write_reg>
 800081a:	4602      	mov	r2, r0
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4413      	add	r3, r2
 8000820:	60fb      	str	r3, [r7, #12]
    break;
 8000822:	e0e9      	b.n	80009f8 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_BOTH:
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b05      	cmp	r3, #5
 800082a:	d14a      	bne.n	80008c2 <WM8994_Init+0x2be>
    {
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 800082c:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8000830:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f103 0018 	add.w	r0, r3, #24
 8000838:	f107 020a 	add.w	r2, r7, #10
 800083c:	2302      	movs	r3, #2
 800083e:	2105      	movs	r1, #5
 8000840:	f001 fca2 	bl	8002188 <wm8994_write_reg>
 8000844:	4602      	mov	r2, r0
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	4413      	add	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0003;
 800084c:	2303      	movs	r3, #3
 800084e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f103 0018 	add.w	r0, r3, #24
 8000856:	f107 020a 	add.w	r2, r7, #10
 800085a:	2302      	movs	r3, #2
 800085c:	f240 6101 	movw	r1, #1537	@ 0x601
 8000860:	f001 fc92 	bl	8002188 <wm8994_write_reg>
 8000864:	4602      	mov	r2, r0
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	4413      	add	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f103 0018 	add.w	r0, r3, #24
 8000872:	f107 020a 	add.w	r2, r7, #10
 8000876:	2302      	movs	r3, #2
 8000878:	f240 6102 	movw	r1, #1538	@ 0x602
 800087c:	f001 fc84 	bl	8002188 <wm8994_write_reg>
 8000880:	4602      	mov	r2, r0
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	4413      	add	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f103 0018 	add.w	r0, r3, #24
 800088e:	f107 020a 	add.w	r2, r7, #10
 8000892:	2302      	movs	r3, #2
 8000894:	f240 6104 	movw	r1, #1540	@ 0x604
 8000898:	f001 fc76 	bl	8002188 <wm8994_write_reg>
 800089c:	4602      	mov	r2, r0
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	4413      	add	r3, r2
 80008a2:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */       
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f103 0018 	add.w	r0, r3, #24
 80008aa:	f107 020a 	add.w	r2, r7, #10
 80008ae:	2302      	movs	r3, #2
 80008b0:	f240 6105 	movw	r1, #1541	@ 0x605
 80008b4:	f001 fc68 	bl	8002188 <wm8994_write_reg>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4413      	add	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
      
      /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
    }
    break;
 80008c0:	e09a      	b.n	80009f8 <WM8994_Init+0x3f4>
      tmp = 0x0F0F;
 80008c2:	f640 730f 	movw	r3, #3855	@ 0xf0f
 80008c6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f103 0018 	add.w	r0, r3, #24
 80008ce:	f107 020a 	add.w	r2, r7, #10
 80008d2:	2302      	movs	r3, #2
 80008d4:	2105      	movs	r1, #5
 80008d6:	f001 fc57 	bl	8002188 <wm8994_write_reg>
 80008da:	4602      	mov	r2, r0
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	4413      	add	r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]
      tmp = 0x0001;
 80008e2:	2301      	movs	r3, #1
 80008e4:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	f103 0018 	add.w	r0, r3, #24
 80008ec:	f107 020a 	add.w	r2, r7, #10
 80008f0:	2302      	movs	r3, #2
 80008f2:	f240 6101 	movw	r1, #1537	@ 0x601
 80008f6:	f001 fc47 	bl	8002188 <wm8994_write_reg>
 80008fa:	4602      	mov	r2, r0
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	4413      	add	r3, r2
 8000900:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f103 0018 	add.w	r0, r3, #24
 8000908:	f107 020a 	add.w	r2, r7, #10
 800090c:	2302      	movs	r3, #2
 800090e:	f240 6102 	movw	r1, #1538	@ 0x602
 8000912:	f001 fc39 	bl	8002188 <wm8994_write_reg>
 8000916:	4602      	mov	r2, r0
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4413      	add	r3, r2
 800091c:	60fb      	str	r3, [r7, #12]
      tmp = 0x0002;
 800091e:	2302      	movs	r3, #2
 8000920:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f103 0018 	add.w	r0, r3, #24
 8000928:	f107 020a 	add.w	r2, r7, #10
 800092c:	2302      	movs	r3, #2
 800092e:	f240 6104 	movw	r1, #1540	@ 0x604
 8000932:	f001 fc29 	bl	8002188 <wm8994_write_reg>
 8000936:	4602      	mov	r2, r0
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	4413      	add	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f103 0018 	add.w	r0, r3, #24
 8000944:	f107 020a 	add.w	r2, r7, #10
 8000948:	2302      	movs	r3, #2
 800094a:	f240 6105 	movw	r1, #1541	@ 0x605
 800094e:	f001 fc1b 	bl	8002188 <wm8994_write_reg>
 8000952:	4602      	mov	r2, r0
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
    break;
 800095a:	e04d      	b.n	80009f8 <WM8994_Init+0x3f4>
    break;
  case WM8994_OUT_AUTO :
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 800095c:	f240 3303 	movw	r3, #771	@ 0x303
 8000960:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f103 0018 	add.w	r0, r3, #24
 8000968:	f107 020a 	add.w	r2, r7, #10
 800096c:	2302      	movs	r3, #2
 800096e:	2105      	movs	r1, #5
 8000970:	f001 fc0a 	bl	8002188 <wm8994_write_reg>
 8000974:	4602      	mov	r2, r0
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	4413      	add	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 800097c:	2301      	movs	r3, #1
 800097e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f103 0018 	add.w	r0, r3, #24
 8000986:	f107 020a 	add.w	r2, r7, #10
 800098a:	2302      	movs	r3, #2
 800098c:	f240 6101 	movw	r1, #1537	@ 0x601
 8000990:	f001 fbfa 	bl	8002188 <wm8994_write_reg>
 8000994:	4602      	mov	r2, r0
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	4413      	add	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f103 0018 	add.w	r0, r3, #24
 80009a2:	f107 020a 	add.w	r2, r7, #10
 80009a6:	2302      	movs	r3, #2
 80009a8:	f240 6102 	movw	r1, #1538	@ 0x602
 80009ac:	f001 fbec 	bl	8002188 <wm8994_write_reg>
 80009b0:	4602      	mov	r2, r0
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4413      	add	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80009b8:	2300      	movs	r3, #0
 80009ba:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f103 0018 	add.w	r0, r3, #24
 80009c2:	f107 020a 	add.w	r2, r7, #10
 80009c6:	2302      	movs	r3, #2
 80009c8:	f240 6104 	movw	r1, #1540	@ 0x604
 80009cc:	f001 fbdc 	bl	8002188 <wm8994_write_reg>
 80009d0:	4602      	mov	r2, r0
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	4413      	add	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f103 0018 	add.w	r0, r3, #24
 80009de:	f107 020a 	add.w	r2, r7, #10
 80009e2:	2302      	movs	r3, #2
 80009e4:	f240 6105 	movw	r1, #1541	@ 0x605
 80009e8:	f001 fbce 	bl	8002188 <wm8994_write_reg>
 80009ec:	4602      	mov	r2, r0
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	4413      	add	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
    break;
 80009f4:	e000      	b.n	80009f8 <WM8994_Init+0x3f4>
    break;
 80009f6:	bf00      	nop
  }
  
  /* Path Configurations for input */
  switch (pInit->InputDevice)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	f200 81df 	bhi.w	8000dc2 <WM8994_Init+0x7be>
 8000a04:	a201      	add	r2, pc, #4	@ (adr r2, 8000a0c <WM8994_Init+0x408>)
 8000a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0a:	bf00      	nop
 8000a0c:	08000bf3 	.word	0x08000bf3
 8000a10:	08000a21 	.word	0x08000a21
 8000a14:	08000adf 	.word	0x08000adf
 8000a18:	08000dc3 	.word	0x08000dc3
 8000a1c:	08000cb1 	.word	0x08000cb1
  {
  case WM8994_IN_MIC2 :
    /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
    * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0C30;
 8000a20:	f44f 6343 	mov.w	r3, #3120	@ 0xc30
 8000a24:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f103 0018 	add.w	r0, r3, #24
 8000a2c:	f107 020a 	add.w	r2, r7, #10
 8000a30:	2302      	movs	r3, #2
 8000a32:	2104      	movs	r1, #4
 8000a34:	f001 fba8 	bl	8002188 <wm8994_write_reg>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 8000a40:	23db      	movs	r3, #219	@ 0xdb
 8000a42:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f103 0018 	add.w	r0, r3, #24
 8000a4a:	f107 020a 	add.w	r2, r7, #10
 8000a4e:	2302      	movs	r3, #2
 8000a50:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8000a54:	f001 fb98 	bl	8002188 <wm8994_write_reg>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6000;
 8000a60:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000a64:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f103 0018 	add.w	r0, r3, #24
 8000a6c:	f107 020a 	add.w	r2, r7, #10
 8000a70:	2302      	movs	r3, #2
 8000a72:	2102      	movs	r1, #2
 8000a74:	f001 fb88 	bl	8002188 <wm8994_write_reg>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    tmp = 0x0002;
 8000a80:	2302      	movs	r3, #2
 8000a82:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f103 0018 	add.w	r0, r3, #24
 8000a8a:	f107 020a 	add.w	r2, r7, #10
 8000a8e:	2302      	movs	r3, #2
 8000a90:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8000a94:	f001 fb78 	bl	8002188 <wm8994_write_reg>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f103 0018 	add.w	r0, r3, #24
 8000aa6:	f107 020a 	add.w	r2, r7, #10
 8000aaa:	2302      	movs	r3, #2
 8000aac:	f240 6109 	movw	r1, #1545	@ 0x609
 8000ab0:	f001 fb6a 	bl	8002188 <wm8994_write_reg>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	4413      	add	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
    tmp = 0x000E;
 8000abc:	230e      	movs	r3, #14
 8000abe:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f103 0018 	add.w	r0, r3, #24
 8000ac6:	f107 020a 	add.w	r2, r7, #10
 8000aca:	2302      	movs	r3, #2
 8000acc:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000ad0:	f001 fb5a 	bl	8002188 <wm8994_write_reg>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4413      	add	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]
    break;
 8000adc:	e172      	b.n	8000dc4 <WM8994_Init+0x7c0>
    
  case WM8994_IN_LINE1 :
    /* IN1LN_TO_IN1L, IN1RN_TO_IN1R */
    tmp = 0x0011;
 8000ade:	2311      	movs	r3, #17
 8000ae0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f103 0018 	add.w	r0, r3, #24
 8000ae8:	f107 020a 	add.w	r2, r7, #10
 8000aec:	2302      	movs	r3, #2
 8000aee:	2128      	movs	r1, #40	@ 0x28
 8000af0:	f001 fb4a 	bl	8002188 <wm8994_write_reg>
 8000af4:	4602      	mov	r2, r0
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4413      	add	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
    tmp = 0x0035;
 8000afc:	2335      	movs	r3, #53	@ 0x35
 8000afe:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f103 0018 	add.w	r0, r3, #24
 8000b06:	f107 020a 	add.w	r2, r7, #10
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	2129      	movs	r1, #41	@ 0x29
 8000b0e:	f001 fb3b 	bl	8002188 <wm8994_write_reg>
 8000b12:	4602      	mov	r2, r0
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f103 0018 	add.w	r0, r3, #24
 8000b20:	f107 020a 	add.w	r2, r7, #10
 8000b24:	2302      	movs	r3, #2
 8000b26:	212a      	movs	r1, #42	@ 0x2a
 8000b28:	f001 fb2e 	bl	8002188 <wm8994_write_reg>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4413      	add	r3, r2
 8000b32:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0303;
 8000b34:	f240 3303 	movw	r3, #771	@ 0x303
 8000b38:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f103 0018 	add.w	r0, r3, #24
 8000b40:	f107 020a 	add.w	r2, r7, #10
 8000b44:	2302      	movs	r3, #2
 8000b46:	2104      	movs	r1, #4
 8000b48:	f001 fb1e 	bl	8002188 <wm8994_write_reg>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	4413      	add	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8000b54:	23db      	movs	r3, #219	@ 0xdb
 8000b56:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f103 0018 	add.w	r0, r3, #24
 8000b5e:	f107 020a 	add.w	r2, r7, #10
 8000b62:	2302      	movs	r3, #2
 8000b64:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8000b68:	f001 fb0e 	bl	8002188 <wm8994_write_reg>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	4413      	add	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8000b74:	f246 3350 	movw	r3, #25424	@ 0x6350
 8000b78:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f103 0018 	add.w	r0, r3, #24
 8000b80:	f107 020a 	add.w	r2, r7, #10
 8000b84:	2302      	movs	r3, #2
 8000b86:	2102      	movs	r1, #2
 8000b88:	f001 fafe 	bl	8002188 <wm8994_write_reg>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	4413      	add	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000b94:	2302      	movs	r3, #2
 8000b96:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f103 0018 	add.w	r0, r3, #24
 8000b9e:	f107 020a 	add.w	r2, r7, #10
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	f240 6106 	movw	r1, #1542	@ 0x606
 8000ba8:	f001 faee 	bl	8002188 <wm8994_write_reg>
 8000bac:	4602      	mov	r2, r0
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f103 0018 	add.w	r0, r3, #24
 8000bba:	f107 020a 	add.w	r2, r7, #10
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	f240 6107 	movw	r1, #1543	@ 0x607
 8000bc4:	f001 fae0 	bl	8002188 <wm8994_write_reg>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4413      	add	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;  /*MD was 800D*/
 8000bd0:	230d      	movs	r3, #13
 8000bd2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f103 0018 	add.w	r0, r3, #24
 8000bda:	f107 020a 	add.w	r2, r7, #10
 8000bde:	2302      	movs	r3, #2
 8000be0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000be4:	f001 fad0 	bl	8002188 <wm8994_write_reg>
 8000be8:	4602      	mov	r2, r0
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	4413      	add	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]
    break;
 8000bf0:	e0e8      	b.n	8000dc4 <WM8994_Init+0x7c0>
    
  case WM8994_IN_MIC1 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x030C;
 8000bf2:	f44f 7343 	mov.w	r3, #780	@ 0x30c
 8000bf6:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f103 0018 	add.w	r0, r3, #24
 8000bfe:	f107 020a 	add.w	r2, r7, #10
 8000c02:	2302      	movs	r3, #2
 8000c04:	2104      	movs	r1, #4
 8000c06:	f001 fabf 	bl	8002188 <wm8994_write_reg>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8000c12:	23db      	movs	r3, #219	@ 0xdb
 8000c14:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f103 0018 	add.w	r0, r3, #24
 8000c1c:	f107 020a 	add.w	r2, r7, #10
 8000c20:	2302      	movs	r3, #2
 8000c22:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8000c26:	f001 faaf 	bl	8002188 <wm8994_write_reg>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4413      	add	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8000c32:	f246 3350 	movw	r3, #25424	@ 0x6350
 8000c36:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f103 0018 	add.w	r0, r3, #24
 8000c3e:	f107 020a 	add.w	r2, r7, #10
 8000c42:	2302      	movs	r3, #2
 8000c44:	2102      	movs	r1, #2
 8000c46:	f001 fa9f 	bl	8002188 <wm8994_write_reg>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4413      	add	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000c52:	2302      	movs	r3, #2
 8000c54:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f103 0018 	add.w	r0, r3, #24
 8000c5c:	f107 020a 	add.w	r2, r7, #10
 8000c60:	2302      	movs	r3, #2
 8000c62:	f240 6106 	movw	r1, #1542	@ 0x606
 8000c66:	f001 fa8f 	bl	8002188 <wm8994_write_reg>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f103 0018 	add.w	r0, r3, #24
 8000c78:	f107 020a 	add.w	r2, r7, #10
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	f240 6107 	movw	r1, #1543	@ 0x607
 8000c82:	f001 fa81 	bl	8002188 <wm8994_write_reg>
 8000c86:	4602      	mov	r2, r0
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8000c8e:	230d      	movs	r3, #13
 8000c90:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f103 0018 	add.w	r0, r3, #24
 8000c98:	f107 020a 	add.w	r2, r7, #10
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000ca2:	f001 fa71 	bl	8002188 <wm8994_write_reg>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
    break;
 8000cae:	e089      	b.n	8000dc4 <WM8994_Init+0x7c0>
    
  case WM8994_IN_MIC1_MIC2 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0F3C;
 8000cb0:	f640 733c 	movw	r3, #3900	@ 0xf3c
 8000cb4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f103 0018 	add.w	r0, r3, #24
 8000cbc:	f107 020a 	add.w	r2, r7, #10
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	2104      	movs	r1, #4
 8000cc4:	f001 fa60 	bl	8002188 <wm8994_write_reg>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4413      	add	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 8000cd0:	23db      	movs	r3, #219	@ 0xdb
 8000cd2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f103 0018 	add.w	r0, r3, #24
 8000cda:	f107 020a 	add.w	r2, r7, #10
 8000cde:	2302      	movs	r3, #2
 8000ce0:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8000ce4:	f001 fa50 	bl	8002188 <wm8994_write_reg>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4413      	add	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f103 0018 	add.w	r0, r3, #24
 8000cf6:	f107 020a 	add.w	r2, r7, #10
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8000d00:	f001 fa42 	bl	8002188 <wm8994_write_reg>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4413      	add	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
    tmp = 0x63A0;
 8000d0c:	f246 33a0 	movw	r3, #25504	@ 0x63a0
 8000d10:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f103 0018 	add.w	r0, r3, #24
 8000d18:	f107 020a 	add.w	r2, r7, #10
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	2102      	movs	r1, #2
 8000d20:	f001 fa32 	bl	8002188 <wm8994_write_reg>
 8000d24:	4602      	mov	r2, r0
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4413      	add	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f103 0018 	add.w	r0, r3, #24
 8000d36:	f107 020a 	add.w	r2, r7, #10
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	f240 6106 	movw	r1, #1542	@ 0x606
 8000d40:	f001 fa22 	bl	8002188 <wm8994_write_reg>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4413      	add	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f103 0018 	add.w	r0, r3, #24
 8000d52:	f107 020a 	add.w	r2, r7, #10
 8000d56:	2302      	movs	r3, #2
 8000d58:	f240 6107 	movw	r1, #1543	@ 0x607
 8000d5c:	f001 fa14 	bl	8002188 <wm8994_write_reg>
 8000d60:	4602      	mov	r2, r0
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4413      	add	r3, r2
 8000d66:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f103 0018 	add.w	r0, r3, #24
 8000d6e:	f107 020a 	add.w	r2, r7, #10
 8000d72:	2302      	movs	r3, #2
 8000d74:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8000d78:	f001 fa06 	bl	8002188 <wm8994_write_reg>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4413      	add	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f103 0018 	add.w	r0, r3, #24
 8000d8a:	f107 020a 	add.w	r2, r7, #10
 8000d8e:	2302      	movs	r3, #2
 8000d90:	f240 6109 	movw	r1, #1545	@ 0x609
 8000d94:	f001 f9f8 	bl	8002188 <wm8994_write_reg>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8000da0:	230d      	movs	r3, #13
 8000da2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f103 0018 	add.w	r0, r3, #24
 8000daa:	f107 020a 	add.w	r2, r7, #10
 8000dae:	2302      	movs	r3, #2
 8000db0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000db4:	f001 f9e8 	bl	8002188 <wm8994_write_reg>
 8000db8:	4602      	mov	r2, r0
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
    
    break;    
 8000dc0:	e000      	b.n	8000dc4 <WM8994_Init+0x7c0>
  case WM8994_IN_LINE2 :
  case WM8994_IN_NONE:      
  default:
    /* Actually, no other input devices supported */
    break;
 8000dc2:	bf00      	nop
  }
  
  /*  Clock Configurations */
  ret += WM8994_SetFrequency(pObj, pInit->Frequency);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 fff2 	bl	8001db4 <WM8994_SetFrequency>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
  
  if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b05      	cmp	r3, #5
 8000dde:	d11a      	bne.n	8000e16 <WM8994_Init+0x812>
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
    ret += WM8994_SetResolution(pObj, WM8994_RESOLUTION_16b);
 8000de0:	2100      	movs	r1, #0
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f000 ff52 	bl	8001c8c <WM8994_SetResolution>
 8000de8:	4602      	mov	r2, r0
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	4413      	add	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_DSP);
 8000df0:	2103      	movs	r1, #3
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 ffa4 	bl	8001d40 <WM8994_SetProtocol>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3318      	adds	r3, #24
 8000e04:	2101      	movs	r1, #1
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 faec 	bl	80023e4 <wm8994_aif1_control1_adcr_src>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4413      	add	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	e01b      	b.n	8000e4e <WM8994_Init+0x84a>
  }
  else
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
    ret += WM8994_SetResolution(pObj, pInit->Resolution);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f000 ff35 	bl	8001c8c <WM8994_SetResolution>
 8000e22:	4602      	mov	r2, r0
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4413      	add	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_I2S);
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 ff87 	bl	8001d40 <WM8994_SetProtocol>
 8000e32:	4602      	mov	r2, r0
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3318      	adds	r3, #24
 8000e3e:	2101      	movs	r1, #1
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 facf 	bl	80023e4 <wm8994_aif1_control1_adcr_src>
 8000e46:	4602      	mov	r2, r0
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  }
  
  /* slave mode */
  tmp = 0x0000;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f103 0018 	add.w	r0, r3, #24
 8000e58:	f107 020a 	add.w	r2, r7, #10
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	f240 3102 	movw	r1, #770	@ 0x302
 8000e62:	f001 f991 	bl	8002188 <wm8994_write_reg>
 8000e66:	4602      	mov	r2, r0
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  tmp = 0x000A;
 8000e6e:	230a      	movs	r3, #10
 8000e70:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f103 0018 	add.w	r0, r3, #24
 8000e78:	f107 020a 	add.w	r2, r7, #10
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8000e82:	f001 f981 	bl	8002188 <wm8994_write_reg>
 8000e86:	4602      	mov	r2, r0
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  tmp = 0x0001;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f103 0018 	add.w	r0, r3, #24
 8000e98:	f107 020a 	add.w	r2, r7, #10
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ea2:	f001 f971 	bl	8002188 <wm8994_write_reg>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4413      	add	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]
  
  if (pInit->OutputDevice != WM8994_OUT_NONE)  /* Audio output selected */  
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 81c2 	beq.w	800123c <WM8994_Init+0xc38>
  {  
    if ((pInit->OutputDevice == WM8994_OUT_HEADPHONE) && (pInit->InputDevice == WM8994_IN_NONE))
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d164      	bne.n	8000f8a <WM8994_Init+0x986>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d160      	bne.n	8000f8a <WM8994_Init+0x986>
    {    
      tmp = 0x0100;
 8000ec8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ecc:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f103 0018 	add.w	r0, r3, #24
 8000ed4:	f107 020a 	add.w	r2, r7, #10
 8000ed8:	2302      	movs	r3, #2
 8000eda:	212d      	movs	r1, #45	@ 0x2d
 8000edc:	f001 f954 	bl	8002188 <wm8994_write_reg>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f103 0018 	add.w	r0, r3, #24
 8000eee:	f107 020a 	add.w	r2, r7, #10
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	212e      	movs	r1, #46	@ 0x2e
 8000ef6:	f001 f947 	bl	8002188 <wm8994_write_reg>
 8000efa:	4602      	mov	r2, r0
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
      
      /* Startup sequence for Headphone */
      if(ColdStartup == 1U)
 8000f02:	4b52      	ldr	r3, [pc, #328]	@ (800104c <WM8994_Init+0xa48>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d119      	bne.n	8000f3e <WM8994_Init+0x93a>
      {
        /* Enable/Start the write sequencer */
        tmp = 0x8100;
 8000f0a:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000f0e:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f103 0018 	add.w	r0, r3, #24
 8000f16:	f107 020a 	add.w	r2, r7, #10
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000f20:	f001 f932 	bl	8002188 <wm8994_write_reg>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4413      	add	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]
        
        ColdStartup=0;
 8000f2c:	4b47      	ldr	r3, [pc, #284]	@ (800104c <WM8994_Init+0xa48>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        (void)WM8994_Delay(pObj, 325);
 8000f32:	f240 1145 	movw	r1, #325	@ 0x145
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f001 f8ae 	bl	8002098 <WM8994_Delay>
 8000f3c:	e014      	b.n	8000f68 <WM8994_Init+0x964>
      }
      else 
      { 
        /* Headphone Warm Start-Up */
        tmp = 0x8108;
 8000f3e:	f248 1308 	movw	r3, #33032	@ 0x8108
 8000f42:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f103 0018 	add.w	r0, r3, #24
 8000f4a:	f107 020a 	add.w	r2, r7, #10
 8000f4e:	2302      	movs	r3, #2
 8000f50:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000f54:	f001 f918 	bl	8002188 <wm8994_write_reg>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
        
        /* Add Delay */
        (void)WM8994_Delay(pObj, 50);
 8000f60:	2132      	movs	r1, #50	@ 0x32
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f001 f898 	bl	8002098 <WM8994_Delay>
      }
      
      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      tmp = 0x0000;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f103 0018 	add.w	r0, r3, #24
 8000f72:	f107 020a 	add.w	r2, r7, #10
 8000f76:	2302      	movs	r3, #2
 8000f78:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000f7c:	f001 f904 	bl	8002188 <wm8994_write_reg>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4413      	add	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	e0f3      	b.n	8001172 <WM8994_Init+0xb6e>
    else
    {
      /* Analog Output Configuration */
      
      /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
      tmp = 0x0300;
 8000f8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f8e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f103 0018 	add.w	r0, r3, #24
 8000f96:	f107 020a 	add.w	r2, r7, #10
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	2103      	movs	r1, #3
 8000f9e:	f001 f8f3 	bl	8002188 <wm8994_write_reg>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
      
      /* Left Speaker Mixer Volume = 0dB */
      tmp = 0x0000;
 8000faa:	2300      	movs	r3, #0
 8000fac:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f103 0018 	add.w	r0, r3, #24
 8000fb4:	f107 020a 	add.w	r2, r7, #10
 8000fb8:	2302      	movs	r3, #2
 8000fba:	2122      	movs	r1, #34	@ 0x22
 8000fbc:	f001 f8e4 	bl	8002188 <wm8994_write_reg>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
      
      /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f103 0018 	add.w	r0, r3, #24
 8000fce:	f107 020a 	add.w	r2, r7, #10
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	2123      	movs	r1, #35	@ 0x23
 8000fd6:	f001 f8d7 	bl	8002188 <wm8994_write_reg>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
      
      /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
      Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
      tmp = 0x0300;
 8000fe2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fe6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f103 0018 	add.w	r0, r3, #24
 8000fee:	f107 020a 	add.w	r2, r7, #10
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	2136      	movs	r1, #54	@ 0x36
 8000ff6:	f001 f8c7 	bl	8002188 <wm8994_write_reg>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
      
      /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
      tmp = 0x3003;
 8001002:	f243 0303 	movw	r3, #12291	@ 0x3003
 8001006:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f103 0018 	add.w	r0, r3, #24
 800100e:	f107 020a 	add.w	r2, r7, #10
 8001012:	2302      	movs	r3, #2
 8001014:	2101      	movs	r1, #1
 8001016:	f001 f8b7 	bl	8002188 <wm8994_write_reg>
 800101a:	4602      	mov	r2, r0
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
      /* Headphone/Speaker Enable */
      
      if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b05      	cmp	r3, #5
 8001028:	d112      	bne.n	8001050 <WM8994_Init+0xa4c>
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
        tmp = 0x0205;
 800102a:	f240 2305 	movw	r3, #517	@ 0x205
 800102e:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2); 
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f103 0018 	add.w	r0, r3, #24
 8001036:	f107 020a 	add.w	r2, r7, #10
 800103a:	2302      	movs	r3, #2
 800103c:	2151      	movs	r1, #81	@ 0x51
 800103e:	f001 f8a3 	bl	8002188 <wm8994_write_reg>
 8001042:	4602      	mov	r2, r0
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	e010      	b.n	800106e <WM8994_Init+0xa6a>
 800104c:	24000448 	.word	0x24000448
      }
      else
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
        tmp = 0x0005;
 8001050:	2305      	movs	r3, #5
 8001052:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f103 0018 	add.w	r0, r3, #24
 800105a:	f107 020a 	add.w	r2, r7, #10
 800105e:	2302      	movs	r3, #2
 8001060:	2151      	movs	r1, #81	@ 0x51
 8001062:	f001 f891 	bl	8002188 <wm8994_write_reg>
 8001066:	4602      	mov	r2, r0
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
      }
      
      /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
      /* idem for Speaker */
      tmp = 0x3303;
 800106e:	f243 3303 	movw	r3, #13059	@ 0x3303
 8001072:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f103 0018 	add.w	r0, r3, #24
 800107a:	f107 020a 	add.w	r2, r7, #10
 800107e:	2302      	movs	r3, #2
 8001080:	2101      	movs	r1, #1
 8001082:	f001 f881 	bl	8002188 <wm8994_write_reg>
 8001086:	4602      	mov	r2, r0
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
      tmp = 0x0022;
 800108e:	2322      	movs	r3, #34	@ 0x22
 8001090:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f103 0018 	add.w	r0, r3, #24
 8001098:	f107 020a 	add.w	r2, r7, #10
 800109c:	2302      	movs	r3, #2
 800109e:	2160      	movs	r1, #96	@ 0x60
 80010a0:	f001 f872 	bl	8002188 <wm8994_write_reg>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4413      	add	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]
      
      /* Enable Charge Pump */
      tmp = 0x9F25;
 80010ac:	f649 7325 	movw	r3, #40741	@ 0x9f25
 80010b0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f103 0018 	add.w	r0, r3, #24
 80010b8:	f107 020a 	add.w	r2, r7, #10
 80010bc:	2302      	movs	r3, #2
 80010be:	214c      	movs	r1, #76	@ 0x4c
 80010c0:	f001 f862 	bl	8002188 <wm8994_write_reg>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4413      	add	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 15);
 80010cc:	210f      	movs	r1, #15
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 ffe2 	bl	8002098 <WM8994_Delay>
      
      tmp = 0x0001;
 80010d4:	2301      	movs	r3, #1
 80010d6:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f103 0018 	add.w	r0, r3, #24
 80010de:	f107 020a 	add.w	r2, r7, #10
 80010e2:	2302      	movs	r3, #2
 80010e4:	212d      	movs	r1, #45	@ 0x2d
 80010e6:	f001 f84f 	bl	8002188 <wm8994_write_reg>
 80010ea:	4602      	mov	r2, r0
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f103 0018 	add.w	r0, r3, #24
 80010f8:	f107 020a 	add.w	r2, r7, #10
 80010fc:	2302      	movs	r3, #2
 80010fe:	212e      	movs	r1, #46	@ 0x2e
 8001100:	f001 f842 	bl	8002188 <wm8994_write_reg>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]
      
      /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
      /* idem for SPKOUTL and SPKOUTR */
      tmp = 0x0330;
 800110c:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8001110:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f103 0018 	add.w	r0, r3, #24
 8001118:	f107 020a 	add.w	r2, r7, #10
 800111c:	2302      	movs	r3, #2
 800111e:	2103      	movs	r1, #3
 8001120:	f001 f832 	bl	8002188 <wm8994_write_reg>
 8001124:	4602      	mov	r2, r0
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4413      	add	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]
      
      /* Enable DC Servo and trigger start-up mode on left and right channels */
      tmp = 0x0033;
 800112c:	2333      	movs	r3, #51	@ 0x33
 800112e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f103 0018 	add.w	r0, r3, #24
 8001136:	f107 020a 	add.w	r2, r7, #10
 800113a:	2302      	movs	r3, #2
 800113c:	2154      	movs	r1, #84	@ 0x54
 800113e:	f001 f823 	bl	8002188 <wm8994_write_reg>
 8001142:	4602      	mov	r2, r0
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 257);
 800114a:	f240 1101 	movw	r1, #257	@ 0x101
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 ffa2 	bl	8002098 <WM8994_Delay>
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
      tmp = 0x00EE;
 8001154:	23ee      	movs	r3, #238	@ 0xee
 8001156:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f103 0018 	add.w	r0, r3, #24
 800115e:	f107 020a 	add.w	r2, r7, #10
 8001162:	2302      	movs	r3, #2
 8001164:	2160      	movs	r1, #96	@ 0x60
 8001166:	f001 f80f 	bl	8002188 <wm8994_write_reg>
 800116a:	4602      	mov	r2, r0
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
    }
    
    /* Unmutes */
    
    /* Unmute DAC 1 (Left) */
    tmp = 0x00C0;
 8001172:	23c0      	movs	r3, #192	@ 0xc0
 8001174:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_LEFT_VOL, &tmp, 2);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f103 0018 	add.w	r0, r3, #24
 800117c:	f107 020a 	add.w	r2, r7, #10
 8001180:	2302      	movs	r3, #2
 8001182:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8001186:	f000 ffff 	bl	8002188 <wm8994_write_reg>
 800118a:	4602      	mov	r2, r0
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 1 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_RIGHT_VOL, &tmp, 2);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f103 0018 	add.w	r0, r3, #24
 8001198:	f107 020a 	add.w	r2, r7, #10
 800119c:	2302      	movs	r3, #2
 800119e:	f240 6111 	movw	r1, #1553	@ 0x611
 80011a2:	f000 fff1 	bl	8002188 <wm8994_write_reg>
 80011a6:	4602      	mov	r2, r0
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 0 DAC path */
    tmp = 0x0010;
 80011ae:	2310      	movs	r3, #16
 80011b0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f103 0018 	add.w	r0, r3, #24
 80011b8:	f107 020a 	add.w	r2, r7, #10
 80011bc:	2302      	movs	r3, #2
 80011be:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80011c2:	f000 ffe1 	bl	8002188 <wm8994_write_reg>
 80011c6:	4602      	mov	r2, r0
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Left) */
    tmp = 0x00C0;
 80011ce:	23c0      	movs	r3, #192	@ 0xc0
 80011d0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_LEFT_VOL, &tmp, 2);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f103 0018 	add.w	r0, r3, #24
 80011d8:	f107 020a 	add.w	r2, r7, #10
 80011dc:	2302      	movs	r3, #2
 80011de:	f240 6112 	movw	r1, #1554	@ 0x612
 80011e2:	f000 ffd1 	bl	8002188 <wm8994_write_reg>
 80011e6:	4602      	mov	r2, r0
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_RIGHT_VOL, &tmp, 2);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f103 0018 	add.w	r0, r3, #24
 80011f4:	f107 020a 	add.w	r2, r7, #10
 80011f8:	2302      	movs	r3, #2
 80011fa:	f240 6113 	movw	r1, #1555	@ 0x613
 80011fe:	f000 ffc3 	bl	8002188 <wm8994_write_reg>
 8001202:	4602      	mov	r2, r0
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    tmp = 0x0010;
 800120a:	2310      	movs	r3, #16
 800120c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f103 0018 	add.w	r0, r3, #24
 8001214:	f107 020a 	add.w	r2, r7, #10
 8001218:	2302      	movs	r3, #2
 800121a:	f240 4122 	movw	r1, #1058	@ 0x422
 800121e:	f000 ffb3 	bl	8002188 <wm8994_write_reg>
 8001222:	4602      	mov	r2, r0
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
    
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_OUTPUT, (uint8_t) OUTPUT_LEVEL);
 800122a:	223f      	movs	r2, #63	@ 0x3f
 800122c:	2101      	movs	r1, #1
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f99c 	bl	800156c <WM8994_SetVolume>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
  }
  
  if (pInit->InputDevice != WM8994_IN_NONE) /* Audio input selected */
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 80b2 	beq.w	80013aa <WM8994_Init+0xda6>
  {
    if ((pInit->InputDevice == WM8994_IN_MIC1) || (pInit->InputDevice == WM8994_IN_MIC2))
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d003      	beq.n	8001256 <WM8994_Init+0xc52>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d130      	bne.n	80012b8 <WM8994_Init+0xcb4>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8001256:	2313      	movs	r3, #19
 8001258:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f103 0018 	add.w	r0, r3, #24
 8001260:	f107 020a 	add.w	r2, r7, #10
 8001264:	2302      	movs	r3, #2
 8001266:	2101      	movs	r1, #1
 8001268:	f000 ff8e 	bl	8002188 <wm8994_write_reg>
 800126c:	4602      	mov	r2, r0
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4413      	add	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8001274:	2302      	movs	r3, #2
 8001276:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f103 0018 	add.w	r0, r3, #24
 800127e:	f107 020a 	add.w	r2, r7, #10
 8001282:	2302      	movs	r3, #2
 8001284:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8001288:	f000 ff7e 	bl	8002188 <wm8994_write_reg>
 800128c:	4602      	mov	r2, r0
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4413      	add	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x3800;
 8001294:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001298:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f103 0018 	add.w	r0, r3, #24
 80012a0:	f107 020a 	add.w	r2, r7, #10
 80012a4:	2302      	movs	r3, #2
 80012a6:	f240 4111 	movw	r1, #1041	@ 0x411
 80012aa:	f000 ff6d 	bl	8002188 <wm8994_write_reg>
 80012ae:	4602      	mov	r2, r0
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	e06f      	b.n	8001398 <WM8994_Init+0xd94>
    }
    else if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b05      	cmp	r3, #5
 80012be:	d13e      	bne.n	800133e <WM8994_Init+0xd3a>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 80012c0:	2313      	movs	r3, #19
 80012c2:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f103 0018 	add.w	r0, r3, #24
 80012ca:	f107 020a 	add.w	r2, r7, #10
 80012ce:	2302      	movs	r3, #2
 80012d0:	2101      	movs	r1, #1
 80012d2:	f000 ff59 	bl	8002188 <wm8994_write_reg>
 80012d6:	4602      	mov	r2, r0
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 80012de:	2302      	movs	r3, #2
 80012e0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f103 0018 	add.w	r0, r3, #24
 80012e8:	f107 020a 	add.w	r2, r7, #10
 80012ec:	2302      	movs	r3, #2
 80012ee:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80012f2:	f000 ff49 	bl	8002188 <wm8994_write_reg>
 80012f6:	4602      	mov	r2, r0
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 80012fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001302:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f103 0018 	add.w	r0, r3, #24
 800130a:	f107 020a 	add.w	r2, r7, #10
 800130e:	2302      	movs	r3, #2
 8001310:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001314:	f000 ff38 	bl	8002188 <wm8994_write_reg>
 8001318:	4602      	mov	r2, r0
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f103 0018 	add.w	r0, r3, #24
 8001326:	f107 020a 	add.w	r2, r7, #10
 800132a:	2302      	movs	r3, #2
 800132c:	f240 4111 	movw	r1, #1041	@ 0x411
 8001330:	f000 ff2a 	bl	8002188 <wm8994_write_reg>
 8001334:	4602      	mov	r2, r0
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4413      	add	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	e02c      	b.n	8001398 <WM8994_Init+0xd94>
    }    
    else /* ((pInit->InputDevice == WM8994_IN_LINE1) || (pInit->InputDevice == WM8994_IN_LINE2)) */
    {      
      /* Disable mute on IN1L, IN1L Volume = +0dB */
      tmp = 0x000B;
 800133e:	230b      	movs	r3, #11
 8001340:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f103 0018 	add.w	r0, r3, #24
 8001348:	f107 020a 	add.w	r2, r7, #10
 800134c:	2302      	movs	r3, #2
 800134e:	2118      	movs	r1, #24
 8001350:	f000 ff1a 	bl	8002188 <wm8994_write_reg>
 8001354:	4602      	mov	r2, r0
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4413      	add	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]
      
      /* Disable mute on IN1R, IN1R Volume = +0dB */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f103 0018 	add.w	r0, r3, #24
 8001362:	f107 020a 	add.w	r2, r7, #10
 8001366:	2302      	movs	r3, #2
 8001368:	211a      	movs	r1, #26
 800136a:	f000 ff0d 	bl	8002188 <wm8994_write_reg>
 800136e:	4602      	mov	r2, r0
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 8001376:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800137a:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f103 0018 	add.w	r0, r3, #24
 8001382:	f107 020a 	add.w	r2, r7, #10
 8001386:	2302      	movs	r3, #2
 8001388:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800138c:	f000 fefc 	bl	8002188 <wm8994_write_reg>
 8001390:	4602      	mov	r2, r0
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]
    }
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_INPUT, (uint8_t) INPUT_LEVEL);
 8001398:	228a      	movs	r2, #138	@ 0x8a
 800139a:	2100      	movs	r1, #0
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f8e5 	bl	800156c <WM8994_SetVolume>
 80013a2:	4602      	mov	r2, r0
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <WM8994_Init+0xdb2>
  {
    ret = WM8994_ERROR;
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
 80013b4:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <WM8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_DeInit(WM8994_Object_t *pObj)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* De-Initialize Audio Codec interface */
  return WM8994_Stop(pObj, WM8994_PDWN_HW);
 80013c8:	2100      	movs	r1, #0
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f861 	bl	8001492 <WM8994_Stop>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <WM8994_ReadID>:
  * @param  pObj pointer to component object
  * @param  Id component ID
  * @retval Component status 
  */
int32_t WM8994_ReadID(WM8994_Object_t *pObj, uint32_t *Id)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b084      	sub	sp, #16
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t wm8994_id;
  
  /* Initialize the Control interface of the Audio Codec */
  pObj->IO.Init();
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4798      	blx	r3
  /* Get ID from component */
  ret = wm8994_sw_reset_r(&pObj->Ctx, &wm8994_id);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3318      	adds	r3, #24
 80013ee:	f107 020a 	add.w	r2, r7, #10
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 ff00 	bl	80021fa <wm8994_sw_reset_r>
 80013fa:	60f8      	str	r0, [r7, #12]
  
  *Id = wm8994_id;
 80013fc:	897b      	ldrh	r3, [r7, #10]
 80013fe:	461a      	mov	r2, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	601a      	str	r2, [r3, #0]
  
  return ret;
 8001404:	68fb      	ldr	r3, [r7, #12]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <WM8994_Play>:
  * @note For this codec no Play options are required.
  * @param  pObj pointer to component object  
  * @retval Component status
  */
int32_t WM8994_Play(WM8994_Object_t *pObj)
{ 
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8001416:	2100      	movs	r1, #0
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f9d3 	bl	80017c4 <WM8994_SetMute>
 800141e:	4603      	mov	r3, r0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <WM8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_Pause(WM8994_Object_t *pObj)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint16_t tmp = 0x0001;
 8001430:	2301      	movs	r3, #1
 8001432:	817b      	strh	r3, [r7, #10]
  
  /* Pause the audio file playing */
  /* Mute the output first */
  if(WM8994_SetMute(pObj, WM8994_MUTE_ON) != WM8994_OK)
 8001434:	2101      	movs	r1, #1
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f9c4 	bl	80017c4 <WM8994_SetMute>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <WM8994_Pause+0x22>
  {
    ret  = WM8994_ERROR;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	e011      	b.n	800146e <WM8994_Pause+0x46>
  }/* Put the Codec in Power save mode */
  else if(wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2) != WM8994_OK)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f103 0018 	add.w	r0, r3, #24
 8001450:	f107 020a 	add.w	r2, r7, #10
 8001454:	2302      	movs	r3, #2
 8001456:	2102      	movs	r1, #2
 8001458:	f000 fe96 	bl	8002188 <wm8994_write_reg>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <WM8994_Pause+0x42>
  {
    ret  = WM8994_ERROR;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	e001      	b.n	800146e <WM8994_Pause+0x46>
  }
  else
  {
    ret = WM8994_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <WM8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param  pObj pointer to component object 
  * @retval Component status
  */
int32_t WM8994_Resume(WM8994_Object_t *pObj)
{  
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8001480:	2100      	movs	r1, #0
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 f99e 	bl	80017c4 <WM8994_SetMute>
 8001488:	4603      	mov	r3, r0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <WM8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Stop(WM8994_Object_t *pObj, uint32_t CodecPdwnMode)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Mute the output first */
  ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 800149c:	2101      	movs	r1, #1
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f990 	bl	80017c4 <WM8994_SetMute>
 80014a4:	60f8      	str	r0, [r7, #12]
  
  if (CodecPdwnMode == WM8994_PDWN_SW)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d054      	beq.n	8001556 <WM8994_Stop+0xc4>
  {
    /* Only output mute required*/
  }
  else /* WM8994_PDWN_HW */
  {
    tmp = 0x0200;
 80014ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014b0:	817b      	strh	r3, [r7, #10]
    /* Mute the AIF1 Timeslot 0 DAC1 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f103 0018 	add.w	r0, r3, #24
 80014b8:	f107 020a 	add.w	r2, r7, #10
 80014bc:	2302      	movs	r3, #2
 80014be:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80014c2:	f000 fe61 	bl	8002188 <wm8994_write_reg>
 80014c6:	4602      	mov	r2, r0
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
    
    /* Mute the AIF1 Timeslot 1 DAC2 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f103 0018 	add.w	r0, r3, #24
 80014d4:	f107 020a 	add.w	r2, r7, #10
 80014d8:	2302      	movs	r3, #2
 80014da:	f240 4122 	movw	r1, #1058	@ 0x422
 80014de:	f000 fe53 	bl	8002188 <wm8994_write_reg>
 80014e2:	4602      	mov	r2, r0
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4413      	add	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
    
    tmp = 0x0000;
 80014ea:	2300      	movs	r3, #0
 80014ec:	817b      	strh	r3, [r7, #10]
    /* Disable DAC1L_TO_HPOUT1L */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f103 0018 	add.w	r0, r3, #24
 80014f4:	f107 020a 	add.w	r2, r7, #10
 80014f8:	2302      	movs	r3, #2
 80014fa:	212d      	movs	r1, #45	@ 0x2d
 80014fc:	f000 fe44 	bl	8002188 <wm8994_write_reg>
 8001500:	4602      	mov	r2, r0
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4413      	add	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1R_TO_HPOUT1R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f103 0018 	add.w	r0, r3, #24
 800150e:	f107 020a 	add.w	r2, r7, #10
 8001512:	2302      	movs	r3, #2
 8001514:	212e      	movs	r1, #46	@ 0x2e
 8001516:	f000 fe37 	bl	8002188 <wm8994_write_reg>
 800151a:	4602      	mov	r2, r0
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1 and DAC2 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f103 0018 	add.w	r0, r3, #24
 8001528:	f107 020a 	add.w	r2, r7, #10
 800152c:	2302      	movs	r3, #2
 800152e:	2105      	movs	r1, #5
 8001530:	f000 fe2a 	bl	8002188 <wm8994_write_reg>
 8001534:	4602      	mov	r2, r0
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4413      	add	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]
    
    /* Reset Codec by writing in 0x0000 address register */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SW_RESET, &tmp, 2);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f103 0018 	add.w	r0, r3, #24
 8001542:	f107 020a 	add.w	r2, r7, #10
 8001546:	2302      	movs	r3, #2
 8001548:	2100      	movs	r1, #0
 800154a:	f000 fe1d 	bl	8002188 <wm8994_write_reg>
 800154e:	4602      	mov	r2, r0
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <WM8994_Stop+0xd0>
  {
    ret = WM8994_ERROR;
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <WM8994_SetVolume>:
  * @param  Volume  a byte value from 0 to 63 for output and from 0 to 240 for input
  *         (refer to codec registers description for more details).
  * @retval Component status
  */
int32_t WM8994_SetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t Volume)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	4613      	mov	r3, r2
 8001578:	71fb      	strb	r3, [r7, #7]
  int32_t ret;  
  uint16_t tmp;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	2b01      	cmp	r3, #1
 800157e:	f040 8089 	bne.w	8001694 <WM8994_SetVolume+0x128>
  {    
    if(Volume > 0x3EU)
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b3e      	cmp	r3, #62	@ 0x3e
 8001586:	d93c      	bls.n	8001602 <WM8994_SetVolume+0x96>
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8001588:	2100      	movs	r1, #0
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f000 f91a 	bl	80017c4 <WM8994_SetMute>
 8001590:	6178      	str	r0, [r7, #20]
      tmp = 0x3FU | 0x140U;
 8001592:	f240 137f 	movw	r3, #383	@ 0x17f
 8001596:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f103 0018 	add.w	r0, r3, #24
 800159e:	f107 0212 	add.w	r2, r7, #18
 80015a2:	2302      	movs	r3, #2
 80015a4:	211c      	movs	r1, #28
 80015a6:	f000 fdef 	bl	8002188 <wm8994_write_reg>
 80015aa:	4602      	mov	r2, r0
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	4413      	add	r3, r2
 80015b0:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f103 0018 	add.w	r0, r3, #24
 80015b8:	f107 0212 	add.w	r2, r7, #18
 80015bc:	2302      	movs	r3, #2
 80015be:	211d      	movs	r1, #29
 80015c0:	f000 fde2 	bl	8002188 <wm8994_write_reg>
 80015c4:	4602      	mov	r2, r0
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	4413      	add	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f103 0018 	add.w	r0, r3, #24
 80015d2:	f107 0212 	add.w	r2, r7, #18
 80015d6:	2302      	movs	r3, #2
 80015d8:	2126      	movs	r1, #38	@ 0x26
 80015da:	f000 fdd5 	bl	8002188 <wm8994_write_reg>
 80015de:	4602      	mov	r2, r0
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	4413      	add	r3, r2
 80015e4:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f103 0018 	add.w	r0, r3, #24
 80015ec:	f107 0212 	add.w	r2, r7, #18
 80015f0:	2302      	movs	r3, #2
 80015f2:	2127      	movs	r1, #39	@ 0x27
 80015f4:	f000 fdc8 	bl	8002188 <wm8994_write_reg>
 80015f8:	4602      	mov	r2, r0
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	4413      	add	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	e083      	b.n	800170a <WM8994_SetVolume+0x19e>
    }
    else if (Volume == 0U)
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d105      	bne.n	8001614 <WM8994_SetVolume+0xa8>
    {
      /* Mute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 8001608:	2101      	movs	r1, #1
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 f8da 	bl	80017c4 <WM8994_SetMute>
 8001610:	6178      	str	r0, [r7, #20]
 8001612:	e07a      	b.n	800170a <WM8994_SetVolume+0x19e>
    }
    else
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8001614:	2100      	movs	r1, #0
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f000 f8d4 	bl	80017c4 <WM8994_SetMute>
 800161c:	6178      	str	r0, [r7, #20]
      
      tmp = Volume | 0x140U;
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	b29b      	uxth	r3, r3
 8001622:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8001626:	b29b      	uxth	r3, r3
 8001628:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f103 0018 	add.w	r0, r3, #24
 8001630:	f107 0212 	add.w	r2, r7, #18
 8001634:	2302      	movs	r3, #2
 8001636:	211c      	movs	r1, #28
 8001638:	f000 fda6 	bl	8002188 <wm8994_write_reg>
 800163c:	4602      	mov	r2, r0
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	4413      	add	r3, r2
 8001642:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f103 0018 	add.w	r0, r3, #24
 800164a:	f107 0212 	add.w	r2, r7, #18
 800164e:	2302      	movs	r3, #2
 8001650:	211d      	movs	r1, #29
 8001652:	f000 fd99 	bl	8002188 <wm8994_write_reg>
 8001656:	4602      	mov	r2, r0
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	4413      	add	r3, r2
 800165c:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f103 0018 	add.w	r0, r3, #24
 8001664:	f107 0212 	add.w	r2, r7, #18
 8001668:	2302      	movs	r3, #2
 800166a:	2126      	movs	r1, #38	@ 0x26
 800166c:	f000 fd8c 	bl	8002188 <wm8994_write_reg>
 8001670:	4602      	mov	r2, r0
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	4413      	add	r3, r2
 8001676:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);      
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f103 0018 	add.w	r0, r3, #24
 800167e:	f107 0212 	add.w	r2, r7, #18
 8001682:	2302      	movs	r3, #2
 8001684:	2127      	movs	r1, #39	@ 0x27
 8001686:	f000 fd7f 	bl	8002188 <wm8994_write_reg>
 800168a:	4602      	mov	r2, r0
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	4413      	add	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	e03a      	b.n	800170a <WM8994_SetVolume+0x19e>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    tmp = Volume | 0x100U;
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	b29b      	uxth	r3, r3
 8001698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800169c:	b29b      	uxth	r3, r3
 800169e:	827b      	strh	r3, [r7, #18]
    
    /* Left AIF1 ADC1 volume */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f103 0018 	add.w	r0, r3, #24
 80016a6:	f107 0212 	add.w	r2, r7, #18
 80016aa:	2302      	movs	r3, #2
 80016ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016b0:	f000 fd6a 	bl	8002188 <wm8994_write_reg>
 80016b4:	6178      	str	r0, [r7, #20]
    
    /* Right AIF1 ADC1 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f103 0018 	add.w	r0, r3, #24
 80016bc:	f107 0212 	add.w	r2, r7, #18
 80016c0:	2302      	movs	r3, #2
 80016c2:	f240 4101 	movw	r1, #1025	@ 0x401
 80016c6:	f000 fd5f 	bl	8002188 <wm8994_write_reg>
 80016ca:	4602      	mov	r2, r0
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4413      	add	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]
    
    /* Left AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f103 0018 	add.w	r0, r3, #24
 80016d8:	f107 0212 	add.w	r2, r7, #18
 80016dc:	2302      	movs	r3, #2
 80016de:	f240 4104 	movw	r1, #1028	@ 0x404
 80016e2:	f000 fd51 	bl	8002188 <wm8994_write_reg>
 80016e6:	4602      	mov	r2, r0
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	4413      	add	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]
    
    /* Right AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f103 0018 	add.w	r0, r3, #24
 80016f4:	f107 0212 	add.w	r2, r7, #18
 80016f8:	2302      	movs	r3, #2
 80016fa:	f240 4105 	movw	r1, #1029	@ 0x405
 80016fe:	f000 fd43 	bl	8002188 <wm8994_write_reg>
 8001702:	4602      	mov	r2, r0
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	4413      	add	r3, r2
 8001708:	617b      	str	r3, [r7, #20]
  }
  
  if(ret != WM8994_OK)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <WM8994_SetVolume+0x1aa>
  {
    ret = WM8994_ERROR;
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8001716:	697b      	ldr	r3, [r7, #20]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <WM8994_GetVolume>:
  * @param  InputOutput Input or Output volume
  * @param  Volume audio volume 
  * @retval Component status
  */
int32_t WM8994_GetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t *Volume)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  int32_t ret = WM8994_OK;  
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  uint16_t invertedvol;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d11e      	bne.n	8001774 <WM8994_GetVolume+0x54>
  {
    if(wm8994_lo_hpout1l_vol_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	3318      	adds	r3, #24
 800173a:	f107 0212 	add.w	r2, r7, #18
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fd6a 	bl	800221a <wm8994_lo_hpout1l_vol_r>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <WM8994_GetVolume+0x34>
    {
      ret = WM8994_ERROR;
 800174c:	f04f 33ff 	mov.w	r3, #4294967295
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	e02d      	b.n	80017b0 <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_OUT_INVERT(invertedvol);
 8001754:	8a7b      	ldrh	r3, [r7, #18]
 8001756:	461a      	mov	r2, r3
 8001758:	2364      	movs	r3, #100	@ 0x64
 800175a:	fb02 f303 	mul.w	r3, r2, r3
 800175e:	4a17      	ldr	r2, [pc, #92]	@ (80017bc <WM8994_GetVolume+0x9c>)
 8001760:	fb82 1203 	smull	r1, r2, r2, r3
 8001764:	441a      	add	r2, r3
 8001766:	1152      	asrs	r2, r2, #5
 8001768:	17db      	asrs	r3, r3, #31
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	b2da      	uxtb	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	e01d      	b.n	80017b0 <WM8994_GetVolume+0x90>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    if(wm8994_aif1_adc1_left_vol_adc1l_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3318      	adds	r3, #24
 8001778:	f107 0212 	add.w	r2, r7, #18
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f000 fe60 	bl	8002444 <wm8994_aif1_adc1_left_vol_adc1l_r>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <WM8994_GetVolume+0x72>
    {
      ret = WM8994_ERROR;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	e00e      	b.n	80017b0 <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_IN_INVERT(invertedvol);
 8001792:	8a7b      	ldrh	r3, [r7, #18]
 8001794:	461a      	mov	r2, r3
 8001796:	2364      	movs	r3, #100	@ 0x64
 8001798:	fb02 f303 	mul.w	r3, r2, r3
 800179c:	4a08      	ldr	r2, [pc, #32]	@ (80017c0 <WM8994_GetVolume+0xa0>)
 800179e:	fb82 1203 	smull	r1, r2, r2, r3
 80017a2:	441a      	add	r2, r3
 80017a4:	11d2      	asrs	r2, r2, #7
 80017a6:	17db      	asrs	r3, r3, #31
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	701a      	strb	r2, [r3, #0]
    }
  }
  
  return ret;
 80017b0:	697b      	ldr	r3, [r7, #20]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	82082083 	.word	0x82082083
 80017c0:	891ac73b 	.word	0x891ac73b

080017c4 <WM8994_SetMute>:
  * @param Cmd  WM8994_MUTE_ON to enable the mute or WM8994_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetMute(WM8994_Object_t *pObj, uint32_t Cmd)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Set the Mute mode */
  if(Cmd == WM8994_MUTE_ON)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d11c      	bne.n	800180e <WM8994_SetMute+0x4a>
  { 
    tmp = 0x0200;
 80017d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017d8:	817b      	strh	r3, [r7, #10]
    /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f103 0018 	add.w	r0, r3, #24
 80017e0:	f107 020a 	add.w	r2, r7, #10
 80017e4:	2302      	movs	r3, #2
 80017e6:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80017ea:	f000 fccd 	bl	8002188 <wm8994_write_reg>
 80017ee:	60f8      	str	r0, [r7, #12]
    
    /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f103 0018 	add.w	r0, r3, #24
 80017f6:	f107 020a 	add.w	r2, r7, #10
 80017fa:	2302      	movs	r3, #2
 80017fc:	f240 4122 	movw	r1, #1058	@ 0x422
 8001800:	f000 fcc2 	bl	8002188 <wm8994_write_reg>
 8001804:	4602      	mov	r2, r0
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4413      	add	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e01a      	b.n	8001844 <WM8994_SetMute+0x80>
  }
  else /* WM8994_MUTE_OFF Disable the Mute */
  {
    tmp = 0x0010;
 800180e:	2310      	movs	r3, #16
 8001810:	817b      	strh	r3, [r7, #10]
    /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f103 0018 	add.w	r0, r3, #24
 8001818:	f107 020a 	add.w	r2, r7, #10
 800181c:	2302      	movs	r3, #2
 800181e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001822:	f000 fcb1 	bl	8002188 <wm8994_write_reg>
 8001826:	60f8      	str	r0, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f103 0018 	add.w	r0, r3, #24
 800182e:	f107 020a 	add.w	r2, r7, #10
 8001832:	2302      	movs	r3, #2
 8001834:	f240 4122 	movw	r1, #1058	@ 0x422
 8001838:	f000 fca6 	bl	8002188 <wm8994_write_reg>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4413      	add	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <WM8994_SetMute+0x8c>
  {
    ret = WM8994_ERROR;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001850:	68fb      	ldr	r3, [r7, #12]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <WM8994_SetOutputMode>:
  * @param Output  specifies the audio output target: WM8994_OUT_SPEAKER,
  *         WM8994_OUT_HEADPHONE, WM8994_OUT_BOTH or WM8994_OUT_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetOutputMode(WM8994_Object_t *pObj, uint32_t Output)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  if((Output == WM8994_OUT_HEADPHONE) || (Output == WM8994_OUT_AUTO))
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d003      	beq.n	8001872 <WM8994_SetOutputMode+0x18>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	2b04      	cmp	r3, #4
 800186e:	f040 809c 	bne.w	80019aa <WM8994_SetOutputMode+0x150>
  {
    /* Disable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x0000;
 8001872:	2300      	movs	r3, #0
 8001874:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f103 0018 	add.w	r0, r3, #24
 800187c:	f107 020a 	add.w	r2, r7, #10
 8001880:	2302      	movs	r3, #2
 8001882:	2101      	movs	r1, #1
 8001884:	f000 fc80 	bl	8002188 <wm8994_write_reg>
 8001888:	60f8      	str	r0, [r7, #12]
    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 800188a:	f240 3303 	movw	r3, #771	@ 0x303
 800188e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f103 0018 	add.w	r0, r3, #24
 8001896:	f107 020a 	add.w	r2, r7, #10
 800189a:	2302      	movs	r3, #2
 800189c:	2105      	movs	r1, #5
 800189e:	f000 fc73 	bl	8002188 <wm8994_write_reg>
 80018a2:	4602      	mov	r2, r0
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4413      	add	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 80018aa:	2301      	movs	r3, #1
 80018ac:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f103 0018 	add.w	r0, r3, #24
 80018b4:	f107 020a 	add.w	r2, r7, #10
 80018b8:	2302      	movs	r3, #2
 80018ba:	f240 6101 	movw	r1, #1537	@ 0x601
 80018be:	f000 fc63 	bl	8002188 <wm8994_write_reg>
 80018c2:	4602      	mov	r2, r0
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f103 0018 	add.w	r0, r3, #24
 80018d0:	f107 020a 	add.w	r2, r7, #10
 80018d4:	2302      	movs	r3, #2
 80018d6:	f240 6102 	movw	r1, #1538	@ 0x602
 80018da:	f000 fc55 	bl	8002188 <wm8994_write_reg>
 80018de:	4602      	mov	r2, r0
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80018e6:	2300      	movs	r3, #0
 80018e8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f103 0018 	add.w	r0, r3, #24
 80018f0:	f107 020a 	add.w	r2, r7, #10
 80018f4:	2302      	movs	r3, #2
 80018f6:	f240 6104 	movw	r1, #1540	@ 0x604
 80018fa:	f000 fc45 	bl	8002188 <wm8994_write_reg>
 80018fe:	4602      	mov	r2, r0
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f103 0018 	add.w	r0, r3, #24
 800190c:	f107 020a 	add.w	r2, r7, #10
 8001910:	2302      	movs	r3, #2
 8001912:	f240 6105 	movw	r1, #1541	@ 0x605
 8001916:	f000 fc37 	bl	8002188 <wm8994_write_reg>
 800191a:	4602      	mov	r2, r0
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0100;
 8001922:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001926:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f103 0018 	add.w	r0, r3, #24
 800192e:	f107 020a 	add.w	r2, r7, #10
 8001932:	2302      	movs	r3, #2
 8001934:	212d      	movs	r1, #45	@ 0x2d
 8001936:	f000 fc27 	bl	8002188 <wm8994_write_reg>
 800193a:	4602      	mov	r2, r0
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f103 0018 	add.w	r0, r3, #24
 8001948:	f107 020a 	add.w	r2, r7, #10
 800194c:	2302      	movs	r3, #2
 800194e:	212e      	movs	r1, #46	@ 0x2e
 8001950:	f000 fc1a 	bl	8002188 <wm8994_write_reg>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4413      	add	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
    
    /* Startup sequence for Headphone */
    /* Enable/Start the write sequencer */
    tmp = 0x8100;
 800195c:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8001960:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f103 0018 	add.w	r0, r3, #24
 8001968:	f107 020a 	add.w	r2, r7, #10
 800196c:	2302      	movs	r3, #2
 800196e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001972:	f000 fc09 	bl	8002188 <wm8994_write_reg>
 8001976:	4602      	mov	r2, r0
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 300);
 800197e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 fb88 	bl	8002098 <WM8994_Delay>
    
    /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
    tmp = 0x0000;
 8001988:	2300      	movs	r3, #0
 800198a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);    
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f103 0018 	add.w	r0, r3, #24
 8001992:	f107 020a 	add.w	r2, r7, #10
 8001996:	2302      	movs	r3, #2
 8001998:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800199c:	f000 fbf4 	bl	8002188 <wm8994_write_reg>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4413      	add	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	e165      	b.n	8001c76 <WM8994_SetOutputMode+0x41c>
  }
  else
  {    
    switch (Output) 
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d149      	bne.n	8001a44 <WM8994_SetOutputMode+0x1ea>
    {    
    case WM8994_OUT_SPEAKER: 
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      tmp = 0x0C0C;
 80019b0:	f640 430c 	movw	r3, #3084	@ 0xc0c
 80019b4:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f103 0018 	add.w	r0, r3, #24
 80019bc:	f107 020a 	add.w	r2, r7, #10
 80019c0:	2302      	movs	r3, #2
 80019c2:	2105      	movs	r1, #5
 80019c4:	f000 fbe0 	bl	8002188 <wm8994_write_reg>
 80019c8:	60f8      	str	r0, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0000;
 80019ca:	2300      	movs	r3, #0
 80019cc:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f103 0018 	add.w	r0, r3, #24
 80019d4:	f107 020a 	add.w	r2, r7, #10
 80019d8:	2302      	movs	r3, #2
 80019da:	f240 6101 	movw	r1, #1537	@ 0x601
 80019de:	f000 fbd3 	bl	8002188 <wm8994_write_reg>
 80019e2:	4602      	mov	r2, r0
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f103 0018 	add.w	r0, r3, #24
 80019f0:	f107 020a 	add.w	r2, r7, #10
 80019f4:	2302      	movs	r3, #2
 80019f6:	f240 6102 	movw	r1, #1538	@ 0x602
 80019fa:	f000 fbc5 	bl	8002188 <wm8994_write_reg>
 80019fe:	4602      	mov	r2, r0
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4413      	add	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 8001a06:	2302      	movs	r3, #2
 8001a08:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f103 0018 	add.w	r0, r3, #24
 8001a10:	f107 020a 	add.w	r2, r7, #10
 8001a14:	2302      	movs	r3, #2
 8001a16:	f240 6104 	movw	r1, #1540	@ 0x604
 8001a1a:	f000 fbb5 	bl	8002188 <wm8994_write_reg>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f103 0018 	add.w	r0, r3, #24
 8001a2c:	f107 020a 	add.w	r2, r7, #10
 8001a30:	2302      	movs	r3, #2
 8001a32:	f240 6105 	movw	r1, #1541	@ 0x605
 8001a36:	f000 fba7 	bl	8002188 <wm8994_write_reg>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
      break;
 8001a42:	e03b      	b.n	8001abc <WM8994_SetOutputMode+0x262>
      
    case WM8994_OUT_BOTH:
    default:  
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 8001a44:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8001a48:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f103 0018 	add.w	r0, r3, #24
 8001a50:	f107 020a 	add.w	r2, r7, #10
 8001a54:	2302      	movs	r3, #2
 8001a56:	2105      	movs	r1, #5
 8001a58:	f000 fb96 	bl	8002188 <wm8994_write_reg>
 8001a5c:	60f8      	str	r0, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0001;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f103 0018 	add.w	r0, r3, #24
 8001a68:	f107 020a 	add.w	r2, r7, #10
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	f240 6101 	movw	r1, #1537	@ 0x601
 8001a72:	f000 fb89 	bl	8002188 <wm8994_write_reg>
 8001a76:	4602      	mov	r2, r0
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f103 0018 	add.w	r0, r3, #24
 8001a84:	f107 020a 	add.w	r2, r7, #10
 8001a88:	2302      	movs	r3, #2
 8001a8a:	f240 6102 	movw	r1, #1538	@ 0x602
 8001a8e:	f000 fb7b 	bl	8002188 <wm8994_write_reg>
 8001a92:	4602      	mov	r2, r0
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);      
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f103 0018 	add.w	r0, r3, #24
 8001aa4:	f107 020a 	add.w	r2, r7, #10
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	f240 6104 	movw	r1, #1540	@ 0x604
 8001aae:	f000 fb6b 	bl	8002188 <wm8994_write_reg>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
      break;
 8001aba:	bf00      	nop
    }
    
    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    tmp = 0x0300;
 8001abc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ac0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f103 0018 	add.w	r0, r3, #24
 8001ac8:	f107 020a 	add.w	r2, r7, #10
 8001acc:	2302      	movs	r3, #2
 8001ace:	2103      	movs	r1, #3
 8001ad0:	f000 fb5a 	bl	8002188 <wm8994_write_reg>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4413      	add	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]
    
    /* Left Speaker Mixer Volume = 0dB */
    tmp = 0x0000;
 8001adc:	2300      	movs	r3, #0
 8001ade:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f103 0018 	add.w	r0, r3, #24
 8001ae6:	f107 020a 	add.w	r2, r7, #10
 8001aea:	2302      	movs	r3, #2
 8001aec:	2122      	movs	r1, #34	@ 0x22
 8001aee:	f000 fb4b 	bl	8002188 <wm8994_write_reg>
 8001af2:	4602      	mov	r2, r0
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
    
    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f103 0018 	add.w	r0, r3, #24
 8001b00:	f107 020a 	add.w	r2, r7, #10
 8001b04:	2302      	movs	r3, #2
 8001b06:	2123      	movs	r1, #35	@ 0x23
 8001b08:	f000 fb3e 	bl	8002188 <wm8994_write_reg>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4413      	add	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    tmp = 0x0300;
 8001b14:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b18:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f103 0018 	add.w	r0, r3, #24
 8001b20:	f107 020a 	add.w	r2, r7, #10
 8001b24:	2302      	movs	r3, #2
 8001b26:	2136      	movs	r1, #54	@ 0x36
 8001b28:	f000 fb2e 	bl	8002188 <wm8994_write_reg>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4413      	add	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x3003;
 8001b34:	f243 0303 	movw	r3, #12291	@ 0x3003
 8001b38:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f103 0018 	add.w	r0, r3, #24
 8001b40:	f107 020a 	add.w	r2, r7, #10
 8001b44:	2302      	movs	r3, #2
 8001b46:	2101      	movs	r1, #1
 8001b48:	f000 fb1e 	bl	8002188 <wm8994_write_reg>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4413      	add	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
    /* Headphone/Speaker Enable */
    
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    tmp = 0x0005;
 8001b54:	2305      	movs	r3, #5
 8001b56:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f103 0018 	add.w	r0, r3, #24
 8001b5e:	f107 020a 	add.w	r2, r7, #10
 8001b62:	2302      	movs	r3, #2
 8001b64:	2151      	movs	r1, #81	@ 0x51
 8001b66:	f000 fb0f 	bl	8002188 <wm8994_write_reg>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    tmp = 0x3303;
 8001b72:	f243 3303 	movw	r3, #13059	@ 0x3303
 8001b76:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f103 0018 	add.w	r0, r3, #24
 8001b7e:	f107 020a 	add.w	r2, r7, #10
 8001b82:	2302      	movs	r3, #2
 8001b84:	2101      	movs	r1, #1
 8001b86:	f000 faff 	bl	8002188 <wm8994_write_reg>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4413      	add	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    tmp = 0x0022;
 8001b92:	2322      	movs	r3, #34	@ 0x22
 8001b94:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f103 0018 	add.w	r0, r3, #24
 8001b9c:	f107 020a 	add.w	r2, r7, #10
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	2160      	movs	r1, #96	@ 0x60
 8001ba4:	f000 faf0 	bl	8002188 <wm8994_write_reg>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
    
    /* Enable Charge Pump */
    tmp = 0x9F25;
 8001bb0:	f649 7325 	movw	r3, #40741	@ 0x9f25
 8001bb4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f103 0018 	add.w	r0, r3, #24
 8001bbc:	f107 020a 	add.w	r2, r7, #10
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	214c      	movs	r1, #76	@ 0x4c
 8001bc4:	f000 fae0 	bl	8002188 <wm8994_write_reg>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4413      	add	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 15);
 8001bd0:	210f      	movs	r1, #15
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 fa60 	bl	8002098 <WM8994_Delay>
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0001;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f103 0018 	add.w	r0, r3, #24
 8001be2:	f107 020a 	add.w	r2, r7, #10
 8001be6:	2302      	movs	r3, #2
 8001be8:	212d      	movs	r1, #45	@ 0x2d
 8001bea:	f000 facd 	bl	8002188 <wm8994_write_reg>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f103 0018 	add.w	r0, r3, #24
 8001bfc:	f107 020a 	add.w	r2, r7, #10
 8001c00:	2302      	movs	r3, #2
 8001c02:	212e      	movs	r1, #46	@ 0x2e
 8001c04:	f000 fac0 	bl	8002188 <wm8994_write_reg>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
    
    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    tmp = 0x0330;
 8001c10:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8001c14:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f103 0018 	add.w	r0, r3, #24
 8001c1c:	f107 020a 	add.w	r2, r7, #10
 8001c20:	2302      	movs	r3, #2
 8001c22:	2103      	movs	r1, #3
 8001c24:	f000 fab0 	bl	8002188 <wm8994_write_reg>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
    
    /* Enable DC Servo and trigger start-up mode on left and right channels */
    tmp = 0x0033;
 8001c30:	2333      	movs	r3, #51	@ 0x33
 8001c32:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f103 0018 	add.w	r0, r3, #24
 8001c3a:	f107 020a 	add.w	r2, r7, #10
 8001c3e:	2302      	movs	r3, #2
 8001c40:	2154      	movs	r1, #84	@ 0x54
 8001c42:	f000 faa1 	bl	8002188 <wm8994_write_reg>
 8001c46:	4602      	mov	r2, r0
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 257);
 8001c4e:	f240 1101 	movw	r1, #257	@ 0x101
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fa20 	bl	8002098 <WM8994_Delay>
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    tmp = 0x00EE;
 8001c58:	23ee      	movs	r3, #238	@ 0xee
 8001c5a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);    
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f103 0018 	add.w	r0, r3, #24
 8001c62:	f107 020a 	add.w	r2, r7, #10
 8001c66:	2302      	movs	r3, #2
 8001c68:	2160      	movs	r1, #96	@ 0x60
 8001c6a:	f000 fa8d 	bl	8002188 <wm8994_write_reg>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <WM8994_SetOutputMode+0x428>
  {
    ret = WM8994_ERROR;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c80:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <WM8994_SetResolution>:
  *                    WM8994_RESOLUTION_16b, WM8994_RESOLUTION_20b, 
  *                    WM8994_RESOLUTION_24b or WM8994_RESOLUTION_32b
  * @retval Component status
  */
int32_t WM8994_SetResolution(WM8994_Object_t *pObj, uint32_t Resolution)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3318      	adds	r3, #24
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	b292      	uxth	r2, r2
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fb4b 	bl	8002340 <wm8994_aif1_control1_wl>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <WM8994_SetResolution+0x2a>
  {
    ret = WM8994_ERROR;
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <WM8994_GetResolution>:
  * @brief Get Audio resolution.
  * @param pObj pointer to component object
  * @retval Audio resolution
  */
int32_t WM8994_GetResolution(WM8994_Object_t *pObj, uint32_t *Resolution)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
  uint16_t resolution = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_control1_wl_r(&pObj->Ctx, &resolution) != WM8994_OK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3318      	adds	r3, #24
 8001cd6:	f107 020a 	add.w	r2, r7, #10
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fb5f 	bl	80023a0 <wm8994_aif1_control1_wl_r>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <WM8994_GetResolution+0x30>
  {
    ret = WM8994_ERROR;
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	e021      	b.n	8001d34 <WM8994_GetResolution+0x74>
  }
  else
  {
    switch(resolution)
 8001cf0:	897b      	ldrh	r3, [r7, #10]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d81a      	bhi.n	8001d2c <WM8994_GetResolution+0x6c>
 8001cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cfc <WM8994_GetResolution+0x3c>)
 8001cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfc:	08001d0d 	.word	0x08001d0d
 8001d00:	08001d15 	.word	0x08001d15
 8001d04:	08001d1d 	.word	0x08001d1d
 8001d08:	08001d25 	.word	0x08001d25
    {
    case 0:
      *Resolution = WM8994_RESOLUTION_16b;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
      break;
 8001d12:	e00f      	b.n	8001d34 <WM8994_GetResolution+0x74>
    case 1:
      *Resolution = WM8994_RESOLUTION_20b;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2201      	movs	r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
      break;
 8001d1a:	e00b      	b.n	8001d34 <WM8994_GetResolution+0x74>
    case 2:
      *Resolution = WM8994_RESOLUTION_24b;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	601a      	str	r2, [r3, #0]
      break;
 8001d22:	e007      	b.n	8001d34 <WM8994_GetResolution+0x74>
    case 3:
      *Resolution = WM8994_RESOLUTION_32b;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	2203      	movs	r2, #3
 8001d28:	601a      	str	r2, [r3, #0]
      break; 
 8001d2a:	e003      	b.n	8001d34 <WM8994_GetResolution+0x74>
    default:
      *Resolution = WM8994_RESOLUTION_16b;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
      break;
 8001d32:	bf00      	nop
    }
  }
  
  return ret;
 8001d34:	68fb      	ldr	r3, [r7, #12]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop

08001d40 <WM8994_SetProtocol>:
  *                  WM8994_PROTOCOL_R_JUSTIFIED, WM8994_PROTOCOL_L_JUSTIFIED, 
  *                  WM8994_PROTOCOL_I2S or WM8994_PROTOCOL_DSP
  * @retval Component status
  */
int32_t WM8994_SetProtocol(WM8994_Object_t *pObj, uint32_t Protocol)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK; 
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3318      	adds	r3, #24
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	b292      	uxth	r2, r2
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 fa9f 	bl	800229c <wm8994_aif1_control1_fmt>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <WM8994_SetProtocol+0x2a>
  {
    ret = WM8994_ERROR;
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295
 8001d68:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8001d6a:	68fb      	ldr	r3, [r7, #12]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <WM8994_GetProtocol>:
  * @brief Get Audio Protocol.
  * @param pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_GetProtocol(WM8994_Object_t *pObj, uint32_t *Protocol)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
  uint16_t protocol;
  
  if(wm8994_aif1_control1_fmt_r(&pObj->Ctx, &protocol) != WM8994_OK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3318      	adds	r3, #24
 8001d86:	f107 020a 	add.w	r2, r7, #10
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 fab5 	bl	80022fc <wm8994_aif1_control1_fmt_r>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <WM8994_GetProtocol+0x2c>
  {
    ret = WM8994_ERROR;
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	e003      	b.n	8001da8 <WM8994_GetProtocol+0x34>
  }
  else
  {
    *Protocol = protocol;
 8001da0:	897b      	ldrh	r3, [r7, #10]
 8001da2:	461a      	mov	r2, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	601a      	str	r2, [r3, #0]
  }
  
  return ret;
 8001da8:	68fb      	ldr	r3, [r7, #12]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <WM8994_SetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_SetFrequency(WM8994_Object_t *pObj, uint32_t AudioFreq)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  switch (AudioFreq)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	4a55      	ldr	r2, [pc, #340]	@ (8001f18 <WM8994_SetFrequency+0x164>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d05d      	beq.n	8001e82 <WM8994_SetFrequency+0xce>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	4a53      	ldr	r2, [pc, #332]	@ (8001f18 <WM8994_SetFrequency+0x164>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	f200 8091 	bhi.w	8001ef2 <WM8994_SetFrequency+0x13e>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d07d      	beq.n	8001ed6 <WM8994_SetFrequency+0x122>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001de0:	4293      	cmp	r3, r2
 8001de2:	f200 8086 	bhi.w	8001ef2 <WM8994_SetFrequency+0x13e>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001dec:	d03b      	beq.n	8001e66 <WM8994_SetFrequency+0xb2>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001df4:	d87d      	bhi.n	8001ef2 <WM8994_SetFrequency+0x13e>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f245 6222 	movw	r2, #22050	@ 0x5622
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d05c      	beq.n	8001eba <WM8994_SetFrequency+0x106>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	f245 6222 	movw	r2, #22050	@ 0x5622
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d873      	bhi.n	8001ef2 <WM8994_SetFrequency+0x13e>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001e10:	d01b      	beq.n	8001e4a <WM8994_SetFrequency+0x96>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001e18:	d86b      	bhi.n	8001ef2 <WM8994_SetFrequency+0x13e>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001e20:	d005      	beq.n	8001e2e <WM8994_SetFrequency+0x7a>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d038      	beq.n	8001e9e <WM8994_SetFrequency+0xea>
 8001e2c:	e061      	b.n	8001ef2 <WM8994_SetFrequency+0x13e>
  {
  case  WM8994_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    tmp = 0x0003;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f103 0018 	add.w	r0, r3, #24
 8001e38:	f107 020a 	add.w	r2, r7, #10
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001e42:	f000 f9a1 	bl	8002188 <wm8994_write_reg>
 8001e46:	60f8      	str	r0, [r7, #12]
    break;
 8001e48:	e061      	b.n	8001f0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    tmp = 0x0033;
 8001e4a:	2333      	movs	r3, #51	@ 0x33
 8001e4c:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f103 0018 	add.w	r0, r3, #24
 8001e54:	f107 020a 	add.w	r2, r7, #10
 8001e58:	2302      	movs	r3, #2
 8001e5a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001e5e:	f000 f993 	bl	8002188 <wm8994_write_reg>
 8001e62:	60f8      	str	r0, [r7, #12]
    break;
 8001e64:	e053      	b.n	8001f0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    tmp = 0x0063;
 8001e66:	2363      	movs	r3, #99	@ 0x63
 8001e68:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f103 0018 	add.w	r0, r3, #24
 8001e70:	f107 020a 	add.w	r2, r7, #10
 8001e74:	2302      	movs	r3, #2
 8001e76:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001e7a:	f000 f985 	bl	8002188 <wm8994_write_reg>
 8001e7e:	60f8      	str	r0, [r7, #12]
    break;
 8001e80:	e045      	b.n	8001f0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    tmp = 0x00A3;
 8001e82:	23a3      	movs	r3, #163	@ 0xa3
 8001e84:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f103 0018 	add.w	r0, r3, #24
 8001e8c:	f107 020a 	add.w	r2, r7, #10
 8001e90:	2302      	movs	r3, #2
 8001e92:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001e96:	f000 f977 	bl	8002188 <wm8994_write_reg>
 8001e9a:	60f8      	str	r0, [r7, #12]
    break;
 8001e9c:	e037      	b.n	8001f0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    tmp = 0x0013;
 8001e9e:	2313      	movs	r3, #19
 8001ea0:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f103 0018 	add.w	r0, r3, #24
 8001ea8:	f107 020a 	add.w	r2, r7, #10
 8001eac:	2302      	movs	r3, #2
 8001eae:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001eb2:	f000 f969 	bl	8002188 <wm8994_write_reg>
 8001eb6:	60f8      	str	r0, [r7, #12]
    break;
 8001eb8:	e029      	b.n	8001f0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    tmp = 0x0043;
 8001eba:	2343      	movs	r3, #67	@ 0x43
 8001ebc:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f103 0018 	add.w	r0, r3, #24
 8001ec4:	f107 020a 	add.w	r2, r7, #10
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001ece:	f000 f95b 	bl	8002188 <wm8994_write_reg>
 8001ed2:	60f8      	str	r0, [r7, #12]
    break;
 8001ed4:	e01b      	b.n	8001f0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    tmp = 0x0073;
 8001ed6:	2373      	movs	r3, #115	@ 0x73
 8001ed8:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f103 0018 	add.w	r0, r3, #24
 8001ee0:	f107 020a 	add.w	r2, r7, #10
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001eea:	f000 f94d 	bl	8002188 <wm8994_write_reg>
 8001eee:	60f8      	str	r0, [r7, #12]
    break; 
 8001ef0:	e00d      	b.n	8001f0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_48K:    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    tmp = 0x0083;
 8001ef2:	2383      	movs	r3, #131	@ 0x83
 8001ef4:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f103 0018 	add.w	r0, r3, #24
 8001efc:	f107 020a 	add.w	r2, r7, #10
 8001f00:	2302      	movs	r3, #2
 8001f02:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001f06:	f000 f93f 	bl	8002188 <wm8994_write_reg>
 8001f0a:	60f8      	str	r0, [r7, #12]
    break; 
 8001f0c:	bf00      	nop
  }
  
  return ret;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	00017700 	.word	0x00017700

08001f1c <WM8994_GetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_GetFrequency(WM8994_Object_t *pObj, uint32_t *AudioFreq)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;   
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
  uint16_t freq = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_sr_r(&pObj->Ctx, &freq) != WM8994_OK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3318      	adds	r3, #24
 8001f32:	f107 020a 	add.w	r2, r7, #10
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 f98d 	bl	8002258 <wm8994_aif1_sr_r>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <WM8994_GetFrequency+0x30>
  {
    ret = WM8994_ERROR;
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	e043      	b.n	8001fd4 <WM8994_GetFrequency+0xb8>
  }
  else
  {
    switch(freq)
 8001f4c:	897b      	ldrh	r3, [r7, #10]
 8001f4e:	2b0a      	cmp	r3, #10
 8001f50:	d83f      	bhi.n	8001fd2 <WM8994_GetFrequency+0xb6>
 8001f52:	a201      	add	r2, pc, #4	@ (adr r2, 8001f58 <WM8994_GetFrequency+0x3c>)
 8001f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f58:	08001f85 	.word	0x08001f85
 8001f5c:	08001f8f 	.word	0x08001f8f
 8001f60:	08001fd3 	.word	0x08001fd3
 8001f64:	08001f99 	.word	0x08001f99
 8001f68:	08001fa3 	.word	0x08001fa3
 8001f6c:	08001fd3 	.word	0x08001fd3
 8001f70:	08001fad 	.word	0x08001fad
 8001f74:	08001fb7 	.word	0x08001fb7
 8001f78:	08001fc1 	.word	0x08001fc1
 8001f7c:	08001fd3 	.word	0x08001fd3
 8001f80:	08001fcb 	.word	0x08001fcb
    {
    case 0:
      *AudioFreq = WM8994_FREQUENCY_8K;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001f8a:	601a      	str	r2, [r3, #0]
      break;
 8001f8c:	e022      	b.n	8001fd4 <WM8994_GetFrequency+0xb8>
    case 1:
      *AudioFreq = WM8994_FREQUENCY_11K;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8001f94:	601a      	str	r2, [r3, #0]
      break;    
 8001f96:	e01d      	b.n	8001fd4 <WM8994_GetFrequency+0xb8>
    case 3:
      *AudioFreq = WM8994_FREQUENCY_16K;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001f9e:	601a      	str	r2, [r3, #0]
      break;
 8001fa0:	e018      	b.n	8001fd4 <WM8994_GetFrequency+0xb8>
    case 4:
      *AudioFreq = WM8994_FREQUENCY_22K;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f245 6222 	movw	r2, #22050	@ 0x5622
 8001fa8:	601a      	str	r2, [r3, #0]
      break; 
 8001faa:	e013      	b.n	8001fd4 <WM8994_GetFrequency+0xb8>
    case 6:
      *AudioFreq = WM8994_FREQUENCY_32K;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001fb2:	601a      	str	r2, [r3, #0]
      break; 
 8001fb4:	e00e      	b.n	8001fd4 <WM8994_GetFrequency+0xb8>
    case 7:
      *AudioFreq = WM8994_FREQUENCY_44K;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001fbc:	601a      	str	r2, [r3, #0]
      break;    
 8001fbe:	e009      	b.n	8001fd4 <WM8994_GetFrequency+0xb8>
    case 8:
      *AudioFreq = WM8994_FREQUENCY_48K;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001fc6:	601a      	str	r2, [r3, #0]
      break;
 8001fc8:	e004      	b.n	8001fd4 <WM8994_GetFrequency+0xb8>
    case 10:
      *AudioFreq = WM8994_FREQUENCY_96K;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	4a04      	ldr	r2, [pc, #16]	@ (8001fe0 <WM8994_GetFrequency+0xc4>)
 8001fce:	601a      	str	r2, [r3, #0]
      break;    
 8001fd0:	e000      	b.n	8001fd4 <WM8994_GetFrequency+0xb8>
    default:
      break;    
 8001fd2:	bf00      	nop
    }
  }
  
  return ret;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	00017700 	.word	0x00017700

08001fe4 <WM8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param pObj pointer to component object 
  * @retval Component status if correct communication, else wrong communication
  */
int32_t WM8994_Reset(WM8994_Object_t *pObj)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  int32_t ret = WM8994_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  if(wm8994_sw_reset_w(&pObj->Ctx, 0x0000) != WM8994_OK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3318      	adds	r3, #24
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f8ee 	bl	80021d8 <wm8994_sw_reset_w>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <WM8994_Reset+0x24>
  {
    ret = WM8994_ERROR;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295
 8002006:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8002008:	68fb      	ldr	r3, [r7, #12]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <WM8994_RegisterBusIO>:
  * @brief  Function
  * @param  Component object pointer
  * @retval error status
  */
int32_t WM8994_RegisterBusIO (WM8994_Object_t *pObj, WM8994_IO_t *pIO)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d103      	bne.n	800202c <WM8994_RegisterBusIO+0x18>
  {
    ret = WM8994_ERROR;
 8002024:	f04f 33ff 	mov.w	r3, #4294967295
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	e02c      	b.n	8002086 <WM8994_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	891a      	ldrh	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = WM8994_ReadRegWrap;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a0c      	ldr	r2, [pc, #48]	@ (8002090 <WM8994_RegisterBusIO+0x7c>)
 8002060:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WM8994_WriteRegWrap;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a0b      	ldr	r2, [pc, #44]	@ (8002094 <WM8994_RegisterBusIO+0x80>)
 8002066:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d004      	beq.n	8002080 <WM8994_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4798      	blx	r3
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	e002      	b.n	8002086 <WM8994_RegisterBusIO+0x72>
    }
    else
    {
      ret = WM8994_ERROR;
 8002080:	f04f 33ff 	mov.w	r3, #4294967295
 8002084:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return ret;
 8002086:	68fb      	ldr	r3, [r7, #12]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	080020cd 	.word	0x080020cd
 8002094:	080020ff 	.word	0x080020ff

08002098 <WM8994_Delay>:
  * @param pObj pointer to component object
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval Component status
  */
static int32_t WM8994_Delay(WM8994_Object_t *pObj, uint32_t Delay)
{  
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = pObj->IO.GetTick();
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	4798      	blx	r3
 80020a8:	4603      	mov	r3, r0
 80020aa:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80020ac:	bf00      	nop
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	4798      	blx	r3
 80020b4:	4603      	mov	r3, r0
 80020b6:	461a      	mov	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d8f5      	bhi.n	80020ae <WM8994_Delay+0x16>
  {
  }
  return WM8994_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <WM8994_ReadRegWrap>:
  * @param  pData   The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t WM8994_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	461a      	mov	r2, r3
 80020d8:	460b      	mov	r3, r1
 80020da:	817b      	strh	r3, [r7, #10]
 80020dc:	4613      	mov	r3, r2
 80020de:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	691c      	ldr	r4, [r3, #16]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	8918      	ldrh	r0, [r3, #8]
 80020ec:	893b      	ldrh	r3, [r7, #8]
 80020ee:	8979      	ldrh	r1, [r7, #10]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	47a0      	blx	r4
 80020f4:	4603      	mov	r3, r0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd90      	pop	{r4, r7, pc}

080020fe <WM8994_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t WM8994_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80020fe:	b590      	push	{r4, r7, lr}
 8002100:	b087      	sub	sp, #28
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	461a      	mov	r2, r3
 800210a:	460b      	mov	r3, r1
 800210c:	817b      	strh	r3, [r7, #10]
 800210e:	4613      	mov	r3, r2
 8002110:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	68dc      	ldr	r4, [r3, #12]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	8918      	ldrh	r0, [r3, #8]
 800211e:	893b      	ldrh	r3, [r7, #8]
 8002120:	8979      	ldrh	r1, [r7, #10]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	47a0      	blx	r4
 8002126:	4603      	mov	r3, r0
}
 8002128:	4618      	mov	r0, r3
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	bd90      	pop	{r4, r7, pc}

08002130 <wm8994_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : data Read
*******************************************************************************/
int32_t wm8994_read_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t* data, uint16_t length)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	461a      	mov	r2, r3
 800213c:	460b      	mov	r3, r1
 800213e:	817b      	strh	r3, [r7, #10]
 8002140:	4613      	mov	r3, r2
 8002142:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  uint16_t tmp;
  
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685c      	ldr	r4, [r3, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6898      	ldr	r0, [r3, #8]
 800214c:	893b      	ldrh	r3, [r7, #8]
 800214e:	8979      	ldrh	r1, [r7, #10]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	47a0      	blx	r4
 8002154:	6178      	str	r0, [r7, #20]
  
  if(ret >= 0)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2b00      	cmp	r3, #0
 800215a:	db10      	blt.n	800217e <wm8994_read_reg+0x4e>
  {
    tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	827b      	strh	r3, [r7, #18]
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	b21b      	sxth	r3, r3
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	b21a      	sxth	r2, r3
 800216e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002172:	4313      	orrs	r3, r2
 8002174:	b21b      	sxth	r3, r3
 8002176:	827b      	strh	r3, [r7, #18]
    *data = tmp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	8a7a      	ldrh	r2, [r7, #18]
 800217c:	801a      	strh	r2, [r3, #0]
  }
  return ret;
 800217e:	697b      	ldr	r3, [r7, #20]
}
 8002180:	4618      	mov	r0, r3
 8002182:	371c      	adds	r7, #28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd90      	pop	{r4, r7, pc}

08002188 <wm8994_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t wm8994_write_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t *data, uint16_t length)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	461a      	mov	r2, r3
 8002194:	460b      	mov	r3, r1
 8002196:	817b      	strh	r3, [r7, #10]
 8002198:	4613      	mov	r3, r2
 800219a:	813b      	strh	r3, [r7, #8]
  uint16_t tmp;
  tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	82fb      	strh	r3, [r7, #22]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	b21b      	sxth	r3, r3
 80021ac:	021b      	lsls	r3, r3, #8
 80021ae:	b21a      	sxth	r2, r3
 80021b0:	8afb      	ldrh	r3, [r7, #22]
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	4313      	orrs	r3, r2
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	82fb      	strh	r3, [r7, #22]
  
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681c      	ldr	r4, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6898      	ldr	r0, [r3, #8]
 80021c4:	893b      	ldrh	r3, [r7, #8]
 80021c6:	f107 0216 	add.w	r2, r7, #22
 80021ca:	8979      	ldrh	r1, [r7, #10]
 80021cc:	47a0      	blx	r4
 80021ce:	4603      	mov	r3, r0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd90      	pop	{r4, r7, pc}

080021d8 <wm8994_sw_reset_w>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_w(wm8994_ctx_t *ctx, uint16_t value)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	807b      	strh	r3, [r7, #2]
  return wm8994_write_reg(ctx, WM8994_SW_RESET, &value, 2);
 80021e4:	1cba      	adds	r2, r7, #2
 80021e6:	2302      	movs	r3, #2
 80021e8:	2100      	movs	r1, #0
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ffcc 	bl	8002188 <wm8994_write_reg>
 80021f0:	4603      	mov	r3, r0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <wm8994_sw_reset_r>:
* Input          : Pointer to uint8_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
  return wm8994_read_reg(ctx, WM8994_SW_RESET, value, 2);
 8002204:	2302      	movs	r3, #2
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	2100      	movs	r1, #0
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ff90 	bl	8002130 <wm8994_read_reg>
 8002210:	4603      	mov	r3, r0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <wm8994_lo_hpout1l_vol_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_lo_hpout1l_vol_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_LEFT_OUTPUT_VOL, value, 2);
 8002224:	2302      	movs	r3, #2
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	211c      	movs	r1, #28
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff ff80 	bl	8002130 <wm8994_read_reg>
 8002230:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <wm8994_lo_hpout1l_vol_r+0x34>
  {  
  *value &= WM8994_LO_HPOUT1L_VOL_MASK;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002240:	b29a      	uxth	r2, r3
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_LO_HPOUT1L_VOL_POSITION;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	881a      	ldrh	r2, [r3, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 800224e:	68fb      	ldr	r3, [r7, #12]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <wm8994_aif1_sr_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_sr_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_RATE, value, 2);
 8002262:	2302      	movs	r3, #2
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff ff60 	bl	8002130 <wm8994_read_reg>
 8002270:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10c      	bne.n	8002292 <wm8994_aif1_sr_r+0x3a>
  {  
  *value &= WM8994_AIF1_SR_MASK;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002280:	b29a      	uxth	r2, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_SR_POSITION;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	b29a      	uxth	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8002292:	68fb      	ldr	r3, [r7, #12]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <wm8994_aif1_control1_fmt>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt(wm8994_ctx_t *ctx, uint16_t value)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80022ac:	f107 020a 	add.w	r2, r7, #10
 80022b0:	2302      	movs	r3, #2
 80022b2:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ff3a 	bl	8002130 <wm8994_read_reg>
 80022bc:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d116      	bne.n	80022f2 <wm8994_aif1_control1_fmt+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_FMT_MASK;
 80022c4:	897b      	ldrh	r3, [r7, #10]
 80022c6:	f023 0318 	bic.w	r3, r3, #24
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 80022ce:	887b      	ldrh	r3, [r7, #2]
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	b21a      	sxth	r2, r3
 80022d4:	897b      	ldrh	r3, [r7, #10]
 80022d6:	b21b      	sxth	r3, r3
 80022d8:	4313      	orrs	r3, r2
 80022da:	b21b      	sxth	r3, r3
 80022dc:	b29b      	uxth	r3, r3
 80022de:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80022e0:	f107 020a 	add.w	r2, r7, #10
 80022e4:	2302      	movs	r3, #2
 80022e6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff ff4c 	bl	8002188 <wm8994_write_reg>
 80022f0:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 80022f2:	68fb      	ldr	r3, [r7, #12]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <wm8994_aif1_control1_fmt_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 8002306:	2302      	movs	r3, #2
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ff0e 	bl	8002130 <wm8994_read_reg>
 8002314:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10c      	bne.n	8002336 <wm8994_aif1_control1_fmt_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_FMT_MASK;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	f003 0318 	and.w	r3, r3, #24
 8002324:	b29a      	uxth	r2, r3
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_FMT_POSITION;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	08db      	lsrs	r3, r3, #3
 8002330:	b29a      	uxth	r2, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8002336:	68fb      	ldr	r3, [r7, #12]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <wm8994_aif1_control1_wl>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl(wm8994_ctx_t *ctx, uint16_t value)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8002350:	f107 020a 	add.w	r2, r7, #10
 8002354:	2302      	movs	r3, #2
 8002356:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff fee8 	bl	8002130 <wm8994_read_reg>
 8002360:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d116      	bne.n	8002396 <wm8994_aif1_control1_wl+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_WL_MASK;
 8002368:	897b      	ldrh	r3, [r7, #10]
 800236a:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800236e:	b29b      	uxth	r3, r3
 8002370:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 8002372:	887b      	ldrh	r3, [r7, #2]
 8002374:	015b      	lsls	r3, r3, #5
 8002376:	b21a      	sxth	r2, r3
 8002378:	897b      	ldrh	r3, [r7, #10]
 800237a:	b21b      	sxth	r3, r3
 800237c:	4313      	orrs	r3, r2
 800237e:	b21b      	sxth	r3, r3
 8002380:	b29b      	uxth	r3, r3
 8002382:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8002384:	f107 020a 	add.w	r2, r7, #10
 8002388:	2302      	movs	r3, #2
 800238a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff fefa 	bl	8002188 <wm8994_write_reg>
 8002394:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8002396:	68fb      	ldr	r3, [r7, #12]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <wm8994_aif1_control1_wl_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 80023aa:	2302      	movs	r3, #2
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff febc 	bl	8002130 <wm8994_read_reg>
 80023b8:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10c      	bne.n	80023da <wm8994_aif1_control1_wl_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_WL_MASK;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_WL_POSITION;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 80023da:	68fb      	ldr	r3, [r7, #12]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <wm8994_aif1_control1_adcr_src>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_adcr_src(wm8994_ctx_t *ctx, uint16_t value)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80023f4:	f107 020a 	add.w	r2, r7, #10
 80023f8:	2302      	movs	r3, #2
 80023fa:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff fe96 	bl	8002130 <wm8994_read_reg>
 8002404:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d116      	bne.n	800243a <wm8994_aif1_control1_adcr_src+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_ADCR_SRC_MASK;
 800240c:	897b      	ldrh	r3, [r7, #10]
 800240e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002412:	b29b      	uxth	r3, r3
 8002414:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 8002416:	887b      	ldrh	r3, [r7, #2]
 8002418:	039b      	lsls	r3, r3, #14
 800241a:	b21a      	sxth	r2, r3
 800241c:	897b      	ldrh	r3, [r7, #10]
 800241e:	b21b      	sxth	r3, r3
 8002420:	4313      	orrs	r3, r2
 8002422:	b21b      	sxth	r3, r3
 8002424:	b29b      	uxth	r3, r3
 8002426:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8002428:	f107 020a 	add.w	r2, r7, #10
 800242c:	2302      	movs	r3, #2
 800242e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff fea8 	bl	8002188 <wm8994_write_reg>
 8002438:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 800243a:	68fb      	ldr	r3, [r7, #12]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <wm8994_aif1_adc1_left_vol_adc1l_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_adc1_left_vol_adc1l_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_ADC1_LEFT_VOL, value, 2);
 800244e:	2302      	movs	r3, #2
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fe6a 	bl	8002130 <wm8994_read_reg>
 800245c:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d109      	bne.n	8002478 <wm8994_aif1_adc1_left_vol_adc1l_r+0x34>
  {  
  *value &= WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_MASK;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	b29a      	uxth	r2, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_POSITION;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	881a      	ldrh	r2, [r3, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8002478:	68fb      	ldr	r3, [r7, #12]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	@ 0x28
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24

  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10f      	bne.n	80024b8 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE();
 8002498:	4b26      	ldr	r3, [pc, #152]	@ (8002534 <BSP_LED_Init+0xb0>)
 800249a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800249e:	4a25      	ldr	r2, [pc, #148]	@ (8002534 <BSP_LED_Init+0xb0>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024a8:	4b22      	ldr	r3, [pc, #136]	@ (8002534 <BSP_LED_Init+0xb0>)
 80024aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	e015      	b.n	80024e4 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d10f      	bne.n	80024de <BSP_LED_Init+0x5a>
  {

    LED2_GPIO_CLK_ENABLE();
 80024be:	4b1d      	ldr	r3, [pc, #116]	@ (8002534 <BSP_LED_Init+0xb0>)
 80024c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002534 <BSP_LED_Init+0xb0>)
 80024c6:	f043 0304 	orr.w	r3, r3, #4
 80024ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024ce:	4b19      	ldr	r3, [pc, #100]	@ (8002534 <BSP_LED_Init+0xb0>)
 80024d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	e002      	b.n	80024e4 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80024de:	f06f 0301 	mvn.w	r3, #1
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80024e4:	2301      	movs	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80024e8:	2301      	movs	r3, #1
 80024ea:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80024ec:	2302      	movs	r3, #2
 80024ee:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	4a11      	ldr	r2, [pc, #68]	@ (8002538 <BSP_LED_Init+0xb4>)
 80024f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	4a0f      	ldr	r2, [pc, #60]	@ (800253c <BSP_LED_Init+0xb8>)
 80024fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002502:	f107 0210 	add.w	r2, r7, #16
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f008 f9c3 	bl	800a894 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	4a0a      	ldr	r2, [pc, #40]	@ (800253c <BSP_LED_Init+0xb8>)
 8002512:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	4a07      	ldr	r2, [pc, #28]	@ (8002538 <BSP_LED_Init+0xb4>)
 800251a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251e:	b29b      	uxth	r3, r3
 8002520:	2201      	movs	r2, #1
 8002522:	4619      	mov	r1, r3
 8002524:	f008 fc60 	bl	800ade8 <HAL_GPIO_WritePin>

  return ret;
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800252a:	4618      	mov	r0, r3
 800252c:	3728      	adds	r7, #40	@ 0x28
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	58024400 	.word	0x58024400
 8002538:	08015978 	.word	0x08015978
 800253c:	2400044c 	.word	0x2400044c

08002540 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	460a      	mov	r2, r1
 800254a:	71fb      	strb	r3, [r7, #7]
 800254c:	4613      	mov	r3, r2
 800254e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_USER_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002550:	4b2d      	ldr	r3, [pc, #180]	@ (8002608 <BSP_PB_Init+0xc8>)
 8002552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002556:	4a2c      	ldr	r2, [pc, #176]	@ (8002608 <BSP_PB_Init+0xc8>)
 8002558:	f043 0304 	orr.w	r3, r3, #4
 800255c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002560:	4b29      	ldr	r3, [pc, #164]	@ (8002608 <BSP_PB_Init+0xc8>)
 8002562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800256e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002572:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002574:	2302      	movs	r3, #2
 8002576:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002578:	2302      	movs	r3, #2
 800257a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800257c:	79bb      	ldrb	r3, [r7, #6]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10c      	bne.n	800259c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	4a20      	ldr	r2, [pc, #128]	@ (800260c <BSP_PB_Init+0xcc>)
 800258a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258e:	f107 020c 	add.w	r2, r7, #12
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f008 f97d 	bl	800a894 <HAL_GPIO_Init>
 800259a:	e030      	b.n	80025fe <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800259c:	4b1c      	ldr	r3, [pc, #112]	@ (8002610 <BSP_PB_Init+0xd0>)
 800259e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	4a1a      	ldr	r2, [pc, #104]	@ (800260c <BSP_PB_Init+0xcc>)
 80025a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a8:	f107 020c 	add.w	r2, r7, #12
 80025ac:	4611      	mov	r1, r2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f008 f970 	bl	800a894 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4a16      	ldr	r2, [pc, #88]	@ (8002614 <BSP_PB_Init+0xd4>)
 80025ba:	441a      	add	r2, r3
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	4916      	ldr	r1, [pc, #88]	@ (8002618 <BSP_PB_Init+0xd8>)
 80025c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025c4:	4619      	mov	r1, r3
 80025c6:	4610      	mov	r0, r2
 80025c8:	f008 f91f 	bl	800a80a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4a10      	ldr	r2, [pc, #64]	@ (8002614 <BSP_PB_Init+0xd4>)
 80025d2:	1898      	adds	r0, r3, r2
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	4a11      	ldr	r2, [pc, #68]	@ (800261c <BSP_PB_Init+0xdc>)
 80025d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025dc:	461a      	mov	r2, r3
 80025de:	2100      	movs	r1, #0
 80025e0:	f008 f8f4 	bl	800a7cc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80025e4:	2028      	movs	r0, #40	@ 0x28
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002620 <BSP_PB_Init+0xe0>)
 80025ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ee:	2200      	movs	r2, #0
 80025f0:	4619      	mov	r1, r3
 80025f2:	f004 ff72 	bl	80074da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80025f6:	2328      	movs	r3, #40	@ 0x28
 80025f8:	4618      	mov	r0, r3
 80025fa:	f004 ff88 	bl	800750e <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3720      	adds	r7, #32
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	58024400 	.word	0x58024400
 800260c:	24000454 	.word	0x24000454
 8002610:	11110000 	.word	0x11110000
 8002614:	24000640 	.word	0x24000640
 8002618:	08015980 	.word	0x08015980
 800261c:	24000458 	.word	0x24000458
 8002620:	2400045c 	.word	0x2400045c

08002624 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4a04      	ldr	r2, [pc, #16]	@ (8002644 <BSP_PB_IRQHandler+0x20>)
 8002634:	4413      	add	r3, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f008 f8fc 	bl	800a834 <HAL_EXTI_IRQHandler>
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	24000640 	.word	0x24000640

08002648 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800264c:	2000      	movs	r0, #0
 800264e:	f00f f901 	bl	8011854 <BSP_PB_Callback>
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}

08002656 <MX_SAI1_Block_B_Init>:
  * @param  MXConfig SAI confiruration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_B_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b084      	sub	sp, #16
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002672:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.MonoStereoMode       = MXConfig->MonoStereoMode;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai->Init.AudioFrequency       = MXConfig->AudioFrequency;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	621a      	str	r2, [r3, #32]
  hsai->Init.AudioMode            = MXConfig->AudioMode;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider            = SAI_MASTERDIVIDER_ENABLE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol             = SAI_FREE_PROTOCOL;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.DataSize             = MXConfig->DataSize;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->Init.FirstBit             = SAI_FIRSTBIT_MSB;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->Init.ClockStrobing        = MXConfig->ClockStrobing;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->Init.Synchro              = MXConfig->Synchro;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive          = MXConfig->OutputDrive;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold        = SAI_FIFOTHRESHOLD_1QF;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt           = MXConfig->SynchroExt;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	69da      	ldr	r2, [r3, #28]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode       = SAI_NOCOMPANDING;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.TriState             = SAI_OUTPUT_NOTRELEASED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.Mckdiv               = 0;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai->Init.MckOutput            = SAI_MCK_OUTPUT_ENABLE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80026e4:	611a      	str	r2, [r3, #16]
  hsai->Init.MckOverSampling      = SAI_MCK_OVERSAMPLING_DISABLE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai->Init.PdmInit.Activation   = DISABLE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	6a1a      	ldr	r2, [r3, #32]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800270a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002718:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	669a      	str	r2, [r3, #104]	@ 0x68
  if ((MXConfig->DataSize == AUDIO_RESOLUTION_24B) || (MXConfig->DataSize == AUDIO_RESOLUTION_32B))
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b18      	cmp	r3, #24
 8002726:	d003      	beq.n	8002730 <MX_SAI1_Block_B_Init+0xda>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b20      	cmp	r3, #32
 800272e:	d103      	bne.n	8002738 <MX_SAI1_Block_B_Init+0xe2>
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_32B;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2280      	movs	r2, #128	@ 0x80
 8002734:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002736:	e002      	b.n	800273e <MX_SAI1_Block_B_Init+0xe8>
  }
  else
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_16B;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2240      	movs	r2, #64	@ 0x40
 800273c:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  hsai->SlotInit.SlotNumber         = 4;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2204      	movs	r2, #4
 8002742:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive         = MXConfig->SlotActive;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	675a      	str	r2, [r3, #116]	@ 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f00d f9f7 	bl	800fb40 <HAL_SAI_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_SAI1_Block_B_Init+0x106>
  {
    ret = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
  }
  __HAL_SAI_ENABLE(hsai);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800276a:	601a      	str	r2, [r3, #0]

  return ret;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <BSP_AUDIO_OUT_Play>:
  * @param  NbrOfBytes   Size of total samples in bytes
  *                      BitsPerSample: 16 or 32
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Play(uint32_t Instance, uint8_t* pData, uint32_t NbrOfBytes)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]

  if((Instance >= AUDIO_OUT_INSTANCES_NBR) || (((NbrOfBytes / (Audio_Out_Ctx[Instance].BitsPerSample/8U)) > 0xFFFFU)))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10f      	bne.n	80027ae <BSP_AUDIO_OUT_Play+0x36>
 800278e:	492d      	ldr	r1, [pc, #180]	@ (8002844 <BSP_AUDIO_OUT_Play+0xcc>)
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	330c      	adds	r3, #12
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	08db      	lsrs	r3, r3, #3
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ac:	d303      	bcc.n	80027b6 <BSP_AUDIO_OUT_Play+0x3e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80027ae:	f06f 0301 	mvn.w	r3, #1
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	e040      	b.n	8002838 <BSP_AUDIO_OUT_Play+0xc0>
  }
  else if (Audio_Out_Ctx[Instance].State != AUDIO_OUT_STATE_STOP)
 80027b6:	4923      	ldr	r1, [pc, #140]	@ (8002844 <BSP_AUDIO_OUT_Play+0xcc>)
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	331c      	adds	r3, #28
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d003      	beq.n	80027d4 <BSP_AUDIO_OUT_Play+0x5c>
  {
    ret = BSP_ERROR_BUSY;
 80027cc:	f06f 0302 	mvn.w	r3, #2
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	e031      	b.n	8002838 <BSP_AUDIO_OUT_Play+0xc0>
  }
  else if(HAL_SAI_Transmit_DMA(&haudio_out_sai, pData, (uint16_t)(NbrOfBytes /(Audio_Out_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 80027d4:	491b      	ldr	r1, [pc, #108]	@ (8002844 <BSP_AUDIO_OUT_Play+0xcc>)
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	330c      	adds	r3, #12
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	08db      	lsrs	r3, r3, #3
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	4814      	ldr	r0, [pc, #80]	@ (8002848 <BSP_AUDIO_OUT_Play+0xd0>)
 80027f6:	f00d fbc1 	bl	800ff7c <HAL_SAI_Transmit_DMA>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <BSP_AUDIO_OUT_Play+0x90>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8002800:	f06f 0303 	mvn.w	r3, #3
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	e017      	b.n	8002838 <BSP_AUDIO_OUT_Play+0xc0>
  }
  else if(Audio_Drv->Play(Audio_CompObj) < 0)
 8002808:	4b10      	ldr	r3, [pc, #64]	@ (800284c <BSP_AUDIO_OUT_Play+0xd4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	4a10      	ldr	r2, [pc, #64]	@ (8002850 <BSP_AUDIO_OUT_Play+0xd8>)
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	4610      	mov	r0, r2
 8002814:	4798      	blx	r3
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	da03      	bge.n	8002824 <BSP_AUDIO_OUT_Play+0xac>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800281c:	f06f 0304 	mvn.w	r3, #4
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e009      	b.n	8002838 <BSP_AUDIO_OUT_Play+0xc0>
  }
  else
  {
    /* Update BSP AUDIO OUT state */
    Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_PLAYING;
 8002824:	4907      	ldr	r1, [pc, #28]	@ (8002844 <BSP_AUDIO_OUT_Play+0xcc>)
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	331c      	adds	r3, #28
 8002834:	2201      	movs	r2, #1
 8002836:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 8002838:	697b      	ldr	r3, [r7, #20]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	240006e4 	.word	0x240006e4
 8002848:	2400064c 	.word	0x2400064c
 800284c:	24000af8 	.word	0x24000af8
 8002850:	24000648 	.word	0x24000648

08002854 <BSP_AUDIO_OUT_IRQHandler>:
  * @brief  This function handles Audio Out DMA interrupt requests.
  * @param  Instance Audio OUT instance
  * @retval None
  */
void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800285c:	4b04      	ldr	r3, [pc, #16]	@ (8002870 <BSP_AUDIO_OUT_IRQHandler+0x1c>)
 800285e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002862:	4618      	mov	r0, r3
 8002864:	f006 f9be 	bl	8008be4 <HAL_DMA_IRQHandler>
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	2400064c 	.word	0x2400064c

08002874 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h735g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack(0);
 800287c:	2000      	movs	r0, #0
 800287e:	f000 f825 	bl	80028cc <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h735g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack(0);
 8002892:	2000      	movs	r0, #0
 8002894:	f000 f824 	bl	80028e0 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a06      	ldr	r2, [pc, #24]	@ (80028c8 <HAL_SAI_ErrorCallback+0x28>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d103      	bne.n	80028ba <HAL_SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 80028b2:	2000      	movs	r0, #0
 80028b4:	f000 f81e 	bl	80028f4 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 80028b8:	e002      	b.n	80028c0 <HAL_SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 80028ba:	2000      	movs	r0, #0
 80028bc:	f002 f914 	bl	8004ae8 <BSP_AUDIO_IN_Error_CallBack>
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40015824 	.word	0x40015824

080028cc <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Manages the DMA full Transfer complete event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(uint32_t Instance)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(uint32_t Instance)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <WM8994_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t WM8994_Probe(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
  WM8994_IO_t              IOCtx;
  static WM8994_Object_t   WM8994Obj;
  uint32_t id;

  /* Configure the audio driver */
  IOCtx.Address     = AUDIO_I2C_ADDRESS;
 8002912:	2334      	movs	r3, #52	@ 0x34
 8002914:	81bb      	strh	r3, [r7, #12]
  IOCtx.Init        = BSP_I2C4_Init;
 8002916:	4b20      	ldr	r3, [pc, #128]	@ (8002998 <WM8994_Probe+0x90>)
 8002918:	607b      	str	r3, [r7, #4]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800291a:	4b20      	ldr	r3, [pc, #128]	@ (800299c <WM8994_Probe+0x94>)
 800291c:	60bb      	str	r3, [r7, #8]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 800291e:	4b20      	ldr	r3, [pc, #128]	@ (80029a0 <WM8994_Probe+0x98>)
 8002920:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8002922:	4b20      	ldr	r3, [pc, #128]	@ (80029a4 <WM8994_Probe+0x9c>)
 8002924:	613b      	str	r3, [r7, #16]
  IOCtx.GetTick     = BSP_GetTick;
 8002926:	4b20      	ldr	r3, [pc, #128]	@ (80029a8 <WM8994_Probe+0xa0>)
 8002928:	61bb      	str	r3, [r7, #24]

  if(WM8994_RegisterBusIO (&WM8994Obj, &IOCtx) != WM8994_OK)
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	4619      	mov	r1, r3
 800292e:	481f      	ldr	r0, [pc, #124]	@ (80029ac <WM8994_Probe+0xa4>)
 8002930:	f7ff fb70 	bl	8002014 <WM8994_RegisterBusIO>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <WM8994_Probe+0x3a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800293a:	f06f 0307 	mvn.w	r3, #7
 800293e:	61fb      	str	r3, [r7, #28]
 8002940:	e024      	b.n	800298c <WM8994_Probe+0x84>
  }
  else
  {
    /* Reset the codec */
    if(WM8994_Reset(&WM8994Obj) != WM8994_OK)
 8002942:	481a      	ldr	r0, [pc, #104]	@ (80029ac <WM8994_Probe+0xa4>)
 8002944:	f7ff fb4e 	bl	8001fe4 <WM8994_Reset>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <WM8994_Probe+0x4e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800294e:	f06f 0304 	mvn.w	r3, #4
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	e01a      	b.n	800298c <WM8994_Probe+0x84>
    }
    else if(WM8994_ReadID(&WM8994Obj, &id) != WM8994_OK)
 8002956:	463b      	mov	r3, r7
 8002958:	4619      	mov	r1, r3
 800295a:	4814      	ldr	r0, [pc, #80]	@ (80029ac <WM8994_Probe+0xa4>)
 800295c:	f7fe fd3d 	bl	80013da <WM8994_ReadID>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <WM8994_Probe+0x66>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002966:	f06f 0304 	mvn.w	r3, #4
 800296a:	61fb      	str	r3, [r7, #28]
 800296c:	e00e      	b.n	800298c <WM8994_Probe+0x84>
    }
    else if(id != WM8994_ID)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	f648 1294 	movw	r2, #35220	@ 0x8994
 8002974:	4293      	cmp	r3, r2
 8002976:	d003      	beq.n	8002980 <WM8994_Probe+0x78>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002978:	f06f 0306 	mvn.w	r3, #6
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	e005      	b.n	800298c <WM8994_Probe+0x84>
    }
    else
    {
      Audio_Drv = (AUDIO_Drv_t *) &WM8994_Driver;
 8002980:	4b0b      	ldr	r3, [pc, #44]	@ (80029b0 <WM8994_Probe+0xa8>)
 8002982:	4a0c      	ldr	r2, [pc, #48]	@ (80029b4 <WM8994_Probe+0xac>)
 8002984:	601a      	str	r2, [r3, #0]
      Audio_CompObj = &WM8994Obj;
 8002986:	4b0c      	ldr	r3, [pc, #48]	@ (80029b8 <WM8994_Probe+0xb0>)
 8002988:	4a08      	ldr	r2, [pc, #32]	@ (80029ac <WM8994_Probe+0xa4>)
 800298a:	601a      	str	r2, [r3, #0]
    }
  }
  return ret;
 800298c:	69fb      	ldr	r3, [r7, #28]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3720      	adds	r7, #32
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	08005099 	.word	0x08005099
 800299c:	0800510d 	.word	0x0800510d
 80029a0:	08005299 	.word	0x08005299
 80029a4:	0800523d 	.word	0x0800523d
 80029a8:	080052f5 	.word	0x080052f5
 80029ac:	24004da4 	.word	0x24004da4
 80029b0:	24000af8 	.word	0x24000af8
 80029b4:	24000400 	.word	0x24000400
 80029b8:	24000648 	.word	0x24000648

080029bc <SAI_MspInit>:
  * @brief  Initialize BSP_AUDIO_OUT MSP.
  * @param  hsai  SAI handle
  * @retval None
  */
static void SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b096      	sub	sp, #88	@ 0x58
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  static DMA_HandleTypeDef hdma_sai_tx, hdma_sai_rx;
    /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80029c4:	4b61      	ldr	r3, [pc, #388]	@ (8002b4c <SAI_MspInit+0x190>)
 80029c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029ca:	4a60      	ldr	r2, [pc, #384]	@ (8002b4c <SAI_MspInit+0x190>)
 80029cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029d4:	4b5d      	ldr	r3, [pc, #372]	@ (8002b4c <SAI_MspInit+0x190>)
 80029d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029de:	643b      	str	r3, [r7, #64]	@ 0x40
 80029e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 80029e2:	4b5a      	ldr	r3, [pc, #360]	@ (8002b4c <SAI_MspInit+0x190>)
 80029e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029e8:	4a58      	ldr	r2, [pc, #352]	@ (8002b4c <SAI_MspInit+0x190>)
 80029ea:	f043 0320 	orr.w	r3, r3, #32
 80029ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029f2:	4b56      	ldr	r3, [pc, #344]	@ (8002b4c <SAI_MspInit+0x190>)
 80029f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
  AUDIO_OUT_SAIx_SCK_ENABLE();
 8002a00:	4b52      	ldr	r3, [pc, #328]	@ (8002b4c <SAI_MspInit+0x190>)
 8002a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a06:	4a51      	ldr	r2, [pc, #324]	@ (8002b4c <SAI_MspInit+0x190>)
 8002a08:	f043 0320 	orr.w	r3, r3, #32
 8002a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a10:	4b4e      	ldr	r3, [pc, #312]	@ (8002b4c <SAI_MspInit+0x190>)
 8002a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
  AUDIO_OUT_SAIx_SD_ENABLE();
 8002a1e:	4b4b      	ldr	r3, [pc, #300]	@ (8002b4c <SAI_MspInit+0x190>)
 8002a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a24:	4a49      	ldr	r2, [pc, #292]	@ (8002b4c <SAI_MspInit+0x190>)
 8002a26:	f043 0320 	orr.w	r3, r3, #32
 8002a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a2e:	4b47      	ldr	r3, [pc, #284]	@ (8002b4c <SAI_MspInit+0x190>)
 8002a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  AUDIO_OUT_SAIx_FS_ENABLE();
 8002a3c:	4b43      	ldr	r3, [pc, #268]	@ (8002b4c <SAI_MspInit+0x190>)
 8002a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a42:	4a42      	ldr	r2, [pc, #264]	@ (8002b4c <SAI_MspInit+0x190>)
 8002a44:	f043 0320 	orr.w	r3, r3, #32
 8002a48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a4c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b4c <SAI_MspInit+0x190>)
 8002a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a52:	f003 0320 	and.w	r3, r3, #32
 8002a56:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8002a5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a5e:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002a60:	2302      	movs	r3, #2
 8002a62:	64bb      	str	r3, [r7, #72]	@ 0x48
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	653b      	str	r3, [r7, #80]	@ 0x50
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
 8002a6c:	2306      	movs	r3, #6
 8002a6e:	657b      	str	r3, [r7, #84]	@ 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8002a70:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a74:	4619      	mov	r1, r3
 8002a76:	4836      	ldr	r0, [pc, #216]	@ (8002b50 <SAI_MspInit+0x194>)
 8002a78:	f007 ff0c 	bl	800a894 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8002a7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a80:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8002a82:	2306      	movs	r3, #6
 8002a84:	657b      	str	r3, [r7, #84]	@ 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_GPIO_PORT, &gpio_init_structure);
 8002a86:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4830      	ldr	r0, [pc, #192]	@ (8002b50 <SAI_MspInit+0x194>)
 8002a8e:	f007 ff01 	bl	800a894 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8002a92:	2340      	movs	r3, #64	@ 0x40
 8002a94:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SD_AF;
 8002a96:	2306      	movs	r3, #6
 8002a98:	657b      	str	r3, [r7, #84]	@ 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002a9a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	482b      	ldr	r0, [pc, #172]	@ (8002b50 <SAI_MspInit+0x194>)
 8002aa2:	f007 fef7 	bl	800a894 <HAL_GPIO_Init>

    if(hsai->Instance != AUDIO_IN_SAI_PDMx)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a2a      	ldr	r2, [pc, #168]	@ (8002b54 <SAI_MspInit+0x198>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d01e      	beq.n	8002aee <SAI_MspInit+0x132>
    {
      if(haudio_in_sai[0].State != HAL_SAI_STATE_READY)
 8002ab0:	4b29      	ldr	r3, [pc, #164]	@ (8002b58 <SAI_MspInit+0x19c>)
 8002ab2:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d018      	beq.n	8002aee <SAI_MspInit+0x132>
      {
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 8002abc:	4b23      	ldr	r3, [pc, #140]	@ (8002b4c <SAI_MspInit+0x190>)
 8002abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ac2:	4a22      	ldr	r2, [pc, #136]	@ (8002b4c <SAI_MspInit+0x190>)
 8002ac4:	f043 0320 	orr.w	r3, r3, #32
 8002ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002acc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b4c <SAI_MspInit+0x190>)
 8002ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8002ada:	2380      	movs	r3, #128	@ 0x80
 8002adc:	647b      	str	r3, [r7, #68]	@ 0x44
        gpio_init_structure.Alternate = AUDIO_OUT_SAIx_MCLK_AF;
 8002ade:	2306      	movs	r3, #6
 8002ae0:	657b      	str	r3, [r7, #84]	@ 0x54
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8002ae2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4819      	ldr	r0, [pc, #100]	@ (8002b50 <SAI_MspInit+0x194>)
 8002aea:	f007 fed3 	bl	800a894 <HAL_GPIO_Init>
      }
    }

  if(hsai->Instance == AUDIO_OUT_SAIx)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b5c <SAI_MspInit+0x1a0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d16b      	bne.n	8002bd0 <SAI_MspInit+0x214>
  {
  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8002af8:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <SAI_MspInit+0x190>)
 8002afa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002afe:	4a13      	ldr	r2, [pc, #76]	@ (8002b4c <SAI_MspInit+0x190>)
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002b08:	4b10      	ldr	r3, [pc, #64]	@ (8002b4c <SAI_MspInit+0x190>)
 8002b0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Configure the hdma_saiTx handle parameters */
    hdma_sai_tx.Init.Request             = AUDIO_OUT_SAIx_DMAx_REQUEST;
 8002b16:	4b12      	ldr	r3, [pc, #72]	@ (8002b60 <SAI_MspInit+0x1a4>)
 8002b18:	2258      	movs	r2, #88	@ 0x58
 8002b1a:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002b1c:	4b10      	ldr	r3, [pc, #64]	@ (8002b60 <SAI_MspInit+0x1a4>)
 8002b1e:	2240      	movs	r2, #64	@ 0x40
 8002b20:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002b22:	4b0f      	ldr	r3, [pc, #60]	@ (8002b60 <SAI_MspInit+0x1a4>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002b28:	4b0d      	ldr	r3, [pc, #52]	@ (8002b60 <SAI_MspInit+0x1a4>)
 8002b2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b2e:	611a      	str	r2, [r3, #16]
    if (Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 8002b30:	4b0c      	ldr	r3, [pc, #48]	@ (8002b64 <SAI_MspInit+0x1a8>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b10      	cmp	r3, #16
 8002b36:	d117      	bne.n	8002b68 <SAI_MspInit+0x1ac>
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b38:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <SAI_MspInit+0x1a4>)
 8002b3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b3e:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8002b40:	4b07      	ldr	r3, [pc, #28]	@ (8002b60 <SAI_MspInit+0x1a4>)
 8002b42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b46:	619a      	str	r2, [r3, #24]
 8002b48:	e016      	b.n	8002b78 <SAI_MspInit+0x1bc>
 8002b4a:	bf00      	nop
 8002b4c:	58024400 	.word	0x58024400
 8002b50:	58021400 	.word	0x58021400
 8002b54:	58005404 	.word	0x58005404
 8002b58:	24000938 	.word	0x24000938
 8002b5c:	40015824 	.word	0x40015824
 8002b60:	24004dcc 	.word	0x24004dcc
 8002b64:	240006e4 	.word	0x240006e4
    }
    else /* AUDIO_RESOLUTION_32B */
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b68:	4b53      	ldr	r3, [pc, #332]	@ (8002cb8 <SAI_MspInit+0x2fc>)
 8002b6a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b6e:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002b70:	4b51      	ldr	r3, [pc, #324]	@ (8002cb8 <SAI_MspInit+0x2fc>)
 8002b72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b76:	619a      	str	r2, [r3, #24]
    }
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8002b78:	4b4f      	ldr	r3, [pc, #316]	@ (8002cb8 <SAI_MspInit+0x2fc>)
 8002b7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b7e:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002b80:	4b4d      	ldr	r3, [pc, #308]	@ (8002cb8 <SAI_MspInit+0x2fc>)
 8002b82:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b86:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8002b88:	4b4b      	ldr	r3, [pc, #300]	@ (8002cb8 <SAI_MspInit+0x2fc>)
 8002b8a:	2204      	movs	r2, #4
 8002b8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002cb8 <SAI_MspInit+0x2fc>)
 8002b90:	2203      	movs	r2, #3
 8002b92:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002b94:	4b48      	ldr	r3, [pc, #288]	@ (8002cb8 <SAI_MspInit+0x2fc>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8002b9a:	4b47      	ldr	r3, [pc, #284]	@ (8002cb8 <SAI_MspInit+0x2fc>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8002ba0:	4b45      	ldr	r3, [pc, #276]	@ (8002cb8 <SAI_MspInit+0x2fc>)
 8002ba2:	4a46      	ldr	r2, [pc, #280]	@ (8002cbc <SAI_MspInit+0x300>)
 8002ba4:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a43      	ldr	r2, [pc, #268]	@ (8002cb8 <SAI_MspInit+0x2fc>)
 8002baa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002bae:	4a42      	ldr	r2, [pc, #264]	@ (8002cb8 <SAI_MspInit+0x2fc>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_tx);
 8002bb4:	4840      	ldr	r0, [pc, #256]	@ (8002cb8 <SAI_MspInit+0x2fc>)
 8002bb6:	f005 fbf5 	bl	80083a4 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_tx);
 8002bba:	483f      	ldr	r0, [pc, #252]	@ (8002cb8 <SAI_MspInit+0x2fc>)
 8002bbc:	f005 f89a 	bl	8007cf4 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, BSP_AUDIO_OUT_IT_PRIORITY, 0);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	210e      	movs	r1, #14
 8002bc4:	2045      	movs	r0, #69	@ 0x45
 8002bc6:	f004 fc88 	bl	80074da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8002bca:	2045      	movs	r0, #69	@ 0x45
 8002bcc:	f004 fc9f 	bl	800750e <HAL_NVIC_EnableIRQ>
  }

  /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAIx)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a3a      	ldr	r2, [pc, #232]	@ (8002cc0 <SAI_MspInit+0x304>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	f040 809b 	bne.w	8002d12 <SAI_MspInit+0x356>
  {
    /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 8002bdc:	4b39      	ldr	r3, [pc, #228]	@ (8002cc4 <SAI_MspInit+0x308>)
 8002bde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002be2:	4a38      	ldr	r2, [pc, #224]	@ (8002cc4 <SAI_MspInit+0x308>)
 8002be4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002be8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002bec:	4b35      	ldr	r3, [pc, #212]	@ (8002cc4 <SAI_MspInit+0x308>)
 8002bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 8002bfa:	4b32      	ldr	r3, [pc, #200]	@ (8002cc4 <SAI_MspInit+0x308>)
 8002bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c00:	4a30      	ldr	r2, [pc, #192]	@ (8002cc4 <SAI_MspInit+0x308>)
 8002c02:	f043 0310 	orr.w	r3, r3, #16
 8002c06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c0a:	4b2e      	ldr	r3, [pc, #184]	@ (8002cc4 <SAI_MspInit+0x308>)
 8002c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	623b      	str	r3, [r7, #32]
 8002c16:	6a3b      	ldr	r3, [r7, #32]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8002c18:	2340      	movs	r3, #64	@ 0x40
 8002c1a:	647b      	str	r3, [r7, #68]	@ 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c24:	2302      	movs	r3, #2
 8002c26:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 8002c28:	2306      	movs	r3, #6
 8002c2a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002c2c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002c30:	4619      	mov	r1, r3
 8002c32:	4825      	ldr	r0, [pc, #148]	@ (8002cc8 <SAI_MspInit+0x30c>)
 8002c34:	f007 fe2e 	bl	800a894 <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8002c38:	4b22      	ldr	r3, [pc, #136]	@ (8002cc4 <SAI_MspInit+0x308>)
 8002c3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c3e:	4a21      	ldr	r2, [pc, #132]	@ (8002cc4 <SAI_MspInit+0x308>)
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002c48:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc4 <SAI_MspInit+0x308>)
 8002c4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	61fb      	str	r3, [r7, #28]
 8002c54:	69fb      	ldr	r3, [r7, #28]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Instance                 = AUDIO_IN_SAIx_DMAx_STREAM;
 8002c56:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <SAI_MspInit+0x310>)
 8002c58:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd0 <SAI_MspInit+0x314>)
 8002c5a:	601a      	str	r2, [r3, #0]
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAIx_DMAx_REQUEST;
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ccc <SAI_MspInit+0x310>)
 8002c5e:	2257      	movs	r2, #87	@ 0x57
 8002c60:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8002c62:	4b1a      	ldr	r3, [pc, #104]	@ (8002ccc <SAI_MspInit+0x310>)
 8002c64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c68:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002c6a:	4b18      	ldr	r3, [pc, #96]	@ (8002ccc <SAI_MspInit+0x310>)
 8002c6c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c70:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002c72:	4b16      	ldr	r3, [pc, #88]	@ (8002ccc <SAI_MspInit+0x310>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002c78:	4b14      	ldr	r3, [pc, #80]	@ (8002ccc <SAI_MspInit+0x310>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002c7e:	4b13      	ldr	r3, [pc, #76]	@ (8002ccc <SAI_MspInit+0x310>)
 8002c80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c84:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002c86:	4b11      	ldr	r3, [pc, #68]	@ (8002ccc <SAI_MspInit+0x310>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ccc <SAI_MspInit+0x310>)
 8002c8e:	2203      	movs	r2, #3
 8002c90:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002c92:	4b0e      	ldr	r3, [pc, #56]	@ (8002ccc <SAI_MspInit+0x310>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8002c98:	4b0c      	ldr	r3, [pc, #48]	@ (8002ccc <SAI_MspInit+0x310>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	631a      	str	r2, [r3, #48]	@ 0x30

    if(Audio_In_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 8002c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd4 <SAI_MspInit+0x318>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2b10      	cmp	r3, #16
 8002ca4:	d118      	bne.n	8002cd8 <SAI_MspInit+0x31c>
    {
      hdma_sai_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ca6:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <SAI_MspInit+0x310>)
 8002ca8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002cac:	615a      	str	r2, [r3, #20]
      hdma_sai_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8002cae:	4b07      	ldr	r3, [pc, #28]	@ (8002ccc <SAI_MspInit+0x310>)
 8002cb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cb4:	619a      	str	r2, [r3, #24]
 8002cb6:	e017      	b.n	8002ce8 <SAI_MspInit+0x32c>
 8002cb8:	24004dcc 	.word	0x24004dcc
 8002cbc:	400204a0 	.word	0x400204a0
 8002cc0:	40015804 	.word	0x40015804
 8002cc4:	58024400 	.word	0x58024400
 8002cc8:	58021000 	.word	0x58021000
 8002ccc:	24004e44 	.word	0x24004e44
 8002cd0:	40020470 	.word	0x40020470
 8002cd4:	24000a68 	.word	0x24000a68
    }
    else
    {
      hdma_sai_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cd8:	4b5f      	ldr	r3, [pc, #380]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002cda:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002cde:	615a      	str	r2, [r3, #20]
      hdma_sai_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002ce0:	4b5d      	ldr	r3, [pc, #372]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002ce2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ce6:	619a      	str	r2, [r3, #24]
    }

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a5b      	ldr	r2, [pc, #364]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002cf0:	4a59      	ldr	r2, [pc, #356]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_rx);
 8002cf6:	4858      	ldr	r0, [pc, #352]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002cf8:	f005 fb54 	bl	80083a4 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_rx);
 8002cfc:	4856      	ldr	r0, [pc, #344]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002cfe:	f004 fff9 	bl	8007cf4 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8002d02:	2200      	movs	r2, #0
 8002d04:	210f      	movs	r1, #15
 8002d06:	203c      	movs	r0, #60	@ 0x3c
 8002d08:	f004 fbe7 	bl	80074da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8002d0c:	203c      	movs	r0, #60	@ 0x3c
 8002d0e:	f004 fbfe 	bl	800750e <HAL_NVIC_EnableIRQ>
  }

  if(hsai->Instance == AUDIO_IN_SAI_PDMx)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a51      	ldr	r2, [pc, #324]	@ (8002e5c <SAI_MspInit+0x4a0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	f040 8099 	bne.w	8002e50 <SAI_MspInit+0x494>
  {
/* Enable SAI clock */
    AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 8002d1e:	4b50      	ldr	r3, [pc, #320]	@ (8002e60 <SAI_MspInit+0x4a4>)
 8002d20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d24:	4a4e      	ldr	r2, [pc, #312]	@ (8002e60 <SAI_MspInit+0x4a4>)
 8002d26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d2a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002d2e:	4b4c      	ldr	r3, [pc, #304]	@ (8002e60 <SAI_MspInit+0x4a4>)
 8002d30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	69bb      	ldr	r3, [r7, #24]

    AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 8002d3c:	4b48      	ldr	r3, [pc, #288]	@ (8002e60 <SAI_MspInit+0x4a4>)
 8002d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d42:	4a47      	ldr	r2, [pc, #284]	@ (8002e60 <SAI_MspInit+0x4a4>)
 8002d44:	f043 0310 	orr.w	r3, r3, #16
 8002d48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d4c:	4b44      	ldr	r3, [pc, #272]	@ (8002e60 <SAI_MspInit+0x4a4>)
 8002d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	697b      	ldr	r3, [r7, #20]
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pin       = AUDIO_IN_SAI_PDMx_DATA_IN_PIN;
 8002d62:	2310      	movs	r3, #16
 8002d64:	647b      	str	r3, [r7, #68]	@ 0x44
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_DATA_CLK_AF;
 8002d66:	230a      	movs	r3, #10
 8002d68:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_DATA_IN_PORT, &gpio_init_structure);
 8002d6a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002d6e:	4619      	mov	r1, r3
 8002d70:	483c      	ldr	r0, [pc, #240]	@ (8002e64 <SAI_MspInit+0x4a8>)
 8002d72:	f007 fd8f 	bl	800a894 <HAL_GPIO_Init>

    AUDIO_IN_SAI_PDMx_CLK_OUT_ENABLE();
 8002d76:	4b3a      	ldr	r3, [pc, #232]	@ (8002e60 <SAI_MspInit+0x4a4>)
 8002d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d7c:	4a38      	ldr	r2, [pc, #224]	@ (8002e60 <SAI_MspInit+0x4a4>)
 8002d7e:	f043 0310 	orr.w	r3, r3, #16
 8002d82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d86:	4b36      	ldr	r3, [pc, #216]	@ (8002e60 <SAI_MspInit+0x4a4>)
 8002d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d94:	2302      	movs	r3, #2
 8002d96:	64bb      	str	r3, [r7, #72]	@ 0x48
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pin       = AUDIO_IN_SAI_PDMx_CLK_OUT_PIN;
 8002da0:	2320      	movs	r3, #32
 8002da2:	647b      	str	r3, [r7, #68]	@ 0x44
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_DATA_CLK_AF;
 8002da4:	230a      	movs	r3, #10
 8002da6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_OUT_PORT, &gpio_init_structure);
 8002da8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002dac:	4619      	mov	r1, r3
 8002dae:	482d      	ldr	r0, [pc, #180]	@ (8002e64 <SAI_MspInit+0x4a8>)
 8002db0:	f007 fd70 	bl	800a894 <HAL_GPIO_Init>
    /* Enable the DMA clock */
    AUDIO_IN_SAI_PDMx_DMAx_CLK_ENABLE();
 8002db4:	4b2a      	ldr	r3, [pc, #168]	@ (8002e60 <SAI_MspInit+0x4a4>)
 8002db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dba:	4a29      	ldr	r2, [pc, #164]	@ (8002e60 <SAI_MspInit+0x4a4>)
 8002dbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dc4:	4b26      	ldr	r3, [pc, #152]	@ (8002e60 <SAI_MspInit+0x4a4>)
 8002dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 8002dd2:	4b21      	ldr	r3, [pc, #132]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002dd4:	220f      	movs	r2, #15
 8002dd6:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002dde:	4b1e      	ldr	r3, [pc, #120]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002de4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002de6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dea:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAI_PDMx_DMAx_PERIPH_DATA_SIZE;
 8002dec:	4b1a      	ldr	r3, [pc, #104]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAI_PDMx_DMAx_MEM_DATA_SIZE;
 8002df2:	4b19      	ldr	r3, [pc, #100]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8002df8:	4b17      	ldr	r3, [pc, #92]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002dfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dfe:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002e00:	4b15      	ldr	r3, [pc, #84]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002e02:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e06:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002e08:	4b13      	ldr	r3, [pc, #76]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002e0e:	4b12      	ldr	r3, [pc, #72]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002e10:	2203      	movs	r2, #3
 8002e12:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002e14:	4b10      	ldr	r3, [pc, #64]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 8002e20:	4b0d      	ldr	r3, [pc, #52]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002e22:	4a11      	ldr	r2, [pc, #68]	@ (8002e68 <SAI_MspInit+0x4ac>)
 8002e24:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a0b      	ldr	r2, [pc, #44]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002e2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8002e34:	4808      	ldr	r0, [pc, #32]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002e36:	f005 fab5 	bl	80083a4 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8002e3a:	4807      	ldr	r0, [pc, #28]	@ (8002e58 <SAI_MspInit+0x49c>)
 8002e3c:	f004 ff5a 	bl	8007cf4 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8002e40:	2200      	movs	r2, #0
 8002e42:	210f      	movs	r1, #15
 8002e44:	2082      	movs	r0, #130	@ 0x82
 8002e46:	f004 fb48 	bl	80074da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
 8002e4a:	2082      	movs	r0, #130	@ 0x82
 8002e4c:	f004 fb5f 	bl	800750e <HAL_NVIC_EnableIRQ>
  }
}
 8002e50:	bf00      	nop
 8002e52:	3758      	adds	r7, #88	@ 0x58
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	24004e44 	.word	0x24004e44
 8002e5c:	58005404 	.word	0x58005404
 8002e60:	58024400 	.word	0x58024400
 8002e64:	58021000 	.word	0x58021000
 8002e68:	5802541c 	.word	0x5802541c

08002e6c <BSP_AUDIO_IN_Init>:
  * @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM
  * @param  AudioInit Init structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 8002e6c:	b590      	push	{r4, r7, lr}
 8002e6e:	b0a9      	sub	sp, #164	@ 0xa4
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t ret = BSP_ERROR_NONE;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d905      	bls.n	8002e8e <BSP_AUDIO_IN_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002e82:	f06f 0301 	mvn.w	r3, #1
 8002e86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e8a:	f000 bc0b 	b.w	80036a4 <BSP_AUDIO_IN_Init+0x838>
  }
  else
  {
    /* Store the audio record context */
    Audio_In_Ctx[Instance].Device          = AudioInit->Device;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	6819      	ldr	r1, [r3, #0]
 8002e92:	489a      	ldr	r0, [pc, #616]	@ (80030fc <BSP_AUDIO_IN_Init+0x290>)
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4413      	add	r3, r2
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	4403      	add	r3, r0
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68d9      	ldr	r1, [r3, #12]
 8002ea8:	4894      	ldr	r0, [pc, #592]	@ (80030fc <BSP_AUDIO_IN_Init+0x290>)
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	4403      	add	r3, r0
 8002eb6:	3310      	adds	r3, #16
 8002eb8:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].SampleRate      = AudioInit->SampleRate;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6859      	ldr	r1, [r3, #4]
 8002ebe:	488f      	ldr	r0, [pc, #572]	@ (80030fc <BSP_AUDIO_IN_Init+0x290>)
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	4403      	add	r3, r0
 8002ecc:	3308      	adds	r3, #8
 8002ece:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	6899      	ldr	r1, [r3, #8]
 8002ed4:	4889      	ldr	r0, [pc, #548]	@ (80030fc <BSP_AUDIO_IN_Init+0x290>)
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4413      	add	r3, r2
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	4403      	add	r3, r0
 8002ee2:	330c      	adds	r3, #12
 8002ee4:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].Volume          = AudioInit->Volume;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6919      	ldr	r1, [r3, #16]
 8002eea:	4884      	ldr	r0, [pc, #528]	@ (80030fc <BSP_AUDIO_IN_Init+0x290>)
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4413      	add	r3, r2
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	4403      	add	r3, r0
 8002ef8:	3320      	adds	r3, #32
 8002efa:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].State           = AUDIO_IN_STATE_RESET;
 8002efc:	497f      	ldr	r1, [pc, #508]	@ (80030fc <BSP_AUDIO_IN_Init+0x290>)
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4413      	add	r3, r2
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	440b      	add	r3, r1
 8002f0a:	3324      	adds	r3, #36	@ 0x24
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]

    if(Instance == 0U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f040 80cc 	bne.w	80030b0 <BSP_AUDIO_IN_Init+0x244>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_in_sai[Instance], AudioInit->SampleRate) != HAL_OK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2298      	movs	r2, #152	@ 0x98
 8002f1c:	fb02 f303 	mul.w	r3, r2, r3
 8002f20:	4a77      	ldr	r2, [pc, #476]	@ (8003100 <BSP_AUDIO_IN_Init+0x294>)
 8002f22:	441a      	add	r2, r3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	f002 f860 	bl	8004ff0 <MX_SAI1_ClockConfig>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d004      	beq.n	8002f40 <BSP_AUDIO_IN_Init+0xd4>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 8002f36:	f06f 0308 	mvn.w	r3, #8
 8002f3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f3e:	e3a7      	b.n	8003690 <BSP_AUDIO_IN_Init+0x824>
      }
      else
      {
        haudio_in_sai[Instance].Instance    = AUDIO_IN_SAIx;
 8002f40:	4a6f      	ldr	r2, [pc, #444]	@ (8003100 <BSP_AUDIO_IN_Init+0x294>)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2198      	movs	r1, #152	@ 0x98
 8002f46:	fb01 f303 	mul.w	r3, r1, r3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	4a6d      	ldr	r2, [pc, #436]	@ (8003104 <BSP_AUDIO_IN_Init+0x298>)
 8002f4e:	601a      	str	r2, [r3, #0]
        haudio_out_sai.Instance   = AUDIO_OUT_SAIx;
 8002f50:	4b6d      	ldr	r3, [pc, #436]	@ (8003108 <BSP_AUDIO_IN_Init+0x29c>)
 8002f52:	4a6e      	ldr	r2, [pc, #440]	@ (800310c <BSP_AUDIO_IN_Init+0x2a0>)
 8002f54:	601a      	str	r2, [r3, #0]
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        SAI_MspInit(&haudio_in_sai[Instance]);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2298      	movs	r2, #152	@ 0x98
 8002f5a:	fb02 f303 	mul.w	r3, r2, r3
 8002f5e:	4a68      	ldr	r2, [pc, #416]	@ (8003100 <BSP_AUDIO_IN_Init+0x294>)
 8002f60:	4413      	add	r3, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fd2a 	bl	80029bc <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1) */
        if (ret == BSP_ERROR_NONE)
 8002f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f040 838f 	bne.w	8003690 <BSP_AUDIO_IN_Init+0x824>
        {
          MX_SAI_Config mx_config;

          /* Prepare haudio_in_sai handle */
          mx_config.AudioFrequency        = Audio_In_Ctx[Instance].SampleRate;
 8002f72:	4962      	ldr	r1, [pc, #392]	@ (80030fc <BSP_AUDIO_IN_Init+0x290>)
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	4413      	add	r3, r2
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	440b      	add	r3, r1
 8002f80:	3308      	adds	r3, #8
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60bb      	str	r3, [r7, #8]
          mx_config.AudioMode             = SAI_MODESLAVE_RX;
 8002f86:	2303      	movs	r3, #3
 8002f88:	60fb      	str	r3, [r7, #12]
          mx_config.ClockStrobing         = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
          mx_config.MonoStereoMode        = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d102      	bne.n	8002f9c <BSP_AUDIO_IN_Init+0x130>
 8002f96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f9a:	e000      	b.n	8002f9e <BSP_AUDIO_IN_Init+0x132>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
          mx_config.DataSize              = SAI_DATASIZE_16;
 8002fa0:	2380      	movs	r3, #128	@ 0x80
 8002fa2:	613b      	str	r3, [r7, #16]
          mx_config.FrameLength           = 128;
 8002fa4:	2380      	movs	r3, #128	@ 0x80
 8002fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
          mx_config.ActiveFrameLength     = 64;
 8002fa8:	2340      	movs	r3, #64	@ 0x40
 8002faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
          mx_config.OutputDrive           = SAI_OUTPUTDRIVE_ENABLE;
 8002fac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fb0:	623b      	str	r3, [r7, #32]
          mx_config.Synchro               = SAI_SYNCHRONOUS;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	61fb      	str	r3, [r7, #28]
          mx_config.SynchroExt            = SAI_SYNCEXT_DISABLE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	627b      	str	r3, [r7, #36]	@ 0x24
          mx_config.SlotActive            = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	633b      	str	r3, [r7, #48]	@ 0x30

          if(MX_SAI1_Block_A_Init(&haudio_in_sai[Instance], &mx_config) != HAL_OK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2298      	movs	r2, #152	@ 0x98
 8002fc2:	fb02 f303 	mul.w	r3, r2, r3
 8002fc6:	4a4e      	ldr	r2, [pc, #312]	@ (8003100 <BSP_AUDIO_IN_Init+0x294>)
 8002fc8:	4413      	add	r3, r2
 8002fca:	f107 0208 	add.w	r2, r7, #8
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fde6 	bl	8003ba2 <MX_SAI1_Block_A_Init>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <BSP_AUDIO_IN_Init+0x17a>
          {
            /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
            ret = BSP_ERROR_PERIPH_FAILURE;
 8002fdc:	f06f 0303 	mvn.w	r3, #3
 8002fe0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fe4:	e010      	b.n	8003008 <BSP_AUDIO_IN_Init+0x19c>
          }
          else
          {
            /* Prepare haudio_out_sai handle */
            mx_config.AudioMode         = SAI_MODEMASTER_TX;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
            mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]

            if(MX_SAI1_Block_B_Init(&haudio_out_sai, &mx_config) != HAL_OK)
 8002fee:	f107 0308 	add.w	r3, r7, #8
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4844      	ldr	r0, [pc, #272]	@ (8003108 <BSP_AUDIO_IN_Init+0x29c>)
 8002ff6:	f7ff fb2e 	bl	8002656 <MX_SAI1_Block_B_Init>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <BSP_AUDIO_IN_Init+0x19c>
            {
              /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
              ret = BSP_ERROR_PERIPH_FAILURE;
 8003000:	f06f 0303 	mvn.w	r3, #3
 8003004:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
              }
            }
          }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1) */
#if (USE_AUDIO_CODEC_WM8994 == 1)
          if (ret == BSP_ERROR_NONE)
 8003008:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800300c:	2b00      	cmp	r3, #0
 800300e:	f040 833f 	bne.w	8003690 <BSP_AUDIO_IN_Init+0x824>
          {
            WM8994_Init_t codec_init;

            /* Fill codec_init structure */
            codec_init.OutputDevice = (Audio_Out_Ctx[0].State == AUDIO_OUT_STATE_RESET) ? WM8994_OUT_NONE : WM8994_OUT_HEADPHONE;
 8003012:	4b3f      	ldr	r3, [pc, #252]	@ (8003110 <BSP_AUDIO_IN_Init+0x2a4>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <BSP_AUDIO_IN_Init+0x1b2>
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <BSP_AUDIO_IN_Init+0x1b4>
 800301e:	2302      	movs	r3, #2
 8003020:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            codec_init.Frequency    = AudioInit->SampleRate;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? WM8994_RESOLUTION_32b : WM8994_RESOLUTION_16b;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b20      	cmp	r3, #32
 8003032:	d101      	bne.n	8003038 <BSP_AUDIO_IN_Init+0x1cc>
 8003034:	2303      	movs	r3, #3
 8003036:	e000      	b.n	800303a <BSP_AUDIO_IN_Init+0x1ce>
 8003038:	2300      	movs	r3, #0
 800303a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            codec_init.InputDevice  = (AudioInit->Device == AUDIO_IN_DEVICE_ANALOG_MIC) ? WM8994_IN_LINE1 : WM8994_IN_MIC2;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <BSP_AUDIO_IN_Init+0x1de>
 8003046:	2303      	movs	r3, #3
 8003048:	e000      	b.n	800304c <BSP_AUDIO_IN_Init+0x1e0>
 800304a:	2302      	movs	r3, #2
 800304c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

            /* Convert volume before sending to the codec */
            codec_init.Volume       = VOLUME_IN_CONVERT(AudioInit->Volume);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	2b63      	cmp	r3, #99	@ 0x63
 8003056:	d80c      	bhi.n	8003072 <BSP_AUDIO_IN_Init+0x206>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	4613      	mov	r3, r2
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	4a2b      	ldr	r2, [pc, #172]	@ (8003114 <BSP_AUDIO_IN_Init+0x2a8>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	b2db      	uxtb	r3, r3
 8003070:	e000      	b.n	8003074 <BSP_AUDIO_IN_Init+0x208>
 8003072:	23ef      	movs	r3, #239	@ 0xef
 8003074:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            /* Initialize the codec internal registers */
            if(Audio_Drv->Init(Audio_CompObj, &codec_init) < 0)
 8003078:	4b27      	ldr	r3, [pc, #156]	@ (8003118 <BSP_AUDIO_IN_Init+0x2ac>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a27      	ldr	r2, [pc, #156]	@ (800311c <BSP_AUDIO_IN_Init+0x2b0>)
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 8003086:	4610      	mov	r0, r2
 8003088:	4798      	blx	r3
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	da04      	bge.n	800309a <BSP_AUDIO_IN_Init+0x22e>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8003090:	f06f 0304 	mvn.w	r3, #4
 8003094:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003098:	e2fa      	b.n	8003690 <BSP_AUDIO_IN_Init+0x824>
            }
            else
            {
              /* Update audio in context state */
              Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 800309a:	4918      	ldr	r1, [pc, #96]	@ (80030fc <BSP_AUDIO_IN_Init+0x290>)
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4413      	add	r3, r2
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	440b      	add	r3, r1
 80030a8:	3324      	adds	r3, #36	@ 0x24
 80030aa:	2202      	movs	r2, #2
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	e2ef      	b.n	8003690 <BSP_AUDIO_IN_Init+0x824>
          }
#endif  /*USE_AUDIO_CODEC_WM8994 == 1)*/
        }
      }
    }
    else if(Instance == 1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	f040 8095 	bne.w	80031e2 <BSP_AUDIO_IN_Init+0x376>
    {
      if(Audio_In_Ctx[Instance].Device != AUDIO_IN_DEVICE_DIGITAL_MIC1)
 80030b8:	4910      	ldr	r1, [pc, #64]	@ (80030fc <BSP_AUDIO_IN_Init+0x290>)
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	4413      	add	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	440b      	add	r3, r1
 80030c6:	3304      	adds	r3, #4
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b10      	cmp	r3, #16
 80030cc:	d004      	beq.n	80030d8 <BSP_AUDIO_IN_Init+0x26c>
      {
        ret = BSP_ERROR_WRONG_PARAM;
 80030ce:	f06f 0301 	mvn.w	r3, #1
 80030d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80030d6:	e2db      	b.n	8003690 <BSP_AUDIO_IN_Init+0x824>
      }
      else
      {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI4_ClockConfig(&haudio_in_sai[Instance], AudioInit->SampleRate) != HAL_OK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2298      	movs	r2, #152	@ 0x98
 80030dc:	fb02 f303 	mul.w	r3, r2, r3
 80030e0:	4a07      	ldr	r2, [pc, #28]	@ (8003100 <BSP_AUDIO_IN_Init+0x294>)
 80030e2:	441a      	add	r2, r3
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f001 ff90 	bl	8005010 <MX_SAI4_ClockConfig>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d014      	beq.n	8003120 <BSP_AUDIO_IN_Init+0x2b4>
      {
        return BSP_ERROR_CLOCK_FAILURE;
 80030f6:	f06f 0308 	mvn.w	r3, #8
 80030fa:	e2d5      	b.n	80036a8 <BSP_AUDIO_IN_Init+0x83c>
 80030fc:	24000a68 	.word	0x24000a68
 8003100:	24000938 	.word	0x24000938
 8003104:	40015804 	.word	0x40015804
 8003108:	2400064c 	.word	0x2400064c
 800310c:	40015824 	.word	0x40015824
 8003110:	240006e4 	.word	0x240006e4
 8003114:	51eb851f 	.word	0x51eb851f
 8003118:	24000af8 	.word	0x24000af8
 800311c:	24000648 	.word	0x24000648
      }
      haudio_in_sai[Instance].Instance = AUDIO_IN_SAI_PDMx;
 8003120:	4aa6      	ldr	r2, [pc, #664]	@ (80033bc <BSP_AUDIO_IN_Init+0x550>)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2198      	movs	r1, #152	@ 0x98
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	4413      	add	r3, r2
 800312c:	4aa4      	ldr	r2, [pc, #656]	@ (80033c0 <BSP_AUDIO_IN_Init+0x554>)
 800312e:	601a      	str	r2, [r3, #0]
        {
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      SAI_MspInit(&haudio_in_sai[Instance]);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2298      	movs	r2, #152	@ 0x98
 8003134:	fb02 f303 	mul.w	r3, r2, r3
 8003138:	4aa0      	ldr	r2, [pc, #640]	@ (80033bc <BSP_AUDIO_IN_Init+0x550>)
 800313a:	4413      	add	r3, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff fc3d 	bl	80029bc <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
      MX_SAI_Config mx_config;

      /* Prepare haudio_in_sai handle */
      mx_config.MonoStereoMode    = SAI_STEREOMODE;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
      mx_config.DataSize          = SAI_DATASIZE_8;
 8003146:	2340      	movs	r3, #64	@ 0x40
 8003148:	613b      	str	r3, [r7, #16]
      mx_config.FrameLength       = 32;
 800314a:	2320      	movs	r3, #32
 800314c:	62bb      	str	r3, [r7, #40]	@ 0x28
      mx_config.ActiveFrameLength = 1;
 800314e:	2301      	movs	r3, #1
 8003150:	62fb      	str	r3, [r7, #44]	@ 0x2c
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_DISABLE;
 8003152:	2300      	movs	r3, #0
 8003154:	623b      	str	r3, [r7, #32]
      mx_config.SlotActive        = SAI_SLOTACTIVE_2;
 8003156:	2304      	movs	r3, #4
 8003158:	633b      	str	r3, [r7, #48]	@ 0x30
      mx_config.AudioFrequency    = Audio_In_Ctx[Instance].SampleRate*16;
 800315a:	499a      	ldr	r1, [pc, #616]	@ (80033c4 <BSP_AUDIO_IN_Init+0x558>)
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	440b      	add	r3, r1
 8003168:	3308      	adds	r3, #8
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	60bb      	str	r3, [r7, #8]
      mx_config.AudioMode         = SAI_MODEMASTER_RX;
 8003170:	2301      	movs	r3, #1
 8003172:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003174:	2300      	movs	r3, #0
 8003176:	61bb      	str	r3, [r7, #24]
      mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8003178:	2300      	movs	r3, #0
 800317a:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	@ 0x24

      if(MX_SAI4_Block_A_Init(&haudio_in_sai[Instance], &mx_config) != HAL_OK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2298      	movs	r2, #152	@ 0x98
 8003184:	fb02 f303 	mul.w	r3, r2, r3
 8003188:	4a8c      	ldr	r2, [pc, #560]	@ (80033bc <BSP_AUDIO_IN_Init+0x550>)
 800318a:	4413      	add	r3, r2
 800318c:	f107 0208 	add.w	r2, r7, #8
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fd8d 	bl	8003cb2 <MX_SAI4_Block_A_Init>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <BSP_AUDIO_IN_Init+0x338>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 800319e:	f06f 0303 	mvn.w	r3, #3
 80031a2:	e281      	b.n	80036a8 <BSP_AUDIO_IN_Init+0x83c>
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
#if (USE_BSP_PDM_LIB_FEATURE > 0U)
      if(BSP_AUDIO_IN_PDMToPCM_Init(Instance, AudioInit->SampleRate, Audio_In_Ctx[Instance].ChannelsNbr, Audio_In_Ctx[Instance].ChannelsNbr) != BSP_ERROR_NONE)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	4886      	ldr	r0, [pc, #536]	@ (80033c4 <BSP_AUDIO_IN_Init+0x558>)
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4413      	add	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	4403      	add	r3, r0
 80031b6:	3310      	adds	r3, #16
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	4c82      	ldr	r4, [pc, #520]	@ (80033c4 <BSP_AUDIO_IN_Init+0x558>)
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	4423      	add	r3, r4
 80031c8:	3310      	adds	r3, #16
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4602      	mov	r2, r0
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fdf4 	bl	8003dbc <BSP_AUDIO_IN_PDMToPCM_Init>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 825a 	beq.w	8003690 <BSP_AUDIO_IN_Init+0x824>
      {
        return BSP_ERROR_NO_INIT;
 80031dc:	f04f 33ff 	mov.w	r3, #4294967295
 80031e0:	e262      	b.n	80036a8 <BSP_AUDIO_IN_Init+0x83c>
#endif
    }
    }
    else /* (Instance == 2U) */
    {
      DFSDM_Filter_TypeDef* FilterInstnace[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_FILTER, AUDIO_DFSDMx_MIC2_FILTER,AUDIO_DFSDMx_MIC3_FILTER,AUDIO_DFSDMx_MIC4_FILTER};
 80031e2:	4b79      	ldr	r3, [pc, #484]	@ (80033c8 <BSP_AUDIO_IN_Init+0x55c>)
 80031e4:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80031e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      DFSDM_Channel_TypeDef* ChannelInstance[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_CHANNEL, AUDIO_DFSDMx_MIC2_CHANNEL,AUDIO_DFSDMx_MIC3_CHANNEL,AUDIO_DFSDMx_MIC4_CHANNEL};
 80031ee:	4b77      	ldr	r3, [pc, #476]	@ (80033cc <BSP_AUDIO_IN_Init+0x560>)
 80031f0:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 80031f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t DigitalMicPins[DFSDM_MIC_NUMBER] = {DFSDM_CHANNEL_SAME_CHANNEL_PINS, DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS, DFSDM_CHANNEL_SAME_CHANNEL_PINS, DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS};
 80031fa:	4b75      	ldr	r3, [pc, #468]	@ (80033d0 <BSP_AUDIO_IN_Init+0x564>)
 80031fc:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8003200:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003202:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t DigitalMicType[DFSDM_MIC_NUMBER] = {DFSDM_CHANNEL_SPI_RISING, DFSDM_CHANNEL_SPI_FALLING, DFSDM_CHANNEL_SPI_RISING, DFSDM_CHANNEL_SPI_FALLING};
 8003206:	4b73      	ldr	r3, [pc, #460]	@ (80033d4 <BSP_AUDIO_IN_Init+0x568>)
 8003208:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800320c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800320e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t Channel4Filter[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_CHANNEL_FOR_FILTER, AUDIO_DFSDMx_MIC2_CHANNEL_FOR_FILTER,AUDIO_DFSDMx_MIC3_CHANNEL_FOR_FILTER,AUDIO_DFSDMx_MIC4_CHANNEL_FOR_FILTER};
 8003212:	4b71      	ldr	r3, [pc, #452]	@ (80033d8 <BSP_AUDIO_IN_Init+0x56c>)
 8003214:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8003218:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800321a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      MX_DFSDM_Config dfsdm_config;

      /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_DFSDM1_ClockConfig(&haudio_in_dfsdm_channel[0], AudioInit->SampleRate) != HAL_OK)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4619      	mov	r1, r3
 8003224:	486d      	ldr	r0, [pc, #436]	@ (80033dc <BSP_AUDIO_IN_Init+0x570>)
 8003226:	f000 fc15 	bl	8003a54 <MX_DFSDM1_ClockConfig>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <BSP_AUDIO_IN_Init+0x3cc>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 8003230:	f06f 0308 	mvn.w	r3, #8
 8003234:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      }

      if(ret == BSP_ERROR_NONE)
 8003238:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800323c:	2b00      	cmp	r3, #0
 800323e:	f040 8227 	bne.w	8003690 <BSP_AUDIO_IN_Init+0x824>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        DFSDM_FilterMspInit(&haudio_in_dfsdm_filter[1]);
 8003242:	4867      	ldr	r0, [pc, #412]	@ (80033e0 <BSP_AUDIO_IN_Init+0x574>)
 8003244:	f001 fcfe 	bl	8004c44 <DFSDM_FilterMspInit>
        DFSDM_ChannelMspInit(&haudio_in_dfsdm_channel[1]);
 8003248:	4866      	ldr	r0, [pc, #408]	@ (80033e4 <BSP_AUDIO_IN_Init+0x578>)
 800324a:	f001 fc57 	bl	8004afc <DFSDM_ChannelMspInit>
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1) */
        if(ret == BSP_ERROR_NONE)
 800324e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003252:	2b00      	cmp	r3, #0
 8003254:	f040 821c 	bne.w	8003690 <BSP_AUDIO_IN_Init+0x824>
        {
          for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 8003258:	2300      	movs	r3, #0
 800325a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800325e:	e210      	b.n	8003682 <BSP_AUDIO_IN_Init+0x816>
          {
            dfsdm_config.FilterInstance  = FilterInstnace[i];
 8003260:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	33a0      	adds	r3, #160	@ 0xa0
 8003268:	443b      	add	r3, r7
 800326a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800326e:	60bb      	str	r3, [r7, #8]
            dfsdm_config.ChannelInstance = ChannelInstance[i];
 8003270:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	33a0      	adds	r3, #160	@ 0xa0
 8003278:	443b      	add	r3, r7
 800327a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800327e:	61bb      	str	r3, [r7, #24]
            dfsdm_config.DigitalMicPins  = DigitalMicPins[i];
 8003280:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	33a0      	adds	r3, #160	@ 0xa0
 8003288:	443b      	add	r3, r7
 800328a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800328e:	61fb      	str	r3, [r7, #28]
            dfsdm_config.DigitalMicType  = DigitalMicType[i];
 8003290:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	33a0      	adds	r3, #160	@ 0xa0
 8003298:	443b      	add	r3, r7
 800329a:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 800329e:	623b      	str	r3, [r7, #32]
            dfsdm_config.Channel4Filter  = Channel4Filter[i];
 80032a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	33a0      	adds	r3, #160	@ 0xa0
 80032a8:	443b      	add	r3, r7
 80032aa:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 80032ae:	627b      	str	r3, [r7, #36]	@ 0x24
            dfsdm_config.RegularTrigger  = DFSDM_FILTER_SW_TRIGGER;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
            /* MIC2, MIC3 and MIC4 should be synchronized to MIC1 if it's used */
            if((i >= 1U) && (i < 4U) && ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1))
 80032b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d012      	beq.n	80032e2 <BSP_AUDIO_IN_Init+0x476>
 80032bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d80e      	bhi.n	80032e2 <BSP_AUDIO_IN_Init+0x476>
 80032c4:	493f      	ldr	r1, [pc, #252]	@ (80033c4 <BSP_AUDIO_IN_Init+0x558>)
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	440b      	add	r3, r1
 80032d2:	3304      	adds	r3, #4
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <BSP_AUDIO_IN_Init+0x476>
            {
              dfsdm_config.RegularTrigger = DFSDM_FILTER_SYNC_TRIGGER;
 80032de:	2301      	movs	r3, #1
 80032e0:	60fb      	str	r3, [r7, #12]
            }
            dfsdm_config.SincOrder       = DFSDM_FILTER_ORDER(Audio_In_Ctx[Instance].SampleRate);
 80032e2:	4938      	ldr	r1, [pc, #224]	@ (80033c4 <BSP_AUDIO_IN_Init+0x558>)
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	440b      	add	r3, r1
 80032f0:	3308      	adds	r3, #8
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80032f8:	d076      	beq.n	80033e8 <BSP_AUDIO_IN_Init+0x57c>
 80032fa:	4932      	ldr	r1, [pc, #200]	@ (80033c4 <BSP_AUDIO_IN_Init+0x558>)
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	4413      	add	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	440b      	add	r3, r1
 8003308:	3308      	adds	r3, #8
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003310:	4293      	cmp	r3, r2
 8003312:	d050      	beq.n	80033b6 <BSP_AUDIO_IN_Init+0x54a>
 8003314:	492b      	ldr	r1, [pc, #172]	@ (80033c4 <BSP_AUDIO_IN_Init+0x558>)
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	440b      	add	r3, r1
 8003322:	3308      	adds	r3, #8
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800332a:	d041      	beq.n	80033b0 <BSP_AUDIO_IN_Init+0x544>
 800332c:	4925      	ldr	r1, [pc, #148]	@ (80033c4 <BSP_AUDIO_IN_Init+0x558>)
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	440b      	add	r3, r1
 800333a:	3308      	adds	r3, #8
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003342:	4293      	cmp	r3, r2
 8003344:	d031      	beq.n	80033aa <BSP_AUDIO_IN_Init+0x53e>
 8003346:	491f      	ldr	r1, [pc, #124]	@ (80033c4 <BSP_AUDIO_IN_Init+0x558>)
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	440b      	add	r3, r1
 8003354:	3308      	adds	r3, #8
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800335c:	d022      	beq.n	80033a4 <BSP_AUDIO_IN_Init+0x538>
 800335e:	4919      	ldr	r1, [pc, #100]	@ (80033c4 <BSP_AUDIO_IN_Init+0x558>)
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4413      	add	r3, r2
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	440b      	add	r3, r1
 800336c:	3308      	adds	r3, #8
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003374:	4293      	cmp	r3, r2
 8003376:	d012      	beq.n	800339e <BSP_AUDIO_IN_Init+0x532>
 8003378:	4912      	ldr	r1, [pc, #72]	@ (80033c4 <BSP_AUDIO_IN_Init+0x558>)
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	4413      	add	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	440b      	add	r3, r1
 8003386:	3308      	adds	r3, #8
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800338e:	4293      	cmp	r3, r2
 8003390:	d102      	bne.n	8003398 <BSP_AUDIO_IN_Init+0x52c>
 8003392:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003396:	e029      	b.n	80033ec <BSP_AUDIO_IN_Init+0x580>
 8003398:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
 800339c:	e026      	b.n	80033ec <BSP_AUDIO_IN_Init+0x580>
 800339e:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80033a2:	e023      	b.n	80033ec <BSP_AUDIO_IN_Init+0x580>
 80033a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80033a8:	e020      	b.n	80033ec <BSP_AUDIO_IN_Init+0x580>
 80033aa:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80033ae:	e01d      	b.n	80033ec <BSP_AUDIO_IN_Init+0x580>
 80033b0:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80033b4:	e01a      	b.n	80033ec <BSP_AUDIO_IN_Init+0x580>
 80033b6:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80033ba:	e017      	b.n	80033ec <BSP_AUDIO_IN_Init+0x580>
 80033bc:	24000938 	.word	0x24000938
 80033c0:	58005404 	.word	0x58005404
 80033c4:	24000a68 	.word	0x24000a68
 80033c8:	08015830 	.word	0x08015830
 80033cc:	08015840 	.word	0x08015840
 80033d0:	08015850 	.word	0x08015850
 80033d4:	08015860 	.word	0x08015860
 80033d8:	08015870 	.word	0x08015870
 80033dc:	24000858 	.word	0x24000858
 80033e0:	2400075c 	.word	0x2400075c
 80033e4:	24000890 	.word	0x24000890
 80033e8:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80033ec:	613b      	str	r3, [r7, #16]
            dfsdm_config.Oversampling    = DFSDM_OVER_SAMPLING(Audio_In_Ctx[Instance].SampleRate);
 80033ee:	49b0      	ldr	r1, [pc, #704]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4413      	add	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	440b      	add	r3, r1
 80033fc:	3308      	adds	r3, #8
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8003404:	d05a      	beq.n	80034bc <BSP_AUDIO_IN_Init+0x650>
 8003406:	49aa      	ldr	r1, [pc, #680]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	4413      	add	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	440b      	add	r3, r1
 8003414:	3308      	adds	r3, #8
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800341c:	4293      	cmp	r3, r2
 800341e:	d04a      	beq.n	80034b6 <BSP_AUDIO_IN_Init+0x64a>
 8003420:	49a3      	ldr	r1, [pc, #652]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4413      	add	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	440b      	add	r3, r1
 800342e:	3308      	adds	r3, #8
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003436:	d03c      	beq.n	80034b2 <BSP_AUDIO_IN_Init+0x646>
 8003438:	499d      	ldr	r1, [pc, #628]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4413      	add	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	440b      	add	r3, r1
 8003446:	3308      	adds	r3, #8
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f245 6222 	movw	r2, #22050	@ 0x5622
 800344e:	4293      	cmp	r3, r2
 8003450:	d02d      	beq.n	80034ae <BSP_AUDIO_IN_Init+0x642>
 8003452:	4997      	ldr	r1, [pc, #604]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	440b      	add	r3, r1
 8003460:	3308      	adds	r3, #8
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003468:	d01f      	beq.n	80034aa <BSP_AUDIO_IN_Init+0x63e>
 800346a:	4991      	ldr	r1, [pc, #580]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4413      	add	r3, r2
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	440b      	add	r3, r1
 8003478:	3308      	adds	r3, #8
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003480:	4293      	cmp	r3, r2
 8003482:	d010      	beq.n	80034a6 <BSP_AUDIO_IN_Init+0x63a>
 8003484:	498a      	ldr	r1, [pc, #552]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	4413      	add	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	440b      	add	r3, r1
 8003492:	3308      	adds	r3, #8
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800349a:	4293      	cmp	r3, r2
 800349c:	d101      	bne.n	80034a2 <BSP_AUDIO_IN_Init+0x636>
 800349e:	2320      	movs	r3, #32
 80034a0:	e00e      	b.n	80034c0 <BSP_AUDIO_IN_Init+0x654>
 80034a2:	2310      	movs	r3, #16
 80034a4:	e00c      	b.n	80034c0 <BSP_AUDIO_IN_Init+0x654>
 80034a6:	2340      	movs	r3, #64	@ 0x40
 80034a8:	e00a      	b.n	80034c0 <BSP_AUDIO_IN_Init+0x654>
 80034aa:	2340      	movs	r3, #64	@ 0x40
 80034ac:	e008      	b.n	80034c0 <BSP_AUDIO_IN_Init+0x654>
 80034ae:	2380      	movs	r3, #128	@ 0x80
 80034b0:	e006      	b.n	80034c0 <BSP_AUDIO_IN_Init+0x654>
 80034b2:	2380      	movs	r3, #128	@ 0x80
 80034b4:	e004      	b.n	80034c0 <BSP_AUDIO_IN_Init+0x654>
 80034b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034ba:	e001      	b.n	80034c0 <BSP_AUDIO_IN_Init+0x654>
 80034bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034c0:	617b      	str	r3, [r7, #20]
            dfsdm_config.ClockDivider    = DFSDM_CLOCK_DIVIDER(Audio_In_Ctx[Instance].SampleRate);
 80034c2:	497b      	ldr	r1, [pc, #492]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4413      	add	r3, r2
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	440b      	add	r3, r1
 80034d0:	3308      	adds	r3, #8
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80034d8:	d04a      	beq.n	8003570 <BSP_AUDIO_IN_Init+0x704>
 80034da:	4975      	ldr	r1, [pc, #468]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4413      	add	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	440b      	add	r3, r1
 80034e8:	3308      	adds	r3, #8
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d03b      	beq.n	800356c <BSP_AUDIO_IN_Init+0x700>
 80034f4:	496e      	ldr	r1, [pc, #440]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4413      	add	r3, r2
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	440b      	add	r3, r1
 8003502:	3308      	adds	r3, #8
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800350a:	d02d      	beq.n	8003568 <BSP_AUDIO_IN_Init+0x6fc>
 800350c:	4968      	ldr	r1, [pc, #416]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4413      	add	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	440b      	add	r3, r1
 800351a:	3308      	adds	r3, #8
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003522:	4293      	cmp	r3, r2
 8003524:	d01e      	beq.n	8003564 <BSP_AUDIO_IN_Init+0x6f8>
 8003526:	4962      	ldr	r1, [pc, #392]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	440b      	add	r3, r1
 8003534:	3308      	adds	r3, #8
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800353c:	d010      	beq.n	8003560 <BSP_AUDIO_IN_Init+0x6f4>
 800353e:	495c      	ldr	r1, [pc, #368]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	440b      	add	r3, r1
 800354c:	3308      	adds	r3, #8
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003554:	4293      	cmp	r3, r2
 8003556:	d101      	bne.n	800355c <BSP_AUDIO_IN_Init+0x6f0>
 8003558:	2304      	movs	r3, #4
 800355a:	e00a      	b.n	8003572 <BSP_AUDIO_IN_Init+0x706>
 800355c:	2320      	movs	r3, #32
 800355e:	e008      	b.n	8003572 <BSP_AUDIO_IN_Init+0x706>
 8003560:	2318      	movs	r3, #24
 8003562:	e006      	b.n	8003572 <BSP_AUDIO_IN_Init+0x706>
 8003564:	2304      	movs	r3, #4
 8003566:	e004      	b.n	8003572 <BSP_AUDIO_IN_Init+0x706>
 8003568:	2318      	movs	r3, #24
 800356a:	e002      	b.n	8003572 <BSP_AUDIO_IN_Init+0x706>
 800356c:	2304      	movs	r3, #4
 800356e:	e000      	b.n	8003572 <BSP_AUDIO_IN_Init+0x706>
 8003570:	2318      	movs	r3, #24
 8003572:	62bb      	str	r3, [r7, #40]	@ 0x28
            dfsdm_config.RightBitShift   = DFSDM_MIC_BIT_SHIFT(Audio_In_Ctx[Instance].SampleRate);
 8003574:	494e      	ldr	r1, [pc, #312]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	4413      	add	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	440b      	add	r3, r1
 8003582:	3308      	adds	r3, #8
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800358a:	d04a      	beq.n	8003622 <BSP_AUDIO_IN_Init+0x7b6>
 800358c:	4948      	ldr	r1, [pc, #288]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4413      	add	r3, r2
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	440b      	add	r3, r1
 800359a:	3308      	adds	r3, #8
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d03b      	beq.n	800361e <BSP_AUDIO_IN_Init+0x7b2>
 80035a6:	4942      	ldr	r1, [pc, #264]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	440b      	add	r3, r1
 80035b4:	3308      	adds	r3, #8
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80035bc:	d02d      	beq.n	800361a <BSP_AUDIO_IN_Init+0x7ae>
 80035be:	493c      	ldr	r1, [pc, #240]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	4413      	add	r3, r2
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	440b      	add	r3, r1
 80035cc:	3308      	adds	r3, #8
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f245 6222 	movw	r2, #22050	@ 0x5622
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d01e      	beq.n	8003616 <BSP_AUDIO_IN_Init+0x7aa>
 80035d8:	4935      	ldr	r1, [pc, #212]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4413      	add	r3, r2
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	440b      	add	r3, r1
 80035e6:	3308      	adds	r3, #8
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80035ee:	d010      	beq.n	8003612 <BSP_AUDIO_IN_Init+0x7a6>
 80035f0:	492f      	ldr	r1, [pc, #188]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	4413      	add	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	440b      	add	r3, r1
 80035fe:	3308      	adds	r3, #8
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <BSP_AUDIO_IN_Init+0x7a2>
 800360a:	2300      	movs	r3, #0
 800360c:	e00a      	b.n	8003624 <BSP_AUDIO_IN_Init+0x7b8>
 800360e:	2302      	movs	r3, #2
 8003610:	e008      	b.n	8003624 <BSP_AUDIO_IN_Init+0x7b8>
 8003612:	2306      	movs	r3, #6
 8003614:	e006      	b.n	8003624 <BSP_AUDIO_IN_Init+0x7b8>
 8003616:	2303      	movs	r3, #3
 8003618:	e004      	b.n	8003624 <BSP_AUDIO_IN_Init+0x7b8>
 800361a:	2303      	movs	r3, #3
 800361c:	e002      	b.n	8003624 <BSP_AUDIO_IN_Init+0x7b8>
 800361e:	2306      	movs	r3, #6
 8003620:	e000      	b.n	8003624 <BSP_AUDIO_IN_Init+0x7b8>
 8003622:	2305      	movs	r3, #5
 8003624:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if(((AudioInit->Device >> i) & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800362e:	fa22 f303 	lsr.w	r3, r2, r3
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b00      	cmp	r3, #0
 8003638:	d01a      	beq.n	8003670 <BSP_AUDIO_IN_Init+0x804>
            {
              /* Default configuration of DFSDM filters and channels */
              if(MX_DFSDM1_Init(&haudio_in_dfsdm_filter[i], &haudio_in_dfsdm_channel[i], &dfsdm_config) != HAL_OK)
 800363a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800363e:	2254      	movs	r2, #84	@ 0x54
 8003640:	fb02 f303 	mul.w	r3, r2, r3
 8003644:	4a1b      	ldr	r2, [pc, #108]	@ (80036b4 <BSP_AUDIO_IN_Init+0x848>)
 8003646:	1898      	adds	r0, r3, r2
 8003648:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4a18      	ldr	r2, [pc, #96]	@ (80036b8 <BSP_AUDIO_IN_Init+0x84c>)
 8003656:	4413      	add	r3, r2
 8003658:	f107 0208 	add.w	r2, r7, #8
 800365c:	4619      	mov	r1, r3
 800365e:	f000 fa21 	bl	8003aa4 <MX_DFSDM1_Init>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <BSP_AUDIO_IN_Init+0x804>
              {
                /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
                ret = BSP_ERROR_PERIPH_FAILURE;
 8003668:	f06f 0303 	mvn.w	r3, #3
 800366c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                  ret = BSP_ERROR_PERIPH_FAILURE;
                }
              }
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1) */
            }
            if(ret != BSP_ERROR_NONE)
 8003670:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <BSP_AUDIO_IN_Init+0x822>
          for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 8003678:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800367c:	3301      	adds	r3, #1
 800367e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003682:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003686:	2b03      	cmp	r3, #3
 8003688:	f67f adea 	bls.w	8003260 <BSP_AUDIO_IN_Init+0x3f4>
 800368c:	e000      	b.n	8003690 <BSP_AUDIO_IN_Init+0x824>
            {
              break;
 800368e:	bf00      	nop
        }
      }
    }

    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 8003690:	4907      	ldr	r1, [pc, #28]	@ (80036b0 <BSP_AUDIO_IN_Init+0x844>)
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4413      	add	r3, r2
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	440b      	add	r3, r1
 800369e:	3324      	adds	r3, #36	@ 0x24
 80036a0:	2202      	movs	r2, #2
 80036a2:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 80036a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	37a4      	adds	r7, #164	@ 0xa4
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd90      	pop	{r4, r7, pc}
 80036b0:	24000a68 	.word	0x24000a68
 80036b4:	24000708 	.word	0x24000708
 80036b8:	24000858 	.word	0x24000858

080036bc <BSP_AUDIO_IN_OUT_Init_Ex>:
  * @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM
  * @param  AudioInit Init structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_OUT_Init_Ex(uint32_t InstanceIn, uint32_t InstanceOut, BSP_AUDIO_Init_t* AudioInitIn, BSP_AUDIO_Init_t* AudioInitOut)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	@ 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	@ 0x24

  if(InstanceIn >= AUDIO_IN_INSTANCES_NBR || InstanceOut >= AUDIO_IN_INSTANCES_NBR)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d802      	bhi.n	80036da <BSP_AUDIO_IN_OUT_Init_Ex+0x1e>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d903      	bls.n	80036e2 <BSP_AUDIO_IN_OUT_Init_Ex+0x26>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80036da:	f06f 0301 	mvn.w	r3, #1
 80036de:	627b      	str	r3, [r7, #36]	@ 0x24
 80036e0:	e1a2      	b.n	8003a28 <BSP_AUDIO_IN_OUT_Init_Ex+0x36c>
  }
  else
  {
    /* Store the audio record context */
    Audio_In_Ctx[InstanceIn].Device          = AudioInitIn->Device;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6819      	ldr	r1, [r3, #0]
 80036e6:	4853      	ldr	r0, [pc, #332]	@ (8003834 <BSP_AUDIO_IN_OUT_Init_Ex+0x178>)
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	4403      	add	r3, r0
 80036f4:	3304      	adds	r3, #4
 80036f6:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[InstanceIn].ChannelsNbr     = AudioInitIn->ChannelsNbr;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68d9      	ldr	r1, [r3, #12]
 80036fc:	484d      	ldr	r0, [pc, #308]	@ (8003834 <BSP_AUDIO_IN_OUT_Init_Ex+0x178>)
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4613      	mov	r3, r2
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	4413      	add	r3, r2
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	4403      	add	r3, r0
 800370a:	3310      	adds	r3, #16
 800370c:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[InstanceIn].SampleRate      = AudioInitIn->SampleRate;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6859      	ldr	r1, [r3, #4]
 8003712:	4848      	ldr	r0, [pc, #288]	@ (8003834 <BSP_AUDIO_IN_OUT_Init_Ex+0x178>)
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	4403      	add	r3, r0
 8003720:	3308      	adds	r3, #8
 8003722:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[InstanceIn].BitsPerSample   = AudioInitIn->BitsPerSample;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6899      	ldr	r1, [r3, #8]
 8003728:	4842      	ldr	r0, [pc, #264]	@ (8003834 <BSP_AUDIO_IN_OUT_Init_Ex+0x178>)
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4613      	mov	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4413      	add	r3, r2
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	4403      	add	r3, r0
 8003736:	330c      	adds	r3, #12
 8003738:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[InstanceIn].Volume          = AudioInitIn->Volume;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6919      	ldr	r1, [r3, #16]
 800373e:	483d      	ldr	r0, [pc, #244]	@ (8003834 <BSP_AUDIO_IN_OUT_Init_Ex+0x178>)
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4613      	mov	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	4413      	add	r3, r2
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	4403      	add	r3, r0
 800374c:	3320      	adds	r3, #32
 800374e:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[InstanceIn].State           = AUDIO_IN_STATE_RESET;
 8003750:	4938      	ldr	r1, [pc, #224]	@ (8003834 <BSP_AUDIO_IN_OUT_Init_Ex+0x178>)
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4613      	mov	r3, r2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4413      	add	r3, r2
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	440b      	add	r3, r1
 800375e:	3324      	adds	r3, #36	@ 0x24
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
    
    Audio_Out_Ctx[InstanceOut].Device          = AudioInitOut->Device;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	6819      	ldr	r1, [r3, #0]
 8003768:	4833      	ldr	r0, [pc, #204]	@ (8003838 <BSP_AUDIO_IN_OUT_Init_Ex+0x17c>)
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4403      	add	r3, r0
 8003776:	3304      	adds	r3, #4
 8003778:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[InstanceOut].ChannelsNbr     = AudioInitOut->ChannelsNbr;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68d9      	ldr	r1, [r3, #12]
 800377e:	482e      	ldr	r0, [pc, #184]	@ (8003838 <BSP_AUDIO_IN_OUT_Init_Ex+0x17c>)
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	4613      	mov	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4403      	add	r3, r0
 800378c:	3314      	adds	r3, #20
 800378e:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[InstanceOut].SampleRate      = AudioInitOut->SampleRate;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	4828      	ldr	r0, [pc, #160]	@ (8003838 <BSP_AUDIO_IN_OUT_Init_Ex+0x17c>)
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	4613      	mov	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4403      	add	r3, r0
 80037a2:	3308      	adds	r3, #8
 80037a4:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[InstanceOut].BitsPerSample   = AudioInitOut->BitsPerSample;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	6899      	ldr	r1, [r3, #8]
 80037aa:	4823      	ldr	r0, [pc, #140]	@ (8003838 <BSP_AUDIO_IN_OUT_Init_Ex+0x17c>)
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4403      	add	r3, r0
 80037b8:	330c      	adds	r3, #12
 80037ba:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[InstanceOut].Volume          = AudioInitOut->Volume;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	6919      	ldr	r1, [r3, #16]
 80037c0:	481d      	ldr	r0, [pc, #116]	@ (8003838 <BSP_AUDIO_IN_OUT_Init_Ex+0x17c>)
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	4613      	mov	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4403      	add	r3, r0
 80037ce:	3310      	adds	r3, #16
 80037d0:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[InstanceOut].State           = AUDIO_IN_STATE_RESET;
 80037d2:	4919      	ldr	r1, [pc, #100]	@ (8003838 <BSP_AUDIO_IN_OUT_Init_Ex+0x17c>)
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	4613      	mov	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	331c      	adds	r3, #28
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
    
    #if (USE_AUDIO_CODEC_WM8994 == 1)
    if (Audio_In_Ctx[0].State == AUDIO_IN_STATE_RESET)
 80037e6:	4b13      	ldr	r3, [pc, #76]	@ (8003834 <BSP_AUDIO_IN_OUT_Init_Ex+0x178>)
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d107      	bne.n	80037fe <BSP_AUDIO_IN_OUT_Init_Ex+0x142>
    {
      if(WM8994_Probe() != BSP_ERROR_NONE)
 80037ee:	f7ff f88b 	bl	8002908 <WM8994_Probe>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <BSP_AUDIO_IN_OUT_Init_Ex+0x142>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80037f8:	f06f 0304 	mvn.w	r3, #4
 80037fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
#endif

    if(InstanceOut == 0U && InstanceIn == 0)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	f040 8105 	bne.w	8003a10 <BSP_AUDIO_IN_OUT_Init_Ex+0x354>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	f040 8101 	bne.w	8003a10 <BSP_AUDIO_IN_OUT_Init_Ex+0x354>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_in_sai[InstanceIn], AudioInitIn->SampleRate) != HAL_OK)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2298      	movs	r2, #152	@ 0x98
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	4a09      	ldr	r2, [pc, #36]	@ (800383c <BSP_AUDIO_IN_OUT_Init_Ex+0x180>)
 8003818:	441a      	add	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4619      	mov	r1, r3
 8003820:	4610      	mov	r0, r2
 8003822:	f001 fbe5 	bl	8004ff0 <MX_SAI1_ClockConfig>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d009      	beq.n	8003840 <BSP_AUDIO_IN_OUT_Init_Ex+0x184>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 800382c:	f06f 0308 	mvn.w	r3, #8
 8003830:	627b      	str	r3, [r7, #36]	@ 0x24
      if(MX_SAI1_ClockConfig(&haudio_in_sai[InstanceIn], AudioInitIn->SampleRate) != HAL_OK)
 8003832:	e0f8      	b.n	8003a26 <BSP_AUDIO_IN_OUT_Init_Ex+0x36a>
 8003834:	24000a68 	.word	0x24000a68
 8003838:	240006e4 	.word	0x240006e4
 800383c:	24000938 	.word	0x24000938
      }
      else
      {
        haudio_in_sai[InstanceIn].Instance    = AUDIO_IN_SAIx;
 8003840:	4a7c      	ldr	r2, [pc, #496]	@ (8003a34 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2198      	movs	r1, #152	@ 0x98
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	4413      	add	r3, r2
 800384c:	4a7a      	ldr	r2, [pc, #488]	@ (8003a38 <BSP_AUDIO_IN_OUT_Init_Ex+0x37c>)
 800384e:	601a      	str	r2, [r3, #0]
        haudio_out_sai.Instance   = AUDIO_OUT_SAIx;
 8003850:	4b7a      	ldr	r3, [pc, #488]	@ (8003a3c <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003852:	4a7b      	ldr	r2, [pc, #492]	@ (8003a40 <BSP_AUDIO_IN_OUT_Init_Ex+0x384>)
 8003854:	601a      	str	r2, [r3, #0]
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        SAI_MspInit(&haudio_in_sai[InstanceIn]);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2298      	movs	r2, #152	@ 0x98
 800385a:	fb02 f303 	mul.w	r3, r2, r3
 800385e:	4a75      	ldr	r2, [pc, #468]	@ (8003a34 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 8003860:	4413      	add	r3, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff f8aa 	bl	80029bc <SAI_MspInit>
        SAI_MspInit(&haudio_out_sai);
 8003868:	4874      	ldr	r0, [pc, #464]	@ (8003a3c <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 800386a:	f7ff f8a7 	bl	80029bc <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1) */
        if (ret == BSP_ERROR_NONE)
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	2b00      	cmp	r3, #0
 8003872:	f040 80d8 	bne.w	8003a26 <BSP_AUDIO_IN_OUT_Init_Ex+0x36a>
        {
          __HAL_SAI_RESET_HANDLE_STATE(&haudio_in_sai[InstanceIn]);
 8003876:	4a6f      	ldr	r2, [pc, #444]	@ (8003a34 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2198      	movs	r1, #152	@ 0x98
 800387c:	fb01 f303 	mul.w	r3, r1, r3
 8003880:	4413      	add	r3, r2
 8003882:	3391      	adds	r3, #145	@ 0x91
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
          
          haudio_in_sai[InstanceIn].Instance = SAI1_Block_A;
 8003888:	4a6a      	ldr	r2, [pc, #424]	@ (8003a34 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2198      	movs	r1, #152	@ 0x98
 800388e:	fb01 f303 	mul.w	r3, r1, r3
 8003892:	4413      	add	r3, r2
 8003894:	4a68      	ldr	r2, [pc, #416]	@ (8003a38 <BSP_AUDIO_IN_OUT_Init_Ex+0x37c>)
 8003896:	601a      	str	r2, [r3, #0]
          haudio_in_sai[InstanceIn].Init.AudioMode = SAI_MODESLAVE_RX;
 8003898:	4a66      	ldr	r2, [pc, #408]	@ (8003a34 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2198      	movs	r1, #152	@ 0x98
 800389e:	fb01 f303 	mul.w	r3, r1, r3
 80038a2:	4413      	add	r3, r2
 80038a4:	3304      	adds	r3, #4
 80038a6:	2203      	movs	r2, #3
 80038a8:	601a      	str	r2, [r3, #0]
          haudio_in_sai[InstanceIn].Init.Synchro = SAI_SYNCHRONOUS;
 80038aa:	4a62      	ldr	r2, [pc, #392]	@ (8003a34 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2198      	movs	r1, #152	@ 0x98
 80038b0:	fb01 f303 	mul.w	r3, r1, r3
 80038b4:	4413      	add	r3, r2
 80038b6:	3308      	adds	r3, #8
 80038b8:	2201      	movs	r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
          haudio_in_sai[InstanceIn].Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80038bc:	4a5d      	ldr	r2, [pc, #372]	@ (8003a34 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2198      	movs	r1, #152	@ 0x98
 80038c2:	fb01 f303 	mul.w	r3, r1, r3
 80038c6:	4413      	add	r3, r2
 80038c8:	3314      	adds	r3, #20
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
          haudio_in_sai[InstanceIn].Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;//SAI_FIFOTHRESHOLD_1QF;
 80038ce:	4a59      	ldr	r2, [pc, #356]	@ (8003a34 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2198      	movs	r1, #152	@ 0x98
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	4413      	add	r3, r2
 80038da:	331c      	adds	r3, #28
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
          haudio_in_sai[InstanceIn].Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80038e0:	4a54      	ldr	r2, [pc, #336]	@ (8003a34 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2198      	movs	r1, #152	@ 0x98
 80038e6:	fb01 f303 	mul.w	r3, r1, r3
 80038ea:	4413      	add	r3, r2
 80038ec:	330c      	adds	r3, #12
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
          haudio_in_sai[InstanceIn].Init.MonoStereoMode = SAI_STEREOMODE;
 80038f2:	4a50      	ldr	r2, [pc, #320]	@ (8003a34 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2198      	movs	r1, #152	@ 0x98
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	4413      	add	r3, r2
 80038fe:	332c      	adds	r3, #44	@ 0x2c
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
          haudio_in_sai[InstanceIn].Init.CompandingMode = SAI_NOCOMPANDING;
 8003904:	4a4b      	ldr	r2, [pc, #300]	@ (8003a34 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2198      	movs	r1, #152	@ 0x98
 800390a:	fb01 f303 	mul.w	r3, r1, r3
 800390e:	4413      	add	r3, r2
 8003910:	3330      	adds	r3, #48	@ 0x30
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
          haudio_in_sai[InstanceIn].Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003916:	4a47      	ldr	r2, [pc, #284]	@ (8003a34 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2198      	movs	r1, #152	@ 0x98
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	4413      	add	r3, r2
 8003922:	3334      	adds	r3, #52	@ 0x34
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
          if (HAL_SAI_InitProtocol(&haudio_in_sai[InstanceIn], SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2298      	movs	r2, #152	@ 0x98
 800392c:	fb02 f303 	mul.w	r3, r2, r3
 8003930:	4a40      	ldr	r2, [pc, #256]	@ (8003a34 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 8003932:	1898      	adds	r0, r3, r2
 8003934:	2302      	movs	r3, #2
 8003936:	2200      	movs	r2, #0
 8003938:	2100      	movs	r1, #0
 800393a:	f00c f8cf 	bl	800fadc <HAL_SAI_InitProtocol>
          {
          // Error_Handler();
          }
          
          __HAL_SAI_RESET_HANDLE_STATE(&haudio_out_sai);
 800393e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a3c <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
          haudio_out_sai.Instance = SAI1_Block_B;
 8003946:	4b3d      	ldr	r3, [pc, #244]	@ (8003a3c <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003948:	4a3d      	ldr	r2, [pc, #244]	@ (8003a40 <BSP_AUDIO_IN_OUT_Init_Ex+0x384>)
 800394a:	601a      	str	r2, [r3, #0]
          haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 800394c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a3c <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 800394e:	2200      	movs	r2, #0
 8003950:	605a      	str	r2, [r3, #4]
          haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8003952:	4b3a      	ldr	r3, [pc, #232]	@ (8003a3c <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
          haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8003958:	4b38      	ldr	r3, [pc, #224]	@ (8003a3c <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 800395a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800395e:	615a      	str	r2, [r3, #20]
          haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003960:	4b36      	ldr	r3, [pc, #216]	@ (8003a3c <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003962:	2200      	movs	r2, #0
 8003964:	619a      	str	r2, [r3, #24]
          haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;//SAI_FIFOTHRESHOLD_1QF;
 8003966:	4b35      	ldr	r3, [pc, #212]	@ (8003a3c <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003968:	2200      	movs	r2, #0
 800396a:	61da      	str	r2, [r3, #28]
          haudio_out_sai.Init.AudioFrequency = AudioInitOut->SampleRate;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	4a32      	ldr	r2, [pc, #200]	@ (8003a3c <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003972:	6213      	str	r3, [r2, #32]
          haudio_out_sai.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003974:	4b31      	ldr	r3, [pc, #196]	@ (8003a3c <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003976:	2200      	movs	r2, #0
 8003978:	60da      	str	r2, [r3, #12]
          haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 800397a:	4b30      	ldr	r3, [pc, #192]	@ (8003a3c <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 800397c:	2200      	movs	r2, #0
 800397e:	62da      	str	r2, [r3, #44]	@ 0x2c
          haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8003980:	4b2e      	ldr	r3, [pc, #184]	@ (8003a3c <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003982:	2200      	movs	r2, #0
 8003984:	631a      	str	r2, [r3, #48]	@ 0x30
          haudio_out_sai.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003986:	4b2d      	ldr	r3, [pc, #180]	@ (8003a3c <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003988:	2200      	movs	r2, #0
 800398a:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_SAI_InitProtocol(&haudio_out_sai, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800398c:	2302      	movs	r3, #2
 800398e:	2200      	movs	r2, #0
 8003990:	2100      	movs	r1, #0
 8003992:	482a      	ldr	r0, [pc, #168]	@ (8003a3c <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003994:	f00c f8a2 	bl	800fadc <HAL_SAI_InitProtocol>
          {
            //Error_Handler();
          }
          __HAL_SAI_ENABLE(&haudio_out_sai);
 8003998:	4b28      	ldr	r3, [pc, #160]	@ (8003a3c <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	4b27      	ldr	r3, [pc, #156]	@ (8003a3c <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80039a6:	601a      	str	r2, [r3, #0]

#if (USE_AUDIO_CODEC_WM8994 == 1)
          if (ret == BSP_ERROR_NONE)
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d13b      	bne.n	8003a26 <BSP_AUDIO_IN_OUT_Init_Ex+0x36a>
          {          
            WM8994_Init_t codec_init;

            /* Fill codec_init structure */
            codec_init.OutputDevice = WM8994_OUT_HEADPHONE;//(Audio_Out_Ctx[0].State == AUDIO_OUT_STATE_RESET) ? WM8994_OUT_NONE : WM8994_OUT_HEADPHONE;
 80039ae:	2302      	movs	r3, #2
 80039b0:	617b      	str	r3, [r7, #20]
            codec_init.Frequency    = AudioInitOut->SampleRate;//Audio_Out_Ctx[0].SampleRate;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	61bb      	str	r3, [r7, #24]
            codec_init.Resolution   = WM8994_RESOLUTION_16b; //(Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_32B) ? WM8994_RESOLUTION_32b : WM8994_RESOLUTION_16b;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61fb      	str	r3, [r7, #28]
            codec_init.InputDevice  = WM8994_IN_LINE1;//(Audio_In_Ctx[0].Device == AUDIO_IN_DEVICE_ANALOG_MIC) ? WM8994_IN_LINE1 : WM8994_IN_MIC2;
 80039bc:	2303      	movs	r3, #3
 80039be:	613b      	str	r3, [r7, #16]

            /* Convert volume before sending to the codec */
            codec_init.Volume       = (Audio_In_Ctx[0].Volume);
 80039c0:	4b20      	ldr	r3, [pc, #128]	@ (8003a44 <BSP_AUDIO_IN_OUT_Init_Ex+0x388>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	623b      	str	r3, [r7, #32]
            if(Audio_Drv->Init(Audio_CompObj, &codec_init) < 0)
 80039c6:	4b20      	ldr	r3, [pc, #128]	@ (8003a48 <BSP_AUDIO_IN_OUT_Init_Ex+0x38c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a1f      	ldr	r2, [pc, #124]	@ (8003a4c <BSP_AUDIO_IN_OUT_Init_Ex+0x390>)
 80039ce:	6812      	ldr	r2, [r2, #0]
 80039d0:	f107 0110 	add.w	r1, r7, #16
 80039d4:	4610      	mov	r0, r2
 80039d6:	4798      	blx	r3
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	da03      	bge.n	80039e6 <BSP_AUDIO_IN_OUT_Init_Ex+0x32a>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80039de:	f06f 0304 	mvn.w	r3, #4
 80039e2:	627b      	str	r3, [r7, #36]	@ 0x24
      if(MX_SAI1_ClockConfig(&haudio_in_sai[InstanceIn], AudioInitIn->SampleRate) != HAL_OK)
 80039e4:	e01f      	b.n	8003a26 <BSP_AUDIO_IN_OUT_Init_Ex+0x36a>
            }
            else
            {
              /* Update audio in context state */
              Audio_In_Ctx[InstanceIn].State = AUDIO_IN_STATE_STOP;
 80039e6:	4917      	ldr	r1, [pc, #92]	@ (8003a44 <BSP_AUDIO_IN_OUT_Init_Ex+0x388>)
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4613      	mov	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	440b      	add	r3, r1
 80039f4:	3324      	adds	r3, #36	@ 0x24
 80039f6:	2202      	movs	r2, #2
 80039f8:	601a      	str	r2, [r3, #0]
              Audio_Out_Ctx[InstanceOut].State = AUDIO_IN_STATE_STOP;
 80039fa:	4915      	ldr	r1, [pc, #84]	@ (8003a50 <BSP_AUDIO_IN_OUT_Init_Ex+0x394>)
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	331c      	adds	r3, #28
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	601a      	str	r2, [r3, #0]
      if(MX_SAI1_ClockConfig(&haudio_in_sai[InstanceIn], AudioInitIn->SampleRate) != HAL_OK)
 8003a0e:	e00a      	b.n	8003a26 <BSP_AUDIO_IN_OUT_Init_Ex+0x36a>
          }
#endif  /*USE_AUDIO_CODEC_WM8994 == 1)*/
        }
      }
    }
    else if(InstanceOut == 0U && InstanceIn == 1)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d108      	bne.n	8003a28 <BSP_AUDIO_IN_OUT_Init_Ex+0x36c>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d105      	bne.n	8003a28 <BSP_AUDIO_IN_OUT_Init_Ex+0x36c>
    {
      BSP_AUDIO_IN_Init(InstanceIn, AudioInitIn);
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f7ff fa24 	bl	8002e6c <BSP_AUDIO_IN_Init>
 8003a24:	e000      	b.n	8003a28 <BSP_AUDIO_IN_OUT_Init_Ex+0x36c>
      if(MX_SAI1_ClockConfig(&haudio_in_sai[InstanceIn], AudioInitIn->SampleRate) != HAL_OK)
 8003a26:	bf00      	nop
//    /* Update BSP AUDIO IN state */
//    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
  }

  /* Return BSP status */
  return ret;
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3728      	adds	r7, #40	@ 0x28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	24000938 	.word	0x24000938
 8003a38:	40015804 	.word	0x40015804
 8003a3c:	2400064c 	.word	0x2400064c
 8003a40:	40015824 	.word	0x40015824
 8003a44:	24000a68 	.word	0x24000a68
 8003a48:	24000af8 	.word	0x24000af8
 8003a4c:	24000648 	.word	0x24000648
 8003a50:	240006e4 	.word	0x240006e4

08003a54 <MX_DFSDM1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DFSDM1_ClockConfig(DFSDM_Channel_HandleTypeDef *hDfsdmChannel, uint32_t SampleRate)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b0b0      	sub	sp, #192	@ 0xc0
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmChannel);

  HAL_StatusTypeDef ret = HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003a64:	f107 0308 	add.w	r3, r7, #8
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f00a fd4f 	bl	800e50c <HAL_RCCEx_GetPeriphCLKConfig>

  /* Configure the PLL2 according to the requested audio frequency if not already done by other instances */
  if ((Audio_Out_Ctx[0].State == AUDIO_OUT_STATE_RESET) && (Audio_In_Ctx[0].State == AUDIO_IN_STATE_RESET))
 8003a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a98 <MX_DFSDM1_ClockConfig+0x44>)
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10a      	bne.n	8003a8c <MX_DFSDM1_ClockConfig+0x38>
 8003a76:	4b09      	ldr	r3, [pc, #36]	@ (8003a9c <MX_DFSDM1_ClockConfig+0x48>)
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <MX_DFSDM1_ClockConfig+0x38>
  {
    ret = MX_SAI1_ClockConfig(&haudio_in_sai[0], SampleRate);
 8003a7e:	6839      	ldr	r1, [r7, #0]
 8003a80:	4807      	ldr	r0, [pc, #28]	@ (8003aa0 <MX_DFSDM1_ClockConfig+0x4c>)
 8003a82:	f001 fab5 	bl	8004ff0 <MX_SAI1_ClockConfig>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
  }

  return ret;
 8003a8c:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	37c0      	adds	r7, #192	@ 0xc0
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	240006e4 	.word	0x240006e4
 8003a9c:	24000a68 	.word	0x24000a68
 8003aa0:	24000938 	.word	0x24000938

08003aa4 <MX_DFSDM1_Init>:
  *           1MHZ < CLK(micro) < 3.2MHZ (TYP 2.4MHZ for MP34DT01TR)
  *         - Oversampling = CLK(input DFSDM)/(Clock_Divider * AudioFreq)
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DFSDM1_Init(DFSDM_Filter_HandleTypeDef *hDfsdmFilter, DFSDM_Channel_HandleTypeDef *hDfsdmChannel, MX_DFSDM_Config *MXConfig)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  /* MIC filters  initialization */
  hDfsdmFilter->Instance                          = MXConfig->FilterInstance;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	601a      	str	r2, [r3, #0]
  hDfsdmFilter->Init.RegularParam.Trigger         = MXConfig->RegularTrigger;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	605a      	str	r2, [r3, #4]
  hDfsdmFilter->Init.RegularParam.FastMode        = ENABLE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	721a      	strb	r2, [r3, #8]
  hDfsdmFilter->Init.RegularParam.DmaMode         = ENABLE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	725a      	strb	r2, [r3, #9]
  hDfsdmFilter->Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	60da      	str	r2, [r3, #12]
  hDfsdmFilter->Init.InjectedParam.ScanMode       = DISABLE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	741a      	strb	r2, [r3, #16]
  hDfsdmFilter->Init.InjectedParam.DmaMode        = DISABLE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	745a      	strb	r2, [r3, #17]
  hDfsdmFilter->Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM8_TRGO;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ae4:	615a      	str	r2, [r3, #20]
  hDfsdmFilter->Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_BOTH_EDGES;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8003aec:	619a      	str	r2, [r3, #24]
  hDfsdmFilter->Init.FilterParam.SincOrder        = MXConfig->SincOrder;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	61da      	str	r2, [r3, #28]
  hDfsdmFilter->Init.FilterParam.Oversampling     = MXConfig->Oversampling;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	621a      	str	r2, [r3, #32]
  hDfsdmFilter->Init.FilterParam.IntOversampling  = 1;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	625a      	str	r2, [r3, #36]	@ 0x24

  if(HAL_DFSDM_FilterInit(hDfsdmFilter) != HAL_OK)
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f003 fe6b 	bl	80077e0 <HAL_DFSDM_FilterInit>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <MX_DFSDM1_Init+0x70>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e042      	b.n	8003b9a <MX_DFSDM1_Init+0xf6>
  }

  /* MIC channels initialization */
  hDfsdmChannel->Instance                      = MXConfig->ChannelInstance;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	601a      	str	r2, [r3, #0]
  hDfsdmChannel->Init.OutputClock.Activation   = ENABLE;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	711a      	strb	r2, [r3, #4]
  hDfsdmChannel->Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b28:	609a      	str	r2, [r3, #8]
  hDfsdmChannel->Init.OutputClock.Divider      = MXConfig->ClockDivider;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1a      	ldr	r2, [r3, #32]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	60da      	str	r2, [r3, #12]
  hDfsdmChannel->Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2200      	movs	r2, #0
 8003b36:	611a      	str	r2, [r3, #16]
  hDfsdmChannel->Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	615a      	str	r2, [r3, #20]
  hDfsdmChannel->Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2204      	movs	r2, #4
 8003b42:	621a      	str	r2, [r3, #32]
  hDfsdmChannel->Init.Awd.FilterOrder          = DFSDM_CHANNEL_SINC1_ORDER;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003b4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hDfsdmChannel->Init.Awd.Oversampling         = 10;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	220a      	movs	r2, #10
 8003b50:	629a      	str	r2, [r3, #40]	@ 0x28
  hDfsdmChannel->Init.Offset                   = 0;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2200      	movs	r2, #0
 8003b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hDfsdmChannel->Init.RightBitShift            = MXConfig->RightBitShift;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hDfsdmChannel->Init.Input.Pins               = MXConfig->DigitalMicPins;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	619a      	str	r2, [r3, #24]
  hDfsdmChannel->Init.SerialInterface.Type     = MXConfig->DigitalMicType;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699a      	ldr	r2, [r3, #24]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	61da      	str	r2, [r3, #28]

  if(HAL_OK != HAL_DFSDM_ChannelInit(hDfsdmChannel))
 8003b70:	68b8      	ldr	r0, [r7, #8]
 8003b72:	f003 fd63 	bl	800763c <HAL_DFSDM_ChannelInit>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <MX_DFSDM1_Init+0xdc>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e00c      	b.n	8003b9a <MX_DFSDM1_Init+0xf6>
  }

  /* Configure injected channel */
  if(HAL_DFSDM_FilterConfigRegChannel(hDfsdmFilter, MXConfig->Channel4Filter, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	2201      	movs	r2, #1
 8003b86:	4619      	mov	r1, r3
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f003 ff0f 	bl	80079ac <HAL_DFSDM_FilterConfigRegChannel>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <MX_DFSDM1_Init+0xf4>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <MX_DFSDM1_Init+0xf6>
  }

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <MX_SAI1_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003bbe:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_ENABLE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_MSB;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	691a      	ldr	r2, [r3, #16]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	69da      	ldr	r2, [r3, #28]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2210      	movs	r2, #16
 8003c22:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.Mckdiv                 = 0;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai->Init.MckOutput              = SAI_MCK_OUTPUT_ENABLE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003c30:	611a      	str	r2, [r3, #16]
  hsai->Init.MckOverSampling        = SAI_MCK_OVERSAMPLING_DISABLE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai->Init.PdmInit.Activation     = DISABLE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	6a1a      	ldr	r2, [r3, #32]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003c56:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003c64:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	669a      	str	r2, [r3, #104]	@ 0x68
  if ((MXConfig->DataSize == AUDIO_RESOLUTION_24B) || (MXConfig->DataSize == AUDIO_RESOLUTION_32B))
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b18      	cmp	r3, #24
 8003c72:	d003      	beq.n	8003c7c <MX_SAI1_Block_A_Init+0xda>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d103      	bne.n	8003c84 <MX_SAI1_Block_A_Init+0xe2>
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_32B;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2280      	movs	r2, #128	@ 0x80
 8003c80:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003c82:	e002      	b.n	8003c8a <MX_SAI1_Block_A_Init+0xe8>
  }
  else
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_16B;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2240      	movs	r2, #64	@ 0x40
 8003c88:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  hsai->SlotInit.SlotNumber         = 2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	675a      	str	r2, [r3, #116]	@ 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f00b ff51 	bl	800fb40 <HAL_SAI_Init>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <MX_SAI1_Block_A_Init+0x106>
  {
    ret = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <MX_SAI4_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003cce:	601a      	str	r2, [r3, #0]

  /* Configure SAI4_Block_A */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_DISABLE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003cee:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_LSB;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d04:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	695a      	ldr	r2, [r3, #20]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2210      	movs	r2, #16
 8003d36:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.Mckdiv                 = 6;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2206      	movs	r2, #6
 8003d3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai->Init.PdmInit.Activation     = ENABLE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai->Init.PdmInit.MicPairsNbr    = 2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai->Init.PdmInit.ClockEnable    = SAI_PDM_CLOCK2_ENABLE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d52:	641a      	str	r2, [r3, #64]	@ 0x40


  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	6a1a      	ldr	r2, [r3, #32]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_STARTFRAME;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_HIGH;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d70:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_FIRSTBIT;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotNumber         = 4;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2204      	movs	r2, #4
 8003d88:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	675a      	str	r2, [r3, #116]	@ 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f00b fed4 	bl	800fb40 <HAL_SAI_Init>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <MX_SAI4_Block_A_Init+0xf0>
  {
    ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
  }
/* Enable SAI peripheral */
  __HAL_SAI_ENABLE(hsai);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003db0:	601a      	str	r2, [r3, #0]

  return ret;
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d002      	beq.n	8003dda <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return BSP_ERROR_WRONG_PARAM;
 8003dd4:	f06f 0301 	mvn.w	r3, #1
 8003dd8:	e085      	b.n	8003ee6 <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003dda:	4b45      	ldr	r3, [pc, #276]	@ (8003ef0 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8003ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003de0:	4a43      	ldr	r2, [pc, #268]	@ (8003ef0 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8003de2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003de6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003dea:	4b41      	ldr	r3, [pc, #260]	@ (8003ef0 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8003dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003df0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	693b      	ldr	r3, [r7, #16]

    for(index = 0; index < ChnlNbrIn; index++)
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	e06e      	b.n	8003edc <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 8003dfe:	4a3d      	ldr	r2, [pc, #244]	@ (8003ef4 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	214c      	movs	r1, #76	@ 0x4c
 8003e04:	fb01 f303 	mul.w	r3, r1, r3
 8003e08:	4413      	add	r3, r2
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8003e0e:	4a39      	ldr	r2, [pc, #228]	@ (8003ef4 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	214c      	movs	r1, #76	@ 0x4c
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	4413      	add	r3, r2
 8003e1a:	3302      	adds	r3, #2
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8003e20:	4a34      	ldr	r2, [pc, #208]	@ (8003ef4 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	214c      	movs	r1, #76	@ 0x4c
 8003e26:	fb01 f303 	mul.w	r3, r1, r3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	4a32      	ldr	r2, [pc, #200]	@ (8003ef8 <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 8003e30:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	b298      	uxth	r0, r3
 8003e36:	4a2f      	ldr	r2, [pc, #188]	@ (8003ef4 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	214c      	movs	r1, #76	@ 0x4c
 8003e3c:	fb01 f303 	mul.w	r3, r1, r3
 8003e40:	4413      	add	r3, r2
 8003e42:	330a      	adds	r3, #10
 8003e44:	4602      	mov	r2, r0
 8003e46:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	b298      	uxth	r0, r3
 8003e4c:	4a29      	ldr	r2, [pc, #164]	@ (8003ef4 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	214c      	movs	r1, #76	@ 0x4c
 8003e52:	fb01 f303 	mul.w	r3, r1, r3
 8003e56:	4413      	add	r3, r2
 8003e58:	3308      	adds	r3, #8
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	224c      	movs	r2, #76	@ 0x4c
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	4a23      	ldr	r2, [pc, #140]	@ (8003ef4 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8003e68:	4413      	add	r3, r2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f00f fefc 	bl	8013c68 <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4a22      	ldr	r2, [pc, #136]	@ (8003efc <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 8003e74:	fba2 2303 	umull	r2, r3, r2, r3
 8003e78:	099b      	lsrs	r3, r3, #6
 8003e7a:	b298      	uxth	r0, r3
 8003e7c:	4920      	ldr	r1, [pc, #128]	@ (8003f00 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4613      	mov	r3, r2
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	4413      	add	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	440b      	add	r3, r1
 8003e8a:	3302      	adds	r3, #2
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 8003e90:	491b      	ldr	r1, [pc, #108]	@ (8003f00 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4613      	mov	r3, r2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	4413      	add	r3, r2
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	440b      	add	r3, r1
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	2218      	movs	r2, #24
 8003ea2:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_128;
 8003ea4:	4916      	ldr	r1, [pc, #88]	@ (8003f00 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	4413      	add	r3, r2
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	440b      	add	r3, r1
 8003eb2:	2204      	movs	r2, #4
 8003eb4:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	224c      	movs	r2, #76	@ 0x4c
 8003eba:	fb02 f303 	mul.w	r3, r2, r3
 8003ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8003ef4 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8003ec0:	1898      	adds	r0, r3, r2
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	4413      	add	r3, r2
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8003f00 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8003ece:	4413      	add	r3, r2
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f00f ff99 	bl	8013e08 <PDM_Filter_setConfig>
    for(index = 0; index < ChnlNbrIn; index++)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d38c      	bcc.n	8003dfe <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }
  }

  return BSP_ERROR_NONE;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	58024400 	.word	0x58024400
 8003ef4:	24004d00 	.word	0x24004d00
 8003ef8:	7e809d48 	.word	0x7e809d48
 8003efc:	10624dd3 	.word	0x10624dd3
 8003f00:	24004d98 	.word	0x24004d98

08003f04 <BSP_AUDIO_IN_Record_Ex>:
  * @param  pBuf     Main buffer pointer for the recorded data storing
  * @param  NbrOfBytes     Size of the record buffer in bytes
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Record_Ex(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b092      	sub	sp, #72	@ 0x48
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003f10:	2300      	movs	r3, #0
 8003f12:	647b      	str	r3, [r7, #68]	@ 0x44

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d903      	bls.n	8003f22 <BSP_AUDIO_IN_Record_Ex+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003f1a:	f06f 0301 	mvn.w	r3, #1
 8003f1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f20:	e0b6      	b.n	8004090 <BSP_AUDIO_IN_Record_Ex+0x18c>
  }
  else if(Instance != 2U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d01f      	beq.n	8003f68 <BSP_AUDIO_IN_Record_Ex+0x64>
//      {
//        ret = BSP_ERROR_COMPONENT_FAILURE;
//      }

      /* Start the process receive DMA */
      if(HAL_SAI_Receive_DMA(&haudio_in_sai[Instance], (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2298      	movs	r2, #152	@ 0x98
 8003f2c:	fb02 f303 	mul.w	r3, r2, r3
 8003f30:	4a5a      	ldr	r2, [pc, #360]	@ (800409c <BSP_AUDIO_IN_Record_Ex+0x198>)
 8003f32:	1898      	adds	r0, r3, r2
 8003f34:	495a      	ldr	r1, [pc, #360]	@ (80040a0 <BSP_AUDIO_IN_Record_Ex+0x19c>)
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	4413      	add	r3, r2
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	440b      	add	r3, r1
 8003f42:	330c      	adds	r3, #12
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	08db      	lsrs	r3, r3, #3
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	461a      	mov	r2, r3
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	f00c f8c8 	bl	80100e8 <HAL_SAI_Receive_DMA>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 8098 	beq.w	8004090 <BSP_AUDIO_IN_Record_Ex+0x18c>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8003f60:	f06f 0303 	mvn.w	r3, #3
 8003f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f66:	e093      	b.n	8004090 <BSP_AUDIO_IN_Record_Ex+0x18c>
      }
//    }
  }
  else
  {
    Audio_In_Ctx[Instance].pBuff = (uint16_t*)pBuf;
 8003f68:	494d      	ldr	r1, [pc, #308]	@ (80040a0 <BSP_AUDIO_IN_Record_Ex+0x19c>)
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	4413      	add	r3, r2
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	440b      	add	r3, r1
 8003f76:	3314      	adds	r3, #20
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].Size  = NbrOfBytes;
 8003f7c:	4948      	ldr	r1, [pc, #288]	@ (80040a0 <BSP_AUDIO_IN_Record_Ex+0x19c>)
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4613      	mov	r3, r2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	4413      	add	r3, r2
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	440b      	add	r3, r1
 8003f8a:	331c      	adds	r3, #28
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	601a      	str	r2, [r3, #0]
    /* Reset Buffer Trigger */
    RecBuffTrigger = 0;
 8003f90:	4b44      	ldr	r3, [pc, #272]	@ (80040a4 <BSP_AUDIO_IN_Record_Ex+0x1a0>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
    RecBuffHalf = 0;
 8003f96:	4b44      	ldr	r3, [pc, #272]	@ (80040a8 <BSP_AUDIO_IN_Record_Ex+0x1a4>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	2320      	movs	r3, #32
 8003f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa2:	fa93 f3a3 	rbit	r3, r3
 8003fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003faa:	637b      	str	r3, [r7, #52]	@ 0x34
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <BSP_AUDIO_IN_Record_Ex+0xb2>
  {
    return 32U;
 8003fb2:	2320      	movs	r3, #32
 8003fb4:	e003      	b.n	8003fbe <BSP_AUDIO_IN_Record_Ex+0xba>
  }
  return __builtin_clz(value);
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb8:	fab3 f383 	clz	r3, r3
 8003fbc:	b2db      	uxtb	r3, r3

    /* Call the Media layer start function for MIC2 channel */
    if(HAL_DFSDM_FilterRegularStart_DMA(&haudio_in_dfsdm_filter[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)], \
 8003fbe:	3b04      	subs	r3, #4
 8003fc0:	2254      	movs	r2, #84	@ 0x54
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	4a39      	ldr	r2, [pc, #228]	@ (80040ac <BSP_AUDIO_IN_Record_Ex+0x1a8>)
 8003fc8:	1898      	adds	r0, r3, r2
 8003fca:	2320      	movs	r3, #32
 8003fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd0:	fa93 f3a3 	rbit	r3, r3
 8003fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  return result;
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd8:	643b      	str	r3, [r7, #64]	@ 0x40
  if (value == 0U)
 8003fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <BSP_AUDIO_IN_Record_Ex+0xe0>
    return 32U;
 8003fe0:	2320      	movs	r3, #32
 8003fe2:	e003      	b.n	8003fec <BSP_AUDIO_IN_Record_Ex+0xe8>
  return __builtin_clz(value);
 8003fe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fe6:	fab3 f383 	clz	r3, r3
 8003fea:	b2db      	uxtb	r3, r3
      (int32_t*)MicRecBuff[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)], DEFAULT_AUDIO_IN_BUFFER_SIZE) != HAL_OK)
 8003fec:	3b04      	subs	r3, #4
 8003fee:	035b      	lsls	r3, r3, #13
 8003ff0:	4a2f      	ldr	r2, [pc, #188]	@ (80040b0 <BSP_AUDIO_IN_Record_Ex+0x1ac>)
 8003ff2:	4413      	add	r3, r2
    if(HAL_DFSDM_FilterRegularStart_DMA(&haudio_in_dfsdm_filter[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)], \
 8003ff4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f003 fd1d 	bl	8007a38 <HAL_DFSDM_FilterRegularStart_DMA>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <BSP_AUDIO_IN_Record_Ex+0x108>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004004:	f06f 0303 	mvn.w	r3, #3
 8004008:	647b      	str	r3, [r7, #68]	@ 0x44
 800400a:	e041      	b.n	8004090 <BSP_AUDIO_IN_Record_Ex+0x18c>
 800400c:	2310      	movs	r3, #16
 800400e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	fa93 f3a3 	rbit	r3, r3
 8004016:	617b      	str	r3, [r7, #20]
  return result;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <BSP_AUDIO_IN_Record_Ex+0x122>
    return 32U;
 8004022:	2320      	movs	r3, #32
 8004024:	e003      	b.n	800402e <BSP_AUDIO_IN_Record_Ex+0x12a>
  return __builtin_clz(value);
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	fab3 f383 	clz	r3, r3
 800402c:	b2db      	uxtb	r3, r3
    }
    else if(HAL_DFSDM_FilterRegularStart_DMA(&haudio_in_dfsdm_filter[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)], \
 800402e:	3b04      	subs	r3, #4
 8004030:	2254      	movs	r2, #84	@ 0x54
 8004032:	fb02 f303 	mul.w	r3, r2, r3
 8004036:	4a1d      	ldr	r2, [pc, #116]	@ (80040ac <BSP_AUDIO_IN_Record_Ex+0x1a8>)
 8004038:	1898      	adds	r0, r3, r2
 800403a:	2310      	movs	r3, #16
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	fa93 f3a3 	rbit	r3, r3
 8004044:	623b      	str	r3, [r7, #32]
  return result;
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (value == 0U)
 800404a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <BSP_AUDIO_IN_Record_Ex+0x150>
    return 32U;
 8004050:	2320      	movs	r3, #32
 8004052:	e003      	b.n	800405c <BSP_AUDIO_IN_Record_Ex+0x158>
  return __builtin_clz(value);
 8004054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004056:	fab3 f383 	clz	r3, r3
 800405a:	b2db      	uxtb	r3, r3
      (int32_t*)MicRecBuff[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)], DEFAULT_AUDIO_IN_BUFFER_SIZE) != HAL_OK)
 800405c:	3b04      	subs	r3, #4
 800405e:	035b      	lsls	r3, r3, #13
 8004060:	4a13      	ldr	r2, [pc, #76]	@ (80040b0 <BSP_AUDIO_IN_Record_Ex+0x1ac>)
 8004062:	4413      	add	r3, r2
    else if(HAL_DFSDM_FilterRegularStart_DMA(&haudio_in_dfsdm_filter[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)], \
 8004064:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004068:	4619      	mov	r1, r3
 800406a:	f003 fce5 	bl	8007a38 <HAL_DFSDM_FilterRegularStart_DMA>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <BSP_AUDIO_IN_Record_Ex+0x178>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004074:	f06f 0303 	mvn.w	r3, #3
 8004078:	647b      	str	r3, [r7, #68]	@ 0x44
 800407a:	e009      	b.n	8004090 <BSP_AUDIO_IN_Record_Ex+0x18c>
    }
    else
    {
      /* Update BSP AUDIO IN state */
      Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_RECORDING;
 800407c:	4908      	ldr	r1, [pc, #32]	@ (80040a0 <BSP_AUDIO_IN_Record_Ex+0x19c>)
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4613      	mov	r3, r2
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	4413      	add	r3, r2
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	440b      	add	r3, r1
 800408a:	3324      	adds	r3, #36	@ 0x24
 800408c:	2201      	movs	r2, #1
 800408e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return BSP status */
  return ret;
 8004090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8004092:	4618      	mov	r0, r3
 8004094:	3748      	adds	r7, #72	@ 0x48
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	24000938 	.word	0x24000938
 80040a0:	24000a68 	.word	0x24000a68
 80040a4:	24000cdc 	.word	0x24000cdc
 80040a8:	24000ce0 	.word	0x24000ce0
 80040ac:	24000708 	.word	0x24000708
 80040b0:	24000d00 	.word	0x24000d00

080040b4 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC3
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC4
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  if(((Instance == 0U) && (InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC1)) ||\
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d102      	bne.n	80040ca <BSP_AUDIO_IN_IRQHandler+0x16>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b10      	cmp	r3, #16
 80040c8:	d00b      	beq.n	80040e2 <BSP_AUDIO_IN_IRQHandler+0x2e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <BSP_AUDIO_IN_IRQHandler+0x22>
     ((Instance == 0U) && (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC)) ||\
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <BSP_AUDIO_IN_IRQHandler+0x2e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d10e      	bne.n	80040fa <BSP_AUDIO_IN_IRQHandler+0x46>
     ((Instance == 1U) && (InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC1)))
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b10      	cmp	r3, #16
 80040e0:	d10b      	bne.n	80040fa <BSP_AUDIO_IN_IRQHandler+0x46>
  {
    HAL_DMA_IRQHandler(haudio_in_sai[Instance].hdmarx);
 80040e2:	4a1a      	ldr	r2, [pc, #104]	@ (800414c <BSP_AUDIO_IN_IRQHandler+0x98>)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2198      	movs	r1, #152	@ 0x98
 80040e8:	fb01 f303 	mul.w	r3, r1, r3
 80040ec:	4413      	add	r3, r2
 80040ee:	3384      	adds	r3, #132	@ 0x84
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f004 fd76 	bl	8008be4 <HAL_DMA_IRQHandler>
      (InputDevice <= AUDIO_IN_DEVICE_DIGITAL_MIC_LAST))
    {
    HAL_DMA_IRQHandler(haudio_in_dfsdm_filter[POS_VAL(InputDevice)].hdmaReg);
    }
  }
}
 80040f8:	e024      	b.n	8004144 <BSP_AUDIO_IN_IRQHandler+0x90>
    if((Instance == 2U) && (InputDevice >= AUDIO_IN_DEVICE_DIGITAL_MIC1) &&\
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d121      	bne.n	8004144 <BSP_AUDIO_IN_IRQHandler+0x90>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b0f      	cmp	r3, #15
 8004104:	d91e      	bls.n	8004144 <BSP_AUDIO_IN_IRQHandler+0x90>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b80      	cmp	r3, #128	@ 0x80
 800410a:	d81b      	bhi.n	8004144 <BSP_AUDIO_IN_IRQHandler+0x90>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	fa93 f3a3 	rbit	r3, r3
 8004116:	60fb      	str	r3, [r7, #12]
  return result;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <BSP_AUDIO_IN_IRQHandler+0x72>
    return 32U;
 8004122:	2320      	movs	r3, #32
 8004124:	e003      	b.n	800412e <BSP_AUDIO_IN_IRQHandler+0x7a>
  return __builtin_clz(value);
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	fab3 f383 	clz	r3, r3
 800412c:	b2db      	uxtb	r3, r3
    HAL_DMA_IRQHandler(haudio_in_dfsdm_filter[POS_VAL(InputDevice)].hdmaReg);
 800412e:	3b04      	subs	r3, #4
 8004130:	4a07      	ldr	r2, [pc, #28]	@ (8004150 <BSP_AUDIO_IN_IRQHandler+0x9c>)
 8004132:	2154      	movs	r1, #84	@ 0x54
 8004134:	fb01 f303 	mul.w	r3, r1, r3
 8004138:	4413      	add	r3, r2
 800413a:	3328      	adds	r3, #40	@ 0x28
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f004 fd50 	bl	8008be4 <HAL_DMA_IRQHandler>
}
 8004144:	bf00      	nop
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	24000938 	.word	0x24000938
 8004150:	24000708 	.word	0x24000708

08004154 <HAL_DFSDM_FilterRegConvCpltCallback>:
            using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter   DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b0ae      	sub	sp, #184	@ 0xb8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t index;
  static uint32_t DmaRecBuffCplt[DFSDM_MIC_NUMBER]  = {0};
  int32_t  tmp;

  if(Audio_In_Ctx[2].IsMultiBuff == 1U)
 800415c:	4ba7      	ldr	r3, [pc, #668]	@ (80043fc <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004162:	2b01      	cmp	r3, #1
 8004164:	d103      	bne.n	800416e <HAL_DFSDM_FilterRegConvCpltCallback+0x1a>
  {
    /* Call the record update function to get the second half */
    BSP_AUDIO_IN_TransferComplete_CallBack(2);
 8004166:	2002      	movs	r0, #2
 8004168:	f00d f9e6 	bl	8011538 <BSP_AUDIO_IN_TransferComplete_CallBack>
      RecBuffHalf = 0;
      /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
      BSP_AUDIO_IN_TransferComplete_CallBack(2);
    }
  }
}
 800416c:	e23c      	b.n	80045e8 <HAL_DFSDM_FilterRegConvCpltCallback+0x494>
 800416e:	2310      	movs	r3, #16
 8004170:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004174:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004178:	fa93 f3a3 	rbit	r3, r3
 800417c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  return result;
 8004180:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004184:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (value == 0U)
 8004188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_DFSDM_FilterRegConvCpltCallback+0x40>
    return 32U;
 8004190:	2320      	movs	r3, #32
 8004192:	e004      	b.n	800419e <HAL_DFSDM_FilterRegConvCpltCallback+0x4a>
  return __builtin_clz(value);
 8004194:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004198:	fab3 f383 	clz	r3, r3
 800419c:	b2db      	uxtb	r3, r3
    if(hdfsdm_filter == &haudio_in_dfsdm_filter[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)])
 800419e:	3b04      	subs	r3, #4
 80041a0:	2254      	movs	r2, #84	@ 0x54
 80041a2:	fb02 f303 	mul.w	r3, r2, r3
 80041a6:	4a96      	ldr	r2, [pc, #600]	@ (8004400 <HAL_DFSDM_FilterRegConvCpltCallback+0x2ac>)
 80041a8:	4413      	add	r3, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d11c      	bne.n	80041ea <HAL_DFSDM_FilterRegConvCpltCallback+0x96>
 80041b0:	2310      	movs	r3, #16
 80041b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041ba:	fa93 f3a3 	rbit	r3, r3
 80041be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  return result;
 80041c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (value == 0U)
 80041ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_DFSDM_FilterRegConvCpltCallback+0x82>
    return 32U;
 80041d2:	2320      	movs	r3, #32
 80041d4:	e004      	b.n	80041e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x8c>
  return __builtin_clz(value);
 80041d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041da:	fab3 f383 	clz	r3, r3
 80041de:	b2db      	uxtb	r3, r3
      DmaRecBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] = 1;
 80041e0:	3b04      	subs	r3, #4
 80041e2:	4a88      	ldr	r2, [pc, #544]	@ (8004404 <HAL_DFSDM_FilterRegConvCpltCallback+0x2b0>)
 80041e4:	2101      	movs	r1, #1
 80041e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80041ea:	2320      	movs	r3, #32
 80041ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  return result;
 80041fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004200:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (value == 0U)
 8004204:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_DFSDM_FilterRegConvCpltCallback+0xbc>
    return 32U;
 800420c:	2320      	movs	r3, #32
 800420e:	e004      	b.n	800421a <HAL_DFSDM_FilterRegConvCpltCallback+0xc6>
  return __builtin_clz(value);
 8004210:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004214:	fab3 f383 	clz	r3, r3
 8004218:	b2db      	uxtb	r3, r3
    if(hdfsdm_filter == &haudio_in_dfsdm_filter[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)])
 800421a:	3b04      	subs	r3, #4
 800421c:	2254      	movs	r2, #84	@ 0x54
 800421e:	fb02 f303 	mul.w	r3, r2, r3
 8004222:	4a77      	ldr	r2, [pc, #476]	@ (8004400 <HAL_DFSDM_FilterRegConvCpltCallback+0x2ac>)
 8004224:	4413      	add	r3, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	429a      	cmp	r2, r3
 800422a:	d11c      	bne.n	8004266 <HAL_DFSDM_FilterRegConvCpltCallback+0x112>
 800422c:	2320      	movs	r3, #32
 800422e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004232:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004236:	fa93 f3a3 	rbit	r3, r3
 800423a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  return result;
 800423e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004242:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (value == 0U)
 8004246:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_DFSDM_FilterRegConvCpltCallback+0xfe>
    return 32U;
 800424e:	2320      	movs	r3, #32
 8004250:	e004      	b.n	800425c <HAL_DFSDM_FilterRegConvCpltCallback+0x108>
  return __builtin_clz(value);
 8004252:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004256:	fab3 f383 	clz	r3, r3
 800425a:	b2db      	uxtb	r3, r3
      DmaRecBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] = 1;
 800425c:	3b04      	subs	r3, #4
 800425e:	4a69      	ldr	r2, [pc, #420]	@ (8004404 <HAL_DFSDM_FilterRegConvCpltCallback+0x2b0>)
 8004260:	2101      	movs	r1, #1
 8004262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004266:	2310      	movs	r3, #16
 8004268:	67bb      	str	r3, [r7, #120]	@ 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800426c:	fa93 f3a3 	rbit	r3, r3
 8004270:	677b      	str	r3, [r7, #116]	@ 0x74
  return result;
 8004272:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004274:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (value == 0U)
 8004276:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_DFSDM_FilterRegConvCpltCallback+0x12c>
    return 32U;
 800427c:	2320      	movs	r3, #32
 800427e:	e003      	b.n	8004288 <HAL_DFSDM_FilterRegConvCpltCallback+0x134>
  return __builtin_clz(value);
 8004280:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004282:	fab3 f383 	clz	r3, r3
 8004286:	b2db      	uxtb	r3, r3
    if(DmaRecBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] == 1U)
 8004288:	3b04      	subs	r3, #4
 800428a:	4a5e      	ldr	r2, [pc, #376]	@ (8004404 <HAL_DFSDM_FilterRegConvCpltCallback+0x2b0>)
 800428c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004290:	2b01      	cmp	r3, #1
 8004292:	f040 8188 	bne.w	80045a6 <HAL_DFSDM_FilterRegConvCpltCallback+0x452>
 8004296:	2320      	movs	r3, #32
 8004298:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800429c:	fa93 f3a3 	rbit	r3, r3
 80042a0:	66bb      	str	r3, [r7, #104]	@ 0x68
  return result;
 80042a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042a4:	673b      	str	r3, [r7, #112]	@ 0x70
  if (value == 0U)
 80042a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_DFSDM_FilterRegConvCpltCallback+0x15c>
    return 32U;
 80042ac:	2320      	movs	r3, #32
 80042ae:	e003      	b.n	80042b8 <HAL_DFSDM_FilterRegConvCpltCallback+0x164>
  return __builtin_clz(value);
 80042b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
      if(DmaRecBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] == 1U)
 80042b8:	3b04      	subs	r3, #4
 80042ba:	4a52      	ldr	r2, [pc, #328]	@ (8004404 <HAL_DFSDM_FilterRegConvCpltCallback+0x2b0>)
 80042bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	f040 8170 	bne.w	80045a6 <HAL_DFSDM_FilterRegConvCpltCallback+0x452>
 80042c6:	2310      	movs	r3, #16
 80042c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042cc:	fa93 f3a3 	rbit	r3, r3
 80042d0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80042d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80042d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x18c>
    return 32U;
 80042dc:	2320      	movs	r3, #32
 80042de:	e003      	b.n	80042e8 <HAL_DFSDM_FilterRegConvCpltCallback+0x194>
  return __builtin_clz(value);
 80042e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e2:	fab3 f383 	clz	r3, r3
 80042e6:	b2db      	uxtb	r3, r3
      SCB_InvalidateDCache_by_Addr((uint32_t *)&MicRecBuff[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)][DEFAULT_AUDIO_IN_BUFFER_SIZE/2U], ((int32_t)DEFAULT_AUDIO_IN_BUFFER_SIZE/2)*4);
 80042e8:	3b04      	subs	r3, #4
 80042ea:	035b      	lsls	r3, r3, #13
 80042ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042f0:	4a45      	ldr	r2, [pc, #276]	@ (8004408 <HAL_DFSDM_FilterRegConvCpltCallback+0x2b4>)
 80042f2:	4413      	add	r3, r2
 80042f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042fa:	647b      	str	r3, [r7, #68]	@ 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80042fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042fe:	2b00      	cmp	r3, #0
 8004300:	dd1d      	ble.n	800433e <HAL_DFSDM_FilterRegConvCpltCallback+0x1ea>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004304:	f003 021f 	and.w	r2, r3, #31
 8004308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800430a:	4413      	add	r3, r2
 800430c:	643b      	str	r3, [r7, #64]	@ 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800430e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004310:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8004312:	f3bf 8f4f 	dsb	sy
}
 8004316:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004318:	4a3c      	ldr	r2, [pc, #240]	@ (800440c <HAL_DFSDM_FilterRegConvCpltCallback+0x2b8>)
 800431a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800431c:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8004320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004322:	3320      	adds	r3, #32
 8004324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8004326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004328:	3b20      	subs	r3, #32
 800432a:	643b      	str	r3, [r7, #64]	@ 0x40
      } while ( op_size > 0 );
 800432c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800432e:	2b00      	cmp	r3, #0
 8004330:	dcf2      	bgt.n	8004318 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c4>
  __ASM volatile ("dsb 0xF":::"memory");
 8004332:	f3bf 8f4f 	dsb	sy
}
 8004336:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004338:	f3bf 8f6f 	isb	sy
}
 800433c:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800433e:	bf00      	nop
 8004340:	2320      	movs	r3, #32
 8004342:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004346:	fa93 f3a3 	rbit	r3, r3
 800434a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800434c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800434e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_DFSDM_FilterRegConvCpltCallback+0x206>
    return 32U;
 8004356:	2320      	movs	r3, #32
 8004358:	e003      	b.n	8004362 <HAL_DFSDM_FilterRegConvCpltCallback+0x20e>
  return __builtin_clz(value);
 800435a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800435c:	fab3 f383 	clz	r3, r3
 8004360:	b2db      	uxtb	r3, r3
      SCB_InvalidateDCache_by_Addr((uint32_t *)&MicRecBuff[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)][DEFAULT_AUDIO_IN_BUFFER_SIZE/2U], ((int32_t)DEFAULT_AUDIO_IN_BUFFER_SIZE/2)*4);
 8004362:	3b04      	subs	r3, #4
 8004364:	035b      	lsls	r3, r3, #13
 8004366:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800436a:	4a27      	ldr	r2, [pc, #156]	@ (8004408 <HAL_DFSDM_FilterRegConvCpltCallback+0x2b4>)
 800436c:	4413      	add	r3, r2
 800436e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004370:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004374:	663b      	str	r3, [r7, #96]	@ 0x60
    if ( dsize > 0 ) { 
 8004376:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004378:	2b00      	cmp	r3, #0
 800437a:	dd1d      	ble.n	80043b8 <HAL_DFSDM_FilterRegConvCpltCallback+0x264>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800437c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800437e:	f003 021f 	and.w	r2, r3, #31
 8004382:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004384:	4413      	add	r3, r2
 8004386:	65fb      	str	r3, [r7, #92]	@ 0x5c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8004388:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800438a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 800438c:	f3bf 8f4f 	dsb	sy
}
 8004390:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004392:	4a1e      	ldr	r2, [pc, #120]	@ (800440c <HAL_DFSDM_FilterRegConvCpltCallback+0x2b8>)
 8004394:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004396:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800439a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800439c:	3320      	adds	r3, #32
 800439e:	65bb      	str	r3, [r7, #88]	@ 0x58
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80043a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043a2:	3b20      	subs	r3, #32
 80043a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
      } while ( op_size > 0 );
 80043a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	dcf2      	bgt.n	8004392 <HAL_DFSDM_FilterRegConvCpltCallback+0x23e>
  __ASM volatile ("dsb 0xF":::"memory");
 80043ac:	f3bf 8f4f 	dsb	sy
}
 80043b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80043b2:	f3bf 8f6f 	isb	sy
}
 80043b6:	bf00      	nop
}
 80043b8:	bf00      	nop
      for(index = (DEFAULT_AUDIO_IN_BUFFER_SIZE/2U) ; index < DEFAULT_AUDIO_IN_BUFFER_SIZE; index++)
 80043ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043c2:	e095      	b.n	80044f0 <HAL_DFSDM_FilterRegConvCpltCallback+0x39c>
        if(Audio_In_Ctx[2].ChannelsNbr == 2U)
 80043c4:	4b0d      	ldr	r3, [pc, #52]	@ (80043fc <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 80043c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d157      	bne.n	800447c <HAL_DFSDM_FilterRegConvCpltCallback+0x328>
          tmp = MicRecBuff[0][index] / 256;
 80043cc:	4a0e      	ldr	r2, [pc, #56]	@ (8004408 <HAL_DFSDM_FilterRegConvCpltCallback+0x2b4>)
 80043ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80043d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	da00      	bge.n	80043dc <HAL_DFSDM_FilterRegConvCpltCallback+0x288>
 80043da:	33ff      	adds	r3, #255	@ 0xff
 80043dc:	121b      	asrs	r3, r3, #8
 80043de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
          tmp = SaturaLH(tmp, -32768, 32767);
 80043e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80043e6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80043ea:	db11      	blt.n	8004410 <HAL_DFSDM_FilterRegConvCpltCallback+0x2bc>
 80043ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80043f0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80043f4:	4293      	cmp	r3, r2
 80043f6:	bfa8      	it	ge
 80043f8:	4613      	movge	r3, r2
 80043fa:	e00a      	b.n	8004412 <HAL_DFSDM_FilterRegConvCpltCallback+0x2be>
 80043fc:	24000a68 	.word	0x24000a68
 8004400:	24000708 	.word	0x24000708
 8004404:	24004ebc 	.word	0x24004ebc
 8004408:	24000d00 	.word	0x24000d00
 800440c:	e000ed00 	.word	0xe000ed00
 8004410:	4b77      	ldr	r3, [pc, #476]	@ (80045f0 <HAL_DFSDM_FilterRegConvCpltCallback+0x49c>)
 8004412:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
          Audio_In_Ctx[2].pBuff[RecBuffTrigger]     = (uint16_t)(tmp);
 8004416:	4b77      	ldr	r3, [pc, #476]	@ (80045f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a0>)
 8004418:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800441a:	4b77      	ldr	r3, [pc, #476]	@ (80045f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a4>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	4413      	add	r3, r2
 8004422:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004426:	b292      	uxth	r2, r2
 8004428:	801a      	strh	r2, [r3, #0]
          tmp = MicRecBuff[1][index] / 256;
 800442a:	4a74      	ldr	r2, [pc, #464]	@ (80045fc <HAL_DFSDM_FilterRegConvCpltCallback+0x4a8>)
 800442c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004438:	2b00      	cmp	r3, #0
 800443a:	da00      	bge.n	800443e <HAL_DFSDM_FilterRegConvCpltCallback+0x2ea>
 800443c:	33ff      	adds	r3, #255	@ 0xff
 800443e:	121b      	asrs	r3, r3, #8
 8004440:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
          tmp = SaturaLH(tmp, -32768, 32767);
 8004444:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004448:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800444c:	db07      	blt.n	800445e <HAL_DFSDM_FilterRegConvCpltCallback+0x30a>
 800444e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004452:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8004456:	4293      	cmp	r3, r2
 8004458:	bfa8      	it	ge
 800445a:	4613      	movge	r3, r2
 800445c:	e000      	b.n	8004460 <HAL_DFSDM_FilterRegConvCpltCallback+0x30c>
 800445e:	4b64      	ldr	r3, [pc, #400]	@ (80045f0 <HAL_DFSDM_FilterRegConvCpltCallback+0x49c>)
 8004460:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
          Audio_In_Ctx[2].pBuff[RecBuffTrigger + 1U] = (uint16_t)(tmp);
 8004464:	4b63      	ldr	r3, [pc, #396]	@ (80045f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a0>)
 8004466:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004468:	4b63      	ldr	r3, [pc, #396]	@ (80045f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3301      	adds	r3, #1
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	4413      	add	r3, r2
 8004472:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004476:	b292      	uxth	r2, r2
 8004478:	801a      	strh	r2, [r3, #0]
 800447a:	e02f      	b.n	80044dc <HAL_DFSDM_FilterRegConvCpltCallback+0x388>
          tmp = MicRecBuff[0][index] / 256;
 800447c:	4a5f      	ldr	r2, [pc, #380]	@ (80045fc <HAL_DFSDM_FilterRegConvCpltCallback+0x4a8>)
 800447e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004486:	2b00      	cmp	r3, #0
 8004488:	da00      	bge.n	800448c <HAL_DFSDM_FilterRegConvCpltCallback+0x338>
 800448a:	33ff      	adds	r3, #255	@ 0xff
 800448c:	121b      	asrs	r3, r3, #8
 800448e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
          tmp = SaturaLH(tmp, -32768, 32767);
 8004492:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004496:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800449a:	db07      	blt.n	80044ac <HAL_DFSDM_FilterRegConvCpltCallback+0x358>
 800449c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80044a0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80044a4:	4293      	cmp	r3, r2
 80044a6:	bfa8      	it	ge
 80044a8:	4613      	movge	r3, r2
 80044aa:	e000      	b.n	80044ae <HAL_DFSDM_FilterRegConvCpltCallback+0x35a>
 80044ac:	4b50      	ldr	r3, [pc, #320]	@ (80045f0 <HAL_DFSDM_FilterRegConvCpltCallback+0x49c>)
 80044ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
          Audio_In_Ctx[2].pBuff[RecBuffTrigger]      = (uint16_t)(tmp);
 80044b2:	4b50      	ldr	r3, [pc, #320]	@ (80045f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a0>)
 80044b4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80044b6:	4b50      	ldr	r3, [pc, #320]	@ (80045f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	4413      	add	r3, r2
 80044be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044c2:	b292      	uxth	r2, r2
 80044c4:	801a      	strh	r2, [r3, #0]
          Audio_In_Ctx[2].pBuff[RecBuffTrigger + 1U] = (uint16_t)(tmp);
 80044c6:	4b4b      	ldr	r3, [pc, #300]	@ (80045f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a0>)
 80044c8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80044ca:	4b4b      	ldr	r3, [pc, #300]	@ (80045f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3301      	adds	r3, #1
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	4413      	add	r3, r2
 80044d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044d8:	b292      	uxth	r2, r2
 80044da:	801a      	strh	r2, [r3, #0]
        RecBuffTrigger +=2U;
 80044dc:	4b46      	ldr	r3, [pc, #280]	@ (80045f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3302      	adds	r3, #2
 80044e2:	4a45      	ldr	r2, [pc, #276]	@ (80045f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a4>)
 80044e4:	6013      	str	r3, [r2, #0]
      for(index = (DEFAULT_AUDIO_IN_BUFFER_SIZE/2U) ; index < DEFAULT_AUDIO_IN_BUFFER_SIZE; index++)
 80044e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80044ea:	3301      	adds	r3, #1
 80044ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80044f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044f8:	f4ff af64 	bcc.w	80043c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x270>
      SCB_CleanDCache_by_Addr((uint32_t *)Audio_In_Ctx[2].pBuff,  (int32_t)Audio_In_Ctx[2].Size*2);
 80044fc:	4b3d      	ldr	r3, [pc, #244]	@ (80045f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a0>)
 80044fe:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004500:	4b3c      	ldr	r3, [pc, #240]	@ (80045f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a0>)
 8004502:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	617a      	str	r2, [r7, #20]
 8004508:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	dd1d      	ble.n	800454c <HAL_DFSDM_FilterRegConvCpltCallback+0x3f8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f003 021f 	and.w	r2, r3, #31
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	4413      	add	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8004520:	f3bf 8f4f 	dsb	sy
}
 8004524:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004526:	4a36      	ldr	r2, [pc, #216]	@ (8004600 <HAL_DFSDM_FilterRegConvCpltCallback+0x4ac>)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	3320      	adds	r3, #32
 8004532:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3b20      	subs	r3, #32
 8004538:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	dcf2      	bgt.n	8004526 <HAL_DFSDM_FilterRegConvCpltCallback+0x3d2>
  __ASM volatile ("dsb 0xF":::"memory");
 8004540:	f3bf 8f4f 	dsb	sy
}
 8004544:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004546:	f3bf 8f6f 	isb	sy
}
 800454a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800454c:	bf00      	nop
 800454e:	2310      	movs	r3, #16
 8004550:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	fa93 f3a3 	rbit	r3, r3
 8004558:	61bb      	str	r3, [r7, #24]
  return result;
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_DFSDM_FilterRegConvCpltCallback+0x414>
    return 32U;
 8004564:	2320      	movs	r3, #32
 8004566:	e003      	b.n	8004570 <HAL_DFSDM_FilterRegConvCpltCallback+0x41c>
  return __builtin_clz(value);
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	fab3 f383 	clz	r3, r3
 800456e:	b2db      	uxtb	r3, r3
      DmaRecBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] = 0;
 8004570:	3b04      	subs	r3, #4
 8004572:	4a24      	ldr	r2, [pc, #144]	@ (8004604 <HAL_DFSDM_FilterRegConvCpltCallback+0x4b0>)
 8004574:	2100      	movs	r1, #0
 8004576:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800457a:	2320      	movs	r3, #32
 800457c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004580:	fa93 f3a3 	rbit	r3, r3
 8004584:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004588:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800458a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_DFSDM_FilterRegConvCpltCallback+0x440>
    return 32U;
 8004590:	2320      	movs	r3, #32
 8004592:	e003      	b.n	800459c <HAL_DFSDM_FilterRegConvCpltCallback+0x448>
  return __builtin_clz(value);
 8004594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004596:	fab3 f383 	clz	r3, r3
 800459a:	b2db      	uxtb	r3, r3
      DmaRecBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] = 0;
 800459c:	3b04      	subs	r3, #4
 800459e:	4a19      	ldr	r2, [pc, #100]	@ (8004604 <HAL_DFSDM_FilterRegConvCpltCallback+0x4b0>)
 80045a0:	2100      	movs	r1, #0
 80045a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if(RecBuffTrigger == (Audio_In_Ctx[2].Size/4U))
 80045a6:	4b13      	ldr	r3, [pc, #76]	@ (80045f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a0>)
 80045a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045aa:	089a      	lsrs	r2, r3, #2
 80045ac:	4b12      	ldr	r3, [pc, #72]	@ (80045f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d109      	bne.n	80045c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x474>
      if(RecBuffHalf == 0U)
 80045b4:	4b14      	ldr	r3, [pc, #80]	@ (8004608 <HAL_DFSDM_FilterRegConvCpltCallback+0x4b4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d105      	bne.n	80045c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x474>
        RecBuffHalf = 1;
 80045bc:	4b12      	ldr	r3, [pc, #72]	@ (8004608 <HAL_DFSDM_FilterRegConvCpltCallback+0x4b4>)
 80045be:	2201      	movs	r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
        BSP_AUDIO_IN_HalfTransfer_CallBack(2);
 80045c2:	2002      	movs	r0, #2
 80045c4:	f00c ff2a 	bl	801141c <BSP_AUDIO_IN_HalfTransfer_CallBack>
    if(RecBuffTrigger == Audio_In_Ctx[2].Size/2U)
 80045c8:	4b0a      	ldr	r3, [pc, #40]	@ (80045f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a0>)
 80045ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045cc:	085a      	lsrs	r2, r3, #1
 80045ce:	4b0a      	ldr	r3, [pc, #40]	@ (80045f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d108      	bne.n	80045e8 <HAL_DFSDM_FilterRegConvCpltCallback+0x494>
      RecBuffTrigger = 0;
 80045d6:	4b08      	ldr	r3, [pc, #32]	@ (80045f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a4>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
      RecBuffHalf = 0;
 80045dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004608 <HAL_DFSDM_FilterRegConvCpltCallback+0x4b4>)
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
      BSP_AUDIO_IN_TransferComplete_CallBack(2);
 80045e2:	2002      	movs	r0, #2
 80045e4:	f00c ffa8 	bl	8011538 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80045e8:	bf00      	nop
 80045ea:	37b8      	adds	r7, #184	@ 0xb8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	ffff8000 	.word	0xffff8000
 80045f4:	24000a68 	.word	0x24000a68
 80045f8:	24000cdc 	.word	0x24000cdc
 80045fc:	24000d00 	.word	0x24000d00
 8004600:	e000ed00 	.word	0xe000ed00
 8004604:	24004ebc 	.word	0x24004ebc
 8004608:	24000ce0 	.word	0x24000ce0

0800460c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter   DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b0ae      	sub	sp, #184	@ 0xb8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t index;
  static uint32_t DmaRecHalfBuffCplt[DFSDM_MIC_NUMBER]  = {0};
  int32_t  tmp;

  if(Audio_In_Ctx[2].IsMultiBuff == 1U)
 8004614:	4ba5      	ldr	r3, [pc, #660]	@ (80048ac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a0>)
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461a:	2b01      	cmp	r3, #1
 800461c:	d103      	bne.n	8004626 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a>
  {
    /* Call the record update function to get the first half */
    BSP_AUDIO_IN_HalfTransfer_CallBack(2);
 800461e:	2002      	movs	r0, #2
 8004620:	f00c fefc 	bl	801141c <BSP_AUDIO_IN_HalfTransfer_CallBack>
      RecBuffHalf = 0;
      /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
      BSP_AUDIO_IN_TransferComplete_CallBack(2);
    }
  }
}
 8004624:	e238      	b.n	8004a98 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x48c>
 8004626:	2310      	movs	r3, #16
 8004628:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004630:	fa93 f3a3 	rbit	r3, r3
 8004634:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  return result;
 8004638:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800463c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (value == 0U)
 8004640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x40>
    return 32U;
 8004648:	2320      	movs	r3, #32
 800464a:	e004      	b.n	8004656 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4a>
  return __builtin_clz(value);
 800464c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004650:	fab3 f383 	clz	r3, r3
 8004654:	b2db      	uxtb	r3, r3
    if(hdfsdm_filter == &haudio_in_dfsdm_filter[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)])
 8004656:	3b04      	subs	r3, #4
 8004658:	2254      	movs	r2, #84	@ 0x54
 800465a:	fb02 f303 	mul.w	r3, r2, r3
 800465e:	4a94      	ldr	r2, [pc, #592]	@ (80048b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a4>)
 8004660:	4413      	add	r3, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	429a      	cmp	r2, r3
 8004666:	d11c      	bne.n	80046a2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x96>
 8004668:	2310      	movs	r3, #16
 800466a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004672:	fa93 f3a3 	rbit	r3, r3
 8004676:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  return result;
 800467a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800467e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (value == 0U)
 8004682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x82>
    return 32U;
 800468a:	2320      	movs	r3, #32
 800468c:	e004      	b.n	8004698 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x8c>
  return __builtin_clz(value);
 800468e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004692:	fab3 f383 	clz	r3, r3
 8004696:	b2db      	uxtb	r3, r3
      DmaRecHalfBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] = 1;
 8004698:	3b04      	subs	r3, #4
 800469a:	4a86      	ldr	r2, [pc, #536]	@ (80048b4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a8>)
 800469c:	2101      	movs	r1, #1
 800469e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80046a2:	2320      	movs	r3, #32
 80046a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046ac:	fa93 f3a3 	rbit	r3, r3
 80046b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  return result;
 80046b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (value == 0U)
 80046bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xbc>
    return 32U;
 80046c4:	2320      	movs	r3, #32
 80046c6:	e004      	b.n	80046d2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xc6>
  return __builtin_clz(value);
 80046c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80046cc:	fab3 f383 	clz	r3, r3
 80046d0:	b2db      	uxtb	r3, r3
    if(hdfsdm_filter == &haudio_in_dfsdm_filter[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)])
 80046d2:	3b04      	subs	r3, #4
 80046d4:	2254      	movs	r2, #84	@ 0x54
 80046d6:	fb02 f303 	mul.w	r3, r2, r3
 80046da:	4a75      	ldr	r2, [pc, #468]	@ (80048b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a4>)
 80046dc:	4413      	add	r3, r2
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d11c      	bne.n	800471e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x112>
 80046e4:	2320      	movs	r3, #32
 80046e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046ee:	fa93 f3a3 	rbit	r3, r3
 80046f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  return result;
 80046f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (value == 0U)
 80046fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xfe>
    return 32U;
 8004706:	2320      	movs	r3, #32
 8004708:	e004      	b.n	8004714 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x108>
  return __builtin_clz(value);
 800470a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800470e:	fab3 f383 	clz	r3, r3
 8004712:	b2db      	uxtb	r3, r3
      DmaRecHalfBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] = 1;
 8004714:	3b04      	subs	r3, #4
 8004716:	4a67      	ldr	r2, [pc, #412]	@ (80048b4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a8>)
 8004718:	2101      	movs	r1, #1
 800471a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800471e:	2310      	movs	r3, #16
 8004720:	67bb      	str	r3, [r7, #120]	@ 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004722:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004724:	fa93 f3a3 	rbit	r3, r3
 8004728:	677b      	str	r3, [r7, #116]	@ 0x74
  return result;
 800472a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800472c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (value == 0U)
 800472e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x12c>
    return 32U;
 8004734:	2320      	movs	r3, #32
 8004736:	e003      	b.n	8004740 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x134>
  return __builtin_clz(value);
 8004738:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800473a:	fab3 f383 	clz	r3, r3
 800473e:	b2db      	uxtb	r3, r3
    if(DmaRecHalfBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] == 1U)
 8004740:	3b04      	subs	r3, #4
 8004742:	4a5c      	ldr	r2, [pc, #368]	@ (80048b4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a8>)
 8004744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004748:	2b01      	cmp	r3, #1
 800474a:	f040 8184 	bne.w	8004a56 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x44a>
 800474e:	2320      	movs	r3, #32
 8004750:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	66bb      	str	r3, [r7, #104]	@ 0x68
  return result;
 800475a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800475c:	673b      	str	r3, [r7, #112]	@ 0x70
  if (value == 0U)
 800475e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x15c>
    return 32U;
 8004764:	2320      	movs	r3, #32
 8004766:	e003      	b.n	8004770 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x164>
  return __builtin_clz(value);
 8004768:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800476a:	fab3 f383 	clz	r3, r3
 800476e:	b2db      	uxtb	r3, r3
      if(DmaRecHalfBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] == 1U)
 8004770:	3b04      	subs	r3, #4
 8004772:	4a50      	ldr	r2, [pc, #320]	@ (80048b4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a8>)
 8004774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004778:	2b01      	cmp	r3, #1
 800477a:	f040 816c 	bne.w	8004a56 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x44a>
 800477e:	2310      	movs	r3, #16
 8004780:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004784:	fa93 f3a3 	rbit	r3, r3
 8004788:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800478a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800478e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18c>
    return 32U;
 8004794:	2320      	movs	r3, #32
 8004796:	e003      	b.n	80047a0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x194>
  return __builtin_clz(value);
 8004798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479a:	fab3 f383 	clz	r3, r3
 800479e:	b2db      	uxtb	r3, r3
        SCB_InvalidateDCache_by_Addr((uint32_t *)&MicRecBuff[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)][0], ((int32_t)DEFAULT_AUDIO_IN_BUFFER_SIZE/2)*4);
 80047a0:	3b04      	subs	r3, #4
 80047a2:	035b      	lsls	r3, r3, #13
 80047a4:	4a44      	ldr	r2, [pc, #272]	@ (80048b8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2ac>)
 80047a6:	4413      	add	r3, r2
 80047a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047ae:	647b      	str	r3, [r7, #68]	@ 0x44
    if ( dsize > 0 ) { 
 80047b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	dd1d      	ble.n	80047f2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1e6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80047b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047b8:	f003 021f 	and.w	r2, r3, #31
 80047bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047be:	4413      	add	r3, r2
 80047c0:	643b      	str	r3, [r7, #64]	@ 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80047c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 80047c6:	f3bf 8f4f 	dsb	sy
}
 80047ca:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80047cc:	4a3b      	ldr	r2, [pc, #236]	@ (80048bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2b0>)
 80047ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047d0:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80047d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047d6:	3320      	adds	r3, #32
 80047d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80047da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047dc:	3b20      	subs	r3, #32
 80047de:	643b      	str	r3, [r7, #64]	@ 0x40
      } while ( op_size > 0 );
 80047e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	dcf2      	bgt.n	80047cc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c0>
  __ASM volatile ("dsb 0xF":::"memory");
 80047e6:	f3bf 8f4f 	dsb	sy
}
 80047ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80047ec:	f3bf 8f6f 	isb	sy
}
 80047f0:	bf00      	nop
}
 80047f2:	bf00      	nop
 80047f4:	2320      	movs	r3, #32
 80047f6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047fa:	fa93 f3a3 	rbit	r3, r3
 80047fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004802:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x202>
    return 32U;
 800480a:	2320      	movs	r3, #32
 800480c:	e003      	b.n	8004816 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x20a>
  return __builtin_clz(value);
 800480e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004810:	fab3 f383 	clz	r3, r3
 8004814:	b2db      	uxtb	r3, r3
        SCB_InvalidateDCache_by_Addr((uint32_t *)&MicRecBuff[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)][0], ((int32_t)DEFAULT_AUDIO_IN_BUFFER_SIZE/2)*4);
 8004816:	3b04      	subs	r3, #4
 8004818:	035b      	lsls	r3, r3, #13
 800481a:	4a27      	ldr	r2, [pc, #156]	@ (80048b8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2ac>)
 800481c:	4413      	add	r3, r2
 800481e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004820:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004824:	663b      	str	r3, [r7, #96]	@ 0x60
    if ( dsize > 0 ) { 
 8004826:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004828:	2b00      	cmp	r3, #0
 800482a:	dd1d      	ble.n	8004868 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x25c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800482c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800482e:	f003 021f 	and.w	r2, r3, #31
 8004832:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004834:	4413      	add	r3, r2
 8004836:	65fb      	str	r3, [r7, #92]	@ 0x5c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8004838:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800483a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 800483c:	f3bf 8f4f 	dsb	sy
}
 8004840:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004842:	4a1e      	ldr	r2, [pc, #120]	@ (80048bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2b0>)
 8004844:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004846:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800484a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800484c:	3320      	adds	r3, #32
 800484e:	65bb      	str	r3, [r7, #88]	@ 0x58
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8004850:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004852:	3b20      	subs	r3, #32
 8004854:	65fb      	str	r3, [r7, #92]	@ 0x5c
      } while ( op_size > 0 );
 8004856:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004858:	2b00      	cmp	r3, #0
 800485a:	dcf2      	bgt.n	8004842 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x236>
  __ASM volatile ("dsb 0xF":::"memory");
 800485c:	f3bf 8f4f 	dsb	sy
}
 8004860:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004862:	f3bf 8f6f 	isb	sy
}
 8004866:	bf00      	nop
}
 8004868:	bf00      	nop
        for(index = 0 ; index < (DEFAULT_AUDIO_IN_BUFFER_SIZE/2U); index++)
 800486a:	2300      	movs	r3, #0
 800486c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004870:	e096      	b.n	80049a0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x394>
          if(Audio_In_Ctx[2].ChannelsNbr == 2U)
 8004872:	4b0e      	ldr	r3, [pc, #56]	@ (80048ac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a0>)
 8004874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004876:	2b02      	cmp	r3, #2
 8004878:	d158      	bne.n	800492c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x320>
            tmp = MicRecBuff[0][index] / 256;
 800487a:	4a0f      	ldr	r2, [pc, #60]	@ (80048b8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2ac>)
 800487c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004884:	2b00      	cmp	r3, #0
 8004886:	da00      	bge.n	800488a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x27e>
 8004888:	33ff      	adds	r3, #255	@ 0xff
 800488a:	121b      	asrs	r3, r3, #8
 800488c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            tmp = SaturaLH(tmp, -32768, 32767);
 8004890:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004894:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004898:	db12      	blt.n	80048c0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2b4>
 800489a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800489e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80048a2:	4293      	cmp	r3, r2
 80048a4:	bfa8      	it	ge
 80048a6:	4613      	movge	r3, r2
 80048a8:	e00b      	b.n	80048c2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2b6>
 80048aa:	bf00      	nop
 80048ac:	24000a68 	.word	0x24000a68
 80048b0:	24000708 	.word	0x24000708
 80048b4:	24004ecc 	.word	0x24004ecc
 80048b8:	24000d00 	.word	0x24000d00
 80048bc:	e000ed00 	.word	0xe000ed00
 80048c0:	4b77      	ldr	r3, [pc, #476]	@ (8004aa0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x494>)
 80048c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            Audio_In_Ctx[2].pBuff[RecBuffTrigger]     = (uint16_t)(tmp);
 80048c6:	4b77      	ldr	r3, [pc, #476]	@ (8004aa4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x498>)
 80048c8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80048ca:	4b77      	ldr	r3, [pc, #476]	@ (8004aa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x49c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	4413      	add	r3, r2
 80048d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048d6:	b292      	uxth	r2, r2
 80048d8:	801a      	strh	r2, [r3, #0]
            tmp = MicRecBuff[1][index] / 256;
 80048da:	4a74      	ldr	r2, [pc, #464]	@ (8004aac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4a0>)
 80048dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80048e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	da00      	bge.n	80048ee <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2e2>
 80048ec:	33ff      	adds	r3, #255	@ 0xff
 80048ee:	121b      	asrs	r3, r3, #8
 80048f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            tmp = SaturaLH(tmp, -32768, 32767);
 80048f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048f8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80048fc:	db07      	blt.n	800490e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x302>
 80048fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004902:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8004906:	4293      	cmp	r3, r2
 8004908:	bfa8      	it	ge
 800490a:	4613      	movge	r3, r2
 800490c:	e000      	b.n	8004910 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x304>
 800490e:	4b64      	ldr	r3, [pc, #400]	@ (8004aa0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x494>)
 8004910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            Audio_In_Ctx[2].pBuff[RecBuffTrigger + 1U] = (uint16_t)(tmp);
 8004914:	4b63      	ldr	r3, [pc, #396]	@ (8004aa4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x498>)
 8004916:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004918:	4b63      	ldr	r3, [pc, #396]	@ (8004aa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x49c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3301      	adds	r3, #1
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	4413      	add	r3, r2
 8004922:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004926:	b292      	uxth	r2, r2
 8004928:	801a      	strh	r2, [r3, #0]
 800492a:	e02f      	b.n	800498c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x380>
            tmp = MicRecBuff[0][index] / 256;
 800492c:	4a5f      	ldr	r2, [pc, #380]	@ (8004aac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4a0>)
 800492e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004936:	2b00      	cmp	r3, #0
 8004938:	da00      	bge.n	800493c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x330>
 800493a:	33ff      	adds	r3, #255	@ 0xff
 800493c:	121b      	asrs	r3, r3, #8
 800493e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            tmp = SaturaLH(tmp, -32768, 32767);
 8004942:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004946:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800494a:	db07      	blt.n	800495c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x350>
 800494c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004950:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8004954:	4293      	cmp	r3, r2
 8004956:	bfa8      	it	ge
 8004958:	4613      	movge	r3, r2
 800495a:	e000      	b.n	800495e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x352>
 800495c:	4b50      	ldr	r3, [pc, #320]	@ (8004aa0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x494>)
 800495e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            Audio_In_Ctx[2].pBuff[RecBuffTrigger]      = (uint16_t)(tmp);
 8004962:	4b50      	ldr	r3, [pc, #320]	@ (8004aa4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x498>)
 8004964:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004966:	4b50      	ldr	r3, [pc, #320]	@ (8004aa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x49c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	4413      	add	r3, r2
 800496e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004972:	b292      	uxth	r2, r2
 8004974:	801a      	strh	r2, [r3, #0]
            Audio_In_Ctx[2].pBuff[RecBuffTrigger + 1U] = (uint16_t)(tmp);
 8004976:	4b4b      	ldr	r3, [pc, #300]	@ (8004aa4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x498>)
 8004978:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800497a:	4b4b      	ldr	r3, [pc, #300]	@ (8004aa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x49c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3301      	adds	r3, #1
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	4413      	add	r3, r2
 8004984:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004988:	b292      	uxth	r2, r2
 800498a:	801a      	strh	r2, [r3, #0]
          RecBuffTrigger +=2U;
 800498c:	4b46      	ldr	r3, [pc, #280]	@ (8004aa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x49c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3302      	adds	r3, #2
 8004992:	4a45      	ldr	r2, [pc, #276]	@ (8004aa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x49c>)
 8004994:	6013      	str	r3, [r2, #0]
        for(index = 0 ; index < (DEFAULT_AUDIO_IN_BUFFER_SIZE/2U); index++)
 8004996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800499a:	3301      	adds	r3, #1
 800499c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049a8:	f4ff af63 	bcc.w	8004872 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x266>
        SCB_CleanDCache_by_Addr((uint32_t *)Audio_In_Ctx[2].pBuff, ((int32_t)Audio_In_Ctx[2].Size*2));
 80049ac:	4b3d      	ldr	r3, [pc, #244]	@ (8004aa4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x498>)
 80049ae:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80049b0:	4b3c      	ldr	r3, [pc, #240]	@ (8004aa4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x498>)
 80049b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	617a      	str	r2, [r7, #20]
 80049b8:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	dd1d      	ble.n	80049fc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x3f0>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f003 021f 	and.w	r2, r3, #31
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4413      	add	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80049d0:	f3bf 8f4f 	dsb	sy
}
 80049d4:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80049d6:	4a36      	ldr	r2, [pc, #216]	@ (8004ab0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4a4>)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	3320      	adds	r3, #32
 80049e2:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	3b20      	subs	r3, #32
 80049e8:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	dcf2      	bgt.n	80049d6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x3ca>
  __ASM volatile ("dsb 0xF":::"memory");
 80049f0:	f3bf 8f4f 	dsb	sy
}
 80049f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049f6:	f3bf 8f6f 	isb	sy
}
 80049fa:	bf00      	nop
}
 80049fc:	bf00      	nop
 80049fe:	2310      	movs	r3, #16
 8004a00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	fa93 f3a3 	rbit	r3, r3
 8004a08:	61bb      	str	r3, [r7, #24]
  return result;
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x40c>
    return 32U;
 8004a14:	2320      	movs	r3, #32
 8004a16:	e003      	b.n	8004a20 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x414>
  return __builtin_clz(value);
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	fab3 f383 	clz	r3, r3
 8004a1e:	b2db      	uxtb	r3, r3
        DmaRecHalfBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] = 0;
 8004a20:	3b04      	subs	r3, #4
 8004a22:	4a24      	ldr	r2, [pc, #144]	@ (8004ab4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4a8>)
 8004a24:	2100      	movs	r1, #0
 8004a26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004a2a:	2320      	movs	r3, #32
 8004a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a30:	fa93 f3a3 	rbit	r3, r3
 8004a34:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x438>
    return 32U;
 8004a40:	2320      	movs	r3, #32
 8004a42:	e003      	b.n	8004a4c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x440>
  return __builtin_clz(value);
 8004a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a46:	fab3 f383 	clz	r3, r3
 8004a4a:	b2db      	uxtb	r3, r3
        DmaRecHalfBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] = 0;
 8004a4c:	3b04      	subs	r3, #4
 8004a4e:	4a19      	ldr	r2, [pc, #100]	@ (8004ab4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4a8>)
 8004a50:	2100      	movs	r1, #0
 8004a52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if(RecBuffTrigger == (Audio_In_Ctx[2].Size/4U))
 8004a56:	4b13      	ldr	r3, [pc, #76]	@ (8004aa4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x498>)
 8004a58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a5a:	089a      	lsrs	r2, r3, #2
 8004a5c:	4b12      	ldr	r3, [pc, #72]	@ (8004aa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x49c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d109      	bne.n	8004a78 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x46c>
      if(RecBuffHalf == 0U)
 8004a64:	4b14      	ldr	r3, [pc, #80]	@ (8004ab8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4ac>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d105      	bne.n	8004a78 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x46c>
        RecBuffHalf = 1;
 8004a6c:	4b12      	ldr	r3, [pc, #72]	@ (8004ab8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4ac>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	601a      	str	r2, [r3, #0]
        BSP_AUDIO_IN_HalfTransfer_CallBack(2);
 8004a72:	2002      	movs	r0, #2
 8004a74:	f00c fcd2 	bl	801141c <BSP_AUDIO_IN_HalfTransfer_CallBack>
    if(RecBuffTrigger == Audio_In_Ctx[2].Size/2U)
 8004a78:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x498>)
 8004a7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a7c:	085a      	lsrs	r2, r3, #1
 8004a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x49c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d108      	bne.n	8004a98 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x48c>
      RecBuffTrigger = 0;
 8004a86:	4b08      	ldr	r3, [pc, #32]	@ (8004aa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x49c>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
      RecBuffHalf = 0;
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4ac>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
      BSP_AUDIO_IN_TransferComplete_CallBack(2);
 8004a92:	2002      	movs	r0, #2
 8004a94:	f00c fd50 	bl	8011538 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8004a98:	bf00      	nop
 8004a9a:	37b8      	adds	r7, #184	@ 0xb8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	ffff8000 	.word	0xffff8000
 8004aa4:	24000a68 	.word	0x24000a68
 8004aa8:	24000cdc 	.word	0x24000cdc
 8004aac:	24000d00 	.word	0x24000d00
 8004ab0:	e000ed00 	.word	0xe000ed00
 8004ab4:	24004ecc 	.word	0x24004ecc
 8004ab8:	24000ce0 	.word	0x24000ce0

08004abc <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the first half */
  BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	f00c fca9 	bl	801141c <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8004aca:	bf00      	nop
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b082      	sub	sp, #8
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the second half */
  BSP_AUDIO_IN_TransferComplete_CallBack(0);
 8004ada:	2000      	movs	r0, #0
 8004adc:	f00c fd2c 	bl	8011538 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8004ae0:	bf00      	nop
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <DFSDM_ChannelMspInit>:
  * @brief  Initialize the DFSDM channel MSP.
  * @param  hDfsdmChannel DFSDM Channel handle
  * @retval None
  */
static void DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hDfsdmChannel)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08e      	sub	sp, #56	@ 0x38
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmChannel);

  /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN pins ------------------*/
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b04:	2302      	movs	r3, #2
 8004b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Enable DFSDM clock */
  AUDIO_DFSDM1_CLK_ENABLE();
 8004b10:	4b49      	ldr	r3, [pc, #292]	@ (8004c38 <DFSDM_ChannelMspInit+0x13c>)
 8004b12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b16:	4a48      	ldr	r2, [pc, #288]	@ (8004c38 <DFSDM_ChannelMspInit+0x13c>)
 8004b18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b1c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004b20:	4b45      	ldr	r3, [pc, #276]	@ (8004c38 <DFSDM_ChannelMspInit+0x13c>)
 8004b22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b26:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004b2a:	623b      	str	r3, [r7, #32]
 8004b2c:	6a3b      	ldr	r3, [r7, #32]

  /* Enable GPIO clock */
  AUDIO_DFSDM1_CKOUT_GPIO_CLK_ENABLE();
 8004b2e:	4b42      	ldr	r3, [pc, #264]	@ (8004c38 <DFSDM_ChannelMspInit+0x13c>)
 8004b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b34:	4a40      	ldr	r2, [pc, #256]	@ (8004c38 <DFSDM_ChannelMspInit+0x13c>)
 8004b36:	f043 0310 	orr.w	r3, r3, #16
 8004b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004c38 <DFSDM_ChannelMspInit+0x13c>)
 8004b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	61fb      	str	r3, [r7, #28]
 8004b4a:	69fb      	ldr	r3, [r7, #28]
  AUDIO_DFSDMx_DATIN_MIC1_GPIO_CLK_ENABLE();
 8004b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8004c38 <DFSDM_ChannelMspInit+0x13c>)
 8004b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b52:	4a39      	ldr	r2, [pc, #228]	@ (8004c38 <DFSDM_ChannelMspInit+0x13c>)
 8004b54:	f043 0310 	orr.w	r3, r3, #16
 8004b58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b5c:	4b36      	ldr	r3, [pc, #216]	@ (8004c38 <DFSDM_ChannelMspInit+0x13c>)
 8004b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b62:	f003 0310 	and.w	r3, r3, #16
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	69bb      	ldr	r3, [r7, #24]
  AUDIO_DFSDMx_DATIN_MIC2_GPIO_CLK_ENABLE();
 8004b6a:	4b33      	ldr	r3, [pc, #204]	@ (8004c38 <DFSDM_ChannelMspInit+0x13c>)
 8004b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b70:	4a31      	ldr	r2, [pc, #196]	@ (8004c38 <DFSDM_ChannelMspInit+0x13c>)
 8004b72:	f043 0310 	orr.w	r3, r3, #16
 8004b76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c38 <DFSDM_ChannelMspInit+0x13c>)
 8004b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	697b      	ldr	r3, [r7, #20]
  AUDIO_DFSDMx_DATIN_MIC3_GPIO_CLK_ENABLE();
 8004b88:	4b2b      	ldr	r3, [pc, #172]	@ (8004c38 <DFSDM_ChannelMspInit+0x13c>)
 8004b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b8e:	4a2a      	ldr	r2, [pc, #168]	@ (8004c38 <DFSDM_ChannelMspInit+0x13c>)
 8004b90:	f043 0320 	orr.w	r3, r3, #32
 8004b94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b98:	4b27      	ldr	r3, [pc, #156]	@ (8004c38 <DFSDM_ChannelMspInit+0x13c>)
 8004b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	693b      	ldr	r3, [r7, #16]
  AUDIO_DFSDMx_DATIN_MIC4_GPIO_CLK_ENABLE();
 8004ba6:	4b24      	ldr	r3, [pc, #144]	@ (8004c38 <DFSDM_ChannelMspInit+0x13c>)
 8004ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bac:	4a22      	ldr	r2, [pc, #136]	@ (8004c38 <DFSDM_ChannelMspInit+0x13c>)
 8004bae:	f043 0320 	orr.w	r3, r3, #32
 8004bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bb6:	4b20      	ldr	r3, [pc, #128]	@ (8004c38 <DFSDM_ChannelMspInit+0x13c>)
 8004bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bbc:	f003 0320 	and.w	r3, r3, #32
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	68fb      	ldr	r3, [r7, #12]

  GPIO_InitStruct.Pin = AUDIO_DFSDM1_CKOUT_PIN;
 8004bc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDM1_CKOUT_AF;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(AUDIO_DFSDM1_CKOUT_GPIO_PORT, &GPIO_InitStruct);
 8004bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4819      	ldr	r0, [pc, #100]	@ (8004c3c <DFSDM_ChannelMspInit+0x140>)
 8004bd6:	f005 fe5d 	bl	800a894 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC1_PIN;
 8004bda:	2380      	movs	r3, #128	@ 0x80
 8004bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC1_AF;
 8004bde:	2303      	movs	r3, #3
 8004be0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC1_GPIO_PORT, &GPIO_InitStruct);
 8004be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004be6:	4619      	mov	r1, r3
 8004be8:	4814      	ldr	r0, [pc, #80]	@ (8004c3c <DFSDM_ChannelMspInit+0x140>)
 8004bea:	f005 fe53 	bl	800a894 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC2_PIN;
 8004bee:	2380      	movs	r3, #128	@ 0x80
 8004bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC2_AF;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC2_GPIO_PORT, &GPIO_InitStruct);
 8004bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	480f      	ldr	r0, [pc, #60]	@ (8004c3c <DFSDM_ChannelMspInit+0x140>)
 8004bfe:	f005 fe49 	bl	800a894 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC3_PIN;
 8004c02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC3_AF;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC3_GPIO_PORT, &GPIO_InitStruct);
 8004c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c10:	4619      	mov	r1, r3
 8004c12:	480b      	ldr	r0, [pc, #44]	@ (8004c40 <DFSDM_ChannelMspInit+0x144>)
 8004c14:	f005 fe3e 	bl	800a894 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC4_PIN;
 8004c18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC4_AF;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC4_GPIO_PORT, &GPIO_InitStruct);
 8004c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c26:	4619      	mov	r1, r3
 8004c28:	4805      	ldr	r0, [pc, #20]	@ (8004c40 <DFSDM_ChannelMspInit+0x144>)
 8004c2a:	f005 fe33 	bl	800a894 <HAL_GPIO_Init>

}
 8004c2e:	bf00      	nop
 8004c30:	3738      	adds	r7, #56	@ 0x38
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	58024400 	.word	0x58024400
 8004c3c:	58021000 	.word	0x58021000
 8004c40:	58021400 	.word	0x58021400

08004c44 <DFSDM_FilterMspInit>:
  * @brief  Initialize the DFSDM filter MSP.
  * @param  hDfsdmFilter DFSDM Filter handle
  * @retval None
  */
static void DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hDfsdmFilter)
{
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b0a1      	sub	sp, #132	@ 0x84
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t i, mic_num, mic_init[DFSDM_MIC_NUMBER] = {0};
 8004c4c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	605a      	str	r2, [r3, #4]
 8004c56:	609a      	str	r2, [r3, #8]
 8004c58:	60da      	str	r2, [r3, #12]
  IRQn_Type AUDIO_DFSDM_DMAx_MIC_IRQHandler[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_IRQ, AUDIO_DFSDMx_DMAx_MIC2_IRQ, AUDIO_DFSDMx_DMAx_MIC3_IRQ, AUDIO_DFSDMx_DMAx_MIC4_IRQ};
 8004c5a:	4a5e      	ldr	r2, [pc, #376]	@ (8004dd4 <DFSDM_FilterMspInit+0x190>)
 8004c5c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004c60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c64:	e883 0003 	stmia.w	r3, {r0, r1}
  DMA_Stream_TypeDef* AUDIO_DFSDMx_DMAx_MIC_STREAM[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_STREAM, AUDIO_DFSDMx_DMAx_MIC2_STREAM, AUDIO_DFSDMx_DMAx_MIC3_STREAM, AUDIO_DFSDMx_DMAx_MIC4_STREAM};
 8004c68:	4b5b      	ldr	r3, [pc, #364]	@ (8004dd8 <DFSDM_FilterMspInit+0x194>)
 8004c6a:	f107 0420 	add.w	r4, r7, #32
 8004c6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t AUDIO_DFSDMx_DMAx_MIC_REQUEST[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_REQUEST, AUDIO_DFSDMx_DMAx_MIC2_REQUEST, AUDIO_DFSDMx_DMAx_MIC3_REQUEST, AUDIO_DFSDMx_DMAx_MIC4_REQUEST};
 8004c74:	4b59      	ldr	r3, [pc, #356]	@ (8004ddc <DFSDM_FilterMspInit+0x198>)
 8004c76:	f107 0410 	add.w	r4, r7, #16
 8004c7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmFilter);

  /* Enable DFSDM clock */
  AUDIO_DFSDM1_CLK_ENABLE();
 8004c80:	4b57      	ldr	r3, [pc, #348]	@ (8004de0 <DFSDM_FilterMspInit+0x19c>)
 8004c82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c86:	4a56      	ldr	r2, [pc, #344]	@ (8004de0 <DFSDM_FilterMspInit+0x19c>)
 8004c88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c8c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c90:	4b53      	ldr	r3, [pc, #332]	@ (8004de0 <DFSDM_FilterMspInit+0x19c>)
 8004c92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c96:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DMA clock */
  AUDIO_DFSDM1_DMAx_CLK_ENABLE();
 8004c9e:	4b50      	ldr	r3, [pc, #320]	@ (8004de0 <DFSDM_FilterMspInit+0x19c>)
 8004ca0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ca4:	4a4e      	ldr	r2, [pc, #312]	@ (8004de0 <DFSDM_FilterMspInit+0x19c>)
 8004ca6:	f043 0302 	orr.w	r3, r3, #2
 8004caa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004cae:	4b4c      	ldr	r3, [pc, #304]	@ (8004de0 <DFSDM_FilterMspInit+0x19c>)
 8004cb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	68bb      	ldr	r3, [r7, #8]

  for(i = 0; i < DFSDM_MIC_NUMBER; i++)
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004cc0:	e188      	b.n	8004fd4 <DFSDM_FilterMspInit+0x390>
 8004cc2:	2310      	movs	r3, #16
 8004cc4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cc8:	fa93 f3a3 	rbit	r3, r3
 8004ccc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004cce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cd0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004cd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <DFSDM_FilterMspInit+0x98>
    return 32U;
 8004cd8:	2320      	movs	r3, #32
 8004cda:	e003      	b.n	8004ce4 <DFSDM_FilterMspInit+0xa0>
  return __builtin_clz(value);
 8004cdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cde:	fab3 f383 	clz	r3, r3
 8004ce2:	b2db      	uxtb	r3, r3
  {
    if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1))
 8004ce4:	3b04      	subs	r3, #4
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	3380      	adds	r3, #128	@ 0x80
 8004cea:	443b      	add	r3, r7
 8004cec:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d00f      	beq.n	8004d14 <DFSDM_FilterMspInit+0xd0>
 8004cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8004de4 <DFSDM_FilterMspInit+0x1a0>)
 8004cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d009      	beq.n	8004d14 <DFSDM_FilterMspInit+0xd0>
    {
      mic_num = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	67bb      	str	r3, [r7, #120]	@ 0x78
      mic_init[mic_num] = 1;
 8004d04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	3380      	adds	r3, #128	@ 0x80
 8004d0a:	443b      	add	r3, r7
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f843 2c48 	str.w	r2, [r3, #-72]
 8004d12:	e086      	b.n	8004e22 <DFSDM_FilterMspInit+0x1de>
 8004d14:	2320      	movs	r3, #32
 8004d16:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d1a:	fa93 f3a3 	rbit	r3, r3
 8004d1e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004d20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d22:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004d24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <DFSDM_FilterMspInit+0xea>
    return 32U;
 8004d2a:	2320      	movs	r3, #32
 8004d2c:	e003      	b.n	8004d36 <DFSDM_FilterMspInit+0xf2>
  return __builtin_clz(value);
 8004d2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d30:	fab3 f383 	clz	r3, r3
 8004d34:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC2) == AUDIO_IN_DEVICE_DIGITAL_MIC2))
 8004d36:	3b04      	subs	r3, #4
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	3380      	adds	r3, #128	@ 0x80
 8004d3c:	443b      	add	r3, r7
 8004d3e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d00f      	beq.n	8004d66 <DFSDM_FilterMspInit+0x122>
 8004d46:	4b27      	ldr	r3, [pc, #156]	@ (8004de4 <DFSDM_FilterMspInit+0x1a0>)
 8004d48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d009      	beq.n	8004d66 <DFSDM_FilterMspInit+0x122>
    {
      mic_num = 1U;
 8004d52:	2301      	movs	r3, #1
 8004d54:	67bb      	str	r3, [r7, #120]	@ 0x78
      mic_init[mic_num] = 1;
 8004d56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	3380      	adds	r3, #128	@ 0x80
 8004d5c:	443b      	add	r3, r7
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f843 2c48 	str.w	r2, [r3, #-72]
 8004d64:	e05d      	b.n	8004e22 <DFSDM_FilterMspInit+0x1de>
 8004d66:	2340      	movs	r3, #64	@ 0x40
 8004d68:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d6c:	fa93 f3a3 	rbit	r3, r3
 8004d70:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d74:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004d76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <DFSDM_FilterMspInit+0x13c>
    return 32U;
 8004d7c:	2320      	movs	r3, #32
 8004d7e:	e003      	b.n	8004d88 <DFSDM_FilterMspInit+0x144>
  return __builtin_clz(value);
 8004d80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d82:	fab3 f383 	clz	r3, r3
 8004d86:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC3)] != 1U) &&((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC3) == AUDIO_IN_DEVICE_DIGITAL_MIC3))
 8004d88:	3b04      	subs	r3, #4
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	3380      	adds	r3, #128	@ 0x80
 8004d8e:	443b      	add	r3, r7
 8004d90:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d00f      	beq.n	8004db8 <DFSDM_FilterMspInit+0x174>
 8004d98:	4b12      	ldr	r3, [pc, #72]	@ (8004de4 <DFSDM_FilterMspInit+0x1a0>)
 8004d9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d009      	beq.n	8004db8 <DFSDM_FilterMspInit+0x174>
    {
      mic_num = 2U;
 8004da4:	2302      	movs	r3, #2
 8004da6:	67bb      	str	r3, [r7, #120]	@ 0x78
      mic_init[mic_num] = 1;
 8004da8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	3380      	adds	r3, #128	@ 0x80
 8004dae:	443b      	add	r3, r7
 8004db0:	2201      	movs	r2, #1
 8004db2:	f843 2c48 	str.w	r2, [r3, #-72]
 8004db6:	e034      	b.n	8004e22 <DFSDM_FilterMspInit+0x1de>
 8004db8:	2380      	movs	r3, #128	@ 0x80
 8004dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dbe:	fa93 f3a3 	rbit	r3, r3
 8004dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004dc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dc6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004dc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10c      	bne.n	8004de8 <DFSDM_FilterMspInit+0x1a4>
    return 32U;
 8004dce:	2320      	movs	r3, #32
 8004dd0:	e00e      	b.n	8004df0 <DFSDM_FilterMspInit+0x1ac>
 8004dd2:	bf00      	nop
 8004dd4:	08015880 	.word	0x08015880
 8004dd8:	08015888 	.word	0x08015888
 8004ddc:	08015898 	.word	0x08015898
 8004de0:	58024400 	.word	0x58024400
 8004de4:	24000a68 	.word	0x24000a68
  return __builtin_clz(value);
 8004de8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dea:	fab3 f383 	clz	r3, r3
 8004dee:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC4)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC4) == AUDIO_IN_DEVICE_DIGITAL_MIC4))
 8004df0:	3b04      	subs	r3, #4
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	3380      	adds	r3, #128	@ 0x80
 8004df6:	443b      	add	r3, r7
 8004df8:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	f000 80ed 	beq.w	8004fdc <DFSDM_FilterMspInit+0x398>
 8004e02:	4b78      	ldr	r3, [pc, #480]	@ (8004fe4 <DFSDM_FilterMspInit+0x3a0>)
 8004e04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 80e6 	beq.w	8004fdc <DFSDM_FilterMspInit+0x398>
    {
      mic_num = 3U;
 8004e10:	2303      	movs	r3, #3
 8004e12:	67bb      	str	r3, [r7, #120]	@ 0x78
      mic_init[mic_num] = 1;
 8004e14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	3380      	adds	r3, #128	@ 0x80
 8004e1a:	443b      	add	r3, r7
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f843 2c48 	str.w	r2, [r3, #-72]
    else
    {
      break;
    }
    /* Configure the hDmaDfsdm[i] handle parameters */
    hDmaDfsdm[mic_num].Init.Request             = AUDIO_DFSDMx_DMAx_MIC_REQUEST[mic_num];
 8004e22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	3380      	adds	r3, #128	@ 0x80
 8004e28:	443b      	add	r3, r7
 8004e2a:	f853 1c70 	ldr.w	r1, [r3, #-112]
 8004e2e:	486e      	ldr	r0, [pc, #440]	@ (8004fe8 <DFSDM_FilterMspInit+0x3a4>)
 8004e30:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004e32:	4613      	mov	r3, r2
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	1a9b      	subs	r3, r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	4403      	add	r3, r0
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	6019      	str	r1, [r3, #0]
    hDmaDfsdm[mic_num].Instance                 = AUDIO_DFSDMx_DMAx_MIC_STREAM[mic_num];
 8004e40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	3380      	adds	r3, #128	@ 0x80
 8004e46:	443b      	add	r3, r7
 8004e48:	f853 1c60 	ldr.w	r1, [r3, #-96]
 8004e4c:	4866      	ldr	r0, [pc, #408]	@ (8004fe8 <DFSDM_FilterMspInit+0x3a4>)
 8004e4e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004e50:	4613      	mov	r3, r2
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	1a9b      	subs	r3, r3, r2
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	4403      	add	r3, r0
 8004e5a:	6019      	str	r1, [r3, #0]
    hDmaDfsdm[mic_num].Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8004e5c:	4962      	ldr	r1, [pc, #392]	@ (8004fe8 <DFSDM_FilterMspInit+0x3a4>)
 8004e5e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004e60:	4613      	mov	r3, r2
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	1a9b      	subs	r3, r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	440b      	add	r3, r1
 8004e6a:	3308      	adds	r3, #8
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphInc           = DMA_PINC_DISABLE;
 8004e70:	495d      	ldr	r1, [pc, #372]	@ (8004fe8 <DFSDM_FilterMspInit+0x3a4>)
 8004e72:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004e74:	4613      	mov	r3, r2
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	440b      	add	r3, r1
 8004e7e:	330c      	adds	r3, #12
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemInc              = DMA_MINC_ENABLE;
 8004e84:	4958      	ldr	r1, [pc, #352]	@ (8004fe8 <DFSDM_FilterMspInit+0x3a4>)
 8004e86:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004e88:	4613      	mov	r3, r2
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	440b      	add	r3, r1
 8004e92:	3310      	adds	r3, #16
 8004e94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e98:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004e9a:	4953      	ldr	r1, [pc, #332]	@ (8004fe8 <DFSDM_FilterMspInit+0x3a4>)
 8004e9c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	440b      	add	r3, r1
 8004ea8:	3314      	adds	r3, #20
 8004eaa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004eae:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004eb0:	494d      	ldr	r1, [pc, #308]	@ (8004fe8 <DFSDM_FilterMspInit+0x3a4>)
 8004eb2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	440b      	add	r3, r1
 8004ebe:	3318      	adds	r3, #24
 8004ec0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004ec4:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.Mode                = DMA_CIRCULAR;
 8004ec6:	4948      	ldr	r1, [pc, #288]	@ (8004fe8 <DFSDM_FilterMspInit+0x3a4>)
 8004ec8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004eca:	4613      	mov	r3, r2
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	440b      	add	r3, r1
 8004ed4:	331c      	adds	r3, #28
 8004ed6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004eda:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.Priority            = DMA_PRIORITY_HIGH;
 8004edc:	4942      	ldr	r1, [pc, #264]	@ (8004fe8 <DFSDM_FilterMspInit+0x3a4>)
 8004ede:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	1a9b      	subs	r3, r3, r2
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	440b      	add	r3, r1
 8004eea:	3320      	adds	r3, #32
 8004eec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004ef0:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004ef2:	493d      	ldr	r1, [pc, #244]	@ (8004fe8 <DFSDM_FilterMspInit+0x3a4>)
 8004ef4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	440b      	add	r3, r1
 8004f00:	3324      	adds	r3, #36	@ 0x24
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemBurst            = DMA_MBURST_SINGLE;
 8004f06:	4938      	ldr	r1, [pc, #224]	@ (8004fe8 <DFSDM_FilterMspInit+0x3a4>)
 8004f08:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	440b      	add	r3, r1
 8004f14:	332c      	adds	r3, #44	@ 0x2c
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8004f1a:	4933      	ldr	r1, [pc, #204]	@ (8004fe8 <DFSDM_FilterMspInit+0x3a4>)
 8004f1c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004f1e:	4613      	mov	r3, r2
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	1a9b      	subs	r3, r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	440b      	add	r3, r1
 8004f28:	3330      	adds	r3, #48	@ 0x30
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].State                    = HAL_DMA_STATE_RESET;
 8004f2e:	492e      	ldr	r1, [pc, #184]	@ (8004fe8 <DFSDM_FilterMspInit+0x3a4>)
 8004f30:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004f32:	4613      	mov	r3, r2
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	1a9b      	subs	r3, r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	440b      	add	r3, r1
 8004f3c:	3335      	adds	r3, #53	@ 0x35
 8004f3e:	2200      	movs	r2, #0
 8004f40:	701a      	strb	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&haudio_in_dfsdm_filter[mic_num], hdmaReg, hDmaDfsdm[mic_num]);
 8004f42:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004f44:	4613      	mov	r3, r2
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	1a9b      	subs	r3, r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	4a26      	ldr	r2, [pc, #152]	@ (8004fe8 <DFSDM_FilterMspInit+0x3a4>)
 8004f4e:	441a      	add	r2, r3
 8004f50:	4926      	ldr	r1, [pc, #152]	@ (8004fec <DFSDM_FilterMspInit+0x3a8>)
 8004f52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f54:	2054      	movs	r0, #84	@ 0x54
 8004f56:	fb00 f303 	mul.w	r3, r0, r3
 8004f5a:	440b      	add	r3, r1
 8004f5c:	3328      	adds	r3, #40	@ 0x28
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f62:	2254      	movs	r2, #84	@ 0x54
 8004f64:	fb02 f303 	mul.w	r3, r2, r3
 8004f68:	4a20      	ldr	r2, [pc, #128]	@ (8004fec <DFSDM_FilterMspInit+0x3a8>)
 8004f6a:	1899      	adds	r1, r3, r2
 8004f6c:	481e      	ldr	r0, [pc, #120]	@ (8004fe8 <DFSDM_FilterMspInit+0x3a4>)
 8004f6e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004f70:	4613      	mov	r3, r2
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	1a9b      	subs	r3, r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	4403      	add	r3, r0
 8004f7a:	3338      	adds	r3, #56	@ 0x38
 8004f7c:	6019      	str	r1, [r3, #0]

    /* Reset DMA handle state */
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaDfsdm[mic_num]);
 8004f7e:	491a      	ldr	r1, [pc, #104]	@ (8004fe8 <DFSDM_FilterMspInit+0x3a4>)
 8004f80:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004f82:	4613      	mov	r3, r2
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	440b      	add	r3, r1
 8004f8c:	3335      	adds	r3, #53	@ 0x35
 8004f8e:	2200      	movs	r2, #0
 8004f90:	701a      	strb	r2, [r3, #0]

    /* Configure the DMA Channel */
    (void)HAL_DMA_Init(&hDmaDfsdm[mic_num]);
 8004f92:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004f94:	4613      	mov	r3, r2
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	1a9b      	subs	r3, r3, r2
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	4a12      	ldr	r2, [pc, #72]	@ (8004fe8 <DFSDM_FilterMspInit+0x3a4>)
 8004f9e:	4413      	add	r3, r2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f002 fea7 	bl	8007cf4 <HAL_DMA_Init>

    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_DFSDM_DMAx_MIC_IRQHandler[mic_num], BSP_AUDIO_IN_IT_PRIORITY, 0);
 8004fa6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	3380      	adds	r3, #128	@ 0x80
 8004fac:	443b      	add	r3, r7
 8004fae:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	210f      	movs	r1, #15
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f002 fa8f 	bl	80074da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDM_DMAx_MIC_IRQHandler[mic_num]);
 8004fbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	3380      	adds	r3, #128	@ 0x80
 8004fc2:	443b      	add	r3, r7
 8004fc4:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f002 faa0 	bl	800750e <HAL_NVIC_EnableIRQ>
  for(i = 0; i < DFSDM_MIC_NUMBER; i++)
 8004fce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fd4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	f67f ae73 	bls.w	8004cc2 <DFSDM_FilterMspInit+0x7e>
  }
}
 8004fdc:	bf00      	nop
 8004fde:	3784      	adds	r7, #132	@ 0x84
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd90      	pop	{r4, r7, pc}
 8004fe4:	24000a68 	.word	0x24000a68
 8004fe8:	24000afc 	.word	0x24000afc
 8004fec:	24000708 	.word	0x24000708

08004ff0 <MX_SAI1_ClockConfig>:
    }
  }
}

HAL_StatusTypeDef MX_SAI1_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);
  HAL_StatusTypeDef ret = MX_SAI4_ClockConfig(hsai, SampleRate);
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f807 	bl	8005010 <MX_SAI4_ClockConfig>
 8005002:	4603      	mov	r3, r0
 8005004:	73fb      	strb	r3, [r7, #15]

  return ret;
 8005006:	7bfb      	ldrb	r3, [r7, #15]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <MX_SAI4_ClockConfig>:

HAL_StatusTypeDef MX_SAI4_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b0b0      	sub	sp, #192	@ 0xc0
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);
  HAL_StatusTypeDef ret = HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
  static uint8_t isClockingDone = 0U;

  if (isClockingDone == 0U)
 8005020:	4b1c      	ldr	r3, [pc, #112]	@ (8005094 <MX_SAI4_ClockConfig+0x84>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d12f      	bne.n	8005088 <MX_SAI4_ClockConfig+0x78>
  {
    
      RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005028:	f107 0308 	add.w	r3, r7, #8
 800502c:	22b4      	movs	r2, #180	@ 0xb4
 800502e:	2100      	movs	r1, #0
 8005030:	4618      	mov	r0, r3
 8005032:	f010 f973 	bl	801531c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A|RCC_PERIPHCLK_SAI1;
 8005036:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800503a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800503c:	2319      	movs	r3, #25
 800503e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 8005040:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8005044:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8005046:	2307      	movs	r3, #7
 8005048:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800504a:	2302      	movs	r3, #2
 800504c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800504e:	2302      	movs	r3, #2
 8005050:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8005052:	2300      	movs	r3, #0
 8005054:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8005056:	2320      	movs	r3, #32
 8005058:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800505a:	2300      	movs	r3, #0
 800505c:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800505e:	2301      	movs	r3, #1
 8005060:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL2;
 8005062:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005066:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800506a:	f107 0308 	add.w	r3, r7, #8
 800506e:	4618      	mov	r0, r3
 8005070:	f008 fb52 	bl	800d718 <HAL_RCCEx_PeriphCLKConfig>
 8005074:	4603      	mov	r3, r0
 8005076:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
  


    if (ret == HAL_OK)
 800507a:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800507e:	2b00      	cmp	r3, #0
 8005080:	d102      	bne.n	8005088 <MX_SAI4_ClockConfig+0x78>
    {
      isClockingDone = 1U;
 8005082:	4b04      	ldr	r3, [pc, #16]	@ (8005094 <MX_SAI4_ClockConfig+0x84>)
 8005084:	2201      	movs	r2, #1
 8005086:	701a      	strb	r2, [r3, #0]
    }
  }
  return ret;
 8005088:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
}
 800508c:	4618      	mov	r0, r3
 800508e:	37c0      	adds	r7, #192	@ 0xc0
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	24004edc 	.word	0x24004edc

08005098 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800509e:	2300      	movs	r3, #0
 80050a0:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 80050a2:	4b16      	ldr	r3, [pc, #88]	@ (80050fc <BSP_I2C4_Init+0x64>)
 80050a4:	4a16      	ldr	r2, [pc, #88]	@ (8005100 <BSP_I2C4_Init+0x68>)
 80050a6:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter++ == 0U)
 80050a8:	4b16      	ldr	r3, [pc, #88]	@ (8005104 <BSP_I2C4_Init+0x6c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	4915      	ldr	r1, [pc, #84]	@ (8005104 <BSP_I2C4_Init+0x6c>)
 80050b0:	600a      	str	r2, [r1, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d11d      	bne.n	80050f2 <BSP_I2C4_Init+0x5a>
  {
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80050b6:	4811      	ldr	r0, [pc, #68]	@ (80050fc <BSP_I2C4_Init+0x64>)
 80050b8:	f006 f9b2 	bl	800b420 <HAL_I2C_GetState>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d117      	bne.n	80050f2 <BSP_I2C4_Init+0x5a>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 80050c2:	480e      	ldr	r0, [pc, #56]	@ (80050fc <BSP_I2C4_Init+0x64>)
 80050c4:	f000 fb94 	bl	80057f0 <I2C4_MspInit>
        {
          ret = BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d111      	bne.n	80050f2 <BSP_I2C4_Init+0x5a>
      {
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80050ce:	f008 fb0d 	bl	800d6ec <HAL_RCC_GetPCLK2Freq>
 80050d2:	4603      	mov	r3, r0
 80050d4:	490c      	ldr	r1, [pc, #48]	@ (8005108 <BSP_I2C4_Init+0x70>)
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 f914 	bl	8005304 <I2C_GetTiming>
 80050dc:	4603      	mov	r3, r0
 80050de:	4619      	mov	r1, r3
 80050e0:	4806      	ldr	r0, [pc, #24]	@ (80050fc <BSP_I2C4_Init+0x64>)
 80050e2:	f000 f83b 	bl	800515c <MX_I2C4_Init>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <BSP_I2C4_Init+0x5a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80050ec:	f06f 0307 	mvn.w	r3, #7
 80050f0:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }

  return ret;
 80050f2:	687b      	ldr	r3, [r7, #4]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	24004ee0 	.word	0x24004ee0
 8005100:	58001c00 	.word	0x58001c00
 8005104:	24004f2c 	.word	0x24004f2c
 8005108:	000186a0 	.word	0x000186a0

0800510c <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval None
  */
int32_t BSP_I2C4_DeInit(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8005112:	2300      	movs	r3, #0
 8005114:	607b      	str	r3, [r7, #4]

  if (I2c4InitCounter > 0U)
 8005116:	4b0f      	ldr	r3, [pc, #60]	@ (8005154 <BSP_I2C4_DeInit+0x48>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d014      	beq.n	8005148 <BSP_I2C4_DeInit+0x3c>
  {
    if (--I2c4InitCounter == 0U)
 800511e:	4b0d      	ldr	r3, [pc, #52]	@ (8005154 <BSP_I2C4_DeInit+0x48>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3b01      	subs	r3, #1
 8005124:	4a0b      	ldr	r2, [pc, #44]	@ (8005154 <BSP_I2C4_DeInit+0x48>)
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	4b0a      	ldr	r3, [pc, #40]	@ (8005154 <BSP_I2C4_DeInit+0x48>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10b      	bne.n	8005148 <BSP_I2C4_DeInit+0x3c>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      I2C4_MspDeInit(&hbus_i2c4);
 8005130:	4809      	ldr	r0, [pc, #36]	@ (8005158 <BSP_I2C4_DeInit+0x4c>)
 8005132:	f000 fbc3 	bl	80058bc <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

      /* Init the I2C */
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8005136:	4808      	ldr	r0, [pc, #32]	@ (8005158 <BSP_I2C4_DeInit+0x4c>)
 8005138:	f005 ff00 	bl	800af3c <HAL_I2C_DeInit>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <BSP_I2C4_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8005142:	f06f 0307 	mvn.w	r3, #7
 8005146:	607b      	str	r3, [r7, #4]
      }
    }
  }

  return ret;
 8005148:	687b      	ldr	r3, [r7, #4]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	24004f2c 	.word	0x24004f2c
 8005158:	24004ee0 	.word	0x24004ee0

0800515c <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f005 fe3e 	bl	800ae1c <HAL_I2C_Init>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	73fb      	strb	r3, [r7, #15]
 80051aa:	e014      	b.n	80051d6 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOGFILTER_ENABLE : I2C_ANALOGFILTER_DISABLE;
 80051ac:	2300      	movs	r3, #0
 80051ae:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f006 fb6a 	bl	800b88c <HAL_I2CEx_ConfigAnalogFilter>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	73fb      	strb	r3, [r7, #15]
 80051c2:	e008      	b.n	80051d6 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80051c4:	2100      	movs	r1, #0
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f006 fbab 	bl	800b922 <HAL_I2CEx_ConfigDigitalFilter>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	60ba      	str	r2, [r7, #8]
 80051e8:	461a      	mov	r2, r3
 80051ea:	4603      	mov	r3, r0
 80051ec:	81fb      	strh	r3, [r7, #14]
 80051ee:	460b      	mov	r3, r1
 80051f0:	81bb      	strh	r3, [r7, #12]
 80051f2:	4613      	mov	r3, r2
 80051f4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80051f6:	89b9      	ldrh	r1, [r7, #12]
 80051f8:	89f8      	ldrh	r0, [r7, #14]
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2201      	movs	r2, #1
 8005202:	f000 fba5 	bl	8005950 <I2C4_ReadReg>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d102      	bne.n	8005212 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	e00c      	b.n	800522c <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005212:	4809      	ldr	r0, [pc, #36]	@ (8005238 <BSP_I2C4_ReadReg+0x58>)
 8005214:	f006 f912 	bl	800b43c <HAL_I2C_GetError>
 8005218:	4603      	mov	r3, r0
 800521a:	2b04      	cmp	r3, #4
 800521c:	d103      	bne.n	8005226 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800521e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	e002      	b.n	800522c <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005226:	f06f 0303 	mvn.w	r3, #3
 800522a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800522c:	697b      	ldr	r3, [r7, #20]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	24004ee0 	.word	0x24004ee0

0800523c <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af02      	add	r7, sp, #8
 8005242:	60ba      	str	r2, [r7, #8]
 8005244:	461a      	mov	r2, r3
 8005246:	4603      	mov	r3, r0
 8005248:	81fb      	strh	r3, [r7, #14]
 800524a:	460b      	mov	r3, r1
 800524c:	81bb      	strh	r3, [r7, #12]
 800524e:	4613      	mov	r3, r2
 8005250:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8005252:	89b9      	ldrh	r1, [r7, #12]
 8005254:	89f8      	ldrh	r0, [r7, #14]
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2202      	movs	r2, #2
 800525e:	f000 fb51 	bl	8005904 <I2C4_WriteReg>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d102      	bne.n	800526e <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	e00c      	b.n	8005288 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800526e:	4809      	ldr	r0, [pc, #36]	@ (8005294 <BSP_I2C4_WriteReg16+0x58>)
 8005270:	f006 f8e4 	bl	800b43c <HAL_I2C_GetError>
 8005274:	4603      	mov	r3, r0
 8005276:	2b04      	cmp	r3, #4
 8005278:	d103      	bne.n	8005282 <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800527a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	e002      	b.n	8005288 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005282:	f06f 0303 	mvn.w	r3, #3
 8005286:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8005288:	697b      	ldr	r3, [r7, #20]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	24004ee0 	.word	0x24004ee0

08005298 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af02      	add	r7, sp, #8
 800529e:	60ba      	str	r2, [r7, #8]
 80052a0:	461a      	mov	r2, r3
 80052a2:	4603      	mov	r3, r0
 80052a4:	81fb      	strh	r3, [r7, #14]
 80052a6:	460b      	mov	r3, r1
 80052a8:	81bb      	strh	r3, [r7, #12]
 80052aa:	4613      	mov	r3, r2
 80052ac:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80052ae:	89b9      	ldrh	r1, [r7, #12]
 80052b0:	89f8      	ldrh	r0, [r7, #14]
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2202      	movs	r2, #2
 80052ba:	f000 fb49 	bl	8005950 <I2C4_ReadReg>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d102      	bne.n	80052ca <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	e00c      	b.n	80052e4 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80052ca:	4809      	ldr	r0, [pc, #36]	@ (80052f0 <BSP_I2C4_ReadReg16+0x58>)
 80052cc:	f006 f8b6 	bl	800b43c <HAL_I2C_GetError>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d103      	bne.n	80052de <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80052d6:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	e002      	b.n	80052e4 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80052de:	f06f 0303 	mvn.w	r3, #3
 80052e2:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80052e4:	697b      	ldr	r3, [r7, #20]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	24004ee0 	.word	0x24004ee0

080052f4 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 80052f8:	f001 ffd4 	bl	80072a4 <HAL_GetTick>
 80052fc:	4603      	mov	r3, r0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d06b      	beq.n	80053f0 <I2C_GetTiming+0xec>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d068      	beq.n	80053f0 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800531e:	2300      	movs	r3, #0
 8005320:	613b      	str	r3, [r7, #16]
 8005322:	e060      	b.n	80053e6 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8005324:	4a35      	ldr	r2, [pc, #212]	@ (80053fc <I2C_GetTiming+0xf8>)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	212c      	movs	r1, #44	@ 0x2c
 800532a:	fb01 f303 	mul.w	r3, r1, r3
 800532e:	4413      	add	r3, r2
 8005330:	3304      	adds	r3, #4
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d352      	bcc.n	80053e0 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800533a:	4a30      	ldr	r2, [pc, #192]	@ (80053fc <I2C_GetTiming+0xf8>)
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	212c      	movs	r1, #44	@ 0x2c
 8005340:	fb01 f303 	mul.w	r3, r1, r3
 8005344:	4413      	add	r3, r2
 8005346:	3308      	adds	r3, #8
 8005348:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d847      	bhi.n	80053e0 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8005350:	6939      	ldr	r1, [r7, #16]
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f856 	bl	8005404 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8005358:	6939      	ldr	r1, [r7, #16]
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f940 	bl	80055e0 <I2C_Compute_SCLL_SCLH>
 8005360:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b7f      	cmp	r3, #127	@ 0x7f
 8005366:	d842      	bhi.n	80053ee <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005368:	4925      	ldr	r1, [pc, #148]	@ (8005400 <I2C_GetTiming+0xfc>)
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800537a:	4821      	ldr	r0, [pc, #132]	@ (8005400 <I2C_GetTiming+0xfc>)
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4613      	mov	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4403      	add	r3, r0
 8005388:	3304      	adds	r3, #4
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	051b      	lsls	r3, r3, #20
 800538e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005392:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8005394:	481a      	ldr	r0, [pc, #104]	@ (8005400 <I2C_GetTiming+0xfc>)
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4403      	add	r3, r0
 80053a2:	3308      	adds	r3, #8
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	041b      	lsls	r3, r3, #16
 80053a8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80053ac:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80053ae:	4814      	ldr	r0, [pc, #80]	@ (8005400 <I2C_GetTiming+0xfc>)
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4403      	add	r3, r0
 80053bc:	330c      	adds	r3, #12
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80053c4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80053c6:	480e      	ldr	r0, [pc, #56]	@ (8005400 <I2C_GetTiming+0xfc>)
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4613      	mov	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4403      	add	r3, r0
 80053d4:	3310      	adds	r3, #16
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80053da:	430b      	orrs	r3, r1
 80053dc:	617b      	str	r3, [r7, #20]
        }
        break;
 80053de:	e006      	b.n	80053ee <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	3301      	adds	r3, #1
 80053e4:	613b      	str	r3, [r7, #16]
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d99b      	bls.n	8005324 <I2C_GetTiming+0x20>
 80053ec:	e000      	b.n	80053f0 <I2C_GetTiming+0xec>
        break;
 80053ee:	bf00      	nop
      }
    }
  }

  return ret;
 80053f0:	697b      	ldr	r3, [r7, #20]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	08015984 	.word	0x08015984
 8005400:	24004f30 	.word	0x24004f30

08005404 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8005404:	b480      	push	{r7}
 8005406:	b08f      	sub	sp, #60	@ 0x3c
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800540e:	2310      	movs	r3, #16
 8005410:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	085a      	lsrs	r2, r3, #1
 8005416:	4b6e      	ldr	r3, [pc, #440]	@ (80055d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8005418:	4413      	add	r3, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005420:	61fb      	str	r3, [r7, #28]

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 8005422:	2332      	movs	r3, #50	@ 0x32
 8005424:	61bb      	str	r3, [r7, #24]
  tafdel_max = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 8005426:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800542a:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800542c:	4a69      	ldr	r2, [pc, #420]	@ (80055d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	212c      	movs	r1, #44	@ 0x2c
 8005432:	fb01 f303 	mul.w	r3, r1, r3
 8005436:	4413      	add	r3, r2
 8005438:	3324      	adds	r3, #36	@ 0x24
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	4a65      	ldr	r2, [pc, #404]	@ (80055d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	212c      	movs	r1, #44	@ 0x2c
 8005444:	fb01 f303 	mul.w	r3, r1, r3
 8005448:	4413      	add	r3, r2
 800544a:	330c      	adds	r3, #12
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005450:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005452:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005454:	495f      	ldr	r1, [pc, #380]	@ (80055d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	202c      	movs	r0, #44	@ 0x2c
 800545a:	fb00 f303 	mul.w	r3, r0, r3
 800545e:	440b      	add	r3, r1
 8005460:	3328      	adds	r3, #40	@ 0x28
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3303      	adds	r3, #3
 8005466:	69f9      	ldr	r1, [r7, #28]
 8005468:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005470:	4a58      	ldr	r2, [pc, #352]	@ (80055d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	212c      	movs	r1, #44	@ 0x2c
 8005476:	fb01 f303 	mul.w	r3, r1, r3
 800547a:	4413      	add	r3, r2
 800547c:	3310      	adds	r3, #16
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	4a54      	ldr	r2, [pc, #336]	@ (80055d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	212c      	movs	r1, #44	@ 0x2c
 8005488:	fb01 f303 	mul.w	r3, r1, r3
 800548c:	4413      	add	r3, r2
 800548e:	3320      	adds	r3, #32
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8005494:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005496:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8005498:	494e      	ldr	r1, [pc, #312]	@ (80055d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	202c      	movs	r0, #44	@ 0x2c
 800549e:	fb00 f303 	mul.w	r3, r0, r3
 80054a2:	440b      	add	r3, r1
 80054a4:	3328      	adds	r3, #40	@ 0x28
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3304      	adds	r3, #4
 80054aa:	69f9      	ldr	r1, [r7, #28]
 80054ac:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80054b4:	4a47      	ldr	r2, [pc, #284]	@ (80055d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	212c      	movs	r1, #44	@ 0x2c
 80054ba:	fb01 f303 	mul.w	r3, r1, r3
 80054be:	4413      	add	r3, r2
 80054c0:	3320      	adds	r3, #32
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	4a43      	ldr	r2, [pc, #268]	@ (80055d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	212c      	movs	r1, #44	@ 0x2c
 80054cc:	fb01 f303 	mul.w	r3, r1, r3
 80054d0:	4413      	add	r3, r2
 80054d2:	3314      	adds	r3, #20
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4403      	add	r3, r0
 80054d8:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80054da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054dc:	2b00      	cmp	r3, #0
 80054de:	dc01      	bgt.n	80054e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 80054e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	dc01      	bgt.n	80054ee <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80054ea:	2300      	movs	r3, #0
 80054ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80054ee:	2300      	movs	r3, #0
 80054f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054f2:	e062      	b.n	80055ba <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80054f4:	2300      	movs	r3, #0
 80054f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f8:	e059      	b.n	80055ae <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	3301      	adds	r3, #1
 80054fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005500:	3201      	adds	r2, #1
 8005502:	fb03 f202 	mul.w	r2, r3, r2
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	fb02 f303 	mul.w	r3, r2, r3
 800550c:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	429a      	cmp	r2, r3
 8005514:	d348      	bcc.n	80055a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005516:	2300      	movs	r3, #0
 8005518:	623b      	str	r3, [r7, #32]
 800551a:	e042      	b.n	80055a2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800551c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551e:	3301      	adds	r3, #1
 8005520:	6a3a      	ldr	r2, [r7, #32]
 8005522:	fb03 f202 	mul.w	r2, r3, r2
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	fb02 f303 	mul.w	r3, r2, r3
 800552c:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	429a      	cmp	r2, r3
 8005534:	d332      	bcc.n	800559c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8005536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	429a      	cmp	r2, r3
 800553c:	d82e      	bhi.n	800559c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800553e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005542:	429a      	cmp	r2, r3
 8005544:	d02a      	beq.n	800559c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005546:	4b24      	ldr	r3, [pc, #144]	@ (80055d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4924      	ldr	r1, [pc, #144]	@ (80055dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005558:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800555a:	4b1f      	ldr	r3, [pc, #124]	@ (80055d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	491f      	ldr	r1, [pc, #124]	@ (80055dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8005560:	4613      	mov	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	440b      	add	r3, r1
 800556a:	3304      	adds	r3, #4
 800556c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800556e:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8005570:	4b19      	ldr	r3, [pc, #100]	@ (80055d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	4919      	ldr	r1, [pc, #100]	@ (80055dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	440b      	add	r3, r1
 8005580:	3308      	adds	r3, #8
 8005582:	6a3a      	ldr	r2, [r7, #32]
 8005584:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8005586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005588:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 800558a:	4b13      	ldr	r3, [pc, #76]	@ (80055d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3301      	adds	r3, #1
 8005590:	4a11      	ldr	r2, [pc, #68]	@ (80055d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005592:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005594:	4b10      	ldr	r3, [pc, #64]	@ (80055d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b7f      	cmp	r3, #127	@ 0x7f
 800559a:	d812      	bhi.n	80055c2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	3301      	adds	r3, #1
 80055a0:	623b      	str	r3, [r7, #32]
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	2b0f      	cmp	r3, #15
 80055a6:	d9b9      	bls.n	800551c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80055a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055aa:	3301      	adds	r3, #1
 80055ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b0:	2b0f      	cmp	r3, #15
 80055b2:	d9a2      	bls.n	80054fa <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80055b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b6:	3301      	adds	r3, #1
 80055b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055bc:	2b0f      	cmp	r3, #15
 80055be:	d999      	bls.n	80054f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80055c0:	e000      	b.n	80055c4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80055c2:	bf00      	nop
          }
        }
      }
    }
  }
}
 80055c4:	373c      	adds	r7, #60	@ 0x3c
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	3b9aca00 	.word	0x3b9aca00
 80055d4:	08015984 	.word	0x08015984
 80055d8:	24005930 	.word	0x24005930
 80055dc:	24004f30 	.word	0x24004f30

080055e0 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b093      	sub	sp, #76	@ 0x4c
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 80055ea:	f04f 33ff 	mov.w	r3, #4294967295
 80055ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	085a      	lsrs	r2, r3, #1
 80055f4:	4b7a      	ldr	r3, [pc, #488]	@ (80057e0 <I2C_Compute_SCLL_SCLH+0x200>)
 80055f6:	4413      	add	r3, r2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80055fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8005600:	4a78      	ldr	r2, [pc, #480]	@ (80057e4 <I2C_Compute_SCLL_SCLH+0x204>)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	212c      	movs	r1, #44	@ 0x2c
 8005606:	fb01 f303 	mul.w	r3, r1, r3
 800560a:	4413      	add	r3, r2
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	085a      	lsrs	r2, r3, #1
 8005610:	4b73      	ldr	r3, [pc, #460]	@ (80057e0 <I2C_Compute_SCLL_SCLH+0x200>)
 8005612:	4413      	add	r3, r2
 8005614:	4973      	ldr	r1, [pc, #460]	@ (80057e4 <I2C_Compute_SCLL_SCLH+0x204>)
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	202c      	movs	r0, #44	@ 0x2c
 800561a:	fb00 f202 	mul.w	r2, r0, r2
 800561e:	440a      	add	r2, r1
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	fbb3 f3f2 	udiv	r3, r3, r2
 8005626:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 8005628:	2332      	movs	r3, #50	@ 0x32
 800562a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800562c:	4a6d      	ldr	r2, [pc, #436]	@ (80057e4 <I2C_Compute_SCLL_SCLH+0x204>)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	212c      	movs	r1, #44	@ 0x2c
 8005632:	fb01 f303 	mul.w	r3, r1, r3
 8005636:	4413      	add	r3, r2
 8005638:	3328      	adds	r3, #40	@ 0x28
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800563e:	fb02 f303 	mul.w	r3, r2, r3
 8005642:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8005644:	4a67      	ldr	r2, [pc, #412]	@ (80057e4 <I2C_Compute_SCLL_SCLH+0x204>)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	212c      	movs	r1, #44	@ 0x2c
 800564a:	fb01 f303 	mul.w	r3, r1, r3
 800564e:	4413      	add	r3, r2
 8005650:	3304      	adds	r3, #4
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a62      	ldr	r2, [pc, #392]	@ (80057e0 <I2C_Compute_SCLL_SCLH+0x200>)
 8005656:	fbb2 f3f3 	udiv	r3, r2, r3
 800565a:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800565c:	4a61      	ldr	r2, [pc, #388]	@ (80057e4 <I2C_Compute_SCLL_SCLH+0x204>)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	212c      	movs	r1, #44	@ 0x2c
 8005662:	fb01 f303 	mul.w	r3, r1, r3
 8005666:	4413      	add	r3, r2
 8005668:	3308      	adds	r3, #8
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a5c      	ldr	r2, [pc, #368]	@ (80057e0 <I2C_Compute_SCLL_SCLH+0x200>)
 800566e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005672:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8005674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005676:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005678:	2300      	movs	r3, #0
 800567a:	637b      	str	r3, [r7, #52]	@ 0x34
 800567c:	e0a3      	b.n	80057c6 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800567e:	495a      	ldr	r1, [pc, #360]	@ (80057e8 <I2C_Compute_SCLL_SCLH+0x208>)
 8005680:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005682:	4613      	mov	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	440b      	add	r3, r1
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005692:	fb02 f303 	mul.w	r3, r2, r3
 8005696:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005698:	2300      	movs	r3, #0
 800569a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800569c:	e08c      	b.n	80057b8 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800569e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	441a      	add	r2, r3
 80056a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056a6:	3301      	adds	r3, #1
 80056a8:	6979      	ldr	r1, [r7, #20]
 80056aa:	fb03 f101 	mul.w	r1, r3, r1
 80056ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	440b      	add	r3, r1
 80056b4:	4413      	add	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80056b8:	4a4a      	ldr	r2, [pc, #296]	@ (80057e4 <I2C_Compute_SCLL_SCLH+0x204>)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	212c      	movs	r1, #44	@ 0x2c
 80056be:	fb01 f303 	mul.w	r3, r1, r3
 80056c2:	4413      	add	r3, r2
 80056c4:	3318      	adds	r3, #24
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d971      	bls.n	80057b2 <I2C_Compute_SCLL_SCLH+0x1d2>
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	1ad2      	subs	r2, r2, r3
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	089b      	lsrs	r3, r3, #2
 80056da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056dc:	429a      	cmp	r2, r3
 80056de:	d268      	bcs.n	80057b2 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80056e0:	2300      	movs	r3, #0
 80056e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056e4:	e062      	b.n	80057ac <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80056e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	441a      	add	r2, r3
 80056ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ee:	3301      	adds	r3, #1
 80056f0:	6979      	ldr	r1, [r7, #20]
 80056f2:	fb03 f101 	mul.w	r1, r3, r1
 80056f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	440b      	add	r3, r1
 80056fc:	4413      	add	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	441a      	add	r2, r3
 8005706:	4937      	ldr	r1, [pc, #220]	@ (80057e4 <I2C_Compute_SCLL_SCLH+0x204>)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	202c      	movs	r0, #44	@ 0x2c
 800570c:	fb00 f303 	mul.w	r3, r0, r3
 8005710:	440b      	add	r3, r1
 8005712:	3320      	adds	r3, #32
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	441a      	add	r2, r3
 8005718:	4932      	ldr	r1, [pc, #200]	@ (80057e4 <I2C_Compute_SCLL_SCLH+0x204>)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	202c      	movs	r0, #44	@ 0x2c
 800571e:	fb00 f303 	mul.w	r3, r0, r3
 8005722:	440b      	add	r3, r1
 8005724:	3324      	adds	r3, #36	@ 0x24
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4413      	add	r3, r2
 800572a:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	429a      	cmp	r2, r3
 8005732:	d338      	bcc.n	80057a6 <I2C_Compute_SCLL_SCLH+0x1c6>
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	429a      	cmp	r2, r3
 800573a:	d834      	bhi.n	80057a6 <I2C_Compute_SCLL_SCLH+0x1c6>
 800573c:	4a29      	ldr	r2, [pc, #164]	@ (80057e4 <I2C_Compute_SCLL_SCLH+0x204>)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	212c      	movs	r1, #44	@ 0x2c
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	4413      	add	r3, r2
 8005748:	331c      	adds	r3, #28
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	429a      	cmp	r2, r3
 8005750:	d329      	bcc.n	80057a6 <I2C_Compute_SCLL_SCLH+0x1c6>
 8005752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	429a      	cmp	r2, r3
 8005758:	d225      	bcs.n	80057a6 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 8005762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005764:	2b00      	cmp	r3, #0
 8005766:	da02      	bge.n	800576e <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8005768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576a:	425b      	negs	r3, r3
 800576c:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800576e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005770:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005772:	429a      	cmp	r2, r3
 8005774:	d917      	bls.n	80057a6 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 800577a:	491b      	ldr	r1, [pc, #108]	@ (80057e8 <I2C_Compute_SCLL_SCLH+0x208>)
 800577c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	3310      	adds	r3, #16
 800578a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800578c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800578e:	4916      	ldr	r1, [pc, #88]	@ (80057e8 <I2C_Compute_SCLL_SCLH+0x208>)
 8005790:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005792:	4613      	mov	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	440b      	add	r3, r1
 800579c:	330c      	adds	r3, #12
 800579e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057a0:	601a      	str	r2, [r3, #0]
              ret = count;
 80057a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a4:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80057a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a8:	3301      	adds	r3, #1
 80057aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ae:	2bff      	cmp	r3, #255	@ 0xff
 80057b0:	d999      	bls.n	80056e6 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80057b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b4:	3301      	adds	r3, #1
 80057b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ba:	2bff      	cmp	r3, #255	@ 0xff
 80057bc:	f67f af6f 	bls.w	800569e <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80057c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c2:	3301      	adds	r3, #1
 80057c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80057c6:	4b09      	ldr	r3, [pc, #36]	@ (80057ec <I2C_Compute_SCLL_SCLH+0x20c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057cc:	429a      	cmp	r2, r3
 80057ce:	f4ff af56 	bcc.w	800567e <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80057d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	374c      	adds	r7, #76	@ 0x4c
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	3b9aca00 	.word	0x3b9aca00
 80057e4:	08015984 	.word	0x08015984
 80057e8:	24004f30 	.word	0x24004f30
 80057ec:	24005930 	.word	0x24005930

080057f0 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08a      	sub	sp, #40	@ 0x28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80057f8:	4b2e      	ldr	r3, [pc, #184]	@ (80058b4 <I2C4_MspInit+0xc4>)
 80057fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057fe:	4a2d      	ldr	r2, [pc, #180]	@ (80058b4 <I2C4_MspInit+0xc4>)
 8005800:	f043 0320 	orr.w	r3, r3, #32
 8005804:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005808:	4b2a      	ldr	r3, [pc, #168]	@ (80058b4 <I2C4_MspInit+0xc4>)
 800580a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	613b      	str	r3, [r7, #16]
 8005814:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8005816:	4b27      	ldr	r3, [pc, #156]	@ (80058b4 <I2C4_MspInit+0xc4>)
 8005818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800581c:	4a25      	ldr	r2, [pc, #148]	@ (80058b4 <I2C4_MspInit+0xc4>)
 800581e:	f043 0320 	orr.w	r3, r3, #32
 8005822:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005826:	4b23      	ldr	r3, [pc, #140]	@ (80058b4 <I2C4_MspInit+0xc4>)
 8005828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800582c:	f003 0320 	and.w	r3, r3, #32
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8005834:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005838:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800583a:	2312      	movs	r3, #18
 800583c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800583e:	2301      	movs	r3, #1
 8005840:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8005842:	2302      	movs	r3, #2
 8005844:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005846:	2304      	movs	r3, #4
 8005848:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800584a:	f107 0314 	add.w	r3, r7, #20
 800584e:	4619      	mov	r1, r3
 8005850:	4819      	ldr	r0, [pc, #100]	@ (80058b8 <I2C4_MspInit+0xc8>)
 8005852:	f005 f81f 	bl	800a894 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8005856:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800585a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800585c:	2304      	movs	r3, #4
 800585e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005860:	f107 0314 	add.w	r3, r7, #20
 8005864:	4619      	mov	r1, r3
 8005866:	4814      	ldr	r0, [pc, #80]	@ (80058b8 <I2C4_MspInit+0xc8>)
 8005868:	f005 f814 	bl	800a894 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800586c:	4b11      	ldr	r3, [pc, #68]	@ (80058b4 <I2C4_MspInit+0xc4>)
 800586e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005872:	4a10      	ldr	r2, [pc, #64]	@ (80058b4 <I2C4_MspInit+0xc4>)
 8005874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005878:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800587c:	4b0d      	ldr	r3, [pc, #52]	@ (80058b4 <I2C4_MspInit+0xc4>)
 800587e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005886:	60bb      	str	r3, [r7, #8]
 8005888:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800588a:	4b0a      	ldr	r3, [pc, #40]	@ (80058b4 <I2C4_MspInit+0xc4>)
 800588c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005890:	4a08      	ldr	r2, [pc, #32]	@ (80058b4 <I2C4_MspInit+0xc4>)
 8005892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005896:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800589a:	4b06      	ldr	r3, [pc, #24]	@ (80058b4 <I2C4_MspInit+0xc4>)
 800589c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058a0:	4a04      	ldr	r2, [pc, #16]	@ (80058b4 <I2C4_MspInit+0xc4>)
 80058a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058a6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 80058aa:	bf00      	nop
 80058ac:	3728      	adds	r7, #40	@ 0x28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	58024400 	.word	0x58024400
 80058b8:	58021400 	.word	0x58021400

080058bc <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 80058c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80058c8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4619      	mov	r1, r3
 80058ce:	480b      	ldr	r0, [pc, #44]	@ (80058fc <I2C4_MspDeInit+0x40>)
 80058d0:	f005 f988 	bl	800abe4 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 80058d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4619      	mov	r1, r3
 80058de:	4807      	ldr	r0, [pc, #28]	@ (80058fc <I2C4_MspDeInit+0x40>)
 80058e0:	f005 f980 	bl	800abe4 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80058e4:	4b06      	ldr	r3, [pc, #24]	@ (8005900 <I2C4_MspDeInit+0x44>)
 80058e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80058ea:	4a05      	ldr	r2, [pc, #20]	@ (8005900 <I2C4_MspDeInit+0x44>)
 80058ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 80058f4:	bf00      	nop
 80058f6:	3720      	adds	r7, #32
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	58021400 	.word	0x58021400
 8005900:	58024400 	.word	0x58024400

08005904 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af04      	add	r7, sp, #16
 800590a:	607b      	str	r3, [r7, #4]
 800590c:	4603      	mov	r3, r0
 800590e:	81fb      	strh	r3, [r7, #14]
 8005910:	460b      	mov	r3, r1
 8005912:	81bb      	strh	r3, [r7, #12]
 8005914:	4613      	mov	r3, r2
 8005916:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005918:	8978      	ldrh	r0, [r7, #10]
 800591a:	89ba      	ldrh	r2, [r7, #12]
 800591c:	89f9      	ldrh	r1, [r7, #14]
 800591e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005922:	9302      	str	r3, [sp, #8]
 8005924:	8b3b      	ldrh	r3, [r7, #24]
 8005926:	9301      	str	r3, [sp, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	4603      	mov	r3, r0
 800592e:	4807      	ldr	r0, [pc, #28]	@ (800594c <I2C4_WriteReg+0x48>)
 8005930:	f005 fb48 	bl	800afc4 <HAL_I2C_Mem_Write>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800593a:	2300      	movs	r3, #0
 800593c:	e001      	b.n	8005942 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800593e:	f06f 0307 	mvn.w	r3, #7
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	24004ee0 	.word	0x24004ee0

08005950 <I2C4_ReadReg>:
  * @param  MemAddSize Size of internal memory address
  * @param  Reg        The target register address to read
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af04      	add	r7, sp, #16
 8005956:	607b      	str	r3, [r7, #4]
 8005958:	4603      	mov	r3, r0
 800595a:	81fb      	strh	r3, [r7, #14]
 800595c:	460b      	mov	r3, r1
 800595e:	81bb      	strh	r3, [r7, #12]
 8005960:	4613      	mov	r3, r2
 8005962:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005964:	8978      	ldrh	r0, [r7, #10]
 8005966:	89ba      	ldrh	r2, [r7, #12]
 8005968:	89f9      	ldrh	r1, [r7, #14]
 800596a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800596e:	9302      	str	r3, [sp, #8]
 8005970:	8b3b      	ldrh	r3, [r7, #24]
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	4603      	mov	r3, r0
 800597a:	4807      	ldr	r0, [pc, #28]	@ (8005998 <I2C4_ReadReg+0x48>)
 800597c:	f005 fc36 	bl	800b1ec <HAL_I2C_Mem_Read>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8005986:	2300      	movs	r3, #0
 8005988:	e001      	b.n	800598e <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800598a:	f06f 0307 	mvn.w	r3, #7
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	24004ee0 	.word	0x24004ee0

0800599c <BSP_LCD_Init>:
  * @param  Orientation LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */

int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 80059a6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80059b0:	2201      	movs	r2, #1
 80059b2:	6839      	ldr	r1, [r7, #0]
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f805 	bl	80059c4 <BSP_LCD_InitEx>
 80059ba:	4603      	mov	r3, r0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b09e      	sub	sp, #120	@ 0x78
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80059d2:	2300      	movs	r3, #0
 80059d4:	677b      	str	r3, [r7, #116]	@ 0x74
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t io_comp_ctx;
  MX_LTDC_LayerConfig_t config;
  BSP_OSPI_RAM_Init_t ospi_init;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR))
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d802      	bhi.n	80059e2 <BSP_LCD_InitEx+0x1e>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <BSP_LCD_InitEx+0x26>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80059e2:	f06f 0301 	mvn.w	r3, #1
 80059e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80059e8:	e0cf      	b.n	8005b8a <BSP_LCD_InitEx+0x1c6>
  }
  else
  {
    switch(PixelFormat)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d105      	bne.n	80059fc <BSP_LCD_InitEx+0x38>
    {
    case LCD_PIXEL_FORMAT_RGB565:
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 80059f0:	2302      	movs	r3, #2
 80059f2:	673b      	str	r3, [r7, #112]	@ 0x70
      PixelFormatFactor = 2U;
 80059f4:	4b67      	ldr	r3, [pc, #412]	@ (8005b94 <BSP_LCD_InitEx+0x1d0>)
 80059f6:	2202      	movs	r2, #2
 80059f8:	601a      	str	r2, [r3, #0]
      break;
 80059fa:	e005      	b.n	8005a08 <BSP_LCD_InitEx+0x44>
    case LCD_PIXEL_FORMAT_RGB888:
    default:
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 80059fc:	2300      	movs	r3, #0
 80059fe:	673b      	str	r3, [r7, #112]	@ 0x70
      PixelFormatFactor = 4U;
 8005a00:	4b64      	ldr	r3, [pc, #400]	@ (8005b94 <BSP_LCD_InitEx+0x1d0>)
 8005a02:	2204      	movs	r2, #4
 8005a04:	601a      	str	r2, [r3, #0]
      break;
 8005a06:	bf00      	nop
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8005a08:	4963      	ldr	r1, [pc, #396]	@ (8005b98 <BSP_LCD_InitEx+0x1d4>)
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	4413      	add	r3, r2
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	440b      	add	r3, r1
 8005a16:	330c      	adds	r3, #12
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 8005a1c:	495e      	ldr	r1, [pc, #376]	@ (8005b98 <BSP_LCD_InitEx+0x1d4>)
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	4613      	mov	r3, r2
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	4413      	add	r3, r2
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	440b      	add	r3, r1
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8005a2e:	495a      	ldr	r1, [pc, #360]	@ (8005b98 <BSP_LCD_InitEx+0x1d4>)
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4613      	mov	r3, r2
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	4413      	add	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	440b      	add	r3, r1
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a42:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 8005a44:	4b55      	ldr	r3, [pc, #340]	@ (8005b9c <BSP_LCD_InitEx+0x1d8>)
 8005a46:	4a56      	ldr	r2, [pc, #344]	@ (8005ba0 <BSP_LCD_InitEx+0x1dc>)
 8005a48:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8005a4a:	4b56      	ldr	r3, [pc, #344]	@ (8005ba4 <BSP_LCD_InitEx+0x1e0>)
 8005a4c:	4a56      	ldr	r2, [pc, #344]	@ (8005ba8 <BSP_LCD_InitEx+0x1e4>)
 8005a4e:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8005a50:	4852      	ldr	r0, [pc, #328]	@ (8005b9c <BSP_LCD_InitEx+0x1d8>)
 8005a52:	f000 fd85 	bl	8006560 <LTDC_MspInit>
#endif
    /* De-assert display enable LCD_DISP_EN pin */
    HAL_GPIO_WritePin(LCD_DISP_EN_GPIO_PORT, LCD_DISP_EN_PIN, GPIO_PIN_RESET);
 8005a56:	2200      	movs	r2, #0
 8005a58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005a5c:	4853      	ldr	r0, [pc, #332]	@ (8005bac <BSP_LCD_InitEx+0x1e8>)
 8005a5e:	f005 f9c3 	bl	800ade8 <HAL_GPIO_WritePin>

    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(LCD_DISP_CTRL_GPIO_PORT, LCD_DISP_CTRL_PIN, GPIO_PIN_SET);
 8005a62:	2201      	movs	r2, #1
 8005a64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a68:	4851      	ldr	r0, [pc, #324]	@ (8005bb0 <BSP_LCD_InitEx+0x1ec>)
 8005a6a:	f005 f9bd 	bl	800ade8 <HAL_GPIO_WritePin>

    /* Assert backlight LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a74:	484f      	ldr	r0, [pc, #316]	@ (8005bb4 <BSP_LCD_InitEx+0x1f0>)
 8005a76:	f005 f9b7 	bl	800ade8 <HAL_GPIO_WritePin>

    DMA2D_MspInit(&hlcd_dma2d);
 8005a7a:	484a      	ldr	r0, [pc, #296]	@ (8005ba4 <BSP_LCD_InitEx+0x1e0>)
 8005a7c:	f000 fec2 	bl	8006804 <DMA2D_MspInit>

    io_comp_ctx.Init    = BSP_I2C4_Init;
 8005a80:	4b4d      	ldr	r3, [pc, #308]	@ (8005bb8 <BSP_LCD_InitEx+0x1f4>)
 8005a82:	633b      	str	r3, [r7, #48]	@ 0x30
    io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 8005a84:	4b4d      	ldr	r3, [pc, #308]	@ (8005bbc <BSP_LCD_InitEx+0x1f8>)
 8005a86:	643b      	str	r3, [r7, #64]	@ 0x40
    io_comp_ctx.Address = TS_I2C_ADDRESS;
 8005a88:	2370      	movs	r3, #112	@ 0x70
 8005a8a:	873b      	strh	r3, [r7, #56]	@ 0x38
    if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 8005a8c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8005a90:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005a94:	4611      	mov	r1, r2
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fa fc3a 	bl	8000310 <FT5336_RegisterBusIO>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	da03      	bge.n	8005aaa <BSP_LCD_InitEx+0xe6>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005aa2:	f06f 0306 	mvn.w	r3, #6
 8005aa6:	677b      	str	r3, [r7, #116]	@ 0x74
 8005aa8:	e02a      	b.n	8005b00 <BSP_LCD_InitEx+0x13c>
    }
    else if(FT5336_ReadID(&ts_comp_obj, &id) < 0)
 8005aaa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005aae:	4944      	ldr	r1, [pc, #272]	@ (8005bc0 <BSP_LCD_InitEx+0x1fc>)
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fa fc6f 	bl	8000394 <FT5336_ReadID>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	da03      	bge.n	8005ac4 <BSP_LCD_InitEx+0x100>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005abc:	f06f 0306 	mvn.w	r3, #6
 8005ac0:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ac2:	e01d      	b.n	8005b00 <BSP_LCD_InitEx+0x13c>
    }
    else if(id != FT5336_ID)
 8005ac4:	4b3e      	ldr	r3, [pc, #248]	@ (8005bc0 <BSP_LCD_InitEx+0x1fc>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b51      	cmp	r3, #81	@ 0x51
 8005aca:	d003      	beq.n	8005ad4 <BSP_LCD_InitEx+0x110>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005acc:	f06f 0306 	mvn.w	r3, #6
 8005ad0:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ad2:	e015      	b.n	8005b00 <BSP_LCD_InitEx+0x13c>
    }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8005ad4:	4831      	ldr	r0, [pc, #196]	@ (8005b9c <BSP_LCD_InitEx+0x1d8>)
 8005ad6:	f000 f903 	bl	8005ce0 <MX_LTDC_ClockConfig>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <BSP_LCD_InitEx+0x124>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005ae0:	f06f 0303 	mvn.w	r3, #3
 8005ae4:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ae6:	e00b      	b.n	8005b00 <BSP_LCD_InitEx+0x13c>
    }
    else
    {
      if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8005ae8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	482b      	ldr	r0, [pc, #172]	@ (8005b9c <BSP_LCD_InitEx+0x1d8>)
 8005af0:	f000 f868 	bl	8005bc4 <MX_LTDC_Init>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <BSP_LCD_InitEx+0x13c>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005afa:	f06f 0303 	mvn.w	r3, #3
 8005afe:	677b      	str	r3, [r7, #116]	@ 0x74
      }
    }

    if(ret == BSP_ERROR_NONE)
 8005b00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d141      	bne.n	8005b8a <BSP_LCD_InitEx+0x1c6>
    {
      /* Before configuring LTDC layer, ensure OSPI is initialized */
      ospi_init.LatencyType = BSP_OSPI_RAM_FIXED_LATENCY;
 8005b06:	2301      	movs	r3, #1
 8005b08:	753b      	strb	r3, [r7, #20]
      ospi_init.BurstType   = BSP_OSPI_RAM_LINEAR_BURST;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	757b      	strb	r3, [r7, #21]
      ospi_init.BurstLength = BSP_OSPI_RAM_BURST_32_BYTES;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	75bb      	strb	r3, [r7, #22]
      if(BSP_OSPI_RAM_Init(0, &ospi_init) != BSP_ERROR_NONE)
 8005b12:	f107 0314 	add.w	r3, r7, #20
 8005b16:	4619      	mov	r1, r3
 8005b18:	2000      	movs	r0, #0
 8005b1a:	f000 fea1 	bl	8006860 <BSP_OSPI_RAM_Init>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <BSP_LCD_InitEx+0x168>
      {
        ret = BSP_ERROR_NO_INIT;
 8005b24:	f04f 33ff 	mov.w	r3, #4294967295
 8005b28:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b2a:	e02e      	b.n	8005b8a <BSP_LCD_InitEx+0x1c6>
      }
      else if(BSP_OSPI_RAM_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	f000 ff8b 	bl	8006a48 <BSP_OSPI_RAM_EnableMemoryMappedMode>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <BSP_LCD_InitEx+0x17c>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005b38:	f06f 0303 	mvn.w	r3, #3
 8005b3c:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b3e:	e024      	b.n	8005b8a <BSP_LCD_InitEx+0x1c6>
      }
      else
      {
        /* Configure default LTDC Layer 0. This configuration can be override by calling
        BSP_LCD_ConfigLayer() at application level */
        config.X0          = 0;
 8005b40:	2300      	movs	r3, #0
 8005b42:	61bb      	str	r3, [r7, #24]
        config.X1          = Width;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	61fb      	str	r3, [r7, #28]
        config.Y0          = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	623b      	str	r3, [r7, #32]
        config.Y1          = Height;
 8005b4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b50:	627b      	str	r3, [r7, #36]	@ 0x24
        config.PixelFormat = ltdc_pixel_format;
 8005b52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b54:	62bb      	str	r3, [r7, #40]	@ 0x28
        config.Address     = LCD_LAYER_0_ADDRESS;
 8005b56:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8005b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005b5c:	f107 0318 	add.w	r3, r7, #24
 8005b60:	461a      	mov	r2, r3
 8005b62:	2100      	movs	r1, #0
 8005b64:	480d      	ldr	r0, [pc, #52]	@ (8005b9c <BSP_LCD_InitEx+0x1d8>)
 8005b66:	f000 f879 	bl	8005c5c <MX_LTDC_ConfigLayer>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <BSP_LCD_InitEx+0x1b2>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005b70:	f06f 0303 	mvn.w	r3, #3
 8005b74:	677b      	str	r3, [r7, #116]	@ 0x74
        }
        /* By default the reload is activated and executed immediately */
        Lcd_Ctx[Instance].ReloadEnable = 1U;
 8005b76:	4908      	ldr	r1, [pc, #32]	@ (8005b98 <BSP_LCD_InitEx+0x1d4>)
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	4413      	add	r3, r2
 8005b80:	00db      	lsls	r3, r3, #3
 8005b82:	440b      	add	r3, r1
 8005b84:	3314      	adds	r3, #20
 8005b86:	2201      	movs	r2, #1
 8005b88:	601a      	str	r2, [r3, #0]
      }
    }
   }

  return ret;
 8005b8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3778      	adds	r7, #120	@ 0x78
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	24005934 	.word	0x24005934
 8005b98:	24005a48 	.word	0x24005a48
 8005b9c:	240059a0 	.word	0x240059a0
 8005ba0:	50001000 	.word	0x50001000
 8005ba4:	24005938 	.word	0x24005938
 8005ba8:	52001000 	.word	0x52001000
 8005bac:	58021000 	.word	0x58021000
 8005bb0:	58020c00 	.word	0x58020c00
 8005bb4:	58021800 	.word	0x58021800
 8005bb8:	08005099 	.word	0x08005099
 8005bbc:	080051e1 	.word	0x080051e1
 8005bc0:	24005a60 	.word	0x24005a60

08005bc4 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4a21      	ldr	r2, [pc, #132]	@ (8005c58 <MX_LTDC_Init+0x94>)
 8005bd4:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2228      	movs	r2, #40	@ 0x28
 8005bf2:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP-11) - 1);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	222a      	movs	r2, #42	@ 0x2a
 8005bf8:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f103 0235 	add.w	r2, r3, #53	@ 0x35
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP-11) + RK043FN48H_HFP - 1;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2209      	movs	r2, #9
 8005c12:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	220b      	movs	r2, #11
 8005c18:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f103 020b 	add.w	r2, r3, #11
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f103 020d 	add.w	r2, r3, #13
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	22ff      	movs	r2, #255	@ 0xff
 8005c32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	22ff      	movs	r2, #255	@ 0xff
 8005c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	22ff      	movs	r2, #255	@ 0xff
 8005c42:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f005 feb8 	bl	800b9bc <HAL_LTDC_Init>
 8005c4c:	4603      	mov	r3, r0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	50001000 	.word	0x50001000

08005c5c <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b092      	sub	sp, #72	@ 0x48
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
 8005c86:	23ff      	movs	r3, #255	@ 0xff
 8005c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005c8e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005c92:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005c94:	2307      	movs	r3, #7
 8005c96:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005cc8:	f107 0314 	add.w	r3, r7, #20
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f005 ff4d 	bl	800bb70 <HAL_LTDC_ConfigLayer>
 8005cd6:	4603      	mov	r3, r0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3748      	adds	r7, #72	@ 0x48
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b0b0      	sub	sp, #192	@ 0xc0
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005ce8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005cec:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8005cee:	2305      	movs	r3, #5
 8005cf0:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8005cf2:	23a0      	movs	r3, #160	@ 0xa0
 8005cf4:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8005cfe:	2353      	movs	r3, #83	@ 0x53
 8005d00:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8005d02:	2300      	movs	r3, #0
 8005d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL1VCOWIDE;
 8005d06:	2300      	movs	r3, #0
 8005d08:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL1VCIRANGE_0;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	647b      	str	r3, [r7, #68]	@ 0x44


  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005d0e:	f107 030c 	add.w	r3, r7, #12
 8005d12:	4618      	mov	r0, r3
 8005d14:	f007 fd00 	bl	800d718 <HAL_RCCEx_PeriphCLKConfig>
 8005d18:	4603      	mov	r3, r0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	37c0      	adds	r7, #192	@ 0xc0
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d003      	beq.n	8005d40 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005d38:	f06f 0301 	mvn.w	r3, #1
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	e00a      	b.n	8005d56 <BSP_LCD_GetPixelFormat+0x32>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8005d40:	4908      	ldr	r1, [pc, #32]	@ (8005d64 <BSP_LCD_GetPixelFormat+0x40>)
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	4613      	mov	r3, r2
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	4413      	add	r3, r2
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	440b      	add	r3, r1
 8005d4e:	330c      	adds	r3, #12
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8005d56:	68fb      	ldr	r3, [r7, #12]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	24005a48 	.word	0x24005a48

08005d68 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005d7c:	f06f 0301 	mvn.w	r3, #1
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	e009      	b.n	8005d98 <BSP_LCD_SetActiveLayer+0x30>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8005d84:	4908      	ldr	r1, [pc, #32]	@ (8005da8 <BSP_LCD_SetActiveLayer+0x40>)
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	4413      	add	r3, r2
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	440b      	add	r3, r1
 8005d92:	3308      	adds	r3, #8
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8005d98:	68fb      	ldr	r3, [r7, #12]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	24005a48 	.word	0x24005a48

08005dac <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005dc0:	f06f 0301 	mvn.w	r3, #1
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	e009      	b.n	8005ddc <BSP_LCD_GetXSize+0x30>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8005dc8:	4908      	ldr	r1, [pc, #32]	@ (8005dec <BSP_LCD_GetXSize+0x40>)
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	4413      	add	r3, r2
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	440b      	add	r3, r1
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	24005a48 	.word	0x24005a48

08005df0 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005e04:	f06f 0301 	mvn.w	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	e00a      	b.n	8005e22 <BSP_LCD_GetYSize+0x32>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8005e0c:	4908      	ldr	r1, [pc, #32]	@ (8005e30 <BSP_LCD_GetYSize+0x40>)
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	4613      	mov	r3, r2
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	4413      	add	r3, r2
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	440b      	add	r3, r1
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8005e22:	68fb      	ldr	r3, [r7, #12]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	24005a48 	.word	0x24005a48

08005e34 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pbmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08e      	sub	sp, #56	@ 0x38
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005e42:	2300      	movs	r3, #0
 8005e44:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	330a      	adds	r3, #10
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	330b      	adds	r3, #11
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	021b      	lsls	r3, r3, #8
 8005e56:	441a      	add	r2, r3
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	330c      	adds	r3, #12
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	041b      	lsls	r3, r3, #16
 8005e60:	441a      	add	r2, r3
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	330d      	adds	r3, #13
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	061b      	lsls	r3, r3, #24
 8005e6a:	4413      	add	r3, r2
 8005e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	3312      	adds	r3, #18
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	461a      	mov	r2, r3
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	3313      	adds	r3, #19
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	441a      	add	r2, r3
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	3314      	adds	r3, #20
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	041b      	lsls	r3, r3, #16
 8005e88:	441a      	add	r2, r3
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	3315      	adds	r3, #21
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	061b      	lsls	r3, r3, #24
 8005e92:	4413      	add	r3, r2
 8005e94:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	3316      	adds	r3, #22
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	3317      	adds	r3, #23
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	021b      	lsls	r3, r3, #8
 8005ea6:	441a      	add	r2, r3
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	3318      	adds	r3, #24
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	041b      	lsls	r3, r3, #16
 8005eb0:	441a      	add	r2, r3
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	3319      	adds	r3, #25
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	061b      	lsls	r3, r3, #24
 8005eba:	4413      	add	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	331c      	adds	r3, #28
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	331d      	adds	r3, #29
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	021b      	lsls	r3, r3, #8
 8005ece:	4413      	add	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*PixelFormatFactor);
 8005ed2:	4938      	ldr	r1, [pc, #224]	@ (8005fb4 <BSP_LCD_DrawBitmap+0x180>)
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	4413      	add	r3, r2
 8005edc:	00db      	lsls	r3, r3, #3
 8005ede:	440b      	add	r3, r1
 8005ee0:	3308      	adds	r3, #8
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a34      	ldr	r2, [pc, #208]	@ (8005fb8 <BSP_LCD_DrawBitmap+0x184>)
 8005ee6:	2134      	movs	r1, #52	@ 0x34
 8005ee8:	fb01 f303 	mul.w	r3, r1, r3
 8005eec:	4413      	add	r3, r2
 8005eee:	335c      	adds	r3, #92	@ 0x5c
 8005ef0:	6819      	ldr	r1, [r3, #0]
 8005ef2:	4830      	ldr	r0, [pc, #192]	@ (8005fb4 <BSP_LCD_DrawBitmap+0x180>)
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	4413      	add	r3, r2
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	4403      	add	r3, r0
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	fb03 f202 	mul.w	r2, r3, r2
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8005fbc <BSP_LCD_DrawBitmap+0x188>)
 8005f0e:	6812      	ldr	r2, [r2, #0]
 8005f10:	fb02 f303 	mul.w	r3, r2, r3
 8005f14:	440b      	add	r3, r1
 8005f16:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	3b20      	subs	r3, #32
 8005f1c:	2b07      	cmp	r3, #7
 8005f1e:	d802      	bhi.n	8005f26 <BSP_LCD_DrawBitmap+0xf2>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8005f20:	2300      	movs	r3, #0
 8005f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f24:	e008      	b.n	8005f38 <BSP_LCD_DrawBitmap+0x104>
  }
  else if ((bit_pixel/8U) == 2U)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	3b10      	subs	r3, #16
 8005f2a:	2b07      	cmp	r3, #7
 8005f2c:	d802      	bhi.n	8005f34 <BSP_LCD_DrawBitmap+0x100>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 8005f2e:	2302      	movs	r3, #2
 8005f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f32:	e001      	b.n	8005f38 <BSP_LCD_DrawBitmap+0x104>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8005f34:	2301      	movs	r3, #1
 8005f36:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	fb02 f303 	mul.w	r3, r2, r3
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	08d2      	lsrs	r2, r2, #3
 8005f46:	fb03 f202 	mul.w	r2, r3, r2
 8005f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4c:	4413      	add	r3, r2
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	4413      	add	r3, r2
 8005f52:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8005f54:	2300      	movs	r3, #0
 8005f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f58:	e022      	b.n	8005fa0 <BSP_LCD_DrawBitmap+0x16c>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8005f5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	6a39      	ldr	r1, [r7, #32]
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 faa3 	bl	80064b0 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * PixelFormatFactor);
 8005f6a:	4912      	ldr	r1, [pc, #72]	@ (8005fb4 <BSP_LCD_DrawBitmap+0x180>)
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	4413      	add	r3, r2
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	440b      	add	r3, r1
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a10      	ldr	r2, [pc, #64]	@ (8005fbc <BSP_LCD_DrawBitmap+0x188>)
 8005f7c:	6812      	ldr	r2, [r2, #0]
 8005f7e:	fb02 f303 	mul.w	r3, r2, r3
 8005f82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f84:	4413      	add	r3, r2
 8005f86:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	08db      	lsrs	r3, r3, #3
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	fb02 f303 	mul.w	r3, r2, r3
 8005f92:	425b      	negs	r3, r3
 8005f94:	6a3a      	ldr	r2, [r7, #32]
 8005f96:	4413      	add	r3, r2
 8005f98:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 8005f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d3d8      	bcc.n	8005f5a <BSP_LCD_DrawBitmap+0x126>
  }

  return ret;
 8005fa8:	69fb      	ldr	r3, [r7, #28]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3730      	adds	r7, #48	@ 0x30
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	24005a48 	.word	0x24005a48
 8005fb8:	240059a0 	.word	0x240059a0
 8005fbc:	24005934 	.word	0x24005934

08005fc0 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
    }
    pData += PixelFormatFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8005fce:	2300      	movs	r3, #0
 8005fd0:	61fb      	str	r3, [r7, #28]
 8005fd2:	e02e      	b.n	8006032 <BSP_LCD_FillRGBRect+0x72>
  {
    for(j = 0; j < Width; j++)
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	61bb      	str	r3, [r7, #24]
 8005fd8:	e024      	b.n	8006024 <BSP_LCD_FillRGBRect+0x64>
    {
      color = *pData | (*(pData + 1) << 8) | (*(pData + 2) << 16) | (*(pData + 3) << 24);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	021b      	lsls	r3, r3, #8
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	3302      	adds	r3, #2
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	041b      	lsls	r3, r3, #16
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	3303      	adds	r3, #3
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	061b      	lsls	r3, r3, #24
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]
      BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	18d1      	adds	r1, r2, r3
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	441a      	add	r2, r3
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 f976 	bl	8006300 <BSP_LCD_WritePixel>
      pData += PixelFormatFactor;
 8006014:	4b0b      	ldr	r3, [pc, #44]	@ (8006044 <BSP_LCD_FillRGBRect+0x84>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	4413      	add	r3, r2
 800601c:	603b      	str	r3, [r7, #0]
    for(j = 0; j < Width; j++)
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	3301      	adds	r3, #1
 8006022:	61bb      	str	r3, [r7, #24]
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006028:	429a      	cmp	r2, r3
 800602a:	d3d6      	bcc.n	8005fda <BSP_LCD_FillRGBRect+0x1a>
  for(i = 0; i < Height; i++)
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	3301      	adds	r3, #1
 8006030:	61fb      	str	r3, [r7, #28]
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006036:	429a      	cmp	r2, r3
 8006038:	d3cc      	bcc.n	8005fd4 <BSP_LCD_FillRGBRect+0x14>
    }
  }
#endif
  return BSP_ERROR_NONE;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3720      	adds	r7, #32
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	24005934 	.word	0x24005934

08006048 <BSP_LCD_DrawHLine>:
  * @param  Xpos  X position
  * @param  Ypos  Y position
  * @param  Length  Line length
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08a      	sub	sp, #40	@ 0x28
 800604c:	af04      	add	r7, sp, #16
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (PixelFormatFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8006056:	491e      	ldr	r1, [pc, #120]	@ (80060d0 <BSP_LCD_DrawHLine+0x88>)
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4613      	mov	r3, r2
 800605c:	005b      	lsls	r3, r3, #1
 800605e:	4413      	add	r3, r2
 8006060:	00db      	lsls	r3, r3, #3
 8006062:	440b      	add	r3, r1
 8006064:	3308      	adds	r3, #8
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a1a      	ldr	r2, [pc, #104]	@ (80060d4 <BSP_LCD_DrawHLine+0x8c>)
 800606a:	2134      	movs	r1, #52	@ 0x34
 800606c:	fb01 f303 	mul.w	r3, r1, r3
 8006070:	4413      	add	r3, r2
 8006072:	335c      	adds	r3, #92	@ 0x5c
 8006074:	6819      	ldr	r1, [r3, #0]
 8006076:	4816      	ldr	r0, [pc, #88]	@ (80060d0 <BSP_LCD_DrawHLine+0x88>)
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	4613      	mov	r3, r2
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	4413      	add	r3, r2
 8006080:	00db      	lsls	r3, r3, #3
 8006082:	4403      	add	r3, r0
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	fb03 f202 	mul.w	r2, r3, r2
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	4413      	add	r3, r2
 8006090:	4a11      	ldr	r2, [pc, #68]	@ (80060d8 <BSP_LCD_DrawHLine+0x90>)
 8006092:	6812      	ldr	r2, [r2, #0]
 8006094:	fb02 f303 	mul.w	r3, r2, r3
 8006098:	440b      	add	r3, r1
 800609a:	617b      	str	r3, [r7, #20]

  /* Write line */
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, Color);
 800609c:	490c      	ldr	r1, [pc, #48]	@ (80060d0 <BSP_LCD_DrawHLine+0x88>)
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4613      	mov	r3, r2
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	4413      	add	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	440b      	add	r3, r1
 80060aa:	3308      	adds	r3, #8
 80060ac:	6819      	ldr	r1, [r3, #0]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	9302      	str	r3, [sp, #8]
 80060b4:	2300      	movs	r3, #0
 80060b6:	9301      	str	r3, [sp, #4]
 80060b8:	2301      	movs	r3, #1
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 f988 	bl	80063d4 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	24005a48 	.word	0x24005a48
 80060d4:	240059a0 	.word	0x240059a0
 80060d8:	24005934 	.word	0x24005934

080060dc <BSP_LCD_DrawVLine>:
  * @param  Xpos  X position
  * @param  Ypos  Y position
  * @param  Length  Line length
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80060dc:	b590      	push	{r4, r7, lr}
 80060de:	b08b      	sub	sp, #44	@ 0x2c
 80060e0:	af04      	add	r7, sp, #16
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80060ea:	4922      	ldr	r1, [pc, #136]	@ (8006174 <BSP_LCD_DrawVLine+0x98>)
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4613      	mov	r3, r2
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	4413      	add	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	440b      	add	r3, r1
 80060f8:	3308      	adds	r3, #8
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a1e      	ldr	r2, [pc, #120]	@ (8006178 <BSP_LCD_DrawVLine+0x9c>)
 80060fe:	2134      	movs	r1, #52	@ 0x34
 8006100:	fb01 f303 	mul.w	r3, r1, r3
 8006104:	4413      	add	r3, r2
 8006106:	335c      	adds	r3, #92	@ 0x5c
 8006108:	6819      	ldr	r1, [r3, #0]
 800610a:	481a      	ldr	r0, [pc, #104]	@ (8006174 <BSP_LCD_DrawVLine+0x98>)
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4613      	mov	r3, r2
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	4413      	add	r3, r2
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	4403      	add	r3, r0
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	fb03 f202 	mul.w	r2, r3, r2
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	4413      	add	r3, r2
 8006124:	4a15      	ldr	r2, [pc, #84]	@ (800617c <BSP_LCD_DrawVLine+0xa0>)
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	fb02 f303 	mul.w	r3, r2, r3
 800612c:	440b      	add	r3, r1
 800612e:	617b      	str	r3, [r7, #20]

  /* Write line */
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8006130:	4910      	ldr	r1, [pc, #64]	@ (8006174 <BSP_LCD_DrawVLine+0x98>)
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	4613      	mov	r3, r2
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	4413      	add	r3, r2
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	440b      	add	r3, r1
 800613e:	3308      	adds	r3, #8
 8006140:	6819      	ldr	r1, [r3, #0]
 8006142:	6978      	ldr	r0, [r7, #20]
 8006144:	4c0b      	ldr	r4, [pc, #44]	@ (8006174 <BSP_LCD_DrawVLine+0x98>)
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4613      	mov	r3, r2
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	4413      	add	r3, r2
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	4423      	add	r3, r4
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3b01      	subs	r3, #1
 8006156:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006158:	9202      	str	r2, [sp, #8]
 800615a:	9301      	str	r3, [sp, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	2301      	movs	r3, #1
 8006162:	4602      	mov	r2, r0
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 f935 	bl	80063d4 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	bd90      	pop	{r4, r7, pc}
 8006174:	24005a48 	.word	0x24005a48
 8006178:	240059a0 	.word	0x240059a0
 800617c:	24005934 	.word	0x24005934

08006180 <BSP_LCD_FillRect>:
  * @param  Ypos Y position
  * @param  Width Rectangle width
  * @param  Height Rectangle height
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8006180:	b590      	push	{r4, r7, lr}
 8006182:	b08b      	sub	sp, #44	@ 0x2c
 8006184:	af04      	add	r7, sp, #16
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800618e:	4923      	ldr	r1, [pc, #140]	@ (800621c <BSP_LCD_FillRect+0x9c>)
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4613      	mov	r3, r2
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	4413      	add	r3, r2
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	440b      	add	r3, r1
 800619c:	3308      	adds	r3, #8
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a1f      	ldr	r2, [pc, #124]	@ (8006220 <BSP_LCD_FillRect+0xa0>)
 80061a2:	2134      	movs	r1, #52	@ 0x34
 80061a4:	fb01 f303 	mul.w	r3, r1, r3
 80061a8:	4413      	add	r3, r2
 80061aa:	335c      	adds	r3, #92	@ 0x5c
 80061ac:	6819      	ldr	r1, [r3, #0]
 80061ae:	481b      	ldr	r0, [pc, #108]	@ (800621c <BSP_LCD_FillRect+0x9c>)
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4613      	mov	r3, r2
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	4413      	add	r3, r2
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	4403      	add	r3, r0
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	fb03 f202 	mul.w	r2, r3, r2
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4413      	add	r3, r2
 80061c8:	4a16      	ldr	r2, [pc, #88]	@ (8006224 <BSP_LCD_FillRect+0xa4>)
 80061ca:	6812      	ldr	r2, [r2, #0]
 80061cc:	fb02 f303 	mul.w	r3, r2, r3
 80061d0:	440b      	add	r3, r1
 80061d2:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80061d4:	4911      	ldr	r1, [pc, #68]	@ (800621c <BSP_LCD_FillRect+0x9c>)
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	4613      	mov	r3, r2
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	4413      	add	r3, r2
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	440b      	add	r3, r1
 80061e2:	3308      	adds	r3, #8
 80061e4:	6819      	ldr	r1, [r3, #0]
 80061e6:	6978      	ldr	r0, [r7, #20]
 80061e8:	4c0c      	ldr	r4, [pc, #48]	@ (800621c <BSP_LCD_FillRect+0x9c>)
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4613      	mov	r3, r2
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	4413      	add	r3, r2
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	4423      	add	r3, r4
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061fe:	9202      	str	r2, [sp, #8]
 8006200:	9301      	str	r3, [sp, #4]
 8006202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	4602      	mov	r2, r0
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 f8e2 	bl	80063d4 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	bd90      	pop	{r4, r7, pc}
 800621a:	bf00      	nop
 800621c:	24005a48 	.word	0x24005a48
 8006220:	240059a0 	.word	0x240059a0
 8006224:	24005934 	.word	0x24005934

08006228 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval Value  pixel color
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006236:	4930      	ldr	r1, [pc, #192]	@ (80062f8 <BSP_LCD_ReadPixel+0xd0>)
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	4613      	mov	r3, r2
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	4413      	add	r3, r2
 8006240:	00db      	lsls	r3, r3, #3
 8006242:	440b      	add	r3, r1
 8006244:	3308      	adds	r3, #8
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a2c      	ldr	r2, [pc, #176]	@ (80062fc <BSP_LCD_ReadPixel+0xd4>)
 800624a:	2134      	movs	r1, #52	@ 0x34
 800624c:	fb01 f303 	mul.w	r3, r1, r3
 8006250:	4413      	add	r3, r2
 8006252:	3348      	adds	r3, #72	@ 0x48
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d122      	bne.n	80062a0 <BSP_LCD_ReadPixel+0x78>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800625a:	4927      	ldr	r1, [pc, #156]	@ (80062f8 <BSP_LCD_ReadPixel+0xd0>)
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4613      	mov	r3, r2
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	4413      	add	r3, r2
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	440b      	add	r3, r1
 8006268:	3308      	adds	r3, #8
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a23      	ldr	r2, [pc, #140]	@ (80062fc <BSP_LCD_ReadPixel+0xd4>)
 800626e:	2134      	movs	r1, #52	@ 0x34
 8006270:	fb01 f303 	mul.w	r3, r1, r3
 8006274:	4413      	add	r3, r2
 8006276:	335c      	adds	r3, #92	@ 0x5c
 8006278:	6819      	ldr	r1, [r3, #0]
 800627a:	481f      	ldr	r0, [pc, #124]	@ (80062f8 <BSP_LCD_ReadPixel+0xd0>)
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4613      	mov	r3, r2
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	4413      	add	r3, r2
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	4403      	add	r3, r0
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	fb03 f202 	mul.w	r2, r3, r2
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	4413      	add	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	440b      	add	r3, r1
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	e023      	b.n	80062e8 <BSP_LCD_ReadPixel+0xc0>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80062a0:	4915      	ldr	r1, [pc, #84]	@ (80062f8 <BSP_LCD_ReadPixel+0xd0>)
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	4613      	mov	r3, r2
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	4413      	add	r3, r2
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	440b      	add	r3, r1
 80062ae:	3308      	adds	r3, #8
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a12      	ldr	r2, [pc, #72]	@ (80062fc <BSP_LCD_ReadPixel+0xd4>)
 80062b4:	2134      	movs	r1, #52	@ 0x34
 80062b6:	fb01 f303 	mul.w	r3, r1, r3
 80062ba:	4413      	add	r3, r2
 80062bc:	335c      	adds	r3, #92	@ 0x5c
 80062be:	6819      	ldr	r1, [r3, #0]
 80062c0:	480d      	ldr	r0, [pc, #52]	@ (80062f8 <BSP_LCD_ReadPixel+0xd0>)
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4613      	mov	r3, r2
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	4413      	add	r3, r2
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	4403      	add	r3, r0
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	fb03 f202 	mul.w	r2, r3, r2
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	4413      	add	r3, r2
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	440b      	add	r3, r1
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	461a      	mov	r2, r3
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	24005a48 	.word	0x24005a48
 80062fc:	240059a0 	.word	0x240059a0

08006300 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800630e:	492f      	ldr	r1, [pc, #188]	@ (80063cc <BSP_LCD_WritePixel+0xcc>)
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4613      	mov	r3, r2
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	4413      	add	r3, r2
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	440b      	add	r3, r1
 800631c:	3308      	adds	r3, #8
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a2b      	ldr	r2, [pc, #172]	@ (80063d0 <BSP_LCD_WritePixel+0xd0>)
 8006322:	2134      	movs	r1, #52	@ 0x34
 8006324:	fb01 f303 	mul.w	r3, r1, r3
 8006328:	4413      	add	r3, r2
 800632a:	3348      	adds	r3, #72	@ 0x48
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d122      	bne.n	8006378 <BSP_LCD_WritePixel+0x78>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8006332:	4926      	ldr	r1, [pc, #152]	@ (80063cc <BSP_LCD_WritePixel+0xcc>)
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4613      	mov	r3, r2
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	4413      	add	r3, r2
 800633c:	00db      	lsls	r3, r3, #3
 800633e:	440b      	add	r3, r1
 8006340:	3308      	adds	r3, #8
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a22      	ldr	r2, [pc, #136]	@ (80063d0 <BSP_LCD_WritePixel+0xd0>)
 8006346:	2134      	movs	r1, #52	@ 0x34
 8006348:	fb01 f303 	mul.w	r3, r1, r3
 800634c:	4413      	add	r3, r2
 800634e:	335c      	adds	r3, #92	@ 0x5c
 8006350:	6819      	ldr	r1, [r3, #0]
 8006352:	481e      	ldr	r0, [pc, #120]	@ (80063cc <BSP_LCD_WritePixel+0xcc>)
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	4613      	mov	r3, r2
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	4413      	add	r3, r2
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	4403      	add	r3, r0
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	fb03 f202 	mul.w	r2, r3, r2
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4413      	add	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	440b      	add	r3, r1
 8006370:	461a      	mov	r2, r3
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	e021      	b.n	80063bc <BSP_LCD_WritePixel+0xbc>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8006378:	4914      	ldr	r1, [pc, #80]	@ (80063cc <BSP_LCD_WritePixel+0xcc>)
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	4613      	mov	r3, r2
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	4413      	add	r3, r2
 8006382:	00db      	lsls	r3, r3, #3
 8006384:	440b      	add	r3, r1
 8006386:	3308      	adds	r3, #8
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a11      	ldr	r2, [pc, #68]	@ (80063d0 <BSP_LCD_WritePixel+0xd0>)
 800638c:	2134      	movs	r1, #52	@ 0x34
 800638e:	fb01 f303 	mul.w	r3, r1, r3
 8006392:	4413      	add	r3, r2
 8006394:	335c      	adds	r3, #92	@ 0x5c
 8006396:	6819      	ldr	r1, [r3, #0]
 8006398:	480c      	ldr	r0, [pc, #48]	@ (80063cc <BSP_LCD_WritePixel+0xcc>)
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4613      	mov	r3, r2
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	4413      	add	r3, r2
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	4403      	add	r3, r0
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	fb03 f202 	mul.w	r2, r3, r2
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	4413      	add	r3, r2
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	440b      	add	r3, r1
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	b292      	uxth	r2, r2
 80063ba:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	24005a48 	.word	0x24005a48
 80063d0:	240059a0 	.word	0x240059a0

080063d4 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t LayerIndex, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af02      	add	r7, sp, #8
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 80063e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e4:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 80063e6:	492f      	ldr	r1, [pc, #188]	@ (80064a4 <LL_FillBuffer+0xd0>)
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4613      	mov	r3, r2
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	4413      	add	r3, r2
 80063f0:	00db      	lsls	r3, r3, #3
 80063f2:	440b      	add	r3, r1
 80063f4:	330c      	adds	r3, #12
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d129      	bne.n	8006450 <LL_FillBuffer+0x7c>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 80063fc:	2302      	movs	r3, #2
 80063fe:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8006400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006402:	0adb      	lsrs	r3, r3, #11
 8006404:	f003 021f 	and.w	r2, r3, #31
 8006408:	4613      	mov	r3, r2
 800640a:	011b      	lsls	r3, r3, #4
 800640c:	4413      	add	r3, r2
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	3317      	adds	r3, #23
 8006414:	099b      	lsrs	r3, r3, #6
 8006416:	0419      	lsls	r1, r3, #16
 8006418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006420:	4613      	mov	r3, r2
 8006422:	01db      	lsls	r3, r3, #7
 8006424:	4413      	add	r3, r2
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	4413      	add	r3, r2
 800642a:	3321      	adds	r3, #33	@ 0x21
 800642c:	099b      	lsrs	r3, r3, #6
 800642e:	021b      	lsls	r3, r3, #8
 8006430:	4319      	orrs	r1, r3
 8006432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006434:	f003 021f 	and.w	r2, r3, #31
 8006438:	4613      	mov	r3, r2
 800643a:	011b      	lsls	r3, r3, #4
 800643c:	4413      	add	r3, r2
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	3317      	adds	r3, #23
 8006444:	099b      	lsrs	r3, r3, #6
 8006446:	430b      	orrs	r3, r1
 8006448:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800644c:	613b      	str	r3, [r7, #16]
    break;
 800644e:	e002      	b.n	8006456 <LL_FillBuffer+0x82>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]
    break;
 8006454:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8006456:	4b14      	ldr	r3, [pc, #80]	@ (80064a8 <LL_FillBuffer+0xd4>)
 8006458:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800645c:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800645e:	4a12      	ldr	r2, [pc, #72]	@ (80064a8 <LL_FillBuffer+0xd4>)
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8006464:	4a10      	ldr	r2, [pc, #64]	@ (80064a8 <LL_FillBuffer+0xd4>)
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 800646a:	4b0f      	ldr	r3, [pc, #60]	@ (80064a8 <LL_FillBuffer+0xd4>)
 800646c:	4a0f      	ldr	r2, [pc, #60]	@ (80064ac <LL_FillBuffer+0xd8>)
 800646e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8006470:	480d      	ldr	r0, [pc, #52]	@ (80064a8 <LL_FillBuffer+0xd4>)
 8006472:	f003 fed5 	bl	800a220 <HAL_DMA2D_Init>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10e      	bne.n	800649a <LL_FillBuffer+0xc6>
  {
    if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	6939      	ldr	r1, [r7, #16]
 8006486:	4808      	ldr	r0, [pc, #32]	@ (80064a8 <LL_FillBuffer+0xd4>)
 8006488:	f003 ff38 	bl	800a2fc <HAL_DMA2D_Start>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d103      	bne.n	800649a <LL_FillBuffer+0xc6>
    {
      /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8006492:	2132      	movs	r1, #50	@ 0x32
 8006494:	4804      	ldr	r0, [pc, #16]	@ (80064a8 <LL_FillBuffer+0xd4>)
 8006496:	f003 ff5c 	bl	800a352 <HAL_DMA2D_PollForTransfer>
    }
  }
}
 800649a:	bf00      	nop
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	24005a48 	.word	0x24005a48
 80064a8:	24005938 	.word	0x24005938
 80064ac:	52001000 	.word	0x52001000

080064b0 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 80064be:	4925      	ldr	r1, [pc, #148]	@ (8006554 <LL_ConvertLineToRGB+0xa4>)
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4613      	mov	r3, r2
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	4413      	add	r3, r2
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	440b      	add	r3, r1
 80064cc:	330c      	adds	r3, #12
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d102      	bne.n	80064da <LL_ConvertLineToRGB+0x2a>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 80064d4:	2302      	movs	r3, #2
 80064d6:	617b      	str	r3, [r7, #20]
    break;
 80064d8:	e002      	b.n	80064e0 <LL_ConvertLineToRGB+0x30>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80064da:	2300      	movs	r3, #0
 80064dc:	617b      	str	r3, [r7, #20]
    break;
 80064de:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80064e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006558 <LL_ConvertLineToRGB+0xa8>)
 80064e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80064e6:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80064e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006558 <LL_ConvertLineToRGB+0xa8>)
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 80064ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006558 <LL_ConvertLineToRGB+0xa8>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80064f4:	4b18      	ldr	r3, [pc, #96]	@ (8006558 <LL_ConvertLineToRGB+0xa8>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80064fa:	4b17      	ldr	r3, [pc, #92]	@ (8006558 <LL_ConvertLineToRGB+0xa8>)
 80064fc:	22ff      	movs	r2, #255	@ 0xff
 80064fe:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8006500:	4a15      	ldr	r2, [pc, #84]	@ (8006558 <LL_ConvertLineToRGB+0xa8>)
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8006506:	4b14      	ldr	r3, [pc, #80]	@ (8006558 <LL_ConvertLineToRGB+0xa8>)
 8006508:	2200      	movs	r2, #0
 800650a:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
 800650c:	4b12      	ldr	r3, [pc, #72]	@ (8006558 <LL_ConvertLineToRGB+0xa8>)
 800650e:	4a13      	ldr	r2, [pc, #76]	@ (800655c <LL_ConvertLineToRGB+0xac>)
 8006510:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8006512:	4811      	ldr	r0, [pc, #68]	@ (8006558 <LL_ConvertLineToRGB+0xa8>)
 8006514:	f003 fe84 	bl	800a220 <HAL_DMA2D_Init>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d115      	bne.n	800654a <LL_ConvertLineToRGB+0x9a>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800651e:	2101      	movs	r1, #1
 8006520:	480d      	ldr	r0, [pc, #52]	@ (8006558 <LL_ConvertLineToRGB+0xa8>)
 8006522:	f003 ffff 	bl	800a524 <HAL_DMA2D_ConfigLayer>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10e      	bne.n	800654a <LL_ConvertLineToRGB+0x9a>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800652c:	68b9      	ldr	r1, [r7, #8]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	2301      	movs	r3, #1
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	4808      	ldr	r0, [pc, #32]	@ (8006558 <LL_ConvertLineToRGB+0xa8>)
 8006538:	f003 fee0 	bl	800a2fc <HAL_DMA2D_Start>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d103      	bne.n	800654a <LL_ConvertLineToRGB+0x9a>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8006542:	2119      	movs	r1, #25
 8006544:	4804      	ldr	r0, [pc, #16]	@ (8006558 <LL_ConvertLineToRGB+0xa8>)
 8006546:	f003 ff04 	bl	800a352 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 800654a:	bf00      	nop
 800654c:	3718      	adds	r7, #24
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	24005a48 	.word	0x24005a48
 8006558:	24005938 	.word	0x24005938
 800655c:	52001000 	.word	0x52001000

08006560 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b092      	sub	sp, #72	@ 0x48
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a9c      	ldr	r2, [pc, #624]	@ (80067e0 <LTDC_MspInit+0x280>)
 800656e:	4293      	cmp	r3, r2
 8006570:	f040 80e1 	bne.w	8006736 <LTDC_MspInit+0x1d6>
  {
    /* Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006574:	4b9b      	ldr	r3, [pc, #620]	@ (80067e4 <LTDC_MspInit+0x284>)
 8006576:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800657a:	4a9a      	ldr	r2, [pc, #616]	@ (80067e4 <LTDC_MspInit+0x284>)
 800657c:	f043 0308 	orr.w	r3, r3, #8
 8006580:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006584:	4b97      	ldr	r3, [pc, #604]	@ (80067e4 <LTDC_MspInit+0x284>)
 8006586:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006592:	4b94      	ldr	r3, [pc, #592]	@ (80067e4 <LTDC_MspInit+0x284>)
 8006594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006598:	4a92      	ldr	r2, [pc, #584]	@ (80067e4 <LTDC_MspInit+0x284>)
 800659a:	f043 0301 	orr.w	r3, r3, #1
 800659e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80065a2:	4b90      	ldr	r3, [pc, #576]	@ (80067e4 <LTDC_MspInit+0x284>)
 80065a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065b0:	4b8c      	ldr	r3, [pc, #560]	@ (80067e4 <LTDC_MspInit+0x284>)
 80065b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065b6:	4a8b      	ldr	r2, [pc, #556]	@ (80067e4 <LTDC_MspInit+0x284>)
 80065b8:	f043 0302 	orr.w	r3, r3, #2
 80065bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80065c0:	4b88      	ldr	r3, [pc, #544]	@ (80067e4 <LTDC_MspInit+0x284>)
 80065c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065ce:	4b85      	ldr	r3, [pc, #532]	@ (80067e4 <LTDC_MspInit+0x284>)
 80065d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065d4:	4a83      	ldr	r2, [pc, #524]	@ (80067e4 <LTDC_MspInit+0x284>)
 80065d6:	f043 0304 	orr.w	r3, r3, #4
 80065da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80065de:	4b81      	ldr	r3, [pc, #516]	@ (80067e4 <LTDC_MspInit+0x284>)
 80065e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80065ec:	4b7d      	ldr	r3, [pc, #500]	@ (80067e4 <LTDC_MspInit+0x284>)
 80065ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065f2:	4a7c      	ldr	r2, [pc, #496]	@ (80067e4 <LTDC_MspInit+0x284>)
 80065f4:	f043 0308 	orr.w	r3, r3, #8
 80065f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80065fc:	4b79      	ldr	r3, [pc, #484]	@ (80067e4 <LTDC_MspInit+0x284>)
 80065fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	623b      	str	r3, [r7, #32]
 8006608:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800660a:	4b76      	ldr	r3, [pc, #472]	@ (80067e4 <LTDC_MspInit+0x284>)
 800660c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006610:	4a74      	ldr	r2, [pc, #464]	@ (80067e4 <LTDC_MspInit+0x284>)
 8006612:	f043 0310 	orr.w	r3, r3, #16
 8006616:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800661a:	4b72      	ldr	r3, [pc, #456]	@ (80067e4 <LTDC_MspInit+0x284>)
 800661c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006620:	f003 0310 	and.w	r3, r3, #16
 8006624:	61fb      	str	r3, [r7, #28]
 8006626:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006628:	4b6e      	ldr	r3, [pc, #440]	@ (80067e4 <LTDC_MspInit+0x284>)
 800662a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800662e:	4a6d      	ldr	r2, [pc, #436]	@ (80067e4 <LTDC_MspInit+0x284>)
 8006630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006634:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006638:	4b6a      	ldr	r3, [pc, #424]	@ (80067e4 <LTDC_MspInit+0x284>)
 800663a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800663e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006642:	61bb      	str	r3, [r7, #24]
 8006644:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006646:	4b67      	ldr	r3, [pc, #412]	@ (80067e4 <LTDC_MspInit+0x284>)
 8006648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800664c:	4a65      	ldr	r2, [pc, #404]	@ (80067e4 <LTDC_MspInit+0x284>)
 800664e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006652:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006656:	4b63      	ldr	r3, [pc, #396]	@ (80067e4 <LTDC_MspInit+0x284>)
 8006658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800665c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	697b      	ldr	r3, [r7, #20]

    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006664:	2302      	movs	r3, #2
 8006666:	63bb      	str	r3, [r7, #56]	@ 0x38
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8006668:	2300      	movs	r3, #0
 800666a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800666c:	2302      	movs	r3, #2
 800666e:	643b      	str	r3, [r7, #64]	@ 0x40
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006670:	230e      	movs	r3, #14
 8006672:	647b      	str	r3, [r7, #68]	@ 0x44

    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6;
 8006674:	2358      	movs	r3, #88	@ 0x58
 8006676:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8006678:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800667c:	4619      	mov	r1, r3
 800667e:	485a      	ldr	r0, [pc, #360]	@ (80067e8 <LTDC_MspInit+0x288>)
 8006680:	f004 f908 	bl	800a894 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9;
 8006684:	f240 3303 	movw	r3, #771	@ 0x303
 8006688:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 800668a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800668e:	4619      	mov	r1, r3
 8006690:	4856      	ldr	r0, [pc, #344]	@ (80067ec <LTDC_MspInit+0x28c>)
 8006692:	f004 f8ff 	bl	800a894 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7;
 8006696:	23c0      	movs	r3, #192	@ 0xc0
 8006698:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800669a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800669e:	4619      	mov	r1, r3
 80066a0:	4853      	ldr	r0, [pc, #332]	@ (80067f0 <LTDC_MspInit+0x290>)
 80066a2:	f004 f8f7 	bl	800a894 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_3 | GPIO_PIN_6;
 80066a6:	2349      	movs	r3, #73	@ 0x49
 80066a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80066aa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80066ae:	4619      	mov	r1, r3
 80066b0:	4850      	ldr	r0, [pc, #320]	@ (80067f4 <LTDC_MspInit+0x294>)
 80066b2:	f004 f8ef 	bl	800a894 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
 80066b6:	f649 0303 	movw	r3, #38915	@ 0x9803
 80066ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80066bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80066c0:	4619      	mov	r1, r3
 80066c2:	484d      	ldr	r0, [pc, #308]	@ (80067f8 <LTDC_MspInit+0x298>)
 80066c4:	f004 f8e6 	bl	800a894 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_14;
 80066c8:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80066cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80066ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80066d2:	4619      	mov	r1, r3
 80066d4:	4849      	ldr	r0, [pc, #292]	@ (80067fc <LTDC_MspInit+0x29c>)
 80066d6:	f004 f8dd 	bl	800a894 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_15;
 80066da:	f648 7308 	movw	r3, #36616	@ 0x8f08
 80066de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80066e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80066e4:	4619      	mov	r1, r3
 80066e6:	4846      	ldr	r0, [pc, #280]	@ (8006800 <LTDC_MspInit+0x2a0>)
 80066e8:	f004 f8d4 	bl	800a894 <HAL_GPIO_Init>

    gpio_init_structure.Alternate = GPIO_AF13_LTDC;
 80066ec:	230d      	movs	r3, #13
 80066ee:	647b      	str	r3, [r7, #68]	@ 0x44
    gpio_init_structure.Pin       = GPIO_PIN_8;
 80066f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80066f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 80066f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80066fa:	4619      	mov	r1, r3
 80066fc:	483a      	ldr	r0, [pc, #232]	@ (80067e8 <LTDC_MspInit+0x288>)
 80066fe:	f004 f8c9 	bl	800a894 <HAL_GPIO_Init>

    gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8006702:	2309      	movs	r3, #9
 8006704:	647b      	str	r3, [r7, #68]	@ 0x44
    gpio_init_structure.Pin       = GPIO_PIN_4;
 8006706:	2310      	movs	r3, #16
 8006708:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800670a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800670e:	4619      	mov	r1, r3
 8006710:	483b      	ldr	r0, [pc, #236]	@ (8006800 <LTDC_MspInit+0x2a0>)
 8006712:	f004 f8bf 	bl	800a894 <HAL_GPIO_Init>

    /** Toggle Sw reset of LTDC peripheral */
    __HAL_RCC_LTDC_FORCE_RESET();
 8006716:	4b33      	ldr	r3, [pc, #204]	@ (80067e4 <LTDC_MspInit+0x284>)
 8006718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800671c:	4a31      	ldr	r2, [pc, #196]	@ (80067e4 <LTDC_MspInit+0x284>)
 800671e:	f043 0308 	orr.w	r3, r3, #8
 8006722:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8006726:	4b2f      	ldr	r3, [pc, #188]	@ (80067e4 <LTDC_MspInit+0x284>)
 8006728:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800672c:	4a2d      	ldr	r2, [pc, #180]	@ (80067e4 <LTDC_MspInit+0x284>)
 800672e:	f023 0308 	bic.w	r3, r3, #8
 8006732:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

  }

  LCD_DISP_CTRL_GPIO_CLK_ENABLE();
 8006736:	4b2b      	ldr	r3, [pc, #172]	@ (80067e4 <LTDC_MspInit+0x284>)
 8006738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800673c:	4a29      	ldr	r2, [pc, #164]	@ (80067e4 <LTDC_MspInit+0x284>)
 800673e:	f043 0308 	orr.w	r3, r3, #8
 8006742:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006746:	4b27      	ldr	r3, [pc, #156]	@ (80067e4 <LTDC_MspInit+0x284>)
 8006748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800674c:	f003 0308 	and.w	r3, r3, #8
 8006750:	613b      	str	r3, [r7, #16]
 8006752:	693b      	ldr	r3, [r7, #16]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006754:	4b23      	ldr	r3, [pc, #140]	@ (80067e4 <LTDC_MspInit+0x284>)
 8006756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800675a:	4a22      	ldr	r2, [pc, #136]	@ (80067e4 <LTDC_MspInit+0x284>)
 800675c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006760:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006764:	4b1f      	ldr	r3, [pc, #124]	@ (80067e4 <LTDC_MspInit+0x284>)
 8006766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800676a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	68fb      	ldr	r3, [r7, #12]
  LCD_DISP_EN_GPIO_CLK_ENABLE();
 8006772:	4b1c      	ldr	r3, [pc, #112]	@ (80067e4 <LTDC_MspInit+0x284>)
 8006774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006778:	4a1a      	ldr	r2, [pc, #104]	@ (80067e4 <LTDC_MspInit+0x284>)
 800677a:	f043 0310 	orr.w	r3, r3, #16
 800677e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006782:	4b18      	ldr	r3, [pc, #96]	@ (80067e4 <LTDC_MspInit+0x284>)
 8006784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006788:	f003 0310 	and.w	r3, r3, #16
 800678c:	60bb      	str	r3, [r7, #8]
 800678e:	68bb      	ldr	r3, [r7, #8]

  /* LCD_DISP_EN GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_EN_PIN;     /* LCD_DISP pin has to be manually controlled */
 8006790:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006794:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006796:	2301      	movs	r3, #1
 8006798:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_EN_GPIO_PORT, &gpio_init_structure);
 800679a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800679e:	4619      	mov	r1, r3
 80067a0:	4815      	ldr	r0, [pc, #84]	@ (80067f8 <LTDC_MspInit+0x298>)
 80067a2:	f004 f877 	bl	800a894 <HAL_GPIO_Init>

  /* LCD_DISP_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_CTRL_PIN;     /* LCD_DISP pin has to be manually controlled */
 80067a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067aa:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80067ac:	2301      	movs	r3, #1
 80067ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_CTRL_GPIO_PORT, &gpio_init_structure);
 80067b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80067b4:	4619      	mov	r1, r3
 80067b6:	480f      	ldr	r0, [pc, #60]	@ (80067f4 <LTDC_MspInit+0x294>)
 80067b8:	f004 f86c 	bl	800a894 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80067bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067c0:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80067c2:	2301      	movs	r3, #1
 80067c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80067c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80067ca:	4619      	mov	r1, r3
 80067cc:	480b      	ldr	r0, [pc, #44]	@ (80067fc <LTDC_MspInit+0x29c>)
 80067ce:	f004 f861 	bl	800a894 <HAL_GPIO_Init>

  HAL_Delay(40);
 80067d2:	2028      	movs	r0, #40	@ 0x28
 80067d4:	f000 fd72 	bl	80072bc <HAL_Delay>
}
 80067d8:	bf00      	nop
 80067da:	3748      	adds	r7, #72	@ 0x48
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	50001000 	.word	0x50001000
 80067e4:	58024400 	.word	0x58024400
 80067e8:	58020000 	.word	0x58020000
 80067ec:	58020400 	.word	0x58020400
 80067f0:	58020800 	.word	0x58020800
 80067f4:	58020c00 	.word	0x58020c00
 80067f8:	58021000 	.word	0x58021000
 80067fc:	58021800 	.word	0x58021800
 8006800:	58021c00 	.word	0x58021c00

08006804 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a11      	ldr	r2, [pc, #68]	@ (8006858 <DMA2D_MspInit+0x54>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d11a      	bne.n	800684c <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006816:	4b11      	ldr	r3, [pc, #68]	@ (800685c <DMA2D_MspInit+0x58>)
 8006818:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800681c:	4a0f      	ldr	r2, [pc, #60]	@ (800685c <DMA2D_MspInit+0x58>)
 800681e:	f043 0310 	orr.w	r3, r3, #16
 8006822:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8006826:	4b0d      	ldr	r3, [pc, #52]	@ (800685c <DMA2D_MspInit+0x58>)
 8006828:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800682c:	f003 0310 	and.w	r3, r3, #16
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8006834:	4b09      	ldr	r3, [pc, #36]	@ (800685c <DMA2D_MspInit+0x58>)
 8006836:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006838:	4a08      	ldr	r2, [pc, #32]	@ (800685c <DMA2D_MspInit+0x58>)
 800683a:	f043 0310 	orr.w	r3, r3, #16
 800683e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8006840:	4b06      	ldr	r3, [pc, #24]	@ (800685c <DMA2D_MspInit+0x58>)
 8006842:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006844:	4a05      	ldr	r2, [pc, #20]	@ (800685c <DMA2D_MspInit+0x58>)
 8006846:	f023 0310 	bic.w	r3, r3, #16
 800684a:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
 800684c:	bf00      	nop
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	52001000 	.word	0x52001000
 800685c:	58024400 	.word	0x58024400

08006860 <BSP_OSPI_RAM_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_RAM_Init(uint32_t Instance, BSP_OSPI_RAM_Init_t *Init)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08a      	sub	sp, #40	@ 0x28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  int32_t ret;
  MX_OSPI_InitTypeDef ospi_init;

  /* Check if the instance is supported */
  if(Instance >= OSPI_RAM_INSTANCES_NUMBER)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <BSP_OSPI_RAM_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006870:	f06f 0301 	mvn.w	r3, #1
 8006874:	627b      	str	r3, [r7, #36]	@ 0x24
 8006876:	e060      	b.n	800693a <BSP_OSPI_RAM_Init+0xda>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Ram_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8006878:	4a32      	ldr	r2, [pc, #200]	@ (8006944 <BSP_OSPI_RAM_Init+0xe4>)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d158      	bne.n	8006936 <BSP_OSPI_RAM_Init+0xd6>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_RAM_MspInit(&hospi_ram[Instance]);
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	4613      	mov	r3, r2
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	4413      	add	r3, r2
 800688c:	015b      	lsls	r3, r3, #5
 800688e:	4a2e      	ldr	r2, [pc, #184]	@ (8006948 <BSP_OSPI_RAM_Init+0xe8>)
 8006890:	4413      	add	r3, r2
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fa64 	bl	8006d60 <OSPI_RAM_MspInit>
        }
      }
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

      /* Fill config structure */
      ospi_init.ClockPrescaler = 2U; /* OctoSPI clock = 200 MHz / ClockPrescaler = 100 MHz */
 8006898:	2302      	movs	r3, #2
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80068a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	fa93 f3a3 	rbit	r3, r3
 80068a8:	61bb      	str	r3, [r7, #24]
  return result;
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <BSP_OSPI_RAM_Init+0x58>
    return 32U;
 80068b4:	2320      	movs	r3, #32
 80068b6:	e003      	b.n	80068c0 <BSP_OSPI_RAM_Init+0x60>
  return __builtin_clz(value);
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	fab3 f383 	clz	r3, r3
 80068be:	b2db      	uxtb	r3, r3
      ospi_init.MemorySize     = (uint32_t)POSITION_VAL(S70KL1281_RAM_SIZE);
 80068c0:	60bb      	str	r3, [r7, #8]
      ospi_init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80068c2:	2300      	movs	r3, #0
 80068c4:	613b      	str	r3, [r7, #16]

      /* STM32 OSPI Clock configuration */
      if (MX_OSPI_ClockConfig(&hospi_ram[Instance]) != HAL_OK)
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	4613      	mov	r3, r2
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	4413      	add	r3, r2
 80068ce:	015b      	lsls	r3, r3, #5
 80068d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006948 <BSP_OSPI_RAM_Init+0xe8>)
 80068d2:	4413      	add	r3, r2
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 f839 	bl	800694c <MX_OSPI_ClockConfig>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <BSP_OSPI_RAM_Init+0x88>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80068e0:	f06f 0303 	mvn.w	r3, #3
 80068e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e6:	e028      	b.n	800693a <BSP_OSPI_RAM_Init+0xda>
      }
      /* STM32 OSPI interface initialization */
      else if (MX_OSPI_RAM_Init(&hospi_ram[Instance], &ospi_init) != HAL_OK)
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	4413      	add	r3, r2
 80068f0:	015b      	lsls	r3, r3, #5
 80068f2:	4a15      	ldr	r2, [pc, #84]	@ (8006948 <BSP_OSPI_RAM_Init+0xe8>)
 80068f4:	4413      	add	r3, r2
 80068f6:	f107 0208 	add.w	r2, r7, #8
 80068fa:	4611      	mov	r1, r2
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 f849 	bl	8006994 <MX_OSPI_RAM_Init>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <BSP_OSPI_RAM_Init+0xb0>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8006908:	f06f 0303 	mvn.w	r3, #3
 800690c:	627b      	str	r3, [r7, #36]	@ 0x24
 800690e:	e014      	b.n	800693a <BSP_OSPI_RAM_Init+0xda>
      }
      /* Configure the memory */
      else if (BSP_OSPI_RAM_ConfigHyperRAM(Instance, Init->LatencyType, Init->BurstType, Init->BurstLength) != BSP_ERROR_NONE)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	7819      	ldrb	r1, [r3, #0]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	785a      	ldrb	r2, [r3, #1]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	789b      	ldrb	r3, [r3, #2]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f8bf 	bl	8006aa0 <BSP_OSPI_RAM_ConfigHyperRAM>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <BSP_OSPI_RAM_Init+0xd0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006928:	f06f 0304 	mvn.w	r3, #4
 800692c:	627b      	str	r3, [r7, #36]	@ 0x24
 800692e:	e004      	b.n	800693a <BSP_OSPI_RAM_Init+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006930:	2300      	movs	r3, #0
 8006932:	627b      	str	r3, [r7, #36]	@ 0x24
 8006934:	e001      	b.n	800693a <BSP_OSPI_RAM_Init+0xda>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8006936:	2300      	movs	r3, #0
 8006938:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  /* Return BSP status */
  return ret;
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800693c:	4618      	mov	r0, r3
 800693e:	3728      	adds	r7, #40	@ 0x28
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	24000460 	.word	0x24000460
 8006948:	24005a64 	.word	0x24005a64

0800694c <MX_OSPI_ClockConfig>:
  * @param  hospi  OSPI Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_OSPI_ClockConfig(OSPI_HandleTypeDef *hospi)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b0b0      	sub	sp, #192	@ 0xc0
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* OSPI clock configuration */
  /* PLL2_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL2_VCO Output = PLL2_VCO Input * PLL3N = 400 Mhz */
  /* PLLOSPICLK = PLL2_VCO Output/PLL2R = 400/2 = 200 Mhz */
  /* OSPI clock frequency = PLLOSPICLK = 200 Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8006954:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006958:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 800695a:	2320      	movs	r3, #32
 800695c:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 800695e:	2305      	movs	r3, #5
 8006960:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8006962:	2350      	movs	r3, #80	@ 0x50
 8006964:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8006966:	2305      	movs	r3, #5
 8006968:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800696a:	2302      	movs	r3, #2
 800696c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800696e:	2302      	movs	r3, #2
 8006970:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8006976:	2300      	movs	r3, #0
 8006978:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800697a:	2300      	movs	r3, #0
 800697c:	627b      	str	r3, [r7, #36]	@ 0x24

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800697e:	f107 030c 	add.w	r3, r7, #12
 8006982:	4618      	mov	r0, r3
 8006984:	f006 fec8 	bl	800d718 <HAL_RCCEx_PeriphCLKConfig>
 8006988:	4603      	mov	r3, r0
}
 800698a:	4618      	mov	r0, r3
 800698c:	37c0      	adds	r7, #192	@ 0xc0
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <MX_OSPI_RAM_Init>:
  * @param  hospi          OSPI handle
  * @param  Init           OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_RAM_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_InitTypeDef *Init)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b088      	sub	sp, #32
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  OSPI_HyperbusCfgTypeDef sHyperbusCfg;
  HAL_StatusTypeDef status;

  hospi->Instance = OCTOSPI2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a28      	ldr	r2, [pc, #160]	@ (8006a44 <MX_OSPI_RAM_Init+0xb0>)
 80069a2:	601a      	str	r2, [r3, #0]
  HAL_OSPI_DeInit(hospi);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f005 fc71 	bl	800c28c <HAL_OSPI_DeInit>

  hospi->Init.FifoThreshold         = 4;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2204      	movs	r2, #4
 80069ae:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	609a      	str	r2, [r3, #8]
  hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_HYPERBUS;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80069bc:	60da      	str	r2, [r3, #12]
  hospi->Init.DeviceSize            = Init->MemorySize;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime    = 4;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2204      	movs	r2, #4
 80069ca:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize              = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler        = Init->ClockPrescaler;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi->Init.SampleShifting        = Init->SampleShifting;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi->Init.Refresh               = 400; /*4us @100MHz*/
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80069fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hospi->Init.ChipSelectBoundary    = 23;  /* memory die boundary 2^23=8MBs*/
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2217      	movs	r2, #23
 8006a02:	631a      	str	r2, [r3, #48]	@ 0x30

  status = HAL_OSPI_Init(hospi);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f005 fb77 	bl	800c0f8 <HAL_OSPI_Init>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	77fb      	strb	r3, [r7, #31]
  if (status == HAL_OK)
 8006a0e:	7ffb      	ldrb	r3, [r7, #31]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d111      	bne.n	8006a38 <MX_OSPI_RAM_Init+0xa4>
  {
    sHyperbusCfg.RWRecoveryTime   = RW_RECOVERY_TIME;
 8006a14:	2303      	movs	r3, #3
 8006a16:	60fb      	str	r3, [r7, #12]
    sHyperbusCfg.AccessTime       = DEFAULT_INITIAL_LATENCY;
 8006a18:	2306      	movs	r3, #6
 8006a1a:	613b      	str	r3, [r7, #16]
    sHyperbusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	617b      	str	r3, [r7, #20]
    sHyperbusCfg.LatencyMode      = HAL_OSPI_FIXED_LATENCY;
 8006a20:	2301      	movs	r3, #1
 8006a22:	61bb      	str	r3, [r7, #24]

    status = HAL_OSPI_HyperbusCfg(hospi, &sHyperbusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006a24:	f107 030c 	add.w	r3, r7, #12
 8006a28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f005 fc5d 	bl	800c2ee <HAL_OSPI_HyperbusCfg>
 8006a34:	4603      	mov	r3, r0
 8006a36:	77fb      	strb	r3, [r7, #31]
  }

  return status;
 8006a38:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3720      	adds	r7, #32
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	5200a000 	.word	0x5200a000

08006a48 <BSP_OSPI_RAM_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_RAM_EnableMemoryMappedMode(uint32_t Instance)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006a50:	2300      	movs	r3, #0
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_RAM_INSTANCES_NUMBER)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <BSP_OSPI_RAM_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006a5a:	f06f 0301 	mvn.w	r3, #1
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	e015      	b.n	8006a8e <BSP_OSPI_RAM_EnableMemoryMappedMode+0x46>
  }
  else
  {
    if(S70KL1281_EnableMemoryMappedMode(&hospi_ram[Instance]) != S70KL1281_OK)
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	4613      	mov	r3, r2
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	4413      	add	r3, r2
 8006a6a:	015b      	lsls	r3, r3, #5
 8006a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8006a98 <BSP_OSPI_RAM_EnableMemoryMappedMode+0x50>)
 8006a6e:	4413      	add	r3, r2
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7f9 fd06 	bl	8000482 <S70KL1281_EnableMemoryMappedMode>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <BSP_OSPI_RAM_EnableMemoryMappedMode+0x3c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a7c:	f06f 0304 	mvn.w	r3, #4
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	e004      	b.n	8006a8e <BSP_OSPI_RAM_EnableMemoryMappedMode+0x46>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Ram_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8006a84:	4a05      	ldr	r2, [pc, #20]	@ (8006a9c <BSP_OSPI_RAM_EnableMemoryMappedMode+0x54>)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2102      	movs	r1, #2
 8006a8a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	24005a64 	.word	0x24005a64
 8006a9c:	24000460 	.word	0x24000460

08006aa0 <BSP_OSPI_RAM_ConfigHyperRAM>:
  * @param  BurstType   OSPI burst type
  * @param  BurstLength OSPI burst length
  * @retval BSP status
  */
int32_t BSP_OSPI_RAM_ConfigHyperRAM(uint32_t Instance, BSP_OSPI_RAM_Latency_t Latency, BSP_OSPI_RAM_BurstType_t BurstType, BSP_OSPI_RAM_BurstLength_t BurstLength)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08a      	sub	sp, #40	@ 0x28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	4608      	mov	r0, r1
 8006aaa:	4611      	mov	r1, r2
 8006aac:	461a      	mov	r2, r3
 8006aae:	4603      	mov	r3, r0
 8006ab0:	70fb      	strb	r3, [r7, #3]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	70bb      	strb	r3, [r7, #2]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	707b      	strb	r3, [r7, #1]
  OSPI_HyperbusCfgTypeDef sHyperbusCfg;
  int32_t ret = BSP_ERROR_NONE;
 8006aba:	2300      	movs	r3, #0
 8006abc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t initial_latency, latency_mode;
  uint16_t reg;

  /* Check if the instance is supported */
  if(Instance >= OSPI_RAM_INSTANCES_NUMBER)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d003      	beq.n	8006acc <BSP_OSPI_RAM_ConfigHyperRAM+0x2c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006ac4:	f06f 0301 	mvn.w	r3, #1
 8006ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006aca:	e13f      	b.n	8006d4c <BSP_OSPI_RAM_ConfigHyperRAM+0x2ac>
  }
  else
  {
    /* Check if MMP mode locked ***********************************************/
    if(Ospi_Ram_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8006acc:	4aa2      	ldr	r2, [pc, #648]	@ (8006d58 <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d103      	bne.n	8006ae0 <BSP_OSPI_RAM_ConfigHyperRAM+0x40>
    {
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8006ad8:	f06f 0319 	mvn.w	r3, #25
 8006adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ade:	e135      	b.n	8006d4c <BSP_OSPI_RAM_ConfigHyperRAM+0x2ac>
    }
    else if((Ospi_Ram_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE) ||
 8006ae0:	4a9d      	ldr	r2, [pc, #628]	@ (8006d58 <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d018      	beq.n	8006b1e <BSP_OSPI_RAM_ConfigHyperRAM+0x7e>
            (Ospi_Ram_Ctx[Instance].LatencyType   != Latency)              ||
 8006aec:	4a9a      	ldr	r2, [pc, #616]	@ (8006d58 <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	4413      	add	r3, r2
 8006af4:	785b      	ldrb	r3, [r3, #1]
    else if((Ospi_Ram_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE) ||
 8006af6:	78fa      	ldrb	r2, [r7, #3]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d110      	bne.n	8006b1e <BSP_OSPI_RAM_ConfigHyperRAM+0x7e>
            (Ospi_Ram_Ctx[Instance].BurstType     != BurstType)            ||
 8006afc:	4a96      	ldr	r2, [pc, #600]	@ (8006d58 <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	4413      	add	r3, r2
 8006b04:	789b      	ldrb	r3, [r3, #2]
            (Ospi_Ram_Ctx[Instance].LatencyType   != Latency)              ||
 8006b06:	78ba      	ldrb	r2, [r7, #2]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d108      	bne.n	8006b1e <BSP_OSPI_RAM_ConfigHyperRAM+0x7e>
            (Ospi_Ram_Ctx[Instance].BurstLength   != BurstLength))
 8006b0c:	4a92      	ldr	r2, [pc, #584]	@ (8006d58 <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	4413      	add	r3, r2
 8006b14:	78db      	ldrb	r3, [r3, #3]
            (Ospi_Ram_Ctx[Instance].BurstType     != BurstType)            ||
 8006b16:	787a      	ldrb	r2, [r7, #1]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	f000 8117 	beq.w	8006d4c <BSP_OSPI_RAM_ConfigHyperRAM+0x2ac>
    {
      /* Reading the configuration of the HyperRAM ****************************/
      if(S70KL1281_ReadCfgReg0(&hospi_ram[Instance], &reg) != S70KL1281_OK)
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	4613      	mov	r3, r2
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	4413      	add	r3, r2
 8006b26:	015b      	lsls	r3, r3, #5
 8006b28:	4a8c      	ldr	r2, [pc, #560]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2bc>)
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f107 020a 	add.w	r2, r7, #10
 8006b30:	4611      	mov	r1, r2
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7f9 fcd6 	bl	80004e4 <S70KL1281_ReadCfgReg0>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <BSP_OSPI_RAM_ConfigHyperRAM+0xa6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b3e:	f06f 0304 	mvn.w	r3, #4
 8006b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b44:	e0e8      	b.n	8006d18 <BSP_OSPI_RAM_ConfigHyperRAM+0x278>
      }
      else
      {
        /* Configure the HyperRAM memory **************************************/
        /* Initial latency */
        if(Ospi_Ram_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8006b46:	4a84      	ldr	r2, [pc, #528]	@ (8006d58 <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d104      	bne.n	8006b5c <BSP_OSPI_RAM_ConfigHyperRAM+0xbc>
        {
          initial_latency = DEFAULT_INITIAL_LATENCY;
 8006b52:	2306      	movs	r3, #6
 8006b54:	623b      	str	r3, [r7, #32]
          latency_mode = HAL_OSPI_FIXED_LATENCY;
 8006b56:	2301      	movs	r3, #1
 8006b58:	61fb      	str	r3, [r7, #28]
 8006b5a:	e010      	b.n	8006b7e <BSP_OSPI_RAM_ConfigHyperRAM+0xde>
        }
        else
        {
          initial_latency = (uint32_t) ((Ospi_Ram_Ctx[Instance].LatencyType == BSP_OSPI_RAM_FIXED_LATENCY) ? \
 8006b5c:	4a7e      	ldr	r2, [pc, #504]	@ (8006d58 <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	00db      	lsls	r3, r3, #3
 8006b62:	4413      	add	r3, r2
 8006b64:	785b      	ldrb	r3, [r3, #1]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d101      	bne.n	8006b6e <BSP_OSPI_RAM_ConfigHyperRAM+0xce>
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e000      	b.n	8006b70 <BSP_OSPI_RAM_ConfigHyperRAM+0xd0>
 8006b6e:	2306      	movs	r3, #6
 8006b70:	623b      	str	r3, [r7, #32]
                             OPTIMAL_FIXED_INITIAL_LATENCY : OPTIMAL_VARIABLE_INITIAL_LATENCY);
          latency_mode = (uint32_t) Ospi_Ram_Ctx[Instance].LatencyType;
 8006b72:	4a79      	ldr	r2, [pc, #484]	@ (8006d58 <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	4413      	add	r3, r2
 8006b7a:	785b      	ldrb	r3, [r3, #1]
 8006b7c:	61fb      	str	r3, [r7, #28]
        }

        /* Latency Type */
        if (Latency == BSP_OSPI_RAM_FIXED_LATENCY)
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d10f      	bne.n	8006ba4 <BSP_OSPI_RAM_ConfigHyperRAM+0x104>
        {
          SET_BIT(reg, S70KL1281_CR0_FLE);
 8006b84:	897b      	ldrh	r3, [r7, #10]
 8006b86:	f043 0308 	orr.w	r3, r3, #8
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	817b      	strh	r3, [r7, #10]
          MODIFY_REG(reg, (uint16_t) S70KL1281_CR0_IL, (uint16_t) OPTIMAL_FIXED_INITIAL_LATENCY_REG_VAL);
 8006b8e:	897b      	ldrh	r3, [r7, #10]
 8006b90:	b21b      	sxth	r3, r3
 8006b92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b96:	b21b      	sxth	r3, r3
 8006b98:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8006b9c:	b21b      	sxth	r3, r3
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	817b      	strh	r3, [r7, #10]
 8006ba2:	e00e      	b.n	8006bc2 <BSP_OSPI_RAM_ConfigHyperRAM+0x122>
        }
        else
        {
          CLEAR_BIT(reg, S70KL1281_CR0_FLE);
 8006ba4:	897b      	ldrh	r3, [r7, #10]
 8006ba6:	f023 0308 	bic.w	r3, r3, #8
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	817b      	strh	r3, [r7, #10]
          MODIFY_REG(reg, (uint16_t) S70KL1281_CR0_IL, (uint16_t) OPTIMAL_VARIABLE_INITIAL_LATENCY_REG_VAL);
 8006bae:	897b      	ldrh	r3, [r7, #10]
 8006bb0:	b21b      	sxth	r3, r3
 8006bb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bb6:	b21b      	sxth	r3, r3
 8006bb8:	f043 0310 	orr.w	r3, r3, #16
 8006bbc:	b21b      	sxth	r3, r3
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	817b      	strh	r3, [r7, #10]
        }

        /* Burst type */
        if (BurstType == BSP_OSPI_RAM_HYBRID_BURST)
 8006bc2:	78bb      	ldrb	r3, [r7, #2]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d105      	bne.n	8006bd4 <BSP_OSPI_RAM_ConfigHyperRAM+0x134>
        {
          CLEAR_BIT(reg, S70KL1281_CR0_HBE);
 8006bc8:	897b      	ldrh	r3, [r7, #10]
 8006bca:	f023 0304 	bic.w	r3, r3, #4
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	817b      	strh	r3, [r7, #10]
 8006bd2:	e004      	b.n	8006bde <BSP_OSPI_RAM_ConfigHyperRAM+0x13e>
        }
        else
        {
          SET_BIT(reg, S70KL1281_CR0_HBE);
 8006bd4:	897b      	ldrh	r3, [r7, #10]
 8006bd6:	f043 0304 	orr.w	r3, r3, #4
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	817b      	strh	r3, [r7, #10]
        }

        /* Burst length */
        MODIFY_REG(reg, (uint16_t) S70KL1281_CR0_BLENGTH, (uint16_t) BurstLength);
 8006bde:	897b      	ldrh	r3, [r7, #10]
 8006be0:	b21b      	sxth	r3, r3
 8006be2:	f023 0303 	bic.w	r3, r3, #3
 8006be6:	b21a      	sxth	r2, r3
 8006be8:	787b      	ldrb	r3, [r7, #1]
 8006bea:	b21b      	sxth	r3, r3
 8006bec:	4313      	orrs	r3, r2
 8006bee:	b21b      	sxth	r3, r3
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	817b      	strh	r3, [r7, #10]

        if (S70KL1281_WriteCfgReg0(&hospi_ram[Instance], reg, latency_mode, initial_latency) != S70KL1281_OK)
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	4413      	add	r3, r2
 8006bfc:	015b      	lsls	r3, r3, #5
 8006bfe:	4a57      	ldr	r2, [pc, #348]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2bc>)
 8006c00:	1898      	adds	r0, r3, r2
 8006c02:	8979      	ldrh	r1, [r7, #10]
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	69fa      	ldr	r2, [r7, #28]
 8006c08:	f7f9 fc9e 	bl	8000548 <S70KL1281_WriteCfgReg0>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <BSP_OSPI_RAM_ConfigHyperRAM+0x17a>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c12:	f06f 0304 	mvn.w	r3, #4
 8006c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c18:	e07e      	b.n	8006d18 <BSP_OSPI_RAM_ConfigHyperRAM+0x278>
        }
        else
        {
          /* Configure the peripheral *****************************************/
          if (BurstType == BSP_OSPI_RAM_HYBRID_BURST)
 8006c1a:	78bb      	ldrb	r3, [r7, #2]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d13d      	bne.n	8006c9c <BSP_OSPI_RAM_ConfigHyperRAM+0x1fc>
          {
            switch (BurstLength)
 8006c20:	787b      	ldrb	r3, [r7, #1]
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d845      	bhi.n	8006cb2 <BSP_OSPI_RAM_ConfigHyperRAM+0x212>
 8006c26:	a201      	add	r2, pc, #4	@ (adr r2, 8006c2c <BSP_OSPI_RAM_ConfigHyperRAM+0x18c>)
 8006c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2c:	08006c85 	.word	0x08006c85
 8006c30:	08006c6d 	.word	0x08006c6d
 8006c34:	08006c3d 	.word	0x08006c3d
 8006c38:	08006c55 	.word	0x08006c55
            {
            case BSP_OSPI_RAM_BURST_16_BYTES :
              hospi_ram[Instance].Init.WrapSize = HAL_OSPI_WRAP_16_BYTES;
 8006c3c:	4947      	ldr	r1, [pc, #284]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2bc>)
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	4613      	mov	r3, r2
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	4413      	add	r3, r2
 8006c46:	015b      	lsls	r3, r3, #5
 8006c48:	440b      	add	r3, r1
 8006c4a:	3320      	adds	r3, #32
 8006c4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006c50:	601a      	str	r2, [r3, #0]
              break;
 8006c52:	e02f      	b.n	8006cb4 <BSP_OSPI_RAM_ConfigHyperRAM+0x214>
            case BSP_OSPI_RAM_BURST_32_BYTES :
              hospi_ram[Instance].Init.WrapSize = HAL_OSPI_WRAP_32_BYTES;
 8006c54:	4941      	ldr	r1, [pc, #260]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2bc>)
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	4413      	add	r3, r2
 8006c5e:	015b      	lsls	r3, r3, #5
 8006c60:	440b      	add	r3, r1
 8006c62:	3320      	adds	r3, #32
 8006c64:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006c68:	601a      	str	r2, [r3, #0]
              break;
 8006c6a:	e023      	b.n	8006cb4 <BSP_OSPI_RAM_ConfigHyperRAM+0x214>
            case BSP_OSPI_RAM_BURST_64_BYTES :
              hospi_ram[Instance].Init.WrapSize = HAL_OSPI_WRAP_64_BYTES;
 8006c6c:	493b      	ldr	r1, [pc, #236]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2bc>)
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	4613      	mov	r3, r2
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	4413      	add	r3, r2
 8006c76:	015b      	lsls	r3, r3, #5
 8006c78:	440b      	add	r3, r1
 8006c7a:	3320      	adds	r3, #32
 8006c7c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006c80:	601a      	str	r2, [r3, #0]
              break;
 8006c82:	e017      	b.n	8006cb4 <BSP_OSPI_RAM_ConfigHyperRAM+0x214>
            case BSP_OSPI_RAM_BURST_128_BYTES :
              hospi_ram[Instance].Init.WrapSize = HAL_OSPI_WRAP_128_BYTES;
 8006c84:	4935      	ldr	r1, [pc, #212]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2bc>)
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	4413      	add	r3, r2
 8006c8e:	015b      	lsls	r3, r3, #5
 8006c90:	440b      	add	r3, r1
 8006c92:	3320      	adds	r3, #32
 8006c94:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8006c98:	601a      	str	r2, [r3, #0]
              break;
 8006c9a:	e00b      	b.n	8006cb4 <BSP_OSPI_RAM_ConfigHyperRAM+0x214>
              break;
            }
          }
          else
          {
            hospi_ram[Instance].Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8006c9c:	492f      	ldr	r1, [pc, #188]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2bc>)
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	4413      	add	r3, r2
 8006ca6:	015b      	lsls	r3, r3, #5
 8006ca8:	440b      	add	r3, r1
 8006caa:	3320      	adds	r3, #32
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	e000      	b.n	8006cb4 <BSP_OSPI_RAM_ConfigHyperRAM+0x214>
              break;
 8006cb2:	bf00      	nop
          }
          if (HAL_OSPI_Init(&hospi_ram[Instance]) != HAL_OK)
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	4413      	add	r3, r2
 8006cbc:	015b      	lsls	r3, r3, #5
 8006cbe:	4a27      	ldr	r2, [pc, #156]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2bc>)
 8006cc0:	4413      	add	r3, r2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f005 fa18 	bl	800c0f8 <HAL_OSPI_Init>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <BSP_OSPI_RAM_ConfigHyperRAM+0x236>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006cce:	f06f 0303 	mvn.w	r3, #3
 8006cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cd4:	e020      	b.n	8006d18 <BSP_OSPI_RAM_ConfigHyperRAM+0x278>
          }
          else
          {
            sHyperbusCfg.RWRecoveryTime   = RW_RECOVERY_TIME;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	60fb      	str	r3, [r7, #12]
            sHyperbusCfg.AccessTime       = (uint32_t) ((Latency == BSP_OSPI_RAM_FIXED_LATENCY) ? \
 8006cda:	78fb      	ldrb	r3, [r7, #3]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d101      	bne.n	8006ce4 <BSP_OSPI_RAM_ConfigHyperRAM+0x244>
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e000      	b.n	8006ce6 <BSP_OSPI_RAM_ConfigHyperRAM+0x246>
 8006ce4:	2306      	movs	r3, #6
 8006ce6:	613b      	str	r3, [r7, #16]
                                             OPTIMAL_FIXED_INITIAL_LATENCY : OPTIMAL_VARIABLE_INITIAL_LATENCY);
            sHyperbusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	617b      	str	r3, [r7, #20]
            sHyperbusCfg.LatencyMode      = (uint32_t) Latency;
 8006cec:	78fb      	ldrb	r3, [r7, #3]
 8006cee:	61bb      	str	r3, [r7, #24]

            if (HAL_OSPI_HyperbusCfg(&hospi_ram[Instance], &sHyperbusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	4413      	add	r3, r2
 8006cf8:	015b      	lsls	r3, r3, #5
 8006cfa:	4a18      	ldr	r2, [pc, #96]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2bc>)
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f107 010c 	add.w	r1, r7, #12
 8006d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d06:	4618      	mov	r0, r3
 8006d08:	f005 faf1 	bl	800c2ee <HAL_OSPI_HyperbusCfg>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d002      	beq.n	8006d18 <BSP_OSPI_RAM_ConfigHyperRAM+0x278>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006d12:	f06f 0303 	mvn.w	r3, #3
 8006d16:	627b      	str	r3, [r7, #36]	@ 0x24
          }
        }
      }

      /* Update OSPI context if all operations are well done */
      if(ret == BSP_ERROR_NONE)
 8006d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d116      	bne.n	8006d4c <BSP_OSPI_RAM_ConfigHyperRAM+0x2ac>
      {
        /* Update current status parameter *****************************************/
        Ospi_Ram_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8006d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8006d58 <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2101      	movs	r1, #1
 8006d24:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
        Ospi_Ram_Ctx[Instance].LatencyType   = Latency;
 8006d28:	4a0b      	ldr	r2, [pc, #44]	@ (8006d58 <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	4413      	add	r3, r2
 8006d30:	78fa      	ldrb	r2, [r7, #3]
 8006d32:	705a      	strb	r2, [r3, #1]
        Ospi_Ram_Ctx[Instance].BurstType     = BurstType;
 8006d34:	4a08      	ldr	r2, [pc, #32]	@ (8006d58 <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	4413      	add	r3, r2
 8006d3c:	78ba      	ldrb	r2, [r7, #2]
 8006d3e:	709a      	strb	r2, [r3, #2]
        Ospi_Ram_Ctx[Instance].BurstLength   = BurstLength;
 8006d40:	4a05      	ldr	r2, [pc, #20]	@ (8006d58 <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	4413      	add	r3, r2
 8006d48:	787a      	ldrb	r2, [r7, #1]
 8006d4a:	70da      	strb	r2, [r3, #3]
      /* Nothing to do */
    }
  }

  /* Return BSP status */
  return ret;
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3728      	adds	r7, #40	@ 0x28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	24000460 	.word	0x24000460
 8006d5c:	24005a64 	.word	0x24005a64

08006d60 <OSPI_RAM_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_RAM_MspInit(OSPI_HandleTypeDef *hospi)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b094      	sub	sp, #80	@ 0x50
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the OctoSPI memory interface, DMA and GPIO clocks */
  OSPI_RAM_CLK_ENABLE();
 8006d68:	4bba      	ldr	r3, [pc, #744]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006d6a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006d6e:	4ab9      	ldr	r2, [pc, #740]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006d70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d74:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8006d78:	4bb6      	ldr	r3, [pc, #728]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006d7a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006d7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
  OSPI_RAM_MDMAx_CLK_ENABLE();
 8006d86:	4bb3      	ldr	r3, [pc, #716]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006d88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006d8c:	4ab1      	ldr	r2, [pc, #708]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006d8e:	f043 0301 	orr.w	r3, r3, #1
 8006d92:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8006d96:	4baf      	ldr	r3, [pc, #700]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006d98:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  OSPI_RAM_CLK_GPIO_CLK_ENABLE();
 8006da4:	4bab      	ldr	r3, [pc, #684]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006daa:	4aaa      	ldr	r2, [pc, #680]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006dac:	f043 0320 	orr.w	r3, r3, #32
 8006db0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006db4:	4ba7      	ldr	r3, [pc, #668]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  OSPI_RAM_DQS_GPIO_CLK_ENABLE();
 8006dc2:	4ba4      	ldr	r3, [pc, #656]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dc8:	4aa2      	ldr	r2, [pc, #648]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006dca:	f043 0320 	orr.w	r3, r3, #32
 8006dce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006dd2:	4ba0      	ldr	r3, [pc, #640]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  OSPI_RAM_CS_GPIO_CLK_ENABLE();
 8006de0:	4b9c      	ldr	r3, [pc, #624]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006de6:	4a9b      	ldr	r2, [pc, #620]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006df0:	4b98      	ldr	r3, [pc, #608]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  OSPI_RAM_D0_GPIO_CLK_ENABLE();
 8006dfe:	4b95      	ldr	r3, [pc, #596]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e04:	4a93      	ldr	r2, [pc, #588]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006e06:	f043 0320 	orr.w	r3, r3, #32
 8006e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e0e:	4b91      	ldr	r3, [pc, #580]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e14:	f003 0320 	and.w	r3, r3, #32
 8006e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  OSPI_RAM_D1_GPIO_CLK_ENABLE();
 8006e1c:	4b8d      	ldr	r3, [pc, #564]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e22:	4a8c      	ldr	r2, [pc, #560]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006e24:	f043 0320 	orr.w	r3, r3, #32
 8006e28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e2c:	4b89      	ldr	r3, [pc, #548]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e32:	f003 0320 	and.w	r3, r3, #32
 8006e36:	623b      	str	r3, [r7, #32]
 8006e38:	6a3b      	ldr	r3, [r7, #32]
  OSPI_RAM_D2_GPIO_CLK_ENABLE();
 8006e3a:	4b86      	ldr	r3, [pc, #536]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e40:	4a84      	ldr	r2, [pc, #528]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006e42:	f043 0320 	orr.w	r3, r3, #32
 8006e46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e4a:	4b82      	ldr	r3, [pc, #520]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e50:	f003 0320 	and.w	r3, r3, #32
 8006e54:	61fb      	str	r3, [r7, #28]
 8006e56:	69fb      	ldr	r3, [r7, #28]
  OSPI_RAM_D3_GPIO_CLK_ENABLE();
 8006e58:	4b7e      	ldr	r3, [pc, #504]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e5e:	4a7d      	ldr	r2, [pc, #500]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006e60:	f043 0320 	orr.w	r3, r3, #32
 8006e64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e68:	4b7a      	ldr	r3, [pc, #488]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e6e:	f003 0320 	and.w	r3, r3, #32
 8006e72:	61bb      	str	r3, [r7, #24]
 8006e74:	69bb      	ldr	r3, [r7, #24]
  OSPI_RAM_D4_GPIO_CLK_ENABLE();
 8006e76:	4b77      	ldr	r3, [pc, #476]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e7c:	4a75      	ldr	r2, [pc, #468]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e86:	4b73      	ldr	r3, [pc, #460]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e90:	617b      	str	r3, [r7, #20]
 8006e92:	697b      	ldr	r3, [r7, #20]
  OSPI_RAM_D5_GPIO_CLK_ENABLE();
 8006e94:	4b6f      	ldr	r3, [pc, #444]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e9a:	4a6e      	ldr	r2, [pc, #440]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006e9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006ea4:	4b6b      	ldr	r3, [pc, #428]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eae:	613b      	str	r3, [r7, #16]
 8006eb0:	693b      	ldr	r3, [r7, #16]
  OSPI_RAM_D6_GPIO_CLK_ENABLE();
 8006eb2:	4b68      	ldr	r3, [pc, #416]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eb8:	4a66      	ldr	r2, [pc, #408]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006ec2:	4b64      	ldr	r3, [pc, #400]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ecc:	60fb      	str	r3, [r7, #12]
 8006ece:	68fb      	ldr	r3, [r7, #12]
  OSPI_RAM_D7_GPIO_CLK_ENABLE();
 8006ed0:	4b60      	ldr	r3, [pc, #384]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ed6:	4a5f      	ldr	r2, [pc, #380]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006ed8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006edc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006ee0:	4b5c      	ldr	r3, [pc, #368]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eea:	60bb      	str	r3, [r7, #8]
 8006eec:	68bb      	ldr	r3, [r7, #8]

  /* Reset the OctoSPI memory interface */
  OSPI_RAM_FORCE_RESET();
 8006eee:	4b59      	ldr	r3, [pc, #356]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006ef0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ef2:	4a58      	ldr	r2, [pc, #352]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006ef4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ef8:	67d3      	str	r3, [r2, #124]	@ 0x7c
  OSPI_RAM_RELEASE_RESET();
 8006efa:	4b56      	ldr	r3, [pc, #344]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006efc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006efe:	4a55      	ldr	r2, [pc, #340]	@ (8007054 <OSPI_RAM_MspInit+0x2f4>)
 8006f00:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006f04:	67d3      	str	r3, [r2, #124]	@ 0x7c

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_CS_PIN;
 8006f06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8006f10:	2301      	movs	r3, #1
 8006f12:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f14:	2303      	movs	r3, #3
 8006f16:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_InitStruct.Alternate = OSPI_RAM_CS_PIN_AF;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_CS_GPIO_PORT, &GPIO_InitStruct);
 8006f1c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006f20:	4619      	mov	r1, r3
 8006f22:	484d      	ldr	r0, [pc, #308]	@ (8007058 <OSPI_RAM_MspInit+0x2f8>)
 8006f24:	f003 fcb6 	bl	800a894 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Pin       = OSPI_RAM_DQS_PIN;
 8006f2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_DQS_PIN_AF;
 8006f32:	2309      	movs	r3, #9
 8006f34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_DQS_GPIO_PORT, &GPIO_InitStruct);
 8006f36:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4847      	ldr	r0, [pc, #284]	@ (800705c <OSPI_RAM_MspInit+0x2fc>)
 8006f3e:	f003 fca9 	bl	800a894 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_CLK_PIN;
 8006f42:	2310      	movs	r3, #16
 8006f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_CLK_PIN_AF;
 8006f46:	2309      	movs	r3, #9
 8006f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_CLK_GPIO_PORT, &GPIO_InitStruct);
 8006f4a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006f4e:	4619      	mov	r1, r3
 8006f50:	4842      	ldr	r0, [pc, #264]	@ (800705c <OSPI_RAM_MspInit+0x2fc>)
 8006f52:	f003 fc9f 	bl	800a894 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D0_PIN;
 8006f56:	2301      	movs	r3, #1
 8006f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D0_PIN_AF;
 8006f5a:	2309      	movs	r3, #9
 8006f5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_D0_GPIO_PORT, &GPIO_InitStruct);
 8006f5e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006f62:	4619      	mov	r1, r3
 8006f64:	483d      	ldr	r0, [pc, #244]	@ (800705c <OSPI_RAM_MspInit+0x2fc>)
 8006f66:	f003 fc95 	bl	800a894 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D1_PIN;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D1_PIN_AF;
 8006f6e:	2309      	movs	r3, #9
 8006f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_D1_GPIO_PORT, &GPIO_InitStruct);
 8006f72:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006f76:	4619      	mov	r1, r3
 8006f78:	4838      	ldr	r0, [pc, #224]	@ (800705c <OSPI_RAM_MspInit+0x2fc>)
 8006f7a:	f003 fc8b 	bl	800a894 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D2_PIN;
 8006f7e:	2304      	movs	r3, #4
 8006f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D2_PIN_AF;
 8006f82:	2309      	movs	r3, #9
 8006f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_D2_GPIO_PORT, &GPIO_InitStruct);
 8006f86:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4833      	ldr	r0, [pc, #204]	@ (800705c <OSPI_RAM_MspInit+0x2fc>)
 8006f8e:	f003 fc81 	bl	800a894 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D3_PIN;
 8006f92:	2308      	movs	r3, #8
 8006f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D3_PIN_AF;
 8006f96:	2309      	movs	r3, #9
 8006f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_D3_GPIO_PORT, &GPIO_InitStruct);
 8006f9a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	482e      	ldr	r0, [pc, #184]	@ (800705c <OSPI_RAM_MspInit+0x2fc>)
 8006fa2:	f003 fc77 	bl	800a894 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D4_PIN;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D4_PIN_AF;
 8006faa:	2309      	movs	r3, #9
 8006fac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_D4_GPIO_PORT, &GPIO_InitStruct);
 8006fae:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4828      	ldr	r0, [pc, #160]	@ (8007058 <OSPI_RAM_MspInit+0x2f8>)
 8006fb6:	f003 fc6d 	bl	800a894 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D5_PIN;
 8006fba:	2302      	movs	r3, #2
 8006fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D5_PIN_AF;
 8006fbe:	2309      	movs	r3, #9
 8006fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_D5_GPIO_PORT, &GPIO_InitStruct);
 8006fc2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	4823      	ldr	r0, [pc, #140]	@ (8007058 <OSPI_RAM_MspInit+0x2f8>)
 8006fca:	f003 fc63 	bl	800a894 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D6_PIN;
 8006fce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D6_PIN_AF;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_D6_GPIO_PORT, &GPIO_InitStruct);
 8006fd8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006fdc:	4619      	mov	r1, r3
 8006fde:	481e      	ldr	r0, [pc, #120]	@ (8007058 <OSPI_RAM_MspInit+0x2f8>)
 8006fe0:	f003 fc58 	bl	800a894 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D7_PIN;
 8006fe4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D7_PIN_AF;
 8006fea:	2309      	movs	r3, #9
 8006fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_D7_GPIO_PORT, &GPIO_InitStruct);
 8006fee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4818      	ldr	r0, [pc, #96]	@ (8007058 <OSPI_RAM_MspInit+0x2f8>)
 8006ff6:	f003 fc4d 	bl	800a894 <HAL_GPIO_Init>

  /* Configure the OctoSPI DMA */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8006ffa:	4b19      	ldr	r3, [pc, #100]	@ (8007060 <OSPI_RAM_MspInit+0x300>)
 8006ffc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007000:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8007002:	4b17      	ldr	r3, [pc, #92]	@ (8007060 <OSPI_RAM_MspInit+0x300>)
 8007004:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007008:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800700a:	4b15      	ldr	r3, [pc, #84]	@ (8007060 <OSPI_RAM_MspInit+0x300>)
 800700c:	2280      	movs	r2, #128	@ 0x80
 800700e:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8007010:	4b13      	ldr	r3, [pc, #76]	@ (8007060 <OSPI_RAM_MspInit+0x300>)
 8007012:	f240 2202 	movw	r2, #514	@ 0x202
 8007016:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8007018:	4b11      	ldr	r3, [pc, #68]	@ (8007060 <OSPI_RAM_MspInit+0x300>)
 800701a:	f640 0208 	movw	r2, #2056	@ 0x808
 800701e:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8007020:	4b0f      	ldr	r3, [pc, #60]	@ (8007060 <OSPI_RAM_MspInit+0x300>)
 8007022:	2220      	movs	r2, #32
 8007024:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8007026:	4b0e      	ldr	r3, [pc, #56]	@ (8007060 <OSPI_RAM_MspInit+0x300>)
 8007028:	2280      	movs	r2, #128	@ 0x80
 800702a:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800702c:	4b0c      	ldr	r3, [pc, #48]	@ (8007060 <OSPI_RAM_MspInit+0x300>)
 800702e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007032:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 8007034:	4b0a      	ldr	r3, [pc, #40]	@ (8007060 <OSPI_RAM_MspInit+0x300>)
 8007036:	2200      	movs	r2, #0
 8007038:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 800703a:	4b09      	ldr	r3, [pc, #36]	@ (8007060 <OSPI_RAM_MspInit+0x300>)
 800703c:	2200      	movs	r2, #0
 800703e:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 8007040:	4b07      	ldr	r3, [pc, #28]	@ (8007060 <OSPI_RAM_MspInit+0x300>)
 8007042:	2280      	movs	r2, #128	@ 0x80
 8007044:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8007046:	4b06      	ldr	r3, [pc, #24]	@ (8007060 <OSPI_RAM_MspInit+0x300>)
 8007048:	2200      	movs	r2, #0
 800704a:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 800704c:	4b04      	ldr	r3, [pc, #16]	@ (8007060 <OSPI_RAM_MspInit+0x300>)
 800704e:	2200      	movs	r2, #0
 8007050:	e008      	b.n	8007064 <OSPI_RAM_MspInit+0x304>
 8007052:	bf00      	nop
 8007054:	58024400 	.word	0x58024400
 8007058:	58021800 	.word	0x58021800
 800705c:	58021400 	.word	0x58021400
 8007060:	24005ac4 	.word	0x24005ac4
 8007064:	639a      	str	r2, [r3, #56]	@ 0x38

  mdma_handle.Instance = OSPI_RAM_MDMAx_CHANNEL;
 8007066:	4b10      	ldr	r3, [pc, #64]	@ (80070a8 <OSPI_RAM_MspInit+0x348>)
 8007068:	4a10      	ldr	r2, [pc, #64]	@ (80070ac <OSPI_RAM_MspInit+0x34c>)
 800706a:	601a      	str	r2, [r3, #0]

  __HAL_LINKDMA(hospi, hmdma, mdma_handle);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a0e      	ldr	r2, [pc, #56]	@ (80070a8 <OSPI_RAM_MspInit+0x348>)
 8007070:	651a      	str	r2, [r3, #80]	@ 0x50
 8007072:	4a0d      	ldr	r2, [pc, #52]	@ (80070a8 <OSPI_RAM_MspInit+0x348>)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6413      	str	r3, [r2, #64]	@ 0x40
  (void) HAL_MDMA_Init(&mdma_handle);
 8007078:	480b      	ldr	r0, [pc, #44]	@ (80070a8 <OSPI_RAM_MspInit+0x348>)
 800707a:	f004 ff51 	bl	800bf20 <HAL_MDMA_Init>

  /* Enable and set priority of the OctoSPI and DMA interrupts */
  HAL_NVIC_SetPriority(OCTOSPI2_IRQn, BSP_OSPI_RAM_IT_PRIORITY, 0);
 800707e:	2200      	movs	r2, #0
 8007080:	2107      	movs	r1, #7
 8007082:	2096      	movs	r0, #150	@ 0x96
 8007084:	f000 fa29 	bl	80074da <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(OSPI_RAM_MDMAx_IRQn, BSP_OSPI_RAM_DMA_IT_PRIORITY, 0);
 8007088:	2200      	movs	r2, #0
 800708a:	2107      	movs	r1, #7
 800708c:	207a      	movs	r0, #122	@ 0x7a
 800708e:	f000 fa24 	bl	80074da <HAL_NVIC_SetPriority>

  HAL_NVIC_EnableIRQ(OCTOSPI2_IRQn);
 8007092:	2096      	movs	r0, #150	@ 0x96
 8007094:	f000 fa3b 	bl	800750e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(OSPI_RAM_MDMAx_IRQn);
 8007098:	207a      	movs	r0, #122	@ 0x7a
 800709a:	f000 fa38 	bl	800750e <HAL_NVIC_EnableIRQ>

}
 800709e:	bf00      	nop
 80070a0:	3750      	adds	r7, #80	@ 0x50
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	24005ac4 	.word	0x24005ac4
 80070ac:	52000040 	.word	0x52000040

080070b0 <BSP_SD_DETECT_IRQHandler>:
  * @brief  This function handles SD interrupt request.
  * @param  Instance  SD Instance
  * @retval None
  */
void BSP_SD_DETECT_IRQHandler(uint32_t Instance)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  HAL_EXTI_IRQHandler(&hsd_exti[Instance]);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	4a04      	ldr	r2, [pc, #16]	@ (80070d0 <BSP_SD_DETECT_IRQHandler+0x20>)
 80070be:	4413      	add	r3, r2
 80070c0:	4618      	mov	r0, r3
 80070c2:	f003 fbb7 	bl	800a834 <HAL_EXTI_IRQHandler>
}
 80070c6:	bf00      	nop
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	24005bac 	.word	0x24005bac

080070d4 <BSP_SD_IRQHandler>:
  * @brief  This function handles SDMMC interrupt requests.
  * @param  Instance  SD Instance
  * @retval None
  */
void BSP_SD_IRQHandler(uint32_t Instance)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  HAL_SD_IRQHandler(&hsd_sdmmc[Instance]);
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	4613      	mov	r3, r2
 80070e0:	015b      	lsls	r3, r3, #5
 80070e2:	1a9b      	subs	r3, r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4a04      	ldr	r2, [pc, #16]	@ (80070f8 <BSP_SD_IRQHandler+0x24>)
 80070e8:	4413      	add	r3, r2
 80070ea:	4618      	mov	r0, r3
 80070ec:	f009 fae2 	bl	80106b4 <HAL_SD_IRQHandler>
}
 80070f0:	bf00      	nop
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	24005b30 	.word	0x24005b30

080070fc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd  SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback((hsd == &hsd_sdmmc[0]) ? 0UL : 1UL);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a06      	ldr	r2, [pc, #24]	@ (8007120 <HAL_SD_TxCpltCallback+0x24>)
 8007108:	4293      	cmp	r3, r2
 800710a:	bf14      	ite	ne
 800710c:	2301      	movne	r3, #1
 800710e:	2300      	moveq	r3, #0
 8007110:	b2db      	uxtb	r3, r3
 8007112:	4618      	mov	r0, r3
 8007114:	f000 f81a 	bl	800714c <BSP_SD_WriteCpltCallback>
}
 8007118:	bf00      	nop
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	24005b30 	.word	0x24005b30

08007124 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd  SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback((hsd == &hsd_sdmmc[0]) ? 0UL : 1UL);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a06      	ldr	r2, [pc, #24]	@ (8007148 <HAL_SD_RxCpltCallback+0x24>)
 8007130:	4293      	cmp	r3, r2
 8007132:	bf14      	ite	ne
 8007134:	2301      	movne	r3, #1
 8007136:	2300      	moveq	r3, #0
 8007138:	b2db      	uxtb	r3, r3
 800713a:	4618      	mov	r0, r3
 800713c:	f000 f810 	bl	8007160 <BSP_SD_ReadCpltCallback>
}
 8007140:	bf00      	nop
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	24005b30 	.word	0x24005b30

0800714c <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callbacks
  * @param  Instance     SD Instance
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(uint32_t Instance)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callbacks
  * @param  Instance     SD Instance
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(uint32_t Instance)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <BSP_TS_IRQHandler>:
  * @brief  This function handles TS interrupt request.
  * @param  Instance TS instance
  * @retval None
  */
void BSP_TS_IRQHandler(uint32_t Instance)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  HAL_EXTI_IRQHandler(&hts_exti[Instance]);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	4a04      	ldr	r2, [pc, #16]	@ (8007194 <BSP_TS_IRQHandler+0x20>)
 8007182:	4413      	add	r3, r2
 8007184:	4618      	mov	r0, r3
 8007186:	f003 fb55 	bl	800a834 <HAL_EXTI_IRQHandler>
}
 800718a:	bf00      	nop
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	24005bb4 	.word	0x24005bb4

08007198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800719e:	2003      	movs	r0, #3
 80071a0:	f000 f990 	bl	80074c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80071a4:	f006 f8f8 	bl	800d398 <HAL_RCC_GetSysClockFreq>
 80071a8:	4602      	mov	r2, r0
 80071aa:	4b15      	ldr	r3, [pc, #84]	@ (8007200 <HAL_Init+0x68>)
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	0a1b      	lsrs	r3, r3, #8
 80071b0:	f003 030f 	and.w	r3, r3, #15
 80071b4:	4913      	ldr	r1, [pc, #76]	@ (8007204 <HAL_Init+0x6c>)
 80071b6:	5ccb      	ldrb	r3, [r1, r3]
 80071b8:	f003 031f 	and.w	r3, r3, #31
 80071bc:	fa22 f303 	lsr.w	r3, r2, r3
 80071c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80071c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007200 <HAL_Init+0x68>)
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	f003 030f 	and.w	r3, r3, #15
 80071ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007204 <HAL_Init+0x6c>)
 80071cc:	5cd3      	ldrb	r3, [r2, r3]
 80071ce:	f003 031f 	and.w	r3, r3, #31
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	fa22 f303 	lsr.w	r3, r2, r3
 80071d8:	4a0b      	ldr	r2, [pc, #44]	@ (8007208 <HAL_Init+0x70>)
 80071da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80071dc:	4a0b      	ldr	r2, [pc, #44]	@ (800720c <HAL_Init+0x74>)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80071e2:	200f      	movs	r0, #15
 80071e4:	f000 f814 	bl	8007210 <HAL_InitTick>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e002      	b.n	80071f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80071f2:	f004 ff79 	bl	800c0e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	58024400 	.word	0x58024400
 8007204:	08015a3c 	.word	0x08015a3c
 8007208:	24000598 	.word	0x24000598
 800720c:	24000594 	.word	0x24000594

08007210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007218:	4b15      	ldr	r3, [pc, #84]	@ (8007270 <HAL_InitTick+0x60>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e021      	b.n	8007268 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007224:	4b13      	ldr	r3, [pc, #76]	@ (8007274 <HAL_InitTick+0x64>)
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	4b11      	ldr	r3, [pc, #68]	@ (8007270 <HAL_InitTick+0x60>)
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	4619      	mov	r1, r3
 800722e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007232:	fbb3 f3f1 	udiv	r3, r3, r1
 8007236:	fbb2 f3f3 	udiv	r3, r2, r3
 800723a:	4618      	mov	r0, r3
 800723c:	f000 f975 	bl	800752a <HAL_SYSTICK_Config>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e00e      	b.n	8007268 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b0f      	cmp	r3, #15
 800724e:	d80a      	bhi.n	8007266 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007250:	2200      	movs	r2, #0
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	f04f 30ff 	mov.w	r0, #4294967295
 8007258:	f000 f93f 	bl	80074da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800725c:	4a06      	ldr	r2, [pc, #24]	@ (8007278 <HAL_InitTick+0x68>)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	e000      	b.n	8007268 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
}
 8007268:	4618      	mov	r0, r3
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	2400046c 	.word	0x2400046c
 8007274:	24000594 	.word	0x24000594
 8007278:	24000468 	.word	0x24000468

0800727c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007280:	4b06      	ldr	r3, [pc, #24]	@ (800729c <HAL_IncTick+0x20>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	4b06      	ldr	r3, [pc, #24]	@ (80072a0 <HAL_IncTick+0x24>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4413      	add	r3, r2
 800728c:	4a04      	ldr	r2, [pc, #16]	@ (80072a0 <HAL_IncTick+0x24>)
 800728e:	6013      	str	r3, [r2, #0]
}
 8007290:	bf00      	nop
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	2400046c 	.word	0x2400046c
 80072a0:	24005bbc 	.word	0x24005bbc

080072a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80072a4:	b480      	push	{r7}
 80072a6:	af00      	add	r7, sp, #0
  return uwTick;
 80072a8:	4b03      	ldr	r3, [pc, #12]	@ (80072b8 <HAL_GetTick+0x14>)
 80072aa:	681b      	ldr	r3, [r3, #0]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	24005bbc 	.word	0x24005bbc

080072bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80072c4:	f7ff ffee 	bl	80072a4 <HAL_GetTick>
 80072c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d4:	d005      	beq.n	80072e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80072d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007300 <HAL_Delay+0x44>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4413      	add	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80072e2:	bf00      	nop
 80072e4:	f7ff ffde 	bl	80072a4 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d8f7      	bhi.n	80072e4 <HAL_Delay+0x28>
  {
  }
}
 80072f4:	bf00      	nop
 80072f6:	bf00      	nop
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	2400046c 	.word	0x2400046c

08007304 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8007304:	b480      	push	{r7}
 8007306:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8007308:	4b05      	ldr	r3, [pc, #20]	@ (8007320 <HAL_EnableCompensationCell+0x1c>)
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	4a04      	ldr	r2, [pc, #16]	@ (8007320 <HAL_EnableCompensationCell+0x1c>)
 800730e:	f043 0301 	orr.w	r3, r3, #1
 8007312:	6213      	str	r3, [r2, #32]
}
 8007314:	bf00      	nop
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	58000400 	.word	0x58000400

08007324 <__NVIC_SetPriorityGrouping>:
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f003 0307 	and.w	r3, r3, #7
 8007332:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007334:	4b0b      	ldr	r3, [pc, #44]	@ (8007364 <__NVIC_SetPriorityGrouping+0x40>)
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007340:	4013      	ands	r3, r2
 8007342:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800734c:	4b06      	ldr	r3, [pc, #24]	@ (8007368 <__NVIC_SetPriorityGrouping+0x44>)
 800734e:	4313      	orrs	r3, r2
 8007350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007352:	4a04      	ldr	r2, [pc, #16]	@ (8007364 <__NVIC_SetPriorityGrouping+0x40>)
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	60d3      	str	r3, [r2, #12]
}
 8007358:	bf00      	nop
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr
 8007364:	e000ed00 	.word	0xe000ed00
 8007368:	05fa0000 	.word	0x05fa0000

0800736c <__NVIC_GetPriorityGrouping>:
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007370:	4b04      	ldr	r3, [pc, #16]	@ (8007384 <__NVIC_GetPriorityGrouping+0x18>)
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	0a1b      	lsrs	r3, r3, #8
 8007376:	f003 0307 	and.w	r3, r3, #7
}
 800737a:	4618      	mov	r0, r3
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	e000ed00 	.word	0xe000ed00

08007388 <__NVIC_EnableIRQ>:
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	4603      	mov	r3, r0
 8007390:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007396:	2b00      	cmp	r3, #0
 8007398:	db0b      	blt.n	80073b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800739a:	88fb      	ldrh	r3, [r7, #6]
 800739c:	f003 021f 	and.w	r2, r3, #31
 80073a0:	4907      	ldr	r1, [pc, #28]	@ (80073c0 <__NVIC_EnableIRQ+0x38>)
 80073a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073a6:	095b      	lsrs	r3, r3, #5
 80073a8:	2001      	movs	r0, #1
 80073aa:	fa00 f202 	lsl.w	r2, r0, r2
 80073ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80073b2:	bf00      	nop
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	e000e100 	.word	0xe000e100

080073c4 <__NVIC_SetPriority>:
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	4603      	mov	r3, r0
 80073cc:	6039      	str	r1, [r7, #0]
 80073ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80073d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	db0a      	blt.n	80073ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	490c      	ldr	r1, [pc, #48]	@ (8007410 <__NVIC_SetPriority+0x4c>)
 80073de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073e2:	0112      	lsls	r2, r2, #4
 80073e4:	b2d2      	uxtb	r2, r2
 80073e6:	440b      	add	r3, r1
 80073e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80073ec:	e00a      	b.n	8007404 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	4908      	ldr	r1, [pc, #32]	@ (8007414 <__NVIC_SetPriority+0x50>)
 80073f4:	88fb      	ldrh	r3, [r7, #6]
 80073f6:	f003 030f 	and.w	r3, r3, #15
 80073fa:	3b04      	subs	r3, #4
 80073fc:	0112      	lsls	r2, r2, #4
 80073fe:	b2d2      	uxtb	r2, r2
 8007400:	440b      	add	r3, r1
 8007402:	761a      	strb	r2, [r3, #24]
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	e000e100 	.word	0xe000e100
 8007414:	e000ed00 	.word	0xe000ed00

08007418 <NVIC_EncodePriority>:
{
 8007418:	b480      	push	{r7}
 800741a:	b089      	sub	sp, #36	@ 0x24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	f1c3 0307 	rsb	r3, r3, #7
 8007432:	2b04      	cmp	r3, #4
 8007434:	bf28      	it	cs
 8007436:	2304      	movcs	r3, #4
 8007438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	3304      	adds	r3, #4
 800743e:	2b06      	cmp	r3, #6
 8007440:	d902      	bls.n	8007448 <NVIC_EncodePriority+0x30>
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	3b03      	subs	r3, #3
 8007446:	e000      	b.n	800744a <NVIC_EncodePriority+0x32>
 8007448:	2300      	movs	r3, #0
 800744a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800744c:	f04f 32ff 	mov.w	r2, #4294967295
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	fa02 f303 	lsl.w	r3, r2, r3
 8007456:	43da      	mvns	r2, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	401a      	ands	r2, r3
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007460:	f04f 31ff 	mov.w	r1, #4294967295
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	fa01 f303 	lsl.w	r3, r1, r3
 800746a:	43d9      	mvns	r1, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007470:	4313      	orrs	r3, r2
}
 8007472:	4618      	mov	r0, r3
 8007474:	3724      	adds	r7, #36	@ 0x24
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
	...

08007480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3b01      	subs	r3, #1
 800748c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007490:	d301      	bcc.n	8007496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007492:	2301      	movs	r3, #1
 8007494:	e00f      	b.n	80074b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007496:	4a0a      	ldr	r2, [pc, #40]	@ (80074c0 <SysTick_Config+0x40>)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3b01      	subs	r3, #1
 800749c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800749e:	210f      	movs	r1, #15
 80074a0:	f04f 30ff 	mov.w	r0, #4294967295
 80074a4:	f7ff ff8e 	bl	80073c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80074a8:	4b05      	ldr	r3, [pc, #20]	@ (80074c0 <SysTick_Config+0x40>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80074ae:	4b04      	ldr	r3, [pc, #16]	@ (80074c0 <SysTick_Config+0x40>)
 80074b0:	2207      	movs	r2, #7
 80074b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	e000e010 	.word	0xe000e010

080074c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff ff29 	bl	8007324 <__NVIC_SetPriorityGrouping>
}
 80074d2:	bf00      	nop
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b086      	sub	sp, #24
 80074de:	af00      	add	r7, sp, #0
 80074e0:	4603      	mov	r3, r0
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
 80074e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80074e8:	f7ff ff40 	bl	800736c <__NVIC_GetPriorityGrouping>
 80074ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	68b9      	ldr	r1, [r7, #8]
 80074f2:	6978      	ldr	r0, [r7, #20]
 80074f4:	f7ff ff90 	bl	8007418 <NVIC_EncodePriority>
 80074f8:	4602      	mov	r2, r0
 80074fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80074fe:	4611      	mov	r1, r2
 8007500:	4618      	mov	r0, r3
 8007502:	f7ff ff5f 	bl	80073c4 <__NVIC_SetPriority>
}
 8007506:	bf00      	nop
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b082      	sub	sp, #8
 8007512:	af00      	add	r7, sp, #0
 8007514:	4603      	mov	r3, r0
 8007516:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007518:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800751c:	4618      	mov	r0, r3
 800751e:	f7ff ff33 	bl	8007388 <__NVIC_EnableIRQ>
}
 8007522:	bf00      	nop
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7ff ffa4 	bl	8007480 <SysTick_Config>
 8007538:	4603      	mov	r3, r0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
	...

08007544 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8007544:	b480      	push	{r7}
 8007546:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8007548:	f3bf 8f5f 	dmb	sy
}
 800754c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800754e:	4b07      	ldr	r3, [pc, #28]	@ (800756c <HAL_MPU_Disable+0x28>)
 8007550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007552:	4a06      	ldr	r2, [pc, #24]	@ (800756c <HAL_MPU_Disable+0x28>)
 8007554:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007558:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800755a:	4b05      	ldr	r3, [pc, #20]	@ (8007570 <HAL_MPU_Disable+0x2c>)
 800755c:	2200      	movs	r2, #0
 800755e:	605a      	str	r2, [r3, #4]
}
 8007560:	bf00      	nop
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	e000ed00 	.word	0xe000ed00
 8007570:	e000ed90 	.word	0xe000ed90

08007574 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800757c:	4a0b      	ldr	r2, [pc, #44]	@ (80075ac <HAL_MPU_Enable+0x38>)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f043 0301 	orr.w	r3, r3, #1
 8007584:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007586:	4b0a      	ldr	r3, [pc, #40]	@ (80075b0 <HAL_MPU_Enable+0x3c>)
 8007588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800758a:	4a09      	ldr	r2, [pc, #36]	@ (80075b0 <HAL_MPU_Enable+0x3c>)
 800758c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007590:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007592:	f3bf 8f4f 	dsb	sy
}
 8007596:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007598:	f3bf 8f6f 	isb	sy
}
 800759c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800759e:	bf00      	nop
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	e000ed90 	.word	0xe000ed90
 80075b0:	e000ed00 	.word	0xe000ed00

080075b4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	785a      	ldrb	r2, [r3, #1]
 80075c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007638 <HAL_MPU_ConfigRegion+0x84>)
 80075c2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d029      	beq.n	8007620 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80075cc:	4a1a      	ldr	r2, [pc, #104]	@ (8007638 <HAL_MPU_ConfigRegion+0x84>)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	7b1b      	ldrb	r3, [r3, #12]
 80075d8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	7adb      	ldrb	r3, [r3, #11]
 80075de:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80075e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	7a9b      	ldrb	r3, [r3, #10]
 80075e6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80075e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	7b5b      	ldrb	r3, [r3, #13]
 80075ee:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80075f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	7b9b      	ldrb	r3, [r3, #14]
 80075f6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80075f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	7bdb      	ldrb	r3, [r3, #15]
 80075fe:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007600:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	7a5b      	ldrb	r3, [r3, #9]
 8007606:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007608:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	7a1b      	ldrb	r3, [r3, #8]
 800760e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007610:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	7812      	ldrb	r2, [r2, #0]
 8007616:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007618:	4a07      	ldr	r2, [pc, #28]	@ (8007638 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800761a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800761c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800761e:	e005      	b.n	800762c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8007620:	4b05      	ldr	r3, [pc, #20]	@ (8007638 <HAL_MPU_ConfigRegion+0x84>)
 8007622:	2200      	movs	r2, #0
 8007624:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8007626:	4b04      	ldr	r3, [pc, #16]	@ (8007638 <HAL_MPU_ConfigRegion+0x84>)
 8007628:	2200      	movs	r2, #0
 800762a:	611a      	str	r2, [r3, #16]
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	e000ed90 	.word	0xe000ed90

0800763c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e0b4      	b.n	80077b8 <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 800764e:	4b5c      	ldr	r3, [pc, #368]	@ (80077c0 <HAL_DFSDM_ChannelInit+0x184>)
 8007650:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 8007652:	4b5c      	ldr	r3, [pc, #368]	@ (80077c4 <HAL_DFSDM_ChannelInit+0x188>)
 8007654:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 8007656:	4b5c      	ldr	r3, [pc, #368]	@ (80077c8 <HAL_DFSDM_ChannelInit+0x18c>)
 8007658:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4618      	mov	r0, r3
 8007660:	f000 faa6 	bl	8007bb0 <DFSDM_GetChannelFromInstance>
 8007664:	4603      	mov	r3, r0
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	4413      	add	r3, r2
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e0a0      	b.n	80077b8 <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f8a8 	bl	80077cc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	1c5a      	adds	r2, r3, #1
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d125      	bne.n	80076da <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	431a      	orrs	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	791b      	ldrb	r3, [r3, #4]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d108      	bne.n	80076ce <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	3b01      	subs	r3, #1
 80076c6:	041b      	lsls	r3, r3, #16
 80076c8:	431a      	orrs	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80076e8:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6819      	ldr	r1, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80076f8:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80076fe:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	430a      	orrs	r2, r1
 8007706:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 020f 	bic.w	r2, r2, #15
 8007716:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6819      	ldr	r1, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007726:	431a      	orrs	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	430a      	orrs	r2, r1
 800772e:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689a      	ldr	r2, [r3, #8]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800773e:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6899      	ldr	r1, [r3, #8]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800774e:	3b01      	subs	r3, #1
 8007750:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8007752:	431a      	orrs	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	430a      	orrs	r2, r1
 800775a:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685a      	ldr	r2, [r3, #4]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f002 0207 	and.w	r2, r2, #7
 800776a:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6859      	ldr	r1, [r3, #4]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007776:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800777c:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800777e:	431a      	orrs	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007796:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 fa03 	bl	8007bb0 <DFSDM_GetChannelFromInstance>
 80077aa:	4603      	mov	r3, r0
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4413      	add	r3, r2
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3718      	adds	r7, #24
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	24005bc0 	.word	0x24005bc0
 80077c4:	24005bc4 	.word	0x24005bc4
 80077c8:	40017800 	.word	0x40017800

080077cc <HAL_DFSDM_ChannelMspInit>:
  * @brief  Initialize the DFSDM channel MSP.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_ChannelMspInit could be implemented in the user file.
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  const DFSDM_Filter_TypeDef *filter0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e0c8      	b.n	8007984 <HAL_DFSDM_FilterInit+0x1a4>
  else
  {
    filter0Instance = DFSDM2_Filter0;
  }
#else /* DFSDM2_Channel0 */
  filter0Instance = DFSDM1_Filter0;
 80077f2:	4b66      	ldr	r3, [pc, #408]	@ (800798c <HAL_DFSDM_FilterInit+0x1ac>)
 80077f4:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d109      	bne.n	8007814 <HAL_DFSDM_FilterInit+0x34>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8007804:	2b01      	cmp	r3, #1
 8007806:	d003      	beq.n	8007810 <HAL_DFSDM_FilterInit+0x30>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800780c:	2b01      	cmp	r3, #1
 800780e:	d101      	bne.n	8007814 <HAL_DFSDM_FilterInit+0x34>
  {
    return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e0b7      	b.n	8007984 <HAL_DFSDM_FilterInit+0x1a4>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f8b3 	bl	8007998 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8007840:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	7a1b      	ldrb	r3, [r3, #8]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d108      	bne.n	800785c <HAL_DFSDM_FilterInit+0x7c>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	e007      	b.n	800786c <HAL_DFSDM_FilterInit+0x8c>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800786a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	7a5b      	ldrb	r3, [r3, #9]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d108      	bne.n	8007886 <HAL_DFSDM_FilterInit+0xa6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	e007      	b.n	8007896 <HAL_DFSDM_FilterInit+0xb6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8007894:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6819      	ldr	r1, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	4b3b      	ldr	r3, [pc, #236]	@ (8007990 <HAL_DFSDM_FilterInit+0x1b0>)
 80078a2:	400b      	ands	r3, r1
 80078a4:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d108      	bne.n	80078c0 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6819      	ldr	r1, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	695a      	ldr	r2, [r3, #20]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	430a      	orrs	r2, r1
 80078be:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	7c1b      	ldrb	r3, [r3, #16]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d108      	bne.n	80078da <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f042 0210 	orr.w	r2, r2, #16
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	e007      	b.n	80078ea <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 0210 	bic.w	r2, r2, #16
 80078e8:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	7c5b      	ldrb	r3, [r3, #17]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d108      	bne.n	8007904 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f042 0220 	orr.w	r2, r2, #32
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	e007      	b.n	8007914 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 0220 	bic.w	r2, r2, #32
 8007912:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6959      	ldr	r1, [r3, #20]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	4b1d      	ldr	r3, [pc, #116]	@ (8007994 <HAL_DFSDM_FilterInit+0x1b4>)
 8007920:	400b      	ands	r3, r1
 8007922:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6959      	ldr	r1, [r3, #20]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	3b01      	subs	r3, #1
 8007934:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8007936:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800793c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800793e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	430a      	orrs	r2, r1
 8007946:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	68da      	ldr	r2, [r3, #12]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	699a      	ldr	r2, [r3, #24]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	7c1a      	ldrb	r2, [r3, #16]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f042 0201 	orr.w	r2, r2, #1
 8007978:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40017900 	.word	0x40017900
 8007990:	ffff80f7 	.word	0xffff80f7
 8007994:	1c00ff00 	.word	0x1c00ff00

08007998 <HAL_DFSDM_FilterMspInit>:
  * @brief  Initializes the DFSDM filter MSP.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_FilterMspInit could be implemented in the user file.
   */
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d02c      	beq.n	8007a20 <HAL_DFSDM_FilterConfigRegChannel+0x74>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80079cc:	2bff      	cmp	r3, #255	@ 0xff
 80079ce:	d027      	beq.n	8007a20 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6819      	ldr	r1, [r3, #0]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4b16      	ldr	r3, [pc, #88]	@ (8007a34 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 80079dc:	400b      	ands	r3, r1
 80079de:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d10d      	bne.n	8007a02 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	021b      	lsls	r3, r3, #8
 80079f0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80079f4:	431a      	orrs	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	e00a      	b.n	8007a18 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6819      	ldr	r1, [r3, #0]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	021b      	lsls	r3, r3, #8
 8007a0c:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	430a      	orrs	r2, r1
 8007a16:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a1e:	e001      	b.n	8007a24 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	371c      	adds	r7, #28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	f8fbffff 	.word	0xf8fbffff

08007a38 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0U))
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d102      	bne.n	8007a5a <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	75fb      	strb	r3, [r7, #23]
 8007a58:	e066      	b.n	8007b28 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a68:	d002      	beq.n	8007a70 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	75fb      	strb	r3, [r7, #23]
 8007a6e:	e05b      	b.n	8007b28 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10e      	bne.n	8007a96 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10a      	bne.n	8007a96 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a84:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d105      	bne.n	8007a96 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d002      	beq.n	8007a96 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	75fb      	strb	r3, [r7, #23]
 8007a94:	e048      	b.n	8007b28 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10c      	bne.n	8007ab8 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d108      	bne.n	8007ab8 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aaa:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8007aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ab0:	d102      	bne.n	8007ab8 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	75fb      	strb	r3, [r7, #23]
 8007ab6:	e037      	b.n	8007b28 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d004      	beq.n	8007acc <HAL_DFSDM_FilterRegularStart_DMA+0x94>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8007ac8:	2b03      	cmp	r3, #3
 8007aca:	d12b      	bne.n	8007b24 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad0:	4a18      	ldr	r2, [pc, #96]	@ (8007b34 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8007ad2:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad8:	4a17      	ldr	r2, [pc, #92]	@ (8007b38 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8007ada:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae0:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8007ae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ae6:	d101      	bne.n	8007aec <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8007ae8:	4a14      	ldr	r2, [pc, #80]	@ (8007b3c <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8007aea:	e000      	b.n	8007aee <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8007aec:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	331c      	adds	r3, #28
 8007afe:	4619      	mov	r1, r3
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f000 fe04 	bl	8008710 <HAL_DMA_Start_IT>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d006      	beq.n	8007b1c <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	22ff      	movs	r2, #255	@ 0xff
 8007b12:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8007b1a:	e005      	b.n	8007b28 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 f893 	bl	8007c48 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8007b22:	e001      	b.n	8007b28 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3718      	adds	r7, #24
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	08007b71 	.word	0x08007b71
 8007b38:	08007b8d 	.word	0x08007b8d
 8007b3c:	08007b55 	.word	0x08007b55

08007b40 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b60:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f7fc fd52 	bl	800460c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8007b68:	bf00      	nop
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b7c:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f7fc fae8 	bl	8004154 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8007b84:	bf00      	nop
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b98:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2203      	movs	r2, #3
 8007b9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f7ff ffcd 	bl	8007b40 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8007ba6:	bf00      	nop
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
	...

08007bb0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a1c      	ldr	r2, [pc, #112]	@ (8007c2c <DFSDM_GetChannelFromInstance+0x7c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d102      	bne.n	8007bc6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	e02b      	b.n	8007c1e <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a19      	ldr	r2, [pc, #100]	@ (8007c30 <DFSDM_GetChannelFromInstance+0x80>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d102      	bne.n	8007bd4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	e024      	b.n	8007c1e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a17      	ldr	r2, [pc, #92]	@ (8007c34 <DFSDM_GetChannelFromInstance+0x84>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d102      	bne.n	8007be2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8007bdc:	2302      	movs	r3, #2
 8007bde:	60fb      	str	r3, [r7, #12]
 8007be0:	e01d      	b.n	8007c1e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a14      	ldr	r2, [pc, #80]	@ (8007c38 <DFSDM_GetChannelFromInstance+0x88>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d102      	bne.n	8007bf0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8007bea:	2303      	movs	r3, #3
 8007bec:	60fb      	str	r3, [r7, #12]
 8007bee:	e016      	b.n	8007c1e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a12      	ldr	r2, [pc, #72]	@ (8007c3c <DFSDM_GetChannelFromInstance+0x8c>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d102      	bne.n	8007bfe <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8007bf8:	2304      	movs	r3, #4
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	e00f      	b.n	8007c1e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a0f      	ldr	r2, [pc, #60]	@ (8007c40 <DFSDM_GetChannelFromInstance+0x90>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d102      	bne.n	8007c0c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8007c06:	2305      	movs	r3, #5
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	e008      	b.n	8007c1e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8007c44 <DFSDM_GetChannelFromInstance+0x94>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d102      	bne.n	8007c1a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8007c14:	2306      	movs	r3, #6
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	e001      	b.n	8007c1e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8007c1a:	2307      	movs	r3, #7
 8007c1c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	40017800 	.word	0x40017800
 8007c30:	40017820 	.word	0x40017820
 8007c34:	40017840 	.word	0x40017840
 8007c38:	40017860 	.word	0x40017860
 8007c3c:	40017880 	.word	0x40017880
 8007c40:	400178a0 	.word	0x400178a0
 8007c44:	400178c0 	.word	0x400178c0

08007c48 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d108      	bne.n	8007c6a <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	e033      	b.n	8007cd2 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 0201 	bic.w	r2, r2, #1
 8007c78:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8007c88:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f042 0201 	orr.w	r2, r2, #1
 8007c98:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d116      	bne.n	8007cd2 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d107      	bne.n	8007cbc <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f042 0202 	orr.w	r2, r2, #2
 8007cba:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d102      	bne.n	8007ccc <DFSDM_RegConvStart+0x84>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cca:	e000      	b.n	8007cce <DFSDM_RegConvStart+0x86>
 8007ccc:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d101      	bne.n	8007ce0 <DFSDM_RegConvStart+0x98>
 8007cdc:	2202      	movs	r2, #2
 8007cde:	e000      	b.n	8007ce2 <DFSDM_RegConvStart+0x9a>
 8007ce0:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007cfc:	f7ff fad2 	bl	80072a4 <HAL_GetTick>
 8007d00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e312      	b.n	8008332 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a66      	ldr	r2, [pc, #408]	@ (8007eac <HAL_DMA_Init+0x1b8>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d04a      	beq.n	8007dac <HAL_DMA_Init+0xb8>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a65      	ldr	r2, [pc, #404]	@ (8007eb0 <HAL_DMA_Init+0x1bc>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d045      	beq.n	8007dac <HAL_DMA_Init+0xb8>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a63      	ldr	r2, [pc, #396]	@ (8007eb4 <HAL_DMA_Init+0x1c0>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d040      	beq.n	8007dac <HAL_DMA_Init+0xb8>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a62      	ldr	r2, [pc, #392]	@ (8007eb8 <HAL_DMA_Init+0x1c4>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d03b      	beq.n	8007dac <HAL_DMA_Init+0xb8>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a60      	ldr	r2, [pc, #384]	@ (8007ebc <HAL_DMA_Init+0x1c8>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d036      	beq.n	8007dac <HAL_DMA_Init+0xb8>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a5f      	ldr	r2, [pc, #380]	@ (8007ec0 <HAL_DMA_Init+0x1cc>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d031      	beq.n	8007dac <HAL_DMA_Init+0xb8>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a5d      	ldr	r2, [pc, #372]	@ (8007ec4 <HAL_DMA_Init+0x1d0>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d02c      	beq.n	8007dac <HAL_DMA_Init+0xb8>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a5c      	ldr	r2, [pc, #368]	@ (8007ec8 <HAL_DMA_Init+0x1d4>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d027      	beq.n	8007dac <HAL_DMA_Init+0xb8>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a5a      	ldr	r2, [pc, #360]	@ (8007ecc <HAL_DMA_Init+0x1d8>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d022      	beq.n	8007dac <HAL_DMA_Init+0xb8>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a59      	ldr	r2, [pc, #356]	@ (8007ed0 <HAL_DMA_Init+0x1dc>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d01d      	beq.n	8007dac <HAL_DMA_Init+0xb8>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a57      	ldr	r2, [pc, #348]	@ (8007ed4 <HAL_DMA_Init+0x1e0>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d018      	beq.n	8007dac <HAL_DMA_Init+0xb8>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a56      	ldr	r2, [pc, #344]	@ (8007ed8 <HAL_DMA_Init+0x1e4>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d013      	beq.n	8007dac <HAL_DMA_Init+0xb8>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a54      	ldr	r2, [pc, #336]	@ (8007edc <HAL_DMA_Init+0x1e8>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d00e      	beq.n	8007dac <HAL_DMA_Init+0xb8>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a53      	ldr	r2, [pc, #332]	@ (8007ee0 <HAL_DMA_Init+0x1ec>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d009      	beq.n	8007dac <HAL_DMA_Init+0xb8>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a51      	ldr	r2, [pc, #324]	@ (8007ee4 <HAL_DMA_Init+0x1f0>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d004      	beq.n	8007dac <HAL_DMA_Init+0xb8>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a50      	ldr	r2, [pc, #320]	@ (8007ee8 <HAL_DMA_Init+0x1f4>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d101      	bne.n	8007db0 <HAL_DMA_Init+0xbc>
 8007dac:	2301      	movs	r3, #1
 8007dae:	e000      	b.n	8007db2 <HAL_DMA_Init+0xbe>
 8007db0:	2300      	movs	r3, #0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f000 813c 	beq.w	8008030 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a37      	ldr	r2, [pc, #220]	@ (8007eac <HAL_DMA_Init+0x1b8>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d04a      	beq.n	8007e68 <HAL_DMA_Init+0x174>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a36      	ldr	r2, [pc, #216]	@ (8007eb0 <HAL_DMA_Init+0x1bc>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d045      	beq.n	8007e68 <HAL_DMA_Init+0x174>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a34      	ldr	r2, [pc, #208]	@ (8007eb4 <HAL_DMA_Init+0x1c0>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d040      	beq.n	8007e68 <HAL_DMA_Init+0x174>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a33      	ldr	r2, [pc, #204]	@ (8007eb8 <HAL_DMA_Init+0x1c4>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d03b      	beq.n	8007e68 <HAL_DMA_Init+0x174>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a31      	ldr	r2, [pc, #196]	@ (8007ebc <HAL_DMA_Init+0x1c8>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d036      	beq.n	8007e68 <HAL_DMA_Init+0x174>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a30      	ldr	r2, [pc, #192]	@ (8007ec0 <HAL_DMA_Init+0x1cc>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d031      	beq.n	8007e68 <HAL_DMA_Init+0x174>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a2e      	ldr	r2, [pc, #184]	@ (8007ec4 <HAL_DMA_Init+0x1d0>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d02c      	beq.n	8007e68 <HAL_DMA_Init+0x174>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a2d      	ldr	r2, [pc, #180]	@ (8007ec8 <HAL_DMA_Init+0x1d4>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d027      	beq.n	8007e68 <HAL_DMA_Init+0x174>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a2b      	ldr	r2, [pc, #172]	@ (8007ecc <HAL_DMA_Init+0x1d8>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d022      	beq.n	8007e68 <HAL_DMA_Init+0x174>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a2a      	ldr	r2, [pc, #168]	@ (8007ed0 <HAL_DMA_Init+0x1dc>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d01d      	beq.n	8007e68 <HAL_DMA_Init+0x174>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a28      	ldr	r2, [pc, #160]	@ (8007ed4 <HAL_DMA_Init+0x1e0>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d018      	beq.n	8007e68 <HAL_DMA_Init+0x174>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a27      	ldr	r2, [pc, #156]	@ (8007ed8 <HAL_DMA_Init+0x1e4>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d013      	beq.n	8007e68 <HAL_DMA_Init+0x174>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a25      	ldr	r2, [pc, #148]	@ (8007edc <HAL_DMA_Init+0x1e8>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d00e      	beq.n	8007e68 <HAL_DMA_Init+0x174>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a24      	ldr	r2, [pc, #144]	@ (8007ee0 <HAL_DMA_Init+0x1ec>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d009      	beq.n	8007e68 <HAL_DMA_Init+0x174>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a22      	ldr	r2, [pc, #136]	@ (8007ee4 <HAL_DMA_Init+0x1f0>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d004      	beq.n	8007e68 <HAL_DMA_Init+0x174>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a21      	ldr	r2, [pc, #132]	@ (8007ee8 <HAL_DMA_Init+0x1f4>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d108      	bne.n	8007e7a <HAL_DMA_Init+0x186>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 0201 	bic.w	r2, r2, #1
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	e007      	b.n	8007e8a <HAL_DMA_Init+0x196>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f022 0201 	bic.w	r2, r2, #1
 8007e88:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007e8a:	e02f      	b.n	8007eec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e8c:	f7ff fa0a 	bl	80072a4 <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	2b05      	cmp	r3, #5
 8007e98:	d928      	bls.n	8007eec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2203      	movs	r2, #3
 8007ea4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e242      	b.n	8008332 <HAL_DMA_Init+0x63e>
 8007eac:	40020010 	.word	0x40020010
 8007eb0:	40020028 	.word	0x40020028
 8007eb4:	40020040 	.word	0x40020040
 8007eb8:	40020058 	.word	0x40020058
 8007ebc:	40020070 	.word	0x40020070
 8007ec0:	40020088 	.word	0x40020088
 8007ec4:	400200a0 	.word	0x400200a0
 8007ec8:	400200b8 	.word	0x400200b8
 8007ecc:	40020410 	.word	0x40020410
 8007ed0:	40020428 	.word	0x40020428
 8007ed4:	40020440 	.word	0x40020440
 8007ed8:	40020458 	.word	0x40020458
 8007edc:	40020470 	.word	0x40020470
 8007ee0:	40020488 	.word	0x40020488
 8007ee4:	400204a0 	.word	0x400204a0
 8007ee8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1c8      	bne.n	8007e8c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	4b83      	ldr	r3, [pc, #524]	@ (8008114 <HAL_DMA_Init+0x420>)
 8007f06:	4013      	ands	r3, r2
 8007f08:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007f12:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f1e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f2a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a1b      	ldr	r3, [r3, #32]
 8007f30:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	d107      	bne.n	8007f50 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	2b28      	cmp	r3, #40	@ 0x28
 8007f56:	d903      	bls.n	8007f60 <HAL_DMA_Init+0x26c>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f5e:	d91f      	bls.n	8007fa0 <HAL_DMA_Init+0x2ac>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f66:	d903      	bls.n	8007f70 <HAL_DMA_Init+0x27c>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	2b42      	cmp	r3, #66	@ 0x42
 8007f6e:	d917      	bls.n	8007fa0 <HAL_DMA_Init+0x2ac>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	2b46      	cmp	r3, #70	@ 0x46
 8007f76:	d903      	bls.n	8007f80 <HAL_DMA_Init+0x28c>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	2b48      	cmp	r3, #72	@ 0x48
 8007f7e:	d90f      	bls.n	8007fa0 <HAL_DMA_Init+0x2ac>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	2b4e      	cmp	r3, #78	@ 0x4e
 8007f86:	d903      	bls.n	8007f90 <HAL_DMA_Init+0x29c>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	2b52      	cmp	r3, #82	@ 0x52
 8007f8e:	d907      	bls.n	8007fa0 <HAL_DMA_Init+0x2ac>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	2b73      	cmp	r3, #115	@ 0x73
 8007f96:	d905      	bls.n	8007fa4 <HAL_DMA_Init+0x2b0>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	2b77      	cmp	r3, #119	@ 0x77
 8007f9e:	d801      	bhi.n	8007fa4 <HAL_DMA_Init+0x2b0>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e000      	b.n	8007fa6 <HAL_DMA_Init+0x2b2>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fb0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f023 0307 	bic.w	r3, r3, #7
 8007fc8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd8:	2b04      	cmp	r3, #4
 8007fda:	d117      	bne.n	800800c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00e      	beq.n	800800c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f001 ff8c 	bl	8009f0c <DMA_CheckFifoParam>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d008      	beq.n	800800c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2240      	movs	r2, #64	@ 0x40
 8007ffe:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e192      	b.n	8008332 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f001 fec7 	bl	8009da8 <DMA_CalcBaseAndBitshift>
 800801a:	4603      	mov	r3, r0
 800801c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008022:	f003 031f 	and.w	r3, r3, #31
 8008026:	223f      	movs	r2, #63	@ 0x3f
 8008028:	409a      	lsls	r2, r3
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	609a      	str	r2, [r3, #8]
 800802e:	e0c8      	b.n	80081c2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a38      	ldr	r2, [pc, #224]	@ (8008118 <HAL_DMA_Init+0x424>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d022      	beq.n	8008080 <HAL_DMA_Init+0x38c>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a37      	ldr	r2, [pc, #220]	@ (800811c <HAL_DMA_Init+0x428>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d01d      	beq.n	8008080 <HAL_DMA_Init+0x38c>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a35      	ldr	r2, [pc, #212]	@ (8008120 <HAL_DMA_Init+0x42c>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d018      	beq.n	8008080 <HAL_DMA_Init+0x38c>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a34      	ldr	r2, [pc, #208]	@ (8008124 <HAL_DMA_Init+0x430>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d013      	beq.n	8008080 <HAL_DMA_Init+0x38c>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a32      	ldr	r2, [pc, #200]	@ (8008128 <HAL_DMA_Init+0x434>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d00e      	beq.n	8008080 <HAL_DMA_Init+0x38c>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a31      	ldr	r2, [pc, #196]	@ (800812c <HAL_DMA_Init+0x438>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d009      	beq.n	8008080 <HAL_DMA_Init+0x38c>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a2f      	ldr	r2, [pc, #188]	@ (8008130 <HAL_DMA_Init+0x43c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d004      	beq.n	8008080 <HAL_DMA_Init+0x38c>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a2e      	ldr	r2, [pc, #184]	@ (8008134 <HAL_DMA_Init+0x440>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d101      	bne.n	8008084 <HAL_DMA_Init+0x390>
 8008080:	2301      	movs	r3, #1
 8008082:	e000      	b.n	8008086 <HAL_DMA_Init+0x392>
 8008084:	2300      	movs	r3, #0
 8008086:	2b00      	cmp	r3, #0
 8008088:	f000 8092 	beq.w	80081b0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a21      	ldr	r2, [pc, #132]	@ (8008118 <HAL_DMA_Init+0x424>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d021      	beq.n	80080da <HAL_DMA_Init+0x3e6>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a20      	ldr	r2, [pc, #128]	@ (800811c <HAL_DMA_Init+0x428>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d01c      	beq.n	80080da <HAL_DMA_Init+0x3e6>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a1e      	ldr	r2, [pc, #120]	@ (8008120 <HAL_DMA_Init+0x42c>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d017      	beq.n	80080da <HAL_DMA_Init+0x3e6>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a1d      	ldr	r2, [pc, #116]	@ (8008124 <HAL_DMA_Init+0x430>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d012      	beq.n	80080da <HAL_DMA_Init+0x3e6>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008128 <HAL_DMA_Init+0x434>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d00d      	beq.n	80080da <HAL_DMA_Init+0x3e6>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a1a      	ldr	r2, [pc, #104]	@ (800812c <HAL_DMA_Init+0x438>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d008      	beq.n	80080da <HAL_DMA_Init+0x3e6>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a18      	ldr	r2, [pc, #96]	@ (8008130 <HAL_DMA_Init+0x43c>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d003      	beq.n	80080da <HAL_DMA_Init+0x3e6>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a17      	ldr	r2, [pc, #92]	@ (8008134 <HAL_DMA_Init+0x440>)
 80080d8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2202      	movs	r2, #2
 80080e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	4b10      	ldr	r3, [pc, #64]	@ (8008138 <HAL_DMA_Init+0x444>)
 80080f6:	4013      	ands	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	2b40      	cmp	r3, #64	@ 0x40
 8008100:	d01c      	beq.n	800813c <HAL_DMA_Init+0x448>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	2b80      	cmp	r3, #128	@ 0x80
 8008108:	d102      	bne.n	8008110 <HAL_DMA_Init+0x41c>
 800810a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800810e:	e016      	b.n	800813e <HAL_DMA_Init+0x44a>
 8008110:	2300      	movs	r3, #0
 8008112:	e014      	b.n	800813e <HAL_DMA_Init+0x44a>
 8008114:	fe10803f 	.word	0xfe10803f
 8008118:	58025408 	.word	0x58025408
 800811c:	5802541c 	.word	0x5802541c
 8008120:	58025430 	.word	0x58025430
 8008124:	58025444 	.word	0x58025444
 8008128:	58025458 	.word	0x58025458
 800812c:	5802546c 	.word	0x5802546c
 8008130:	58025480 	.word	0x58025480
 8008134:	58025494 	.word	0x58025494
 8008138:	fffe000f 	.word	0xfffe000f
 800813c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	68d2      	ldr	r2, [r2, #12]
 8008142:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008144:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800814c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008154:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	699b      	ldr	r3, [r3, #24]
 800815a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800815c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008164:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800816c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	4313      	orrs	r3, r2
 8008172:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	461a      	mov	r2, r3
 8008182:	4b6e      	ldr	r3, [pc, #440]	@ (800833c <HAL_DMA_Init+0x648>)
 8008184:	4413      	add	r3, r2
 8008186:	4a6e      	ldr	r2, [pc, #440]	@ (8008340 <HAL_DMA_Init+0x64c>)
 8008188:	fba2 2303 	umull	r2, r3, r2, r3
 800818c:	091b      	lsrs	r3, r3, #4
 800818e:	009a      	lsls	r2, r3, #2
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f001 fe07 	bl	8009da8 <DMA_CalcBaseAndBitshift>
 800819a:	4603      	mov	r3, r0
 800819c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081a2:	f003 031f 	and.w	r3, r3, #31
 80081a6:	2201      	movs	r2, #1
 80081a8:	409a      	lsls	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	605a      	str	r2, [r3, #4]
 80081ae:	e008      	b.n	80081c2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2240      	movs	r2, #64	@ 0x40
 80081b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2203      	movs	r2, #3
 80081ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e0b7      	b.n	8008332 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a5f      	ldr	r2, [pc, #380]	@ (8008344 <HAL_DMA_Init+0x650>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d072      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a5d      	ldr	r2, [pc, #372]	@ (8008348 <HAL_DMA_Init+0x654>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d06d      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a5c      	ldr	r2, [pc, #368]	@ (800834c <HAL_DMA_Init+0x658>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d068      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a5a      	ldr	r2, [pc, #360]	@ (8008350 <HAL_DMA_Init+0x65c>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d063      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a59      	ldr	r2, [pc, #356]	@ (8008354 <HAL_DMA_Init+0x660>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d05e      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a57      	ldr	r2, [pc, #348]	@ (8008358 <HAL_DMA_Init+0x664>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d059      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a56      	ldr	r2, [pc, #344]	@ (800835c <HAL_DMA_Init+0x668>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d054      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a54      	ldr	r2, [pc, #336]	@ (8008360 <HAL_DMA_Init+0x66c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d04f      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a53      	ldr	r2, [pc, #332]	@ (8008364 <HAL_DMA_Init+0x670>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d04a      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a51      	ldr	r2, [pc, #324]	@ (8008368 <HAL_DMA_Init+0x674>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d045      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a50      	ldr	r2, [pc, #320]	@ (800836c <HAL_DMA_Init+0x678>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d040      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a4e      	ldr	r2, [pc, #312]	@ (8008370 <HAL_DMA_Init+0x67c>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d03b      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a4d      	ldr	r2, [pc, #308]	@ (8008374 <HAL_DMA_Init+0x680>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d036      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a4b      	ldr	r2, [pc, #300]	@ (8008378 <HAL_DMA_Init+0x684>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d031      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a4a      	ldr	r2, [pc, #296]	@ (800837c <HAL_DMA_Init+0x688>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d02c      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a48      	ldr	r2, [pc, #288]	@ (8008380 <HAL_DMA_Init+0x68c>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d027      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a47      	ldr	r2, [pc, #284]	@ (8008384 <HAL_DMA_Init+0x690>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d022      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a45      	ldr	r2, [pc, #276]	@ (8008388 <HAL_DMA_Init+0x694>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d01d      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a44      	ldr	r2, [pc, #272]	@ (800838c <HAL_DMA_Init+0x698>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d018      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a42      	ldr	r2, [pc, #264]	@ (8008390 <HAL_DMA_Init+0x69c>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d013      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a41      	ldr	r2, [pc, #260]	@ (8008394 <HAL_DMA_Init+0x6a0>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d00e      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a3f      	ldr	r2, [pc, #252]	@ (8008398 <HAL_DMA_Init+0x6a4>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d009      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a3e      	ldr	r2, [pc, #248]	@ (800839c <HAL_DMA_Init+0x6a8>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d004      	beq.n	80082b2 <HAL_DMA_Init+0x5be>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a3c      	ldr	r2, [pc, #240]	@ (80083a0 <HAL_DMA_Init+0x6ac>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d101      	bne.n	80082b6 <HAL_DMA_Init+0x5c2>
 80082b2:	2301      	movs	r3, #1
 80082b4:	e000      	b.n	80082b8 <HAL_DMA_Init+0x5c4>
 80082b6:	2300      	movs	r3, #0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d032      	beq.n	8008322 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f001 fea1 	bl	800a004 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	2b80      	cmp	r3, #128	@ 0x80
 80082c8:	d102      	bne.n	80082d0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082d8:	b2d2      	uxtb	r2, r2
 80082da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80082e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d010      	beq.n	8008310 <HAL_DMA_Init+0x61c>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	2b08      	cmp	r3, #8
 80082f4:	d80c      	bhi.n	8008310 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 ff1e 	bl	800a138 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008300:	2200      	movs	r2, #0
 8008302:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800830c:	605a      	str	r2, [r3, #4]
 800830e:	e008      	b.n	8008322 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	a7fdabf8 	.word	0xa7fdabf8
 8008340:	cccccccd 	.word	0xcccccccd
 8008344:	40020010 	.word	0x40020010
 8008348:	40020028 	.word	0x40020028
 800834c:	40020040 	.word	0x40020040
 8008350:	40020058 	.word	0x40020058
 8008354:	40020070 	.word	0x40020070
 8008358:	40020088 	.word	0x40020088
 800835c:	400200a0 	.word	0x400200a0
 8008360:	400200b8 	.word	0x400200b8
 8008364:	40020410 	.word	0x40020410
 8008368:	40020428 	.word	0x40020428
 800836c:	40020440 	.word	0x40020440
 8008370:	40020458 	.word	0x40020458
 8008374:	40020470 	.word	0x40020470
 8008378:	40020488 	.word	0x40020488
 800837c:	400204a0 	.word	0x400204a0
 8008380:	400204b8 	.word	0x400204b8
 8008384:	58025408 	.word	0x58025408
 8008388:	5802541c 	.word	0x5802541c
 800838c:	58025430 	.word	0x58025430
 8008390:	58025444 	.word	0x58025444
 8008394:	58025458 	.word	0x58025458
 8008398:	5802546c 	.word	0x5802546c
 800839c:	58025480 	.word	0x58025480
 80083a0:	58025494 	.word	0x58025494

080083a4 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e1a8      	b.n	8008708 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a82      	ldr	r2, [pc, #520]	@ (80085c4 <HAL_DMA_DeInit+0x220>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d04a      	beq.n	8008456 <HAL_DMA_DeInit+0xb2>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a80      	ldr	r2, [pc, #512]	@ (80085c8 <HAL_DMA_DeInit+0x224>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d045      	beq.n	8008456 <HAL_DMA_DeInit+0xb2>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a7f      	ldr	r2, [pc, #508]	@ (80085cc <HAL_DMA_DeInit+0x228>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d040      	beq.n	8008456 <HAL_DMA_DeInit+0xb2>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a7d      	ldr	r2, [pc, #500]	@ (80085d0 <HAL_DMA_DeInit+0x22c>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d03b      	beq.n	8008456 <HAL_DMA_DeInit+0xb2>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a7c      	ldr	r2, [pc, #496]	@ (80085d4 <HAL_DMA_DeInit+0x230>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d036      	beq.n	8008456 <HAL_DMA_DeInit+0xb2>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a7a      	ldr	r2, [pc, #488]	@ (80085d8 <HAL_DMA_DeInit+0x234>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d031      	beq.n	8008456 <HAL_DMA_DeInit+0xb2>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a79      	ldr	r2, [pc, #484]	@ (80085dc <HAL_DMA_DeInit+0x238>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d02c      	beq.n	8008456 <HAL_DMA_DeInit+0xb2>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a77      	ldr	r2, [pc, #476]	@ (80085e0 <HAL_DMA_DeInit+0x23c>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d027      	beq.n	8008456 <HAL_DMA_DeInit+0xb2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a76      	ldr	r2, [pc, #472]	@ (80085e4 <HAL_DMA_DeInit+0x240>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d022      	beq.n	8008456 <HAL_DMA_DeInit+0xb2>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a74      	ldr	r2, [pc, #464]	@ (80085e8 <HAL_DMA_DeInit+0x244>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d01d      	beq.n	8008456 <HAL_DMA_DeInit+0xb2>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a73      	ldr	r2, [pc, #460]	@ (80085ec <HAL_DMA_DeInit+0x248>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d018      	beq.n	8008456 <HAL_DMA_DeInit+0xb2>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a71      	ldr	r2, [pc, #452]	@ (80085f0 <HAL_DMA_DeInit+0x24c>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d013      	beq.n	8008456 <HAL_DMA_DeInit+0xb2>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a70      	ldr	r2, [pc, #448]	@ (80085f4 <HAL_DMA_DeInit+0x250>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d00e      	beq.n	8008456 <HAL_DMA_DeInit+0xb2>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a6e      	ldr	r2, [pc, #440]	@ (80085f8 <HAL_DMA_DeInit+0x254>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d009      	beq.n	8008456 <HAL_DMA_DeInit+0xb2>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a6d      	ldr	r2, [pc, #436]	@ (80085fc <HAL_DMA_DeInit+0x258>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d004      	beq.n	8008456 <HAL_DMA_DeInit+0xb2>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a6b      	ldr	r2, [pc, #428]	@ (8008600 <HAL_DMA_DeInit+0x25c>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d108      	bne.n	8008468 <HAL_DMA_DeInit+0xc4>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f022 0201 	bic.w	r2, r2, #1
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	e007      	b.n	8008478 <HAL_DMA_DeInit+0xd4>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f022 0201 	bic.w	r2, r2, #1
 8008476:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a51      	ldr	r2, [pc, #324]	@ (80085c4 <HAL_DMA_DeInit+0x220>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d04a      	beq.n	8008518 <HAL_DMA_DeInit+0x174>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a50      	ldr	r2, [pc, #320]	@ (80085c8 <HAL_DMA_DeInit+0x224>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d045      	beq.n	8008518 <HAL_DMA_DeInit+0x174>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a4e      	ldr	r2, [pc, #312]	@ (80085cc <HAL_DMA_DeInit+0x228>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d040      	beq.n	8008518 <HAL_DMA_DeInit+0x174>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a4d      	ldr	r2, [pc, #308]	@ (80085d0 <HAL_DMA_DeInit+0x22c>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d03b      	beq.n	8008518 <HAL_DMA_DeInit+0x174>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a4b      	ldr	r2, [pc, #300]	@ (80085d4 <HAL_DMA_DeInit+0x230>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d036      	beq.n	8008518 <HAL_DMA_DeInit+0x174>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a4a      	ldr	r2, [pc, #296]	@ (80085d8 <HAL_DMA_DeInit+0x234>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d031      	beq.n	8008518 <HAL_DMA_DeInit+0x174>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a48      	ldr	r2, [pc, #288]	@ (80085dc <HAL_DMA_DeInit+0x238>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d02c      	beq.n	8008518 <HAL_DMA_DeInit+0x174>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a47      	ldr	r2, [pc, #284]	@ (80085e0 <HAL_DMA_DeInit+0x23c>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d027      	beq.n	8008518 <HAL_DMA_DeInit+0x174>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a45      	ldr	r2, [pc, #276]	@ (80085e4 <HAL_DMA_DeInit+0x240>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d022      	beq.n	8008518 <HAL_DMA_DeInit+0x174>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a44      	ldr	r2, [pc, #272]	@ (80085e8 <HAL_DMA_DeInit+0x244>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d01d      	beq.n	8008518 <HAL_DMA_DeInit+0x174>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a42      	ldr	r2, [pc, #264]	@ (80085ec <HAL_DMA_DeInit+0x248>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d018      	beq.n	8008518 <HAL_DMA_DeInit+0x174>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a41      	ldr	r2, [pc, #260]	@ (80085f0 <HAL_DMA_DeInit+0x24c>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d013      	beq.n	8008518 <HAL_DMA_DeInit+0x174>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a3f      	ldr	r2, [pc, #252]	@ (80085f4 <HAL_DMA_DeInit+0x250>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d00e      	beq.n	8008518 <HAL_DMA_DeInit+0x174>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a3e      	ldr	r2, [pc, #248]	@ (80085f8 <HAL_DMA_DeInit+0x254>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d009      	beq.n	8008518 <HAL_DMA_DeInit+0x174>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a3c      	ldr	r2, [pc, #240]	@ (80085fc <HAL_DMA_DeInit+0x258>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d004      	beq.n	8008518 <HAL_DMA_DeInit+0x174>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a3b      	ldr	r2, [pc, #236]	@ (8008600 <HAL_DMA_DeInit+0x25c>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d101      	bne.n	800851c <HAL_DMA_DeInit+0x178>
 8008518:	2301      	movs	r3, #1
 800851a:	e000      	b.n	800851e <HAL_DMA_DeInit+0x17a>
 800851c:	2300      	movs	r3, #0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d025      	beq.n	800856e <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2200      	movs	r2, #0
 8008528:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2200      	movs	r2, #0
 8008530:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2200      	movs	r2, #0
 8008538:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2200      	movs	r2, #0
 8008540:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2200      	movs	r2, #0
 8008548:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2221      	movs	r2, #33	@ 0x21
 8008550:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f001 fc28 	bl	8009da8 <DMA_CalcBaseAndBitshift>
 8008558:	4603      	mov	r3, r0
 800855a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008560:	f003 031f 	and.w	r3, r3, #31
 8008564:	223f      	movs	r2, #63	@ 0x3f
 8008566:	409a      	lsls	r2, r3
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	609a      	str	r2, [r3, #8]
 800856c:	e081      	b.n	8008672 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a24      	ldr	r2, [pc, #144]	@ (8008604 <HAL_DMA_DeInit+0x260>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d022      	beq.n	80085be <HAL_DMA_DeInit+0x21a>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a22      	ldr	r2, [pc, #136]	@ (8008608 <HAL_DMA_DeInit+0x264>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d01d      	beq.n	80085be <HAL_DMA_DeInit+0x21a>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a21      	ldr	r2, [pc, #132]	@ (800860c <HAL_DMA_DeInit+0x268>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d018      	beq.n	80085be <HAL_DMA_DeInit+0x21a>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a1f      	ldr	r2, [pc, #124]	@ (8008610 <HAL_DMA_DeInit+0x26c>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d013      	beq.n	80085be <HAL_DMA_DeInit+0x21a>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a1e      	ldr	r2, [pc, #120]	@ (8008614 <HAL_DMA_DeInit+0x270>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d00e      	beq.n	80085be <HAL_DMA_DeInit+0x21a>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008618 <HAL_DMA_DeInit+0x274>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d009      	beq.n	80085be <HAL_DMA_DeInit+0x21a>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a1b      	ldr	r2, [pc, #108]	@ (800861c <HAL_DMA_DeInit+0x278>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d004      	beq.n	80085be <HAL_DMA_DeInit+0x21a>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a19      	ldr	r2, [pc, #100]	@ (8008620 <HAL_DMA_DeInit+0x27c>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d132      	bne.n	8008624 <HAL_DMA_DeInit+0x280>
 80085be:	2301      	movs	r3, #1
 80085c0:	e031      	b.n	8008626 <HAL_DMA_DeInit+0x282>
 80085c2:	bf00      	nop
 80085c4:	40020010 	.word	0x40020010
 80085c8:	40020028 	.word	0x40020028
 80085cc:	40020040 	.word	0x40020040
 80085d0:	40020058 	.word	0x40020058
 80085d4:	40020070 	.word	0x40020070
 80085d8:	40020088 	.word	0x40020088
 80085dc:	400200a0 	.word	0x400200a0
 80085e0:	400200b8 	.word	0x400200b8
 80085e4:	40020410 	.word	0x40020410
 80085e8:	40020428 	.word	0x40020428
 80085ec:	40020440 	.word	0x40020440
 80085f0:	40020458 	.word	0x40020458
 80085f4:	40020470 	.word	0x40020470
 80085f8:	40020488 	.word	0x40020488
 80085fc:	400204a0 	.word	0x400204a0
 8008600:	400204b8 	.word	0x400204b8
 8008604:	58025408 	.word	0x58025408
 8008608:	5802541c 	.word	0x5802541c
 800860c:	58025430 	.word	0x58025430
 8008610:	58025444 	.word	0x58025444
 8008614:	58025458 	.word	0x58025458
 8008618:	5802546c 	.word	0x5802546c
 800861c:	58025480 	.word	0x58025480
 8008620:	58025494 	.word	0x58025494
 8008624:	2300      	movs	r3, #0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d021      	beq.n	800866e <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2200      	movs	r2, #0
 8008630:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2200      	movs	r2, #0
 8008638:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2200      	movs	r2, #0
 8008640:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2200      	movs	r2, #0
 8008648:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2200      	movs	r2, #0
 8008650:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f001 fba8 	bl	8009da8 <DMA_CalcBaseAndBitshift>
 8008658:	4603      	mov	r3, r0
 800865a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008660:	f003 031f 	and.w	r3, r3, #31
 8008664:	2201      	movs	r2, #1
 8008666:	409a      	lsls	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	605a      	str	r2, [r3, #4]
 800866c:	e001      	b.n	8008672 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e04a      	b.n	8008708 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f001 fcc6 	bl	800a004 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800867c:	2b00      	cmp	r3, #0
 800867e:	d008      	beq.n	8008692 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008684:	2200      	movs	r2, #0
 8008686:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008690:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00f      	beq.n	80086ba <HAL_DMA_DeInit+0x316>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	2b08      	cmp	r3, #8
 80086a0:	d80b      	bhi.n	80086ba <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f001 fd48 	bl	800a138 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086ac:	2200      	movs	r2, #0
 80086ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80086b8:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
 800871c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d101      	bne.n	800872c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e226      	b.n	8008b7a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008732:	2b01      	cmp	r3, #1
 8008734:	d101      	bne.n	800873a <HAL_DMA_Start_IT+0x2a>
 8008736:	2302      	movs	r3, #2
 8008738:	e21f      	b.n	8008b7a <HAL_DMA_Start_IT+0x46a>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008748:	b2db      	uxtb	r3, r3
 800874a:	2b01      	cmp	r3, #1
 800874c:	f040 820a 	bne.w	8008b64 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2202      	movs	r2, #2
 8008754:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a68      	ldr	r2, [pc, #416]	@ (8008904 <HAL_DMA_Start_IT+0x1f4>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d04a      	beq.n	80087fe <HAL_DMA_Start_IT+0xee>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a66      	ldr	r2, [pc, #408]	@ (8008908 <HAL_DMA_Start_IT+0x1f8>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d045      	beq.n	80087fe <HAL_DMA_Start_IT+0xee>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a65      	ldr	r2, [pc, #404]	@ (800890c <HAL_DMA_Start_IT+0x1fc>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d040      	beq.n	80087fe <HAL_DMA_Start_IT+0xee>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a63      	ldr	r2, [pc, #396]	@ (8008910 <HAL_DMA_Start_IT+0x200>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d03b      	beq.n	80087fe <HAL_DMA_Start_IT+0xee>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a62      	ldr	r2, [pc, #392]	@ (8008914 <HAL_DMA_Start_IT+0x204>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d036      	beq.n	80087fe <HAL_DMA_Start_IT+0xee>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a60      	ldr	r2, [pc, #384]	@ (8008918 <HAL_DMA_Start_IT+0x208>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d031      	beq.n	80087fe <HAL_DMA_Start_IT+0xee>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a5f      	ldr	r2, [pc, #380]	@ (800891c <HAL_DMA_Start_IT+0x20c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d02c      	beq.n	80087fe <HAL_DMA_Start_IT+0xee>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a5d      	ldr	r2, [pc, #372]	@ (8008920 <HAL_DMA_Start_IT+0x210>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d027      	beq.n	80087fe <HAL_DMA_Start_IT+0xee>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a5c      	ldr	r2, [pc, #368]	@ (8008924 <HAL_DMA_Start_IT+0x214>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d022      	beq.n	80087fe <HAL_DMA_Start_IT+0xee>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a5a      	ldr	r2, [pc, #360]	@ (8008928 <HAL_DMA_Start_IT+0x218>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d01d      	beq.n	80087fe <HAL_DMA_Start_IT+0xee>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a59      	ldr	r2, [pc, #356]	@ (800892c <HAL_DMA_Start_IT+0x21c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d018      	beq.n	80087fe <HAL_DMA_Start_IT+0xee>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a57      	ldr	r2, [pc, #348]	@ (8008930 <HAL_DMA_Start_IT+0x220>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d013      	beq.n	80087fe <HAL_DMA_Start_IT+0xee>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a56      	ldr	r2, [pc, #344]	@ (8008934 <HAL_DMA_Start_IT+0x224>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d00e      	beq.n	80087fe <HAL_DMA_Start_IT+0xee>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a54      	ldr	r2, [pc, #336]	@ (8008938 <HAL_DMA_Start_IT+0x228>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d009      	beq.n	80087fe <HAL_DMA_Start_IT+0xee>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a53      	ldr	r2, [pc, #332]	@ (800893c <HAL_DMA_Start_IT+0x22c>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d004      	beq.n	80087fe <HAL_DMA_Start_IT+0xee>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a51      	ldr	r2, [pc, #324]	@ (8008940 <HAL_DMA_Start_IT+0x230>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d108      	bne.n	8008810 <HAL_DMA_Start_IT+0x100>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f022 0201 	bic.w	r2, r2, #1
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	e007      	b.n	8008820 <HAL_DMA_Start_IT+0x110>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f022 0201 	bic.w	r2, r2, #1
 800881e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	68b9      	ldr	r1, [r7, #8]
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f001 f912 	bl	8009a50 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a34      	ldr	r2, [pc, #208]	@ (8008904 <HAL_DMA_Start_IT+0x1f4>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d04a      	beq.n	80088cc <HAL_DMA_Start_IT+0x1bc>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a33      	ldr	r2, [pc, #204]	@ (8008908 <HAL_DMA_Start_IT+0x1f8>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d045      	beq.n	80088cc <HAL_DMA_Start_IT+0x1bc>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a31      	ldr	r2, [pc, #196]	@ (800890c <HAL_DMA_Start_IT+0x1fc>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d040      	beq.n	80088cc <HAL_DMA_Start_IT+0x1bc>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a30      	ldr	r2, [pc, #192]	@ (8008910 <HAL_DMA_Start_IT+0x200>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d03b      	beq.n	80088cc <HAL_DMA_Start_IT+0x1bc>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a2e      	ldr	r2, [pc, #184]	@ (8008914 <HAL_DMA_Start_IT+0x204>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d036      	beq.n	80088cc <HAL_DMA_Start_IT+0x1bc>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a2d      	ldr	r2, [pc, #180]	@ (8008918 <HAL_DMA_Start_IT+0x208>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d031      	beq.n	80088cc <HAL_DMA_Start_IT+0x1bc>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a2b      	ldr	r2, [pc, #172]	@ (800891c <HAL_DMA_Start_IT+0x20c>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d02c      	beq.n	80088cc <HAL_DMA_Start_IT+0x1bc>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a2a      	ldr	r2, [pc, #168]	@ (8008920 <HAL_DMA_Start_IT+0x210>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d027      	beq.n	80088cc <HAL_DMA_Start_IT+0x1bc>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a28      	ldr	r2, [pc, #160]	@ (8008924 <HAL_DMA_Start_IT+0x214>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d022      	beq.n	80088cc <HAL_DMA_Start_IT+0x1bc>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a27      	ldr	r2, [pc, #156]	@ (8008928 <HAL_DMA_Start_IT+0x218>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d01d      	beq.n	80088cc <HAL_DMA_Start_IT+0x1bc>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a25      	ldr	r2, [pc, #148]	@ (800892c <HAL_DMA_Start_IT+0x21c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d018      	beq.n	80088cc <HAL_DMA_Start_IT+0x1bc>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a24      	ldr	r2, [pc, #144]	@ (8008930 <HAL_DMA_Start_IT+0x220>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d013      	beq.n	80088cc <HAL_DMA_Start_IT+0x1bc>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a22      	ldr	r2, [pc, #136]	@ (8008934 <HAL_DMA_Start_IT+0x224>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d00e      	beq.n	80088cc <HAL_DMA_Start_IT+0x1bc>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a21      	ldr	r2, [pc, #132]	@ (8008938 <HAL_DMA_Start_IT+0x228>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d009      	beq.n	80088cc <HAL_DMA_Start_IT+0x1bc>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a1f      	ldr	r2, [pc, #124]	@ (800893c <HAL_DMA_Start_IT+0x22c>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d004      	beq.n	80088cc <HAL_DMA_Start_IT+0x1bc>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a1e      	ldr	r2, [pc, #120]	@ (8008940 <HAL_DMA_Start_IT+0x230>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d101      	bne.n	80088d0 <HAL_DMA_Start_IT+0x1c0>
 80088cc:	2301      	movs	r3, #1
 80088ce:	e000      	b.n	80088d2 <HAL_DMA_Start_IT+0x1c2>
 80088d0:	2300      	movs	r3, #0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d036      	beq.n	8008944 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f023 021e 	bic.w	r2, r3, #30
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f042 0216 	orr.w	r2, r2, #22
 80088e8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d03e      	beq.n	8008970 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f042 0208 	orr.w	r2, r2, #8
 8008900:	601a      	str	r2, [r3, #0]
 8008902:	e035      	b.n	8008970 <HAL_DMA_Start_IT+0x260>
 8008904:	40020010 	.word	0x40020010
 8008908:	40020028 	.word	0x40020028
 800890c:	40020040 	.word	0x40020040
 8008910:	40020058 	.word	0x40020058
 8008914:	40020070 	.word	0x40020070
 8008918:	40020088 	.word	0x40020088
 800891c:	400200a0 	.word	0x400200a0
 8008920:	400200b8 	.word	0x400200b8
 8008924:	40020410 	.word	0x40020410
 8008928:	40020428 	.word	0x40020428
 800892c:	40020440 	.word	0x40020440
 8008930:	40020458 	.word	0x40020458
 8008934:	40020470 	.word	0x40020470
 8008938:	40020488 	.word	0x40020488
 800893c:	400204a0 	.word	0x400204a0
 8008940:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f023 020e 	bic.w	r2, r3, #14
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f042 020a 	orr.w	r2, r2, #10
 8008956:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800895c:	2b00      	cmp	r3, #0
 800895e:	d007      	beq.n	8008970 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0204 	orr.w	r2, r2, #4
 800896e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a83      	ldr	r2, [pc, #524]	@ (8008b84 <HAL_DMA_Start_IT+0x474>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d072      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a82      	ldr	r2, [pc, #520]	@ (8008b88 <HAL_DMA_Start_IT+0x478>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d06d      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a80      	ldr	r2, [pc, #512]	@ (8008b8c <HAL_DMA_Start_IT+0x47c>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d068      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a7f      	ldr	r2, [pc, #508]	@ (8008b90 <HAL_DMA_Start_IT+0x480>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d063      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a7d      	ldr	r2, [pc, #500]	@ (8008b94 <HAL_DMA_Start_IT+0x484>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d05e      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a7c      	ldr	r2, [pc, #496]	@ (8008b98 <HAL_DMA_Start_IT+0x488>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d059      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a7a      	ldr	r2, [pc, #488]	@ (8008b9c <HAL_DMA_Start_IT+0x48c>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d054      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a79      	ldr	r2, [pc, #484]	@ (8008ba0 <HAL_DMA_Start_IT+0x490>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d04f      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a77      	ldr	r2, [pc, #476]	@ (8008ba4 <HAL_DMA_Start_IT+0x494>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d04a      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a76      	ldr	r2, [pc, #472]	@ (8008ba8 <HAL_DMA_Start_IT+0x498>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d045      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a74      	ldr	r2, [pc, #464]	@ (8008bac <HAL_DMA_Start_IT+0x49c>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d040      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a73      	ldr	r2, [pc, #460]	@ (8008bb0 <HAL_DMA_Start_IT+0x4a0>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d03b      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a71      	ldr	r2, [pc, #452]	@ (8008bb4 <HAL_DMA_Start_IT+0x4a4>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d036      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a70      	ldr	r2, [pc, #448]	@ (8008bb8 <HAL_DMA_Start_IT+0x4a8>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d031      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a6e      	ldr	r2, [pc, #440]	@ (8008bbc <HAL_DMA_Start_IT+0x4ac>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d02c      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a6d      	ldr	r2, [pc, #436]	@ (8008bc0 <HAL_DMA_Start_IT+0x4b0>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d027      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a6b      	ldr	r2, [pc, #428]	@ (8008bc4 <HAL_DMA_Start_IT+0x4b4>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d022      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a6a      	ldr	r2, [pc, #424]	@ (8008bc8 <HAL_DMA_Start_IT+0x4b8>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d01d      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a68      	ldr	r2, [pc, #416]	@ (8008bcc <HAL_DMA_Start_IT+0x4bc>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d018      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a67      	ldr	r2, [pc, #412]	@ (8008bd0 <HAL_DMA_Start_IT+0x4c0>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d013      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a65      	ldr	r2, [pc, #404]	@ (8008bd4 <HAL_DMA_Start_IT+0x4c4>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d00e      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a64      	ldr	r2, [pc, #400]	@ (8008bd8 <HAL_DMA_Start_IT+0x4c8>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d009      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a62      	ldr	r2, [pc, #392]	@ (8008bdc <HAL_DMA_Start_IT+0x4cc>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d004      	beq.n	8008a60 <HAL_DMA_Start_IT+0x350>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a61      	ldr	r2, [pc, #388]	@ (8008be0 <HAL_DMA_Start_IT+0x4d0>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d101      	bne.n	8008a64 <HAL_DMA_Start_IT+0x354>
 8008a60:	2301      	movs	r3, #1
 8008a62:	e000      	b.n	8008a66 <HAL_DMA_Start_IT+0x356>
 8008a64:	2300      	movs	r3, #0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d01a      	beq.n	8008aa0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d007      	beq.n	8008a88 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a86:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d007      	beq.n	8008aa0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a9e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a37      	ldr	r2, [pc, #220]	@ (8008b84 <HAL_DMA_Start_IT+0x474>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d04a      	beq.n	8008b40 <HAL_DMA_Start_IT+0x430>
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a36      	ldr	r2, [pc, #216]	@ (8008b88 <HAL_DMA_Start_IT+0x478>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d045      	beq.n	8008b40 <HAL_DMA_Start_IT+0x430>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a34      	ldr	r2, [pc, #208]	@ (8008b8c <HAL_DMA_Start_IT+0x47c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d040      	beq.n	8008b40 <HAL_DMA_Start_IT+0x430>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a33      	ldr	r2, [pc, #204]	@ (8008b90 <HAL_DMA_Start_IT+0x480>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d03b      	beq.n	8008b40 <HAL_DMA_Start_IT+0x430>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a31      	ldr	r2, [pc, #196]	@ (8008b94 <HAL_DMA_Start_IT+0x484>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d036      	beq.n	8008b40 <HAL_DMA_Start_IT+0x430>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a30      	ldr	r2, [pc, #192]	@ (8008b98 <HAL_DMA_Start_IT+0x488>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d031      	beq.n	8008b40 <HAL_DMA_Start_IT+0x430>
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a2e      	ldr	r2, [pc, #184]	@ (8008b9c <HAL_DMA_Start_IT+0x48c>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d02c      	beq.n	8008b40 <HAL_DMA_Start_IT+0x430>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a2d      	ldr	r2, [pc, #180]	@ (8008ba0 <HAL_DMA_Start_IT+0x490>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d027      	beq.n	8008b40 <HAL_DMA_Start_IT+0x430>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a2b      	ldr	r2, [pc, #172]	@ (8008ba4 <HAL_DMA_Start_IT+0x494>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d022      	beq.n	8008b40 <HAL_DMA_Start_IT+0x430>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a2a      	ldr	r2, [pc, #168]	@ (8008ba8 <HAL_DMA_Start_IT+0x498>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d01d      	beq.n	8008b40 <HAL_DMA_Start_IT+0x430>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a28      	ldr	r2, [pc, #160]	@ (8008bac <HAL_DMA_Start_IT+0x49c>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d018      	beq.n	8008b40 <HAL_DMA_Start_IT+0x430>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a27      	ldr	r2, [pc, #156]	@ (8008bb0 <HAL_DMA_Start_IT+0x4a0>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d013      	beq.n	8008b40 <HAL_DMA_Start_IT+0x430>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a25      	ldr	r2, [pc, #148]	@ (8008bb4 <HAL_DMA_Start_IT+0x4a4>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d00e      	beq.n	8008b40 <HAL_DMA_Start_IT+0x430>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a24      	ldr	r2, [pc, #144]	@ (8008bb8 <HAL_DMA_Start_IT+0x4a8>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d009      	beq.n	8008b40 <HAL_DMA_Start_IT+0x430>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a22      	ldr	r2, [pc, #136]	@ (8008bbc <HAL_DMA_Start_IT+0x4ac>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d004      	beq.n	8008b40 <HAL_DMA_Start_IT+0x430>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a21      	ldr	r2, [pc, #132]	@ (8008bc0 <HAL_DMA_Start_IT+0x4b0>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d108      	bne.n	8008b52 <HAL_DMA_Start_IT+0x442>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f042 0201 	orr.w	r2, r2, #1
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	e012      	b.n	8008b78 <HAL_DMA_Start_IT+0x468>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f042 0201 	orr.w	r2, r2, #1
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	e009      	b.n	8008b78 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b72:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3718      	adds	r7, #24
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	40020010 	.word	0x40020010
 8008b88:	40020028 	.word	0x40020028
 8008b8c:	40020040 	.word	0x40020040
 8008b90:	40020058 	.word	0x40020058
 8008b94:	40020070 	.word	0x40020070
 8008b98:	40020088 	.word	0x40020088
 8008b9c:	400200a0 	.word	0x400200a0
 8008ba0:	400200b8 	.word	0x400200b8
 8008ba4:	40020410 	.word	0x40020410
 8008ba8:	40020428 	.word	0x40020428
 8008bac:	40020440 	.word	0x40020440
 8008bb0:	40020458 	.word	0x40020458
 8008bb4:	40020470 	.word	0x40020470
 8008bb8:	40020488 	.word	0x40020488
 8008bbc:	400204a0 	.word	0x400204a0
 8008bc0:	400204b8 	.word	0x400204b8
 8008bc4:	58025408 	.word	0x58025408
 8008bc8:	5802541c 	.word	0x5802541c
 8008bcc:	58025430 	.word	0x58025430
 8008bd0:	58025444 	.word	0x58025444
 8008bd4:	58025458 	.word	0x58025458
 8008bd8:	5802546c 	.word	0x5802546c
 8008bdc:	58025480 	.word	0x58025480
 8008be0:	58025494 	.word	0x58025494

08008be4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b08a      	sub	sp, #40	@ 0x28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008bec:	2300      	movs	r3, #0
 8008bee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008bf0:	4b67      	ldr	r3, [pc, #412]	@ (8008d90 <HAL_DMA_IRQHandler+0x1ac>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a67      	ldr	r2, [pc, #412]	@ (8008d94 <HAL_DMA_IRQHandler+0x1b0>)
 8008bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8008bfa:	0a9b      	lsrs	r3, r3, #10
 8008bfc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c02:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c08:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008c0a:	6a3b      	ldr	r3, [r7, #32]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a5f      	ldr	r2, [pc, #380]	@ (8008d98 <HAL_DMA_IRQHandler+0x1b4>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d04a      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xd2>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a5d      	ldr	r2, [pc, #372]	@ (8008d9c <HAL_DMA_IRQHandler+0x1b8>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d045      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xd2>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a5c      	ldr	r2, [pc, #368]	@ (8008da0 <HAL_DMA_IRQHandler+0x1bc>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d040      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xd2>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a5a      	ldr	r2, [pc, #360]	@ (8008da4 <HAL_DMA_IRQHandler+0x1c0>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d03b      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xd2>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a59      	ldr	r2, [pc, #356]	@ (8008da8 <HAL_DMA_IRQHandler+0x1c4>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d036      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xd2>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a57      	ldr	r2, [pc, #348]	@ (8008dac <HAL_DMA_IRQHandler+0x1c8>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d031      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xd2>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a56      	ldr	r2, [pc, #344]	@ (8008db0 <HAL_DMA_IRQHandler+0x1cc>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d02c      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xd2>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a54      	ldr	r2, [pc, #336]	@ (8008db4 <HAL_DMA_IRQHandler+0x1d0>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d027      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xd2>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a53      	ldr	r2, [pc, #332]	@ (8008db8 <HAL_DMA_IRQHandler+0x1d4>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d022      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xd2>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a51      	ldr	r2, [pc, #324]	@ (8008dbc <HAL_DMA_IRQHandler+0x1d8>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d01d      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xd2>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a50      	ldr	r2, [pc, #320]	@ (8008dc0 <HAL_DMA_IRQHandler+0x1dc>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d018      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xd2>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a4e      	ldr	r2, [pc, #312]	@ (8008dc4 <HAL_DMA_IRQHandler+0x1e0>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d013      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xd2>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a4d      	ldr	r2, [pc, #308]	@ (8008dc8 <HAL_DMA_IRQHandler+0x1e4>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d00e      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xd2>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a4b      	ldr	r2, [pc, #300]	@ (8008dcc <HAL_DMA_IRQHandler+0x1e8>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d009      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xd2>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8008dd0 <HAL_DMA_IRQHandler+0x1ec>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d004      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0xd2>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a48      	ldr	r2, [pc, #288]	@ (8008dd4 <HAL_DMA_IRQHandler+0x1f0>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d101      	bne.n	8008cba <HAL_DMA_IRQHandler+0xd6>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e000      	b.n	8008cbc <HAL_DMA_IRQHandler+0xd8>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f000 842b 	beq.w	8009518 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cc6:	f003 031f 	and.w	r3, r3, #31
 8008cca:	2208      	movs	r2, #8
 8008ccc:	409a      	lsls	r2, r3
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 80a2 	beq.w	8008e1c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8008d98 <HAL_DMA_IRQHandler+0x1b4>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d04a      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x194>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8008d9c <HAL_DMA_IRQHandler+0x1b8>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d045      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x194>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a2b      	ldr	r2, [pc, #172]	@ (8008da0 <HAL_DMA_IRQHandler+0x1bc>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d040      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x194>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a2a      	ldr	r2, [pc, #168]	@ (8008da4 <HAL_DMA_IRQHandler+0x1c0>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d03b      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x194>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a28      	ldr	r2, [pc, #160]	@ (8008da8 <HAL_DMA_IRQHandler+0x1c4>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d036      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x194>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a27      	ldr	r2, [pc, #156]	@ (8008dac <HAL_DMA_IRQHandler+0x1c8>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d031      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x194>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a25      	ldr	r2, [pc, #148]	@ (8008db0 <HAL_DMA_IRQHandler+0x1cc>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d02c      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x194>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a24      	ldr	r2, [pc, #144]	@ (8008db4 <HAL_DMA_IRQHandler+0x1d0>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d027      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x194>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a22      	ldr	r2, [pc, #136]	@ (8008db8 <HAL_DMA_IRQHandler+0x1d4>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d022      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x194>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a21      	ldr	r2, [pc, #132]	@ (8008dbc <HAL_DMA_IRQHandler+0x1d8>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d01d      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x194>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a1f      	ldr	r2, [pc, #124]	@ (8008dc0 <HAL_DMA_IRQHandler+0x1dc>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d018      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x194>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8008dc4 <HAL_DMA_IRQHandler+0x1e0>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d013      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x194>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a1c      	ldr	r2, [pc, #112]	@ (8008dc8 <HAL_DMA_IRQHandler+0x1e4>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d00e      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x194>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8008dcc <HAL_DMA_IRQHandler+0x1e8>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d009      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x194>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a19      	ldr	r2, [pc, #100]	@ (8008dd0 <HAL_DMA_IRQHandler+0x1ec>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d004      	beq.n	8008d78 <HAL_DMA_IRQHandler+0x194>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a18      	ldr	r2, [pc, #96]	@ (8008dd4 <HAL_DMA_IRQHandler+0x1f0>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d12f      	bne.n	8008dd8 <HAL_DMA_IRQHandler+0x1f4>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 0304 	and.w	r3, r3, #4
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	bf14      	ite	ne
 8008d86:	2301      	movne	r3, #1
 8008d88:	2300      	moveq	r3, #0
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	e02e      	b.n	8008dec <HAL_DMA_IRQHandler+0x208>
 8008d8e:	bf00      	nop
 8008d90:	24000594 	.word	0x24000594
 8008d94:	1b4e81b5 	.word	0x1b4e81b5
 8008d98:	40020010 	.word	0x40020010
 8008d9c:	40020028 	.word	0x40020028
 8008da0:	40020040 	.word	0x40020040
 8008da4:	40020058 	.word	0x40020058
 8008da8:	40020070 	.word	0x40020070
 8008dac:	40020088 	.word	0x40020088
 8008db0:	400200a0 	.word	0x400200a0
 8008db4:	400200b8 	.word	0x400200b8
 8008db8:	40020410 	.word	0x40020410
 8008dbc:	40020428 	.word	0x40020428
 8008dc0:	40020440 	.word	0x40020440
 8008dc4:	40020458 	.word	0x40020458
 8008dc8:	40020470 	.word	0x40020470
 8008dcc:	40020488 	.word	0x40020488
 8008dd0:	400204a0 	.word	0x400204a0
 8008dd4:	400204b8 	.word	0x400204b8
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0308 	and.w	r3, r3, #8
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	bf14      	ite	ne
 8008de6:	2301      	movne	r3, #1
 8008de8:	2300      	moveq	r3, #0
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d015      	beq.n	8008e1c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f022 0204 	bic.w	r2, r2, #4
 8008dfe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e04:	f003 031f 	and.w	r3, r3, #31
 8008e08:	2208      	movs	r2, #8
 8008e0a:	409a      	lsls	r2, r3
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e14:	f043 0201 	orr.w	r2, r3, #1
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e20:	f003 031f 	and.w	r3, r3, #31
 8008e24:	69ba      	ldr	r2, [r7, #24]
 8008e26:	fa22 f303 	lsr.w	r3, r2, r3
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d06e      	beq.n	8008f10 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a69      	ldr	r2, [pc, #420]	@ (8008fdc <HAL_DMA_IRQHandler+0x3f8>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d04a      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0x2ee>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a67      	ldr	r2, [pc, #412]	@ (8008fe0 <HAL_DMA_IRQHandler+0x3fc>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d045      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0x2ee>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a66      	ldr	r2, [pc, #408]	@ (8008fe4 <HAL_DMA_IRQHandler+0x400>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d040      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0x2ee>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a64      	ldr	r2, [pc, #400]	@ (8008fe8 <HAL_DMA_IRQHandler+0x404>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d03b      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0x2ee>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a63      	ldr	r2, [pc, #396]	@ (8008fec <HAL_DMA_IRQHandler+0x408>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d036      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0x2ee>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a61      	ldr	r2, [pc, #388]	@ (8008ff0 <HAL_DMA_IRQHandler+0x40c>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d031      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0x2ee>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a60      	ldr	r2, [pc, #384]	@ (8008ff4 <HAL_DMA_IRQHandler+0x410>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d02c      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0x2ee>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a5e      	ldr	r2, [pc, #376]	@ (8008ff8 <HAL_DMA_IRQHandler+0x414>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d027      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0x2ee>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a5d      	ldr	r2, [pc, #372]	@ (8008ffc <HAL_DMA_IRQHandler+0x418>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d022      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0x2ee>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a5b      	ldr	r2, [pc, #364]	@ (8009000 <HAL_DMA_IRQHandler+0x41c>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d01d      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0x2ee>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a5a      	ldr	r2, [pc, #360]	@ (8009004 <HAL_DMA_IRQHandler+0x420>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d018      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0x2ee>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a58      	ldr	r2, [pc, #352]	@ (8009008 <HAL_DMA_IRQHandler+0x424>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d013      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0x2ee>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a57      	ldr	r2, [pc, #348]	@ (800900c <HAL_DMA_IRQHandler+0x428>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d00e      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0x2ee>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a55      	ldr	r2, [pc, #340]	@ (8009010 <HAL_DMA_IRQHandler+0x42c>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d009      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0x2ee>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a54      	ldr	r2, [pc, #336]	@ (8009014 <HAL_DMA_IRQHandler+0x430>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d004      	beq.n	8008ed2 <HAL_DMA_IRQHandler+0x2ee>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a52      	ldr	r2, [pc, #328]	@ (8009018 <HAL_DMA_IRQHandler+0x434>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d10a      	bne.n	8008ee8 <HAL_DMA_IRQHandler+0x304>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	695b      	ldr	r3, [r3, #20]
 8008ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	bf14      	ite	ne
 8008ee0:	2301      	movne	r3, #1
 8008ee2:	2300      	moveq	r3, #0
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	e003      	b.n	8008ef0 <HAL_DMA_IRQHandler+0x30c>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00d      	beq.n	8008f10 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ef8:	f003 031f 	and.w	r3, r3, #31
 8008efc:	2201      	movs	r2, #1
 8008efe:	409a      	lsls	r2, r3
 8008f00:	6a3b      	ldr	r3, [r7, #32]
 8008f02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f08:	f043 0202 	orr.w	r2, r3, #2
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f14:	f003 031f 	and.w	r3, r3, #31
 8008f18:	2204      	movs	r2, #4
 8008f1a:	409a      	lsls	r2, r3
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	4013      	ands	r3, r2
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 808f 	beq.w	8009044 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8008fdc <HAL_DMA_IRQHandler+0x3f8>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d04a      	beq.n	8008fc6 <HAL_DMA_IRQHandler+0x3e2>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a2a      	ldr	r2, [pc, #168]	@ (8008fe0 <HAL_DMA_IRQHandler+0x3fc>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d045      	beq.n	8008fc6 <HAL_DMA_IRQHandler+0x3e2>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a29      	ldr	r2, [pc, #164]	@ (8008fe4 <HAL_DMA_IRQHandler+0x400>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d040      	beq.n	8008fc6 <HAL_DMA_IRQHandler+0x3e2>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a27      	ldr	r2, [pc, #156]	@ (8008fe8 <HAL_DMA_IRQHandler+0x404>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d03b      	beq.n	8008fc6 <HAL_DMA_IRQHandler+0x3e2>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a26      	ldr	r2, [pc, #152]	@ (8008fec <HAL_DMA_IRQHandler+0x408>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d036      	beq.n	8008fc6 <HAL_DMA_IRQHandler+0x3e2>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a24      	ldr	r2, [pc, #144]	@ (8008ff0 <HAL_DMA_IRQHandler+0x40c>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d031      	beq.n	8008fc6 <HAL_DMA_IRQHandler+0x3e2>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a23      	ldr	r2, [pc, #140]	@ (8008ff4 <HAL_DMA_IRQHandler+0x410>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d02c      	beq.n	8008fc6 <HAL_DMA_IRQHandler+0x3e2>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a21      	ldr	r2, [pc, #132]	@ (8008ff8 <HAL_DMA_IRQHandler+0x414>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d027      	beq.n	8008fc6 <HAL_DMA_IRQHandler+0x3e2>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a20      	ldr	r2, [pc, #128]	@ (8008ffc <HAL_DMA_IRQHandler+0x418>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d022      	beq.n	8008fc6 <HAL_DMA_IRQHandler+0x3e2>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a1e      	ldr	r2, [pc, #120]	@ (8009000 <HAL_DMA_IRQHandler+0x41c>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d01d      	beq.n	8008fc6 <HAL_DMA_IRQHandler+0x3e2>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8009004 <HAL_DMA_IRQHandler+0x420>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d018      	beq.n	8008fc6 <HAL_DMA_IRQHandler+0x3e2>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a1b      	ldr	r2, [pc, #108]	@ (8009008 <HAL_DMA_IRQHandler+0x424>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d013      	beq.n	8008fc6 <HAL_DMA_IRQHandler+0x3e2>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800900c <HAL_DMA_IRQHandler+0x428>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d00e      	beq.n	8008fc6 <HAL_DMA_IRQHandler+0x3e2>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a18      	ldr	r2, [pc, #96]	@ (8009010 <HAL_DMA_IRQHandler+0x42c>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d009      	beq.n	8008fc6 <HAL_DMA_IRQHandler+0x3e2>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a17      	ldr	r2, [pc, #92]	@ (8009014 <HAL_DMA_IRQHandler+0x430>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d004      	beq.n	8008fc6 <HAL_DMA_IRQHandler+0x3e2>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a15      	ldr	r2, [pc, #84]	@ (8009018 <HAL_DMA_IRQHandler+0x434>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d12a      	bne.n	800901c <HAL_DMA_IRQHandler+0x438>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 0302 	and.w	r3, r3, #2
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	bf14      	ite	ne
 8008fd4:	2301      	movne	r3, #1
 8008fd6:	2300      	moveq	r3, #0
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	e023      	b.n	8009024 <HAL_DMA_IRQHandler+0x440>
 8008fdc:	40020010 	.word	0x40020010
 8008fe0:	40020028 	.word	0x40020028
 8008fe4:	40020040 	.word	0x40020040
 8008fe8:	40020058 	.word	0x40020058
 8008fec:	40020070 	.word	0x40020070
 8008ff0:	40020088 	.word	0x40020088
 8008ff4:	400200a0 	.word	0x400200a0
 8008ff8:	400200b8 	.word	0x400200b8
 8008ffc:	40020410 	.word	0x40020410
 8009000:	40020428 	.word	0x40020428
 8009004:	40020440 	.word	0x40020440
 8009008:	40020458 	.word	0x40020458
 800900c:	40020470 	.word	0x40020470
 8009010:	40020488 	.word	0x40020488
 8009014:	400204a0 	.word	0x400204a0
 8009018:	400204b8 	.word	0x400204b8
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2300      	movs	r3, #0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00d      	beq.n	8009044 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800902c:	f003 031f 	and.w	r3, r3, #31
 8009030:	2204      	movs	r2, #4
 8009032:	409a      	lsls	r2, r3
 8009034:	6a3b      	ldr	r3, [r7, #32]
 8009036:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800903c:	f043 0204 	orr.w	r2, r3, #4
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009048:	f003 031f 	and.w	r3, r3, #31
 800904c:	2210      	movs	r2, #16
 800904e:	409a      	lsls	r2, r3
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	4013      	ands	r3, r2
 8009054:	2b00      	cmp	r3, #0
 8009056:	f000 80a6 	beq.w	80091a6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a85      	ldr	r2, [pc, #532]	@ (8009274 <HAL_DMA_IRQHandler+0x690>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d04a      	beq.n	80090fa <HAL_DMA_IRQHandler+0x516>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a83      	ldr	r2, [pc, #524]	@ (8009278 <HAL_DMA_IRQHandler+0x694>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d045      	beq.n	80090fa <HAL_DMA_IRQHandler+0x516>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a82      	ldr	r2, [pc, #520]	@ (800927c <HAL_DMA_IRQHandler+0x698>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d040      	beq.n	80090fa <HAL_DMA_IRQHandler+0x516>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a80      	ldr	r2, [pc, #512]	@ (8009280 <HAL_DMA_IRQHandler+0x69c>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d03b      	beq.n	80090fa <HAL_DMA_IRQHandler+0x516>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a7f      	ldr	r2, [pc, #508]	@ (8009284 <HAL_DMA_IRQHandler+0x6a0>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d036      	beq.n	80090fa <HAL_DMA_IRQHandler+0x516>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a7d      	ldr	r2, [pc, #500]	@ (8009288 <HAL_DMA_IRQHandler+0x6a4>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d031      	beq.n	80090fa <HAL_DMA_IRQHandler+0x516>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a7c      	ldr	r2, [pc, #496]	@ (800928c <HAL_DMA_IRQHandler+0x6a8>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d02c      	beq.n	80090fa <HAL_DMA_IRQHandler+0x516>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a7a      	ldr	r2, [pc, #488]	@ (8009290 <HAL_DMA_IRQHandler+0x6ac>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d027      	beq.n	80090fa <HAL_DMA_IRQHandler+0x516>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a79      	ldr	r2, [pc, #484]	@ (8009294 <HAL_DMA_IRQHandler+0x6b0>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d022      	beq.n	80090fa <HAL_DMA_IRQHandler+0x516>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a77      	ldr	r2, [pc, #476]	@ (8009298 <HAL_DMA_IRQHandler+0x6b4>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d01d      	beq.n	80090fa <HAL_DMA_IRQHandler+0x516>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a76      	ldr	r2, [pc, #472]	@ (800929c <HAL_DMA_IRQHandler+0x6b8>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d018      	beq.n	80090fa <HAL_DMA_IRQHandler+0x516>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a74      	ldr	r2, [pc, #464]	@ (80092a0 <HAL_DMA_IRQHandler+0x6bc>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d013      	beq.n	80090fa <HAL_DMA_IRQHandler+0x516>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a73      	ldr	r2, [pc, #460]	@ (80092a4 <HAL_DMA_IRQHandler+0x6c0>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d00e      	beq.n	80090fa <HAL_DMA_IRQHandler+0x516>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a71      	ldr	r2, [pc, #452]	@ (80092a8 <HAL_DMA_IRQHandler+0x6c4>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d009      	beq.n	80090fa <HAL_DMA_IRQHandler+0x516>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a70      	ldr	r2, [pc, #448]	@ (80092ac <HAL_DMA_IRQHandler+0x6c8>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d004      	beq.n	80090fa <HAL_DMA_IRQHandler+0x516>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a6e      	ldr	r2, [pc, #440]	@ (80092b0 <HAL_DMA_IRQHandler+0x6cc>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d10a      	bne.n	8009110 <HAL_DMA_IRQHandler+0x52c>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0308 	and.w	r3, r3, #8
 8009104:	2b00      	cmp	r3, #0
 8009106:	bf14      	ite	ne
 8009108:	2301      	movne	r3, #1
 800910a:	2300      	moveq	r3, #0
 800910c:	b2db      	uxtb	r3, r3
 800910e:	e009      	b.n	8009124 <HAL_DMA_IRQHandler+0x540>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 0304 	and.w	r3, r3, #4
 800911a:	2b00      	cmp	r3, #0
 800911c:	bf14      	ite	ne
 800911e:	2301      	movne	r3, #1
 8009120:	2300      	moveq	r3, #0
 8009122:	b2db      	uxtb	r3, r3
 8009124:	2b00      	cmp	r3, #0
 8009126:	d03e      	beq.n	80091a6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800912c:	f003 031f 	and.w	r3, r3, #31
 8009130:	2210      	movs	r2, #16
 8009132:	409a      	lsls	r2, r3
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d018      	beq.n	8009178 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d108      	bne.n	8009166 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009158:	2b00      	cmp	r3, #0
 800915a:	d024      	beq.n	80091a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	4798      	blx	r3
 8009164:	e01f      	b.n	80091a6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800916a:	2b00      	cmp	r3, #0
 800916c:	d01b      	beq.n	80091a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	4798      	blx	r3
 8009176:	e016      	b.n	80091a6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009182:	2b00      	cmp	r3, #0
 8009184:	d107      	bne.n	8009196 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f022 0208 	bic.w	r2, r2, #8
 8009194:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800919a:	2b00      	cmp	r3, #0
 800919c:	d003      	beq.n	80091a6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091aa:	f003 031f 	and.w	r3, r3, #31
 80091ae:	2220      	movs	r2, #32
 80091b0:	409a      	lsls	r2, r3
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	4013      	ands	r3, r2
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f000 8110 	beq.w	80093dc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a2c      	ldr	r2, [pc, #176]	@ (8009274 <HAL_DMA_IRQHandler+0x690>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d04a      	beq.n	800925c <HAL_DMA_IRQHandler+0x678>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a2b      	ldr	r2, [pc, #172]	@ (8009278 <HAL_DMA_IRQHandler+0x694>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d045      	beq.n	800925c <HAL_DMA_IRQHandler+0x678>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a29      	ldr	r2, [pc, #164]	@ (800927c <HAL_DMA_IRQHandler+0x698>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d040      	beq.n	800925c <HAL_DMA_IRQHandler+0x678>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a28      	ldr	r2, [pc, #160]	@ (8009280 <HAL_DMA_IRQHandler+0x69c>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d03b      	beq.n	800925c <HAL_DMA_IRQHandler+0x678>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a26      	ldr	r2, [pc, #152]	@ (8009284 <HAL_DMA_IRQHandler+0x6a0>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d036      	beq.n	800925c <HAL_DMA_IRQHandler+0x678>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a25      	ldr	r2, [pc, #148]	@ (8009288 <HAL_DMA_IRQHandler+0x6a4>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d031      	beq.n	800925c <HAL_DMA_IRQHandler+0x678>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a23      	ldr	r2, [pc, #140]	@ (800928c <HAL_DMA_IRQHandler+0x6a8>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d02c      	beq.n	800925c <HAL_DMA_IRQHandler+0x678>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a22      	ldr	r2, [pc, #136]	@ (8009290 <HAL_DMA_IRQHandler+0x6ac>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d027      	beq.n	800925c <HAL_DMA_IRQHandler+0x678>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a20      	ldr	r2, [pc, #128]	@ (8009294 <HAL_DMA_IRQHandler+0x6b0>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d022      	beq.n	800925c <HAL_DMA_IRQHandler+0x678>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a1f      	ldr	r2, [pc, #124]	@ (8009298 <HAL_DMA_IRQHandler+0x6b4>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d01d      	beq.n	800925c <HAL_DMA_IRQHandler+0x678>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a1d      	ldr	r2, [pc, #116]	@ (800929c <HAL_DMA_IRQHandler+0x6b8>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d018      	beq.n	800925c <HAL_DMA_IRQHandler+0x678>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a1c      	ldr	r2, [pc, #112]	@ (80092a0 <HAL_DMA_IRQHandler+0x6bc>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d013      	beq.n	800925c <HAL_DMA_IRQHandler+0x678>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a1a      	ldr	r2, [pc, #104]	@ (80092a4 <HAL_DMA_IRQHandler+0x6c0>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d00e      	beq.n	800925c <HAL_DMA_IRQHandler+0x678>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a19      	ldr	r2, [pc, #100]	@ (80092a8 <HAL_DMA_IRQHandler+0x6c4>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d009      	beq.n	800925c <HAL_DMA_IRQHandler+0x678>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a17      	ldr	r2, [pc, #92]	@ (80092ac <HAL_DMA_IRQHandler+0x6c8>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d004      	beq.n	800925c <HAL_DMA_IRQHandler+0x678>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a16      	ldr	r2, [pc, #88]	@ (80092b0 <HAL_DMA_IRQHandler+0x6cc>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d12b      	bne.n	80092b4 <HAL_DMA_IRQHandler+0x6d0>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f003 0310 	and.w	r3, r3, #16
 8009266:	2b00      	cmp	r3, #0
 8009268:	bf14      	ite	ne
 800926a:	2301      	movne	r3, #1
 800926c:	2300      	moveq	r3, #0
 800926e:	b2db      	uxtb	r3, r3
 8009270:	e02a      	b.n	80092c8 <HAL_DMA_IRQHandler+0x6e4>
 8009272:	bf00      	nop
 8009274:	40020010 	.word	0x40020010
 8009278:	40020028 	.word	0x40020028
 800927c:	40020040 	.word	0x40020040
 8009280:	40020058 	.word	0x40020058
 8009284:	40020070 	.word	0x40020070
 8009288:	40020088 	.word	0x40020088
 800928c:	400200a0 	.word	0x400200a0
 8009290:	400200b8 	.word	0x400200b8
 8009294:	40020410 	.word	0x40020410
 8009298:	40020428 	.word	0x40020428
 800929c:	40020440 	.word	0x40020440
 80092a0:	40020458 	.word	0x40020458
 80092a4:	40020470 	.word	0x40020470
 80092a8:	40020488 	.word	0x40020488
 80092ac:	400204a0 	.word	0x400204a0
 80092b0:	400204b8 	.word	0x400204b8
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 0302 	and.w	r3, r3, #2
 80092be:	2b00      	cmp	r3, #0
 80092c0:	bf14      	ite	ne
 80092c2:	2301      	movne	r3, #1
 80092c4:	2300      	moveq	r3, #0
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 8087 	beq.w	80093dc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092d2:	f003 031f 	and.w	r3, r3, #31
 80092d6:	2220      	movs	r2, #32
 80092d8:	409a      	lsls	r2, r3
 80092da:	6a3b      	ldr	r3, [r7, #32]
 80092dc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	2b04      	cmp	r3, #4
 80092e8:	d139      	bne.n	800935e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f022 0216 	bic.w	r2, r2, #22
 80092f8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	695a      	ldr	r2, [r3, #20]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009308:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800930e:	2b00      	cmp	r3, #0
 8009310:	d103      	bne.n	800931a <HAL_DMA_IRQHandler+0x736>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009316:	2b00      	cmp	r3, #0
 8009318:	d007      	beq.n	800932a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f022 0208 	bic.w	r2, r2, #8
 8009328:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800932e:	f003 031f 	and.w	r3, r3, #31
 8009332:	223f      	movs	r2, #63	@ 0x3f
 8009334:	409a      	lsls	r2, r3
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          if(hdma->XferAbortCallback != NULL)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800934e:	2b00      	cmp	r3, #0
 8009350:	f000 834a 	beq.w	80099e8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	4798      	blx	r3
          }
          return;
 800935c:	e344      	b.n	80099e8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d018      	beq.n	800939e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d108      	bne.n	800938c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800937e:	2b00      	cmp	r3, #0
 8009380:	d02c      	beq.n	80093dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	4798      	blx	r3
 800938a:	e027      	b.n	80093dc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009390:	2b00      	cmp	r3, #0
 8009392:	d023      	beq.n	80093dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	4798      	blx	r3
 800939c:	e01e      	b.n	80093dc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10f      	bne.n	80093cc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f022 0210 	bic.w	r2, r2, #16
 80093ba:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d003      	beq.n	80093dc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f000 8306 	beq.w	80099f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f000 8088 	beq.w	8009504 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2204      	movs	r2, #4
 80093f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a7a      	ldr	r2, [pc, #488]	@ (80095ec <HAL_DMA_IRQHandler+0xa08>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d04a      	beq.n	800949c <HAL_DMA_IRQHandler+0x8b8>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a79      	ldr	r2, [pc, #484]	@ (80095f0 <HAL_DMA_IRQHandler+0xa0c>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d045      	beq.n	800949c <HAL_DMA_IRQHandler+0x8b8>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a77      	ldr	r2, [pc, #476]	@ (80095f4 <HAL_DMA_IRQHandler+0xa10>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d040      	beq.n	800949c <HAL_DMA_IRQHandler+0x8b8>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a76      	ldr	r2, [pc, #472]	@ (80095f8 <HAL_DMA_IRQHandler+0xa14>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d03b      	beq.n	800949c <HAL_DMA_IRQHandler+0x8b8>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a74      	ldr	r2, [pc, #464]	@ (80095fc <HAL_DMA_IRQHandler+0xa18>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d036      	beq.n	800949c <HAL_DMA_IRQHandler+0x8b8>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a73      	ldr	r2, [pc, #460]	@ (8009600 <HAL_DMA_IRQHandler+0xa1c>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d031      	beq.n	800949c <HAL_DMA_IRQHandler+0x8b8>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a71      	ldr	r2, [pc, #452]	@ (8009604 <HAL_DMA_IRQHandler+0xa20>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d02c      	beq.n	800949c <HAL_DMA_IRQHandler+0x8b8>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a70      	ldr	r2, [pc, #448]	@ (8009608 <HAL_DMA_IRQHandler+0xa24>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d027      	beq.n	800949c <HAL_DMA_IRQHandler+0x8b8>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a6e      	ldr	r2, [pc, #440]	@ (800960c <HAL_DMA_IRQHandler+0xa28>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d022      	beq.n	800949c <HAL_DMA_IRQHandler+0x8b8>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a6d      	ldr	r2, [pc, #436]	@ (8009610 <HAL_DMA_IRQHandler+0xa2c>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d01d      	beq.n	800949c <HAL_DMA_IRQHandler+0x8b8>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a6b      	ldr	r2, [pc, #428]	@ (8009614 <HAL_DMA_IRQHandler+0xa30>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d018      	beq.n	800949c <HAL_DMA_IRQHandler+0x8b8>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a6a      	ldr	r2, [pc, #424]	@ (8009618 <HAL_DMA_IRQHandler+0xa34>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d013      	beq.n	800949c <HAL_DMA_IRQHandler+0x8b8>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a68      	ldr	r2, [pc, #416]	@ (800961c <HAL_DMA_IRQHandler+0xa38>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d00e      	beq.n	800949c <HAL_DMA_IRQHandler+0x8b8>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a67      	ldr	r2, [pc, #412]	@ (8009620 <HAL_DMA_IRQHandler+0xa3c>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d009      	beq.n	800949c <HAL_DMA_IRQHandler+0x8b8>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a65      	ldr	r2, [pc, #404]	@ (8009624 <HAL_DMA_IRQHandler+0xa40>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d004      	beq.n	800949c <HAL_DMA_IRQHandler+0x8b8>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a64      	ldr	r2, [pc, #400]	@ (8009628 <HAL_DMA_IRQHandler+0xa44>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d108      	bne.n	80094ae <HAL_DMA_IRQHandler+0x8ca>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 0201 	bic.w	r2, r2, #1
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	e007      	b.n	80094be <HAL_DMA_IRQHandler+0x8da>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f022 0201 	bic.w	r2, r2, #1
 80094bc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	3301      	adds	r3, #1
 80094c2:	60fb      	str	r3, [r7, #12]
 80094c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d307      	bcc.n	80094da <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0301 	and.w	r3, r3, #1
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1f2      	bne.n	80094be <HAL_DMA_IRQHandler+0x8da>
 80094d8:	e000      	b.n	80094dc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80094da:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d004      	beq.n	80094fc <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2203      	movs	r2, #3
 80094f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80094fa:	e003      	b.n	8009504 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 8272 	beq.w	80099f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	4798      	blx	r3
 8009516:	e26c      	b.n	80099f2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a43      	ldr	r2, [pc, #268]	@ (800962c <HAL_DMA_IRQHandler+0xa48>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d022      	beq.n	8009568 <HAL_DMA_IRQHandler+0x984>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a42      	ldr	r2, [pc, #264]	@ (8009630 <HAL_DMA_IRQHandler+0xa4c>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d01d      	beq.n	8009568 <HAL_DMA_IRQHandler+0x984>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a40      	ldr	r2, [pc, #256]	@ (8009634 <HAL_DMA_IRQHandler+0xa50>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d018      	beq.n	8009568 <HAL_DMA_IRQHandler+0x984>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a3f      	ldr	r2, [pc, #252]	@ (8009638 <HAL_DMA_IRQHandler+0xa54>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d013      	beq.n	8009568 <HAL_DMA_IRQHandler+0x984>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a3d      	ldr	r2, [pc, #244]	@ (800963c <HAL_DMA_IRQHandler+0xa58>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d00e      	beq.n	8009568 <HAL_DMA_IRQHandler+0x984>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a3c      	ldr	r2, [pc, #240]	@ (8009640 <HAL_DMA_IRQHandler+0xa5c>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d009      	beq.n	8009568 <HAL_DMA_IRQHandler+0x984>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a3a      	ldr	r2, [pc, #232]	@ (8009644 <HAL_DMA_IRQHandler+0xa60>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d004      	beq.n	8009568 <HAL_DMA_IRQHandler+0x984>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a39      	ldr	r2, [pc, #228]	@ (8009648 <HAL_DMA_IRQHandler+0xa64>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d101      	bne.n	800956c <HAL_DMA_IRQHandler+0x988>
 8009568:	2301      	movs	r3, #1
 800956a:	e000      	b.n	800956e <HAL_DMA_IRQHandler+0x98a>
 800956c:	2300      	movs	r3, #0
 800956e:	2b00      	cmp	r3, #0
 8009570:	f000 823f 	beq.w	80099f2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009580:	f003 031f 	and.w	r3, r3, #31
 8009584:	2204      	movs	r2, #4
 8009586:	409a      	lsls	r2, r3
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	4013      	ands	r3, r2
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 80cd 	beq.w	800972c <HAL_DMA_IRQHandler+0xb48>
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	f003 0304 	and.w	r3, r3, #4
 8009598:	2b00      	cmp	r3, #0
 800959a:	f000 80c7 	beq.w	800972c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095a2:	f003 031f 	and.w	r3, r3, #31
 80095a6:	2204      	movs	r2, #4
 80095a8:	409a      	lsls	r2, r3
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d049      	beq.n	800964c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d109      	bne.n	80095d6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f000 8210 	beq.w	80099ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80095d4:	e20a      	b.n	80099ec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f000 8206 	beq.w	80099ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80095e8:	e200      	b.n	80099ec <HAL_DMA_IRQHandler+0xe08>
 80095ea:	bf00      	nop
 80095ec:	40020010 	.word	0x40020010
 80095f0:	40020028 	.word	0x40020028
 80095f4:	40020040 	.word	0x40020040
 80095f8:	40020058 	.word	0x40020058
 80095fc:	40020070 	.word	0x40020070
 8009600:	40020088 	.word	0x40020088
 8009604:	400200a0 	.word	0x400200a0
 8009608:	400200b8 	.word	0x400200b8
 800960c:	40020410 	.word	0x40020410
 8009610:	40020428 	.word	0x40020428
 8009614:	40020440 	.word	0x40020440
 8009618:	40020458 	.word	0x40020458
 800961c:	40020470 	.word	0x40020470
 8009620:	40020488 	.word	0x40020488
 8009624:	400204a0 	.word	0x400204a0
 8009628:	400204b8 	.word	0x400204b8
 800962c:	58025408 	.word	0x58025408
 8009630:	5802541c 	.word	0x5802541c
 8009634:	58025430 	.word	0x58025430
 8009638:	58025444 	.word	0x58025444
 800963c:	58025458 	.word	0x58025458
 8009640:	5802546c 	.word	0x5802546c
 8009644:	58025480 	.word	0x58025480
 8009648:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	f003 0320 	and.w	r3, r3, #32
 8009652:	2b00      	cmp	r3, #0
 8009654:	d160      	bne.n	8009718 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a7f      	ldr	r2, [pc, #508]	@ (8009858 <HAL_DMA_IRQHandler+0xc74>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d04a      	beq.n	80096f6 <HAL_DMA_IRQHandler+0xb12>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a7d      	ldr	r2, [pc, #500]	@ (800985c <HAL_DMA_IRQHandler+0xc78>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d045      	beq.n	80096f6 <HAL_DMA_IRQHandler+0xb12>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a7c      	ldr	r2, [pc, #496]	@ (8009860 <HAL_DMA_IRQHandler+0xc7c>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d040      	beq.n	80096f6 <HAL_DMA_IRQHandler+0xb12>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a7a      	ldr	r2, [pc, #488]	@ (8009864 <HAL_DMA_IRQHandler+0xc80>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d03b      	beq.n	80096f6 <HAL_DMA_IRQHandler+0xb12>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a79      	ldr	r2, [pc, #484]	@ (8009868 <HAL_DMA_IRQHandler+0xc84>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d036      	beq.n	80096f6 <HAL_DMA_IRQHandler+0xb12>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a77      	ldr	r2, [pc, #476]	@ (800986c <HAL_DMA_IRQHandler+0xc88>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d031      	beq.n	80096f6 <HAL_DMA_IRQHandler+0xb12>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a76      	ldr	r2, [pc, #472]	@ (8009870 <HAL_DMA_IRQHandler+0xc8c>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d02c      	beq.n	80096f6 <HAL_DMA_IRQHandler+0xb12>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a74      	ldr	r2, [pc, #464]	@ (8009874 <HAL_DMA_IRQHandler+0xc90>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d027      	beq.n	80096f6 <HAL_DMA_IRQHandler+0xb12>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a73      	ldr	r2, [pc, #460]	@ (8009878 <HAL_DMA_IRQHandler+0xc94>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d022      	beq.n	80096f6 <HAL_DMA_IRQHandler+0xb12>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a71      	ldr	r2, [pc, #452]	@ (800987c <HAL_DMA_IRQHandler+0xc98>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d01d      	beq.n	80096f6 <HAL_DMA_IRQHandler+0xb12>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a70      	ldr	r2, [pc, #448]	@ (8009880 <HAL_DMA_IRQHandler+0xc9c>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d018      	beq.n	80096f6 <HAL_DMA_IRQHandler+0xb12>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a6e      	ldr	r2, [pc, #440]	@ (8009884 <HAL_DMA_IRQHandler+0xca0>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d013      	beq.n	80096f6 <HAL_DMA_IRQHandler+0xb12>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a6d      	ldr	r2, [pc, #436]	@ (8009888 <HAL_DMA_IRQHandler+0xca4>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d00e      	beq.n	80096f6 <HAL_DMA_IRQHandler+0xb12>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a6b      	ldr	r2, [pc, #428]	@ (800988c <HAL_DMA_IRQHandler+0xca8>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d009      	beq.n	80096f6 <HAL_DMA_IRQHandler+0xb12>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a6a      	ldr	r2, [pc, #424]	@ (8009890 <HAL_DMA_IRQHandler+0xcac>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d004      	beq.n	80096f6 <HAL_DMA_IRQHandler+0xb12>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a68      	ldr	r2, [pc, #416]	@ (8009894 <HAL_DMA_IRQHandler+0xcb0>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d108      	bne.n	8009708 <HAL_DMA_IRQHandler+0xb24>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f022 0208 	bic.w	r2, r2, #8
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	e007      	b.n	8009718 <HAL_DMA_IRQHandler+0xb34>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f022 0204 	bic.w	r2, r2, #4
 8009716:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800971c:	2b00      	cmp	r3, #0
 800971e:	f000 8165 	beq.w	80099ec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800972a:	e15f      	b.n	80099ec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009730:	f003 031f 	and.w	r3, r3, #31
 8009734:	2202      	movs	r2, #2
 8009736:	409a      	lsls	r2, r3
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	4013      	ands	r3, r2
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 80c5 	beq.w	80098cc <HAL_DMA_IRQHandler+0xce8>
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	f003 0302 	and.w	r3, r3, #2
 8009748:	2b00      	cmp	r3, #0
 800974a:	f000 80bf 	beq.w	80098cc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009752:	f003 031f 	and.w	r3, r3, #31
 8009756:	2202      	movs	r2, #2
 8009758:	409a      	lsls	r2, r3
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d018      	beq.n	800979a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800976e:	2b00      	cmp	r3, #0
 8009770:	d109      	bne.n	8009786 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009776:	2b00      	cmp	r3, #0
 8009778:	f000 813a 	beq.w	80099f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009784:	e134      	b.n	80099f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800978a:	2b00      	cmp	r3, #0
 800978c:	f000 8130 	beq.w	80099f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009798:	e12a      	b.n	80099f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	f003 0320 	and.w	r3, r3, #32
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f040 8089 	bne.w	80098b8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a2b      	ldr	r2, [pc, #172]	@ (8009858 <HAL_DMA_IRQHandler+0xc74>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d04a      	beq.n	8009846 <HAL_DMA_IRQHandler+0xc62>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a29      	ldr	r2, [pc, #164]	@ (800985c <HAL_DMA_IRQHandler+0xc78>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d045      	beq.n	8009846 <HAL_DMA_IRQHandler+0xc62>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a28      	ldr	r2, [pc, #160]	@ (8009860 <HAL_DMA_IRQHandler+0xc7c>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d040      	beq.n	8009846 <HAL_DMA_IRQHandler+0xc62>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a26      	ldr	r2, [pc, #152]	@ (8009864 <HAL_DMA_IRQHandler+0xc80>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d03b      	beq.n	8009846 <HAL_DMA_IRQHandler+0xc62>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a25      	ldr	r2, [pc, #148]	@ (8009868 <HAL_DMA_IRQHandler+0xc84>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d036      	beq.n	8009846 <HAL_DMA_IRQHandler+0xc62>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a23      	ldr	r2, [pc, #140]	@ (800986c <HAL_DMA_IRQHandler+0xc88>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d031      	beq.n	8009846 <HAL_DMA_IRQHandler+0xc62>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a22      	ldr	r2, [pc, #136]	@ (8009870 <HAL_DMA_IRQHandler+0xc8c>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d02c      	beq.n	8009846 <HAL_DMA_IRQHandler+0xc62>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a20      	ldr	r2, [pc, #128]	@ (8009874 <HAL_DMA_IRQHandler+0xc90>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d027      	beq.n	8009846 <HAL_DMA_IRQHandler+0xc62>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a1f      	ldr	r2, [pc, #124]	@ (8009878 <HAL_DMA_IRQHandler+0xc94>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d022      	beq.n	8009846 <HAL_DMA_IRQHandler+0xc62>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a1d      	ldr	r2, [pc, #116]	@ (800987c <HAL_DMA_IRQHandler+0xc98>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d01d      	beq.n	8009846 <HAL_DMA_IRQHandler+0xc62>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a1c      	ldr	r2, [pc, #112]	@ (8009880 <HAL_DMA_IRQHandler+0xc9c>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d018      	beq.n	8009846 <HAL_DMA_IRQHandler+0xc62>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a1a      	ldr	r2, [pc, #104]	@ (8009884 <HAL_DMA_IRQHandler+0xca0>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d013      	beq.n	8009846 <HAL_DMA_IRQHandler+0xc62>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a19      	ldr	r2, [pc, #100]	@ (8009888 <HAL_DMA_IRQHandler+0xca4>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d00e      	beq.n	8009846 <HAL_DMA_IRQHandler+0xc62>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a17      	ldr	r2, [pc, #92]	@ (800988c <HAL_DMA_IRQHandler+0xca8>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d009      	beq.n	8009846 <HAL_DMA_IRQHandler+0xc62>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a16      	ldr	r2, [pc, #88]	@ (8009890 <HAL_DMA_IRQHandler+0xcac>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d004      	beq.n	8009846 <HAL_DMA_IRQHandler+0xc62>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a14      	ldr	r2, [pc, #80]	@ (8009894 <HAL_DMA_IRQHandler+0xcb0>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d128      	bne.n	8009898 <HAL_DMA_IRQHandler+0xcb4>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 0214 	bic.w	r2, r2, #20
 8009854:	601a      	str	r2, [r3, #0]
 8009856:	e027      	b.n	80098a8 <HAL_DMA_IRQHandler+0xcc4>
 8009858:	40020010 	.word	0x40020010
 800985c:	40020028 	.word	0x40020028
 8009860:	40020040 	.word	0x40020040
 8009864:	40020058 	.word	0x40020058
 8009868:	40020070 	.word	0x40020070
 800986c:	40020088 	.word	0x40020088
 8009870:	400200a0 	.word	0x400200a0
 8009874:	400200b8 	.word	0x400200b8
 8009878:	40020410 	.word	0x40020410
 800987c:	40020428 	.word	0x40020428
 8009880:	40020440 	.word	0x40020440
 8009884:	40020458 	.word	0x40020458
 8009888:	40020470 	.word	0x40020470
 800988c:	40020488 	.word	0x40020488
 8009890:	400204a0 	.word	0x400204a0
 8009894:	400204b8 	.word	0x400204b8
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f022 020a 	bic.w	r2, r2, #10
 80098a6:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f000 8097 	beq.w	80099f0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80098ca:	e091      	b.n	80099f0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098d0:	f003 031f 	and.w	r3, r3, #31
 80098d4:	2208      	movs	r2, #8
 80098d6:	409a      	lsls	r2, r3
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	4013      	ands	r3, r2
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f000 8088 	beq.w	80099f2 <HAL_DMA_IRQHandler+0xe0e>
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	f003 0308 	and.w	r3, r3, #8
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 8082 	beq.w	80099f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a41      	ldr	r2, [pc, #260]	@ (80099f8 <HAL_DMA_IRQHandler+0xe14>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d04a      	beq.n	800998e <HAL_DMA_IRQHandler+0xdaa>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a3f      	ldr	r2, [pc, #252]	@ (80099fc <HAL_DMA_IRQHandler+0xe18>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d045      	beq.n	800998e <HAL_DMA_IRQHandler+0xdaa>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a3e      	ldr	r2, [pc, #248]	@ (8009a00 <HAL_DMA_IRQHandler+0xe1c>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d040      	beq.n	800998e <HAL_DMA_IRQHandler+0xdaa>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a3c      	ldr	r2, [pc, #240]	@ (8009a04 <HAL_DMA_IRQHandler+0xe20>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d03b      	beq.n	800998e <HAL_DMA_IRQHandler+0xdaa>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a3b      	ldr	r2, [pc, #236]	@ (8009a08 <HAL_DMA_IRQHandler+0xe24>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d036      	beq.n	800998e <HAL_DMA_IRQHandler+0xdaa>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a39      	ldr	r2, [pc, #228]	@ (8009a0c <HAL_DMA_IRQHandler+0xe28>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d031      	beq.n	800998e <HAL_DMA_IRQHandler+0xdaa>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a38      	ldr	r2, [pc, #224]	@ (8009a10 <HAL_DMA_IRQHandler+0xe2c>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d02c      	beq.n	800998e <HAL_DMA_IRQHandler+0xdaa>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a36      	ldr	r2, [pc, #216]	@ (8009a14 <HAL_DMA_IRQHandler+0xe30>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d027      	beq.n	800998e <HAL_DMA_IRQHandler+0xdaa>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a35      	ldr	r2, [pc, #212]	@ (8009a18 <HAL_DMA_IRQHandler+0xe34>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d022      	beq.n	800998e <HAL_DMA_IRQHandler+0xdaa>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a33      	ldr	r2, [pc, #204]	@ (8009a1c <HAL_DMA_IRQHandler+0xe38>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d01d      	beq.n	800998e <HAL_DMA_IRQHandler+0xdaa>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a32      	ldr	r2, [pc, #200]	@ (8009a20 <HAL_DMA_IRQHandler+0xe3c>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d018      	beq.n	800998e <HAL_DMA_IRQHandler+0xdaa>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a30      	ldr	r2, [pc, #192]	@ (8009a24 <HAL_DMA_IRQHandler+0xe40>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d013      	beq.n	800998e <HAL_DMA_IRQHandler+0xdaa>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a2f      	ldr	r2, [pc, #188]	@ (8009a28 <HAL_DMA_IRQHandler+0xe44>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d00e      	beq.n	800998e <HAL_DMA_IRQHandler+0xdaa>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a2d      	ldr	r2, [pc, #180]	@ (8009a2c <HAL_DMA_IRQHandler+0xe48>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d009      	beq.n	800998e <HAL_DMA_IRQHandler+0xdaa>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a2c      	ldr	r2, [pc, #176]	@ (8009a30 <HAL_DMA_IRQHandler+0xe4c>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d004      	beq.n	800998e <HAL_DMA_IRQHandler+0xdaa>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a2a      	ldr	r2, [pc, #168]	@ (8009a34 <HAL_DMA_IRQHandler+0xe50>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d108      	bne.n	80099a0 <HAL_DMA_IRQHandler+0xdbc>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f022 021c 	bic.w	r2, r2, #28
 800999c:	601a      	str	r2, [r3, #0]
 800999e:	e007      	b.n	80099b0 <HAL_DMA_IRQHandler+0xdcc>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f022 020e 	bic.w	r2, r2, #14
 80099ae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099b4:	f003 031f 	and.w	r3, r3, #31
 80099b8:	2201      	movs	r2, #1
 80099ba:	409a      	lsls	r2, r3
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      if (hdma->XferErrorCallback != NULL)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d009      	beq.n	80099f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	4798      	blx	r3
 80099e6:	e004      	b.n	80099f2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80099e8:	bf00      	nop
 80099ea:	e002      	b.n	80099f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80099ec:	bf00      	nop
 80099ee:	e000      	b.n	80099f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80099f0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80099f2:	3728      	adds	r7, #40	@ 0x28
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	40020010 	.word	0x40020010
 80099fc:	40020028 	.word	0x40020028
 8009a00:	40020040 	.word	0x40020040
 8009a04:	40020058 	.word	0x40020058
 8009a08:	40020070 	.word	0x40020070
 8009a0c:	40020088 	.word	0x40020088
 8009a10:	400200a0 	.word	0x400200a0
 8009a14:	400200b8 	.word	0x400200b8
 8009a18:	40020410 	.word	0x40020410
 8009a1c:	40020428 	.word	0x40020428
 8009a20:	40020440 	.word	0x40020440
 8009a24:	40020458 	.word	0x40020458
 8009a28:	40020470 	.word	0x40020470
 8009a2c:	40020488 	.word	0x40020488
 8009a30:	400204a0 	.word	0x400204a0
 8009a34:	400204b8 	.word	0x400204b8

08009a38 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
 8009a5c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a62:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a68:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a7f      	ldr	r2, [pc, #508]	@ (8009c6c <DMA_SetConfig+0x21c>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d072      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a7d      	ldr	r2, [pc, #500]	@ (8009c70 <DMA_SetConfig+0x220>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d06d      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a7c      	ldr	r2, [pc, #496]	@ (8009c74 <DMA_SetConfig+0x224>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d068      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a7a      	ldr	r2, [pc, #488]	@ (8009c78 <DMA_SetConfig+0x228>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d063      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a79      	ldr	r2, [pc, #484]	@ (8009c7c <DMA_SetConfig+0x22c>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d05e      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a77      	ldr	r2, [pc, #476]	@ (8009c80 <DMA_SetConfig+0x230>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d059      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a76      	ldr	r2, [pc, #472]	@ (8009c84 <DMA_SetConfig+0x234>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d054      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a74      	ldr	r2, [pc, #464]	@ (8009c88 <DMA_SetConfig+0x238>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d04f      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a73      	ldr	r2, [pc, #460]	@ (8009c8c <DMA_SetConfig+0x23c>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d04a      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a71      	ldr	r2, [pc, #452]	@ (8009c90 <DMA_SetConfig+0x240>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d045      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a70      	ldr	r2, [pc, #448]	@ (8009c94 <DMA_SetConfig+0x244>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d040      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a6e      	ldr	r2, [pc, #440]	@ (8009c98 <DMA_SetConfig+0x248>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d03b      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a6d      	ldr	r2, [pc, #436]	@ (8009c9c <DMA_SetConfig+0x24c>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d036      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a6b      	ldr	r2, [pc, #428]	@ (8009ca0 <DMA_SetConfig+0x250>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d031      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a6a      	ldr	r2, [pc, #424]	@ (8009ca4 <DMA_SetConfig+0x254>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d02c      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a68      	ldr	r2, [pc, #416]	@ (8009ca8 <DMA_SetConfig+0x258>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d027      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a67      	ldr	r2, [pc, #412]	@ (8009cac <DMA_SetConfig+0x25c>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d022      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a65      	ldr	r2, [pc, #404]	@ (8009cb0 <DMA_SetConfig+0x260>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d01d      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a64      	ldr	r2, [pc, #400]	@ (8009cb4 <DMA_SetConfig+0x264>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d018      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a62      	ldr	r2, [pc, #392]	@ (8009cb8 <DMA_SetConfig+0x268>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d013      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a61      	ldr	r2, [pc, #388]	@ (8009cbc <DMA_SetConfig+0x26c>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d00e      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a5f      	ldr	r2, [pc, #380]	@ (8009cc0 <DMA_SetConfig+0x270>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d009      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a5e      	ldr	r2, [pc, #376]	@ (8009cc4 <DMA_SetConfig+0x274>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d004      	beq.n	8009b5a <DMA_SetConfig+0x10a>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a5c      	ldr	r2, [pc, #368]	@ (8009cc8 <DMA_SetConfig+0x278>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d101      	bne.n	8009b5e <DMA_SetConfig+0x10e>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e000      	b.n	8009b60 <DMA_SetConfig+0x110>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00d      	beq.n	8009b80 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009b6c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d004      	beq.n	8009b80 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009b7e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a39      	ldr	r2, [pc, #228]	@ (8009c6c <DMA_SetConfig+0x21c>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d04a      	beq.n	8009c20 <DMA_SetConfig+0x1d0>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a38      	ldr	r2, [pc, #224]	@ (8009c70 <DMA_SetConfig+0x220>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d045      	beq.n	8009c20 <DMA_SetConfig+0x1d0>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a36      	ldr	r2, [pc, #216]	@ (8009c74 <DMA_SetConfig+0x224>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d040      	beq.n	8009c20 <DMA_SetConfig+0x1d0>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a35      	ldr	r2, [pc, #212]	@ (8009c78 <DMA_SetConfig+0x228>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d03b      	beq.n	8009c20 <DMA_SetConfig+0x1d0>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a33      	ldr	r2, [pc, #204]	@ (8009c7c <DMA_SetConfig+0x22c>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d036      	beq.n	8009c20 <DMA_SetConfig+0x1d0>
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a32      	ldr	r2, [pc, #200]	@ (8009c80 <DMA_SetConfig+0x230>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d031      	beq.n	8009c20 <DMA_SetConfig+0x1d0>
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a30      	ldr	r2, [pc, #192]	@ (8009c84 <DMA_SetConfig+0x234>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d02c      	beq.n	8009c20 <DMA_SetConfig+0x1d0>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a2f      	ldr	r2, [pc, #188]	@ (8009c88 <DMA_SetConfig+0x238>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d027      	beq.n	8009c20 <DMA_SetConfig+0x1d0>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a2d      	ldr	r2, [pc, #180]	@ (8009c8c <DMA_SetConfig+0x23c>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d022      	beq.n	8009c20 <DMA_SetConfig+0x1d0>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a2c      	ldr	r2, [pc, #176]	@ (8009c90 <DMA_SetConfig+0x240>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d01d      	beq.n	8009c20 <DMA_SetConfig+0x1d0>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a2a      	ldr	r2, [pc, #168]	@ (8009c94 <DMA_SetConfig+0x244>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d018      	beq.n	8009c20 <DMA_SetConfig+0x1d0>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a29      	ldr	r2, [pc, #164]	@ (8009c98 <DMA_SetConfig+0x248>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d013      	beq.n	8009c20 <DMA_SetConfig+0x1d0>
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a27      	ldr	r2, [pc, #156]	@ (8009c9c <DMA_SetConfig+0x24c>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d00e      	beq.n	8009c20 <DMA_SetConfig+0x1d0>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a26      	ldr	r2, [pc, #152]	@ (8009ca0 <DMA_SetConfig+0x250>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d009      	beq.n	8009c20 <DMA_SetConfig+0x1d0>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a24      	ldr	r2, [pc, #144]	@ (8009ca4 <DMA_SetConfig+0x254>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d004      	beq.n	8009c20 <DMA_SetConfig+0x1d0>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a23      	ldr	r2, [pc, #140]	@ (8009ca8 <DMA_SetConfig+0x258>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d101      	bne.n	8009c24 <DMA_SetConfig+0x1d4>
 8009c20:	2301      	movs	r3, #1
 8009c22:	e000      	b.n	8009c26 <DMA_SetConfig+0x1d6>
 8009c24:	2300      	movs	r3, #0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d059      	beq.n	8009cde <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c2e:	f003 031f 	and.w	r3, r3, #31
 8009c32:	223f      	movs	r2, #63	@ 0x3f
 8009c34:	409a      	lsls	r2, r3
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009c48:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	2b40      	cmp	r3, #64	@ 0x40
 8009c58:	d138      	bne.n	8009ccc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009c6a:	e086      	b.n	8009d7a <DMA_SetConfig+0x32a>
 8009c6c:	40020010 	.word	0x40020010
 8009c70:	40020028 	.word	0x40020028
 8009c74:	40020040 	.word	0x40020040
 8009c78:	40020058 	.word	0x40020058
 8009c7c:	40020070 	.word	0x40020070
 8009c80:	40020088 	.word	0x40020088
 8009c84:	400200a0 	.word	0x400200a0
 8009c88:	400200b8 	.word	0x400200b8
 8009c8c:	40020410 	.word	0x40020410
 8009c90:	40020428 	.word	0x40020428
 8009c94:	40020440 	.word	0x40020440
 8009c98:	40020458 	.word	0x40020458
 8009c9c:	40020470 	.word	0x40020470
 8009ca0:	40020488 	.word	0x40020488
 8009ca4:	400204a0 	.word	0x400204a0
 8009ca8:	400204b8 	.word	0x400204b8
 8009cac:	58025408 	.word	0x58025408
 8009cb0:	5802541c 	.word	0x5802541c
 8009cb4:	58025430 	.word	0x58025430
 8009cb8:	58025444 	.word	0x58025444
 8009cbc:	58025458 	.word	0x58025458
 8009cc0:	5802546c 	.word	0x5802546c
 8009cc4:	58025480 	.word	0x58025480
 8009cc8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	60da      	str	r2, [r3, #12]
}
 8009cdc:	e04d      	b.n	8009d7a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a29      	ldr	r2, [pc, #164]	@ (8009d88 <DMA_SetConfig+0x338>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d022      	beq.n	8009d2e <DMA_SetConfig+0x2de>
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a27      	ldr	r2, [pc, #156]	@ (8009d8c <DMA_SetConfig+0x33c>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d01d      	beq.n	8009d2e <DMA_SetConfig+0x2de>
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a26      	ldr	r2, [pc, #152]	@ (8009d90 <DMA_SetConfig+0x340>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d018      	beq.n	8009d2e <DMA_SetConfig+0x2de>
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a24      	ldr	r2, [pc, #144]	@ (8009d94 <DMA_SetConfig+0x344>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d013      	beq.n	8009d2e <DMA_SetConfig+0x2de>
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a23      	ldr	r2, [pc, #140]	@ (8009d98 <DMA_SetConfig+0x348>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d00e      	beq.n	8009d2e <DMA_SetConfig+0x2de>
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a21      	ldr	r2, [pc, #132]	@ (8009d9c <DMA_SetConfig+0x34c>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d009      	beq.n	8009d2e <DMA_SetConfig+0x2de>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a20      	ldr	r2, [pc, #128]	@ (8009da0 <DMA_SetConfig+0x350>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d004      	beq.n	8009d2e <DMA_SetConfig+0x2de>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a1e      	ldr	r2, [pc, #120]	@ (8009da4 <DMA_SetConfig+0x354>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d101      	bne.n	8009d32 <DMA_SetConfig+0x2e2>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e000      	b.n	8009d34 <DMA_SetConfig+0x2e4>
 8009d32:	2300      	movs	r3, #0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d020      	beq.n	8009d7a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d3c:	f003 031f 	and.w	r3, r3, #31
 8009d40:	2201      	movs	r2, #1
 8009d42:	409a      	lsls	r2, r3
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	683a      	ldr	r2, [r7, #0]
 8009d4e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	2b40      	cmp	r3, #64	@ 0x40
 8009d56:	d108      	bne.n	8009d6a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68ba      	ldr	r2, [r7, #8]
 8009d66:	60da      	str	r2, [r3, #12]
}
 8009d68:	e007      	b.n	8009d7a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	60da      	str	r2, [r3, #12]
}
 8009d7a:	bf00      	nop
 8009d7c:	371c      	adds	r7, #28
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	58025408 	.word	0x58025408
 8009d8c:	5802541c 	.word	0x5802541c
 8009d90:	58025430 	.word	0x58025430
 8009d94:	58025444 	.word	0x58025444
 8009d98:	58025458 	.word	0x58025458
 8009d9c:	5802546c 	.word	0x5802546c
 8009da0:	58025480 	.word	0x58025480
 8009da4:	58025494 	.word	0x58025494

08009da8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a42      	ldr	r2, [pc, #264]	@ (8009ec0 <DMA_CalcBaseAndBitshift+0x118>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d04a      	beq.n	8009e50 <DMA_CalcBaseAndBitshift+0xa8>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a41      	ldr	r2, [pc, #260]	@ (8009ec4 <DMA_CalcBaseAndBitshift+0x11c>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d045      	beq.n	8009e50 <DMA_CalcBaseAndBitshift+0xa8>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a3f      	ldr	r2, [pc, #252]	@ (8009ec8 <DMA_CalcBaseAndBitshift+0x120>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d040      	beq.n	8009e50 <DMA_CalcBaseAndBitshift+0xa8>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a3e      	ldr	r2, [pc, #248]	@ (8009ecc <DMA_CalcBaseAndBitshift+0x124>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d03b      	beq.n	8009e50 <DMA_CalcBaseAndBitshift+0xa8>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a3c      	ldr	r2, [pc, #240]	@ (8009ed0 <DMA_CalcBaseAndBitshift+0x128>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d036      	beq.n	8009e50 <DMA_CalcBaseAndBitshift+0xa8>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a3b      	ldr	r2, [pc, #236]	@ (8009ed4 <DMA_CalcBaseAndBitshift+0x12c>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d031      	beq.n	8009e50 <DMA_CalcBaseAndBitshift+0xa8>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a39      	ldr	r2, [pc, #228]	@ (8009ed8 <DMA_CalcBaseAndBitshift+0x130>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d02c      	beq.n	8009e50 <DMA_CalcBaseAndBitshift+0xa8>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a38      	ldr	r2, [pc, #224]	@ (8009edc <DMA_CalcBaseAndBitshift+0x134>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d027      	beq.n	8009e50 <DMA_CalcBaseAndBitshift+0xa8>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a36      	ldr	r2, [pc, #216]	@ (8009ee0 <DMA_CalcBaseAndBitshift+0x138>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d022      	beq.n	8009e50 <DMA_CalcBaseAndBitshift+0xa8>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a35      	ldr	r2, [pc, #212]	@ (8009ee4 <DMA_CalcBaseAndBitshift+0x13c>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d01d      	beq.n	8009e50 <DMA_CalcBaseAndBitshift+0xa8>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a33      	ldr	r2, [pc, #204]	@ (8009ee8 <DMA_CalcBaseAndBitshift+0x140>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d018      	beq.n	8009e50 <DMA_CalcBaseAndBitshift+0xa8>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a32      	ldr	r2, [pc, #200]	@ (8009eec <DMA_CalcBaseAndBitshift+0x144>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d013      	beq.n	8009e50 <DMA_CalcBaseAndBitshift+0xa8>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a30      	ldr	r2, [pc, #192]	@ (8009ef0 <DMA_CalcBaseAndBitshift+0x148>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d00e      	beq.n	8009e50 <DMA_CalcBaseAndBitshift+0xa8>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a2f      	ldr	r2, [pc, #188]	@ (8009ef4 <DMA_CalcBaseAndBitshift+0x14c>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d009      	beq.n	8009e50 <DMA_CalcBaseAndBitshift+0xa8>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a2d      	ldr	r2, [pc, #180]	@ (8009ef8 <DMA_CalcBaseAndBitshift+0x150>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d004      	beq.n	8009e50 <DMA_CalcBaseAndBitshift+0xa8>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a2c      	ldr	r2, [pc, #176]	@ (8009efc <DMA_CalcBaseAndBitshift+0x154>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d101      	bne.n	8009e54 <DMA_CalcBaseAndBitshift+0xac>
 8009e50:	2301      	movs	r3, #1
 8009e52:	e000      	b.n	8009e56 <DMA_CalcBaseAndBitshift+0xae>
 8009e54:	2300      	movs	r3, #0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d024      	beq.n	8009ea4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	3b10      	subs	r3, #16
 8009e62:	4a27      	ldr	r2, [pc, #156]	@ (8009f00 <DMA_CalcBaseAndBitshift+0x158>)
 8009e64:	fba2 2303 	umull	r2, r3, r2, r3
 8009e68:	091b      	lsrs	r3, r3, #4
 8009e6a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f003 0307 	and.w	r3, r3, #7
 8009e72:	4a24      	ldr	r2, [pc, #144]	@ (8009f04 <DMA_CalcBaseAndBitshift+0x15c>)
 8009e74:	5cd3      	ldrb	r3, [r2, r3]
 8009e76:	461a      	mov	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2b03      	cmp	r3, #3
 8009e80:	d908      	bls.n	8009e94 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	461a      	mov	r2, r3
 8009e88:	4b1f      	ldr	r3, [pc, #124]	@ (8009f08 <DMA_CalcBaseAndBitshift+0x160>)
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	1d1a      	adds	r2, r3, #4
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	659a      	str	r2, [r3, #88]	@ 0x58
 8009e92:	e00d      	b.n	8009eb0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	461a      	mov	r2, r3
 8009e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8009f08 <DMA_CalcBaseAndBitshift+0x160>)
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ea2:	e005      	b.n	8009eb0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr
 8009ec0:	40020010 	.word	0x40020010
 8009ec4:	40020028 	.word	0x40020028
 8009ec8:	40020040 	.word	0x40020040
 8009ecc:	40020058 	.word	0x40020058
 8009ed0:	40020070 	.word	0x40020070
 8009ed4:	40020088 	.word	0x40020088
 8009ed8:	400200a0 	.word	0x400200a0
 8009edc:	400200b8 	.word	0x400200b8
 8009ee0:	40020410 	.word	0x40020410
 8009ee4:	40020428 	.word	0x40020428
 8009ee8:	40020440 	.word	0x40020440
 8009eec:	40020458 	.word	0x40020458
 8009ef0:	40020470 	.word	0x40020470
 8009ef4:	40020488 	.word	0x40020488
 8009ef8:	400204a0 	.word	0x400204a0
 8009efc:	400204b8 	.word	0x400204b8
 8009f00:	aaaaaaab 	.word	0xaaaaaaab
 8009f04:	08015a34 	.word	0x08015a34
 8009f08:	fffffc00 	.word	0xfffffc00

08009f0c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f14:	2300      	movs	r3, #0
 8009f16:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d120      	bne.n	8009f62 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f24:	2b03      	cmp	r3, #3
 8009f26:	d858      	bhi.n	8009fda <DMA_CheckFifoParam+0xce>
 8009f28:	a201      	add	r2, pc, #4	@ (adr r2, 8009f30 <DMA_CheckFifoParam+0x24>)
 8009f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2e:	bf00      	nop
 8009f30:	08009f41 	.word	0x08009f41
 8009f34:	08009f53 	.word	0x08009f53
 8009f38:	08009f41 	.word	0x08009f41
 8009f3c:	08009fdb 	.word	0x08009fdb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d048      	beq.n	8009fde <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009f50:	e045      	b.n	8009fde <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f56:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009f5a:	d142      	bne.n	8009fe2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009f60:	e03f      	b.n	8009fe2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f6a:	d123      	bne.n	8009fb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f70:	2b03      	cmp	r3, #3
 8009f72:	d838      	bhi.n	8009fe6 <DMA_CheckFifoParam+0xda>
 8009f74:	a201      	add	r2, pc, #4	@ (adr r2, 8009f7c <DMA_CheckFifoParam+0x70>)
 8009f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7a:	bf00      	nop
 8009f7c:	08009f8d 	.word	0x08009f8d
 8009f80:	08009f93 	.word	0x08009f93
 8009f84:	08009f8d 	.word	0x08009f8d
 8009f88:	08009fa5 	.word	0x08009fa5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	73fb      	strb	r3, [r7, #15]
        break;
 8009f90:	e030      	b.n	8009ff4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d025      	beq.n	8009fea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009fa2:	e022      	b.n	8009fea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009fac:	d11f      	bne.n	8009fee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009fb2:	e01c      	b.n	8009fee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	d902      	bls.n	8009fc2 <DMA_CheckFifoParam+0xb6>
 8009fbc:	2b03      	cmp	r3, #3
 8009fbe:	d003      	beq.n	8009fc8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009fc0:	e018      	b.n	8009ff4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	73fb      	strb	r3, [r7, #15]
        break;
 8009fc6:	e015      	b.n	8009ff4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00e      	beq.n	8009ff2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	73fb      	strb	r3, [r7, #15]
    break;
 8009fd8:	e00b      	b.n	8009ff2 <DMA_CheckFifoParam+0xe6>
        break;
 8009fda:	bf00      	nop
 8009fdc:	e00a      	b.n	8009ff4 <DMA_CheckFifoParam+0xe8>
        break;
 8009fde:	bf00      	nop
 8009fe0:	e008      	b.n	8009ff4 <DMA_CheckFifoParam+0xe8>
        break;
 8009fe2:	bf00      	nop
 8009fe4:	e006      	b.n	8009ff4 <DMA_CheckFifoParam+0xe8>
        break;
 8009fe6:	bf00      	nop
 8009fe8:	e004      	b.n	8009ff4 <DMA_CheckFifoParam+0xe8>
        break;
 8009fea:	bf00      	nop
 8009fec:	e002      	b.n	8009ff4 <DMA_CheckFifoParam+0xe8>
        break;
 8009fee:	bf00      	nop
 8009ff0:	e000      	b.n	8009ff4 <DMA_CheckFifoParam+0xe8>
    break;
 8009ff2:	bf00      	nop
    }
  }

  return status;
 8009ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3714      	adds	r7, #20
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop

0800a004 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a38      	ldr	r2, [pc, #224]	@ (800a0f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d022      	beq.n	800a062 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a36      	ldr	r2, [pc, #216]	@ (800a0fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d01d      	beq.n	800a062 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a35      	ldr	r2, [pc, #212]	@ (800a100 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d018      	beq.n	800a062 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a33      	ldr	r2, [pc, #204]	@ (800a104 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d013      	beq.n	800a062 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a32      	ldr	r2, [pc, #200]	@ (800a108 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d00e      	beq.n	800a062 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a30      	ldr	r2, [pc, #192]	@ (800a10c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d009      	beq.n	800a062 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a2f      	ldr	r2, [pc, #188]	@ (800a110 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d004      	beq.n	800a062 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a2d      	ldr	r2, [pc, #180]	@ (800a114 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d101      	bne.n	800a066 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a062:	2301      	movs	r3, #1
 800a064:	e000      	b.n	800a068 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a066:	2300      	movs	r3, #0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d01a      	beq.n	800a0a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	b2db      	uxtb	r3, r3
 800a072:	3b08      	subs	r3, #8
 800a074:	4a28      	ldr	r2, [pc, #160]	@ (800a118 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a076:	fba2 2303 	umull	r2, r3, r2, r3
 800a07a:	091b      	lsrs	r3, r3, #4
 800a07c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	4b26      	ldr	r3, [pc, #152]	@ (800a11c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a082:	4413      	add	r3, r2
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	461a      	mov	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a24      	ldr	r2, [pc, #144]	@ (800a120 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a090:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f003 031f 	and.w	r3, r3, #31
 800a098:	2201      	movs	r2, #1
 800a09a:	409a      	lsls	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a0a0:	e024      	b.n	800a0ec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	3b10      	subs	r3, #16
 800a0aa:	4a1e      	ldr	r2, [pc, #120]	@ (800a124 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a0ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b0:	091b      	lsrs	r3, r3, #4
 800a0b2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	4a1c      	ldr	r2, [pc, #112]	@ (800a128 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d806      	bhi.n	800a0ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	4a1b      	ldr	r2, [pc, #108]	@ (800a12c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d902      	bls.n	800a0ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	3308      	adds	r3, #8
 800a0c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	4b18      	ldr	r3, [pc, #96]	@ (800a130 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a0ce:	4413      	add	r3, r2
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a16      	ldr	r2, [pc, #88]	@ (800a134 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a0dc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f003 031f 	and.w	r3, r3, #31
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	409a      	lsls	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a0ec:	bf00      	nop
 800a0ee:	3714      	adds	r7, #20
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr
 800a0f8:	58025408 	.word	0x58025408
 800a0fc:	5802541c 	.word	0x5802541c
 800a100:	58025430 	.word	0x58025430
 800a104:	58025444 	.word	0x58025444
 800a108:	58025458 	.word	0x58025458
 800a10c:	5802546c 	.word	0x5802546c
 800a110:	58025480 	.word	0x58025480
 800a114:	58025494 	.word	0x58025494
 800a118:	cccccccd 	.word	0xcccccccd
 800a11c:	16009600 	.word	0x16009600
 800a120:	58025880 	.word	0x58025880
 800a124:	aaaaaaab 	.word	0xaaaaaaab
 800a128:	400204b8 	.word	0x400204b8
 800a12c:	4002040f 	.word	0x4002040f
 800a130:	10008200 	.word	0x10008200
 800a134:	40020880 	.word	0x40020880

0800a138 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	b2db      	uxtb	r3, r3
 800a146:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d04a      	beq.n	800a1e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2b08      	cmp	r3, #8
 800a152:	d847      	bhi.n	800a1e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a25      	ldr	r2, [pc, #148]	@ (800a1f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d022      	beq.n	800a1a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a24      	ldr	r2, [pc, #144]	@ (800a1f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d01d      	beq.n	800a1a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a22      	ldr	r2, [pc, #136]	@ (800a1f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d018      	beq.n	800a1a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a21      	ldr	r2, [pc, #132]	@ (800a1fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d013      	beq.n	800a1a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a1f      	ldr	r2, [pc, #124]	@ (800a200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d00e      	beq.n	800a1a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a1e      	ldr	r2, [pc, #120]	@ (800a204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d009      	beq.n	800a1a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a1c      	ldr	r2, [pc, #112]	@ (800a208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d004      	beq.n	800a1a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a1b      	ldr	r2, [pc, #108]	@ (800a20c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d101      	bne.n	800a1a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e000      	b.n	800a1aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00a      	beq.n	800a1c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	4b17      	ldr	r3, [pc, #92]	@ (800a210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a1b2:	4413      	add	r3, r2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a15      	ldr	r2, [pc, #84]	@ (800a214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a1c0:	671a      	str	r2, [r3, #112]	@ 0x70
 800a1c2:	e009      	b.n	800a1d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	4b14      	ldr	r3, [pc, #80]	@ (800a218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a1c8:	4413      	add	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a11      	ldr	r2, [pc, #68]	@ (800a21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a1d6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	3b01      	subs	r3, #1
 800a1dc:	2201      	movs	r2, #1
 800a1de:	409a      	lsls	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800a1e4:	bf00      	nop
 800a1e6:	3714      	adds	r7, #20
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr
 800a1f0:	58025408 	.word	0x58025408
 800a1f4:	5802541c 	.word	0x5802541c
 800a1f8:	58025430 	.word	0x58025430
 800a1fc:	58025444 	.word	0x58025444
 800a200:	58025458 	.word	0x58025458
 800a204:	5802546c 	.word	0x5802546c
 800a208:	58025480 	.word	0x58025480
 800a20c:	58025494 	.word	0x58025494
 800a210:	1600963f 	.word	0x1600963f
 800a214:	58025940 	.word	0x58025940
 800a218:	1000823f 	.word	0x1000823f
 800a21c:	40020940 	.word	0x40020940

0800a220 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d101      	bne.n	800a232 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e04f      	b.n	800a2d2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d106      	bne.n	800a24c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f84e 	bl	800a2e8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2202      	movs	r2, #2
 800a250:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	4b20      	ldr	r3, [pc, #128]	@ (800a2dc <HAL_DMA2D_Init+0xbc>)
 800a25c:	4013      	ands	r3, r2
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	6851      	ldr	r1, [r2, #4]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	69d2      	ldr	r2, [r2, #28]
 800a266:	4311      	orrs	r1, r2
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	6812      	ldr	r2, [r2, #0]
 800a26c:	430b      	orrs	r3, r1
 800a26e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a276:	4b1a      	ldr	r3, [pc, #104]	@ (800a2e0 <HAL_DMA2D_Init+0xc0>)
 800a278:	4013      	ands	r3, r2
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	6891      	ldr	r1, [r2, #8]
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	6992      	ldr	r2, [r2, #24]
 800a282:	4311      	orrs	r1, r2
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	6812      	ldr	r2, [r2, #0]
 800a288:	430b      	orrs	r3, r1
 800a28a:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a292:	4b14      	ldr	r3, [pc, #80]	@ (800a2e4 <HAL_DMA2D_Init+0xc4>)
 800a294:	4013      	ands	r3, r2
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	68d1      	ldr	r1, [r2, #12]
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	6812      	ldr	r2, [r2, #0]
 800a29e:	430b      	orrs	r3, r1
 800a2a0:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2a8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	051a      	lsls	r2, r3, #20
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	055b      	lsls	r3, r3, #21
 800a2b8:	431a      	orrs	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	fff8ffbf 	.word	0xfff8ffbf
 800a2e0:	fffffef8 	.word	0xfffffef8
 800a2e4:	ffff0000 	.word	0xffff0000

0800a2e8 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af02      	add	r7, sp, #8
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
 800a308:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800a310:	2b01      	cmp	r3, #1
 800a312:	d101      	bne.n	800a318 <HAL_DMA2D_Start+0x1c>
 800a314:	2302      	movs	r3, #2
 800a316:	e018      	b.n	800a34a <HAL_DMA2D_Start+0x4e>
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2202      	movs	r2, #2
 800a324:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	68b9      	ldr	r1, [r7, #8]
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f000 f9a4 	bl	800a680 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f042 0201 	orr.w	r2, r2, #1
 800a346:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b086      	sub	sp, #24
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800a35c:	2300      	movs	r3, #0
 800a35e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 0301 	and.w	r3, r3, #1
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d056      	beq.n	800a41c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800a36e:	f7fc ff99 	bl	80072a4 <HAL_GetTick>
 800a372:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800a374:	e04b      	b.n	800a40e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800a384:	2b00      	cmp	r3, #0
 800a386:	d023      	beq.n	800a3d0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f003 0320 	and.w	r3, r3, #32
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d005      	beq.n	800a39e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a396:	f043 0202 	orr.w	r2, r3, #2
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f003 0301 	and.w	r3, r3, #1
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d005      	beq.n	800a3b4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3ac:	f043 0201 	orr.w	r2, r3, #1
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2221      	movs	r2, #33	@ 0x21
 800a3ba:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2204      	movs	r2, #4
 800a3c0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e0a5      	b.n	800a51c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d6:	d01a      	beq.n	800a40e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a3d8:	f7fc ff64 	bl	80072a4 <HAL_GetTick>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d302      	bcc.n	800a3ee <HAL_DMA2D_PollForTransfer+0x9c>
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10f      	bne.n	800a40e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3f2:	f043 0220 	orr.w	r2, r3, #32
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2203      	movs	r2, #3
 800a3fe:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 800a40a:	2303      	movs	r3, #3
 800a40c:	e086      	b.n	800a51c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	f003 0302 	and.w	r3, r3, #2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d0ac      	beq.n	800a376 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	f003 0320 	and.w	r3, r3, #32
 800a426:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a42e:	f003 0320 	and.w	r3, r3, #32
 800a432:	693a      	ldr	r2, [r7, #16]
 800a434:	4313      	orrs	r3, r2
 800a436:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d061      	beq.n	800a502 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800a43e:	f7fc ff31 	bl	80072a4 <HAL_GetTick>
 800a442:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800a444:	e056      	b.n	800a4f4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800a454:	2b00      	cmp	r3, #0
 800a456:	d02e      	beq.n	800a4b6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f003 0308 	and.w	r3, r3, #8
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d005      	beq.n	800a46e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a466:	f043 0204 	orr.w	r2, r3, #4
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f003 0320 	and.w	r3, r3, #32
 800a474:	2b00      	cmp	r3, #0
 800a476:	d005      	beq.n	800a484 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a47c:	f043 0202 	orr.w	r2, r3, #2
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f003 0301 	and.w	r3, r3, #1
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d005      	beq.n	800a49a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a492:	f043 0201 	orr.w	r2, r3, #1
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2229      	movs	r2, #41	@ 0x29
 800a4a0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2204      	movs	r2, #4
 800a4a6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e032      	b.n	800a51c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4bc:	d01a      	beq.n	800a4f4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a4be:	f7fc fef1 	bl	80072a4 <HAL_GetTick>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	1ad3      	subs	r3, r2, r3
 800a4c8:	683a      	ldr	r2, [r7, #0]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d302      	bcc.n	800a4d4 <HAL_DMA2D_PollForTransfer+0x182>
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10f      	bne.n	800a4f4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4d8:	f043 0220 	orr.w	r2, r3, #32
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2203      	movs	r2, #3
 800a4e4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	e013      	b.n	800a51c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	f003 0310 	and.w	r3, r3, #16
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d0a1      	beq.n	800a446 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2212      	movs	r2, #18
 800a508:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2201      	movs	r2, #1
 800a50e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3718      	adds	r7, #24
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800a524:	b480      	push	{r7}
 800a526:	b087      	sub	sp, #28
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800a540:	2b01      	cmp	r3, #1
 800a542:	d101      	bne.n	800a548 <HAL_DMA2D_ConfigLayer+0x24>
 800a544:	2302      	movs	r3, #2
 800a546:	e092      	b.n	800a66e <HAL_DMA2D_ConfigLayer+0x14a>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2202      	movs	r2, #2
 800a554:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800a558:	683a      	ldr	r2, [r7, #0]
 800a55a:	4613      	mov	r3, r2
 800a55c:	00db      	lsls	r3, r3, #3
 800a55e:	1a9b      	subs	r3, r3, r2
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	3328      	adds	r3, #40	@ 0x28
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	4413      	add	r3, r2
 800a568:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	685a      	ldr	r2, [r3, #4]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	041b      	lsls	r3, r3, #16
 800a574:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a57c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	695b      	ldr	r3, [r3, #20]
 800a582:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a584:	4313      	orrs	r3, r2
 800a586:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800a588:	4b3c      	ldr	r3, [pc, #240]	@ (800a67c <HAL_DMA2D_ConfigLayer+0x158>)
 800a58a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	2b0a      	cmp	r3, #10
 800a592:	d003      	beq.n	800a59c <HAL_DMA2D_ConfigLayer+0x78>
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	2b09      	cmp	r3, #9
 800a59a:	d107      	bne.n	800a5ac <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800a5a4:	693a      	ldr	r2, [r7, #16]
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	613b      	str	r3, [r7, #16]
 800a5aa:	e005      	b.n	800a5b8 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	061b      	lsls	r3, r3, #24
 800a5b2:	693a      	ldr	r2, [r7, #16]
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d120      	bne.n	800a600 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	43db      	mvns	r3, r3
 800a5c8:	ea02 0103 	and.w	r1, r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	693a      	ldr	r2, [r7, #16]
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	6812      	ldr	r2, [r2, #0]
 800a5de:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	2b0a      	cmp	r3, #10
 800a5e6:	d003      	beq.n	800a5f0 <HAL_DMA2D_ConfigLayer+0xcc>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	2b09      	cmp	r3, #9
 800a5ee:	d135      	bne.n	800a65c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	68da      	ldr	r2, [r3, #12]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800a5fc:	629a      	str	r2, [r3, #40]	@ 0x28
 800a5fe:	e02d      	b.n	800a65c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	2b0b      	cmp	r3, #11
 800a606:	d109      	bne.n	800a61c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	699b      	ldr	r3, [r3, #24]
 800a60c:	049b      	lsls	r3, r3, #18
 800a60e:	693a      	ldr	r2, [r7, #16]
 800a610:	4313      	orrs	r3, r2
 800a612:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 800a61a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	69da      	ldr	r2, [r3, #28]
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	43db      	mvns	r3, r3
 800a626:	ea02 0103 	and.w	r1, r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	430a      	orrs	r2, r1
 800a632:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	6812      	ldr	r2, [r2, #0]
 800a63c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	2b0a      	cmp	r3, #10
 800a644:	d003      	beq.n	800a64e <HAL_DMA2D_ConfigLayer+0x12a>
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	2b09      	cmp	r3, #9
 800a64c:	d106      	bne.n	800a65c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	68da      	ldr	r2, [r3, #12]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800a65a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	371c      	adds	r7, #28
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	ff33000f 	.word	0xff33000f

0800a680 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800a680:	b480      	push	{r7}
 800a682:	b08b      	sub	sp, #44	@ 0x2c
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
 800a68c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a694:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	041a      	lsls	r2, r3, #16
 800a69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69e:	431a      	orrs	r2, r3
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	430a      	orrs	r2, r1
 800a6a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a6b8:	d174      	bne.n	800a7a4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800a6c0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a6c8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a6d0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d108      	bne.n	800a6f2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800a6e0:	69ba      	ldr	r2, [r7, #24]
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	431a      	orrs	r2, r3
 800a6e6:	6a3b      	ldr	r3, [r7, #32]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	697a      	ldr	r2, [r7, #20]
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6f0:	e053      	b.n	800a79a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d106      	bne.n	800a708 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800a6fa:	69ba      	ldr	r2, [r7, #24]
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	697a      	ldr	r2, [r7, #20]
 800a702:	4313      	orrs	r3, r2
 800a704:	627b      	str	r3, [r7, #36]	@ 0x24
 800a706:	e048      	b.n	800a79a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d111      	bne.n	800a734 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	0cdb      	lsrs	r3, r3, #19
 800a714:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	0a9b      	lsrs	r3, r3, #10
 800a71a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	08db      	lsrs	r3, r3, #3
 800a720:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	015a      	lsls	r2, r3, #5
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	02db      	lsls	r3, r3, #11
 800a72a:	4313      	orrs	r3, r2
 800a72c:	697a      	ldr	r2, [r7, #20]
 800a72e:	4313      	orrs	r3, r2
 800a730:	627b      	str	r3, [r7, #36]	@ 0x24
 800a732:	e032      	b.n	800a79a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	2b03      	cmp	r3, #3
 800a73a:	d117      	bne.n	800a76c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	0fdb      	lsrs	r3, r3, #31
 800a740:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	0cdb      	lsrs	r3, r3, #19
 800a746:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	0adb      	lsrs	r3, r3, #11
 800a74c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	08db      	lsrs	r3, r3, #3
 800a752:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	015a      	lsls	r2, r3, #5
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	029b      	lsls	r3, r3, #10
 800a75c:	431a      	orrs	r2, r3
 800a75e:	6a3b      	ldr	r3, [r7, #32]
 800a760:	03db      	lsls	r3, r3, #15
 800a762:	4313      	orrs	r3, r2
 800a764:	697a      	ldr	r2, [r7, #20]
 800a766:	4313      	orrs	r3, r2
 800a768:	627b      	str	r3, [r7, #36]	@ 0x24
 800a76a:	e016      	b.n	800a79a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800a76c:	6a3b      	ldr	r3, [r7, #32]
 800a76e:	0f1b      	lsrs	r3, r3, #28
 800a770:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	0d1b      	lsrs	r3, r3, #20
 800a776:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	0b1b      	lsrs	r3, r3, #12
 800a77c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	091b      	lsrs	r3, r3, #4
 800a782:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	011a      	lsls	r2, r3, #4
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	021b      	lsls	r3, r3, #8
 800a78c:	431a      	orrs	r2, r3
 800a78e:	6a3b      	ldr	r3, [r7, #32]
 800a790:	031b      	lsls	r3, r3, #12
 800a792:	4313      	orrs	r3, r2
 800a794:	697a      	ldr	r2, [r7, #20]
 800a796:	4313      	orrs	r3, r2
 800a798:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7a0:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800a7a2:	e00d      	b.n	800a7c0 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a7ac:	d104      	bne.n	800a7b8 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	615a      	str	r2, [r3, #20]
}
 800a7b6:	e003      	b.n	800a7c0 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	60da      	str	r2, [r3, #12]
}
 800a7c0:	bf00      	nop
 800a7c2:	372c      	adds	r7, #44	@ 0x2c
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b087      	sub	sp, #28
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	607a      	str	r2, [r7, #4]
 800a7d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d101      	bne.n	800a7e8 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e00a      	b.n	800a7fe <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800a7e8:	7afb      	ldrb	r3, [r7, #11]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d103      	bne.n	800a7f6 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	605a      	str	r2, [r3, #4]
      break;
 800a7f4:	e002      	b.n	800a7fc <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a7fa:	bf00      	nop
  }

  return status;
 800a7fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	371c      	adds	r7, #28
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr

0800a80a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800a80a:	b480      	push	{r7}
 800a80c:	b083      	sub	sp, #12
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
 800a812:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d101      	bne.n	800a81e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	e003      	b.n	800a826 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	683a      	ldr	r2, [r7, #0]
 800a822:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a824:	2300      	movs	r3, #0
  }
}
 800a826:	4618      	mov	r0, r3
 800a828:	370c      	adds	r7, #12
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
	...

0800a834 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	0c1b      	lsrs	r3, r3, #16
 800a842:	f003 0303 	and.w	r3, r3, #3
 800a846:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f003 031f 	and.w	r3, r3, #31
 800a850:	2201      	movs	r2, #1
 800a852:	fa02 f303 	lsl.w	r3, r2, r3
 800a856:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	011a      	lsls	r2, r3, #4
 800a85c:	4b0c      	ldr	r3, [pc, #48]	@ (800a890 <HAL_EXTI_IRQHandler+0x5c>)
 800a85e:	4413      	add	r3, r2
 800a860:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	693a      	ldr	r2, [r7, #16]
 800a868:	4013      	ands	r3, r2
 800a86a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d009      	beq.n	800a886 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	693a      	ldr	r2, [r7, #16]
 800a876:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d002      	beq.n	800a886 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	4798      	blx	r3
    }
  }
}
 800a886:	bf00      	nop
 800a888:	3718      	adds	r7, #24
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	58000088 	.word	0x58000088

0800a894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a894:	b480      	push	{r7}
 800a896:	b089      	sub	sp, #36	@ 0x24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a8a2:	4b86      	ldr	r3, [pc, #536]	@ (800aabc <HAL_GPIO_Init+0x228>)
 800a8a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a8a6:	e18c      	b.n	800abc2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	2101      	movs	r1, #1
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f000 817e 	beq.w	800abbc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d00b      	beq.n	800a8e0 <HAL_GPIO_Init+0x4c>
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	d007      	beq.n	800a8e0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a8d4:	2b11      	cmp	r3, #17
 800a8d6:	d003      	beq.n	800a8e0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	2b12      	cmp	r3, #18
 800a8de:	d130      	bne.n	800a942 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	005b      	lsls	r3, r3, #1
 800a8ea:	2203      	movs	r2, #3
 800a8ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f0:	43db      	mvns	r3, r3
 800a8f2:	69ba      	ldr	r2, [r7, #24]
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	68da      	ldr	r2, [r3, #12]
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	005b      	lsls	r3, r3, #1
 800a900:	fa02 f303 	lsl.w	r3, r2, r3
 800a904:	69ba      	ldr	r2, [r7, #24]
 800a906:	4313      	orrs	r3, r2
 800a908:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	69ba      	ldr	r2, [r7, #24]
 800a90e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a916:	2201      	movs	r2, #1
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	fa02 f303 	lsl.w	r3, r2, r3
 800a91e:	43db      	mvns	r3, r3
 800a920:	69ba      	ldr	r2, [r7, #24]
 800a922:	4013      	ands	r3, r2
 800a924:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	091b      	lsrs	r3, r3, #4
 800a92c:	f003 0201 	and.w	r2, r3, #1
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	fa02 f303 	lsl.w	r3, r2, r3
 800a936:	69ba      	ldr	r2, [r7, #24]
 800a938:	4313      	orrs	r3, r2
 800a93a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	69ba      	ldr	r2, [r7, #24]
 800a940:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	005b      	lsls	r3, r3, #1
 800a94c:	2203      	movs	r2, #3
 800a94e:	fa02 f303 	lsl.w	r3, r2, r3
 800a952:	43db      	mvns	r3, r3
 800a954:	69ba      	ldr	r2, [r7, #24]
 800a956:	4013      	ands	r3, r2
 800a958:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	689a      	ldr	r2, [r3, #8]
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	005b      	lsls	r3, r3, #1
 800a962:	fa02 f303 	lsl.w	r3, r2, r3
 800a966:	69ba      	ldr	r2, [r7, #24]
 800a968:	4313      	orrs	r3, r2
 800a96a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	69ba      	ldr	r2, [r7, #24]
 800a970:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	2b02      	cmp	r3, #2
 800a978:	d003      	beq.n	800a982 <HAL_GPIO_Init+0xee>
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	2b12      	cmp	r3, #18
 800a980:	d123      	bne.n	800a9ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a982:	69fb      	ldr	r3, [r7, #28]
 800a984:	08da      	lsrs	r2, r3, #3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	3208      	adds	r2, #8
 800a98a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a98e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	f003 0307 	and.w	r3, r3, #7
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	220f      	movs	r2, #15
 800a99a:	fa02 f303 	lsl.w	r3, r2, r3
 800a99e:	43db      	mvns	r3, r3
 800a9a0:	69ba      	ldr	r2, [r7, #24]
 800a9a2:	4013      	ands	r3, r2
 800a9a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	691a      	ldr	r2, [r3, #16]
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	f003 0307 	and.w	r3, r3, #7
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b6:	69ba      	ldr	r2, [r7, #24]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	08da      	lsrs	r2, r3, #3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	3208      	adds	r2, #8
 800a9c4:	69b9      	ldr	r1, [r7, #24]
 800a9c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	005b      	lsls	r3, r3, #1
 800a9d4:	2203      	movs	r2, #3
 800a9d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a9da:	43db      	mvns	r3, r3
 800a9dc:	69ba      	ldr	r2, [r7, #24]
 800a9de:	4013      	ands	r3, r2
 800a9e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	f003 0203 	and.w	r2, r3, #3
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	005b      	lsls	r3, r3, #1
 800a9ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a9f2:	69ba      	ldr	r2, [r7, #24]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	69ba      	ldr	r2, [r7, #24]
 800a9fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f000 80d8 	beq.w	800abbc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa0c:	4b2c      	ldr	r3, [pc, #176]	@ (800aac0 <HAL_GPIO_Init+0x22c>)
 800aa0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aa12:	4a2b      	ldr	r2, [pc, #172]	@ (800aac0 <HAL_GPIO_Init+0x22c>)
 800aa14:	f043 0302 	orr.w	r3, r3, #2
 800aa18:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800aa1c:	4b28      	ldr	r3, [pc, #160]	@ (800aac0 <HAL_GPIO_Init+0x22c>)
 800aa1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aa22:	f003 0302 	and.w	r3, r3, #2
 800aa26:	60fb      	str	r3, [r7, #12]
 800aa28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aa2a:	4a26      	ldr	r2, [pc, #152]	@ (800aac4 <HAL_GPIO_Init+0x230>)
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	089b      	lsrs	r3, r3, #2
 800aa30:	3302      	adds	r3, #2
 800aa32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	f003 0303 	and.w	r3, r3, #3
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	220f      	movs	r2, #15
 800aa42:	fa02 f303 	lsl.w	r3, r2, r3
 800aa46:	43db      	mvns	r3, r3
 800aa48:	69ba      	ldr	r2, [r7, #24]
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a1d      	ldr	r2, [pc, #116]	@ (800aac8 <HAL_GPIO_Init+0x234>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d04a      	beq.n	800aaec <HAL_GPIO_Init+0x258>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a1c      	ldr	r2, [pc, #112]	@ (800aacc <HAL_GPIO_Init+0x238>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d02b      	beq.n	800aab6 <HAL_GPIO_Init+0x222>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a1b      	ldr	r2, [pc, #108]	@ (800aad0 <HAL_GPIO_Init+0x23c>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d025      	beq.n	800aab2 <HAL_GPIO_Init+0x21e>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a1a      	ldr	r2, [pc, #104]	@ (800aad4 <HAL_GPIO_Init+0x240>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d01f      	beq.n	800aaae <HAL_GPIO_Init+0x21a>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a19      	ldr	r2, [pc, #100]	@ (800aad8 <HAL_GPIO_Init+0x244>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d019      	beq.n	800aaaa <HAL_GPIO_Init+0x216>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a18      	ldr	r2, [pc, #96]	@ (800aadc <HAL_GPIO_Init+0x248>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d013      	beq.n	800aaa6 <HAL_GPIO_Init+0x212>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a17      	ldr	r2, [pc, #92]	@ (800aae0 <HAL_GPIO_Init+0x24c>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d00d      	beq.n	800aaa2 <HAL_GPIO_Init+0x20e>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a16      	ldr	r2, [pc, #88]	@ (800aae4 <HAL_GPIO_Init+0x250>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d007      	beq.n	800aa9e <HAL_GPIO_Init+0x20a>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a15      	ldr	r2, [pc, #84]	@ (800aae8 <HAL_GPIO_Init+0x254>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d101      	bne.n	800aa9a <HAL_GPIO_Init+0x206>
 800aa96:	2309      	movs	r3, #9
 800aa98:	e029      	b.n	800aaee <HAL_GPIO_Init+0x25a>
 800aa9a:	230a      	movs	r3, #10
 800aa9c:	e027      	b.n	800aaee <HAL_GPIO_Init+0x25a>
 800aa9e:	2307      	movs	r3, #7
 800aaa0:	e025      	b.n	800aaee <HAL_GPIO_Init+0x25a>
 800aaa2:	2306      	movs	r3, #6
 800aaa4:	e023      	b.n	800aaee <HAL_GPIO_Init+0x25a>
 800aaa6:	2305      	movs	r3, #5
 800aaa8:	e021      	b.n	800aaee <HAL_GPIO_Init+0x25a>
 800aaaa:	2304      	movs	r3, #4
 800aaac:	e01f      	b.n	800aaee <HAL_GPIO_Init+0x25a>
 800aaae:	2303      	movs	r3, #3
 800aab0:	e01d      	b.n	800aaee <HAL_GPIO_Init+0x25a>
 800aab2:	2302      	movs	r3, #2
 800aab4:	e01b      	b.n	800aaee <HAL_GPIO_Init+0x25a>
 800aab6:	2301      	movs	r3, #1
 800aab8:	e019      	b.n	800aaee <HAL_GPIO_Init+0x25a>
 800aaba:	bf00      	nop
 800aabc:	58000080 	.word	0x58000080
 800aac0:	58024400 	.word	0x58024400
 800aac4:	58000400 	.word	0x58000400
 800aac8:	58020000 	.word	0x58020000
 800aacc:	58020400 	.word	0x58020400
 800aad0:	58020800 	.word	0x58020800
 800aad4:	58020c00 	.word	0x58020c00
 800aad8:	58021000 	.word	0x58021000
 800aadc:	58021400 	.word	0x58021400
 800aae0:	58021800 	.word	0x58021800
 800aae4:	58021c00 	.word	0x58021c00
 800aae8:	58022400 	.word	0x58022400
 800aaec:	2300      	movs	r3, #0
 800aaee:	69fa      	ldr	r2, [r7, #28]
 800aaf0:	f002 0203 	and.w	r2, r2, #3
 800aaf4:	0092      	lsls	r2, r2, #2
 800aaf6:	4093      	lsls	r3, r2
 800aaf8:	69ba      	ldr	r2, [r7, #24]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800aafe:	4938      	ldr	r1, [pc, #224]	@ (800abe0 <HAL_GPIO_Init+0x34c>)
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	089b      	lsrs	r3, r3, #2
 800ab04:	3302      	adds	r3, #2
 800ab06:	69ba      	ldr	r2, [r7, #24]
 800ab08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	43db      	mvns	r3, r3
 800ab16:	69ba      	ldr	r2, [r7, #24]
 800ab18:	4013      	ands	r3, r2
 800ab1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d003      	beq.n	800ab30 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800ab28:	69ba      	ldr	r2, [r7, #24]
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	69ba      	ldr	r2, [r7, #24]
 800ab34:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	43db      	mvns	r3, r3
 800ab40:	69ba      	ldr	r2, [r7, #24]
 800ab42:	4013      	ands	r3, r2
 800ab44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d003      	beq.n	800ab5a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800ab52:	69ba      	ldr	r2, [r7, #24]
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	69ba      	ldr	r2, [r7, #24]
 800ab5e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ab60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	43db      	mvns	r3, r3
 800ab6c:	69ba      	ldr	r2, [r7, #24]
 800ab6e:	4013      	ands	r3, r2
 800ab70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d003      	beq.n	800ab86 <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 800ab7e:	69ba      	ldr	r2, [r7, #24]
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800ab86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800ab8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	43db      	mvns	r3, r3
 800ab9a:	69ba      	ldr	r2, [r7, #24]
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d003      	beq.n	800abb4 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 800abac:	69ba      	ldr	r2, [r7, #24]
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800abb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	3301      	adds	r3, #1
 800abc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	fa22 f303 	lsr.w	r3, r2, r3
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f47f ae6b 	bne.w	800a8a8 <HAL_GPIO_Init+0x14>
  }
}
 800abd2:	bf00      	nop
 800abd4:	bf00      	nop
 800abd6:	3724      	adds	r7, #36	@ 0x24
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr
 800abe0:	58000400 	.word	0x58000400

0800abe4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b087      	sub	sp, #28
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800abee:	2300      	movs	r3, #0
 800abf0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800abf2:	4b72      	ldr	r3, [pc, #456]	@ (800adbc <HAL_GPIO_DeInit+0x1d8>)
 800abf4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800abf6:	e0d3      	b.n	800ada0 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800abf8:	2201      	movs	r2, #1
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ac00:	683a      	ldr	r2, [r7, #0]
 800ac02:	4013      	ands	r3, r2
 800ac04:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f000 80c6 	beq.w	800ad9a <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800ac0e:	4a6c      	ldr	r2, [pc, #432]	@ (800adc0 <HAL_GPIO_DeInit+0x1dc>)
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	089b      	lsrs	r3, r3, #2
 800ac14:	3302      	adds	r3, #2
 800ac16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac1a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	f003 0303 	and.w	r3, r3, #3
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	220f      	movs	r2, #15
 800ac26:	fa02 f303 	lsl.w	r3, r2, r3
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	4013      	ands	r3, r2
 800ac2e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a64      	ldr	r2, [pc, #400]	@ (800adc4 <HAL_GPIO_DeInit+0x1e0>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d031      	beq.n	800ac9c <HAL_GPIO_DeInit+0xb8>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a63      	ldr	r2, [pc, #396]	@ (800adc8 <HAL_GPIO_DeInit+0x1e4>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d02b      	beq.n	800ac98 <HAL_GPIO_DeInit+0xb4>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a62      	ldr	r2, [pc, #392]	@ (800adcc <HAL_GPIO_DeInit+0x1e8>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d025      	beq.n	800ac94 <HAL_GPIO_DeInit+0xb0>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a61      	ldr	r2, [pc, #388]	@ (800add0 <HAL_GPIO_DeInit+0x1ec>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d01f      	beq.n	800ac90 <HAL_GPIO_DeInit+0xac>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a60      	ldr	r2, [pc, #384]	@ (800add4 <HAL_GPIO_DeInit+0x1f0>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d019      	beq.n	800ac8c <HAL_GPIO_DeInit+0xa8>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a5f      	ldr	r2, [pc, #380]	@ (800add8 <HAL_GPIO_DeInit+0x1f4>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d013      	beq.n	800ac88 <HAL_GPIO_DeInit+0xa4>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a5e      	ldr	r2, [pc, #376]	@ (800addc <HAL_GPIO_DeInit+0x1f8>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d00d      	beq.n	800ac84 <HAL_GPIO_DeInit+0xa0>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a5d      	ldr	r2, [pc, #372]	@ (800ade0 <HAL_GPIO_DeInit+0x1fc>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d007      	beq.n	800ac80 <HAL_GPIO_DeInit+0x9c>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a5c      	ldr	r2, [pc, #368]	@ (800ade4 <HAL_GPIO_DeInit+0x200>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d101      	bne.n	800ac7c <HAL_GPIO_DeInit+0x98>
 800ac78:	2309      	movs	r3, #9
 800ac7a:	e010      	b.n	800ac9e <HAL_GPIO_DeInit+0xba>
 800ac7c:	230a      	movs	r3, #10
 800ac7e:	e00e      	b.n	800ac9e <HAL_GPIO_DeInit+0xba>
 800ac80:	2307      	movs	r3, #7
 800ac82:	e00c      	b.n	800ac9e <HAL_GPIO_DeInit+0xba>
 800ac84:	2306      	movs	r3, #6
 800ac86:	e00a      	b.n	800ac9e <HAL_GPIO_DeInit+0xba>
 800ac88:	2305      	movs	r3, #5
 800ac8a:	e008      	b.n	800ac9e <HAL_GPIO_DeInit+0xba>
 800ac8c:	2304      	movs	r3, #4
 800ac8e:	e006      	b.n	800ac9e <HAL_GPIO_DeInit+0xba>
 800ac90:	2303      	movs	r3, #3
 800ac92:	e004      	b.n	800ac9e <HAL_GPIO_DeInit+0xba>
 800ac94:	2302      	movs	r3, #2
 800ac96:	e002      	b.n	800ac9e <HAL_GPIO_DeInit+0xba>
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e000      	b.n	800ac9e <HAL_GPIO_DeInit+0xba>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	697a      	ldr	r2, [r7, #20]
 800aca0:	f002 0203 	and.w	r2, r2, #3
 800aca4:	0092      	lsls	r2, r2, #2
 800aca6:	4093      	lsls	r3, r2
 800aca8:	68ba      	ldr	r2, [r7, #8]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d136      	bne.n	800ad1c <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	43db      	mvns	r3, r3
 800acb6:	401a      	ands	r2, r3
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	685a      	ldr	r2, [r3, #4]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	43db      	mvns	r3, r3
 800acc4:	401a      	ands	r2, r3
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800acca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	43db      	mvns	r3, r3
 800acd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800acd8:	4013      	ands	r3, r2
 800acda:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800acdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ace0:	685a      	ldr	r2, [r3, #4]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	43db      	mvns	r3, r3
 800ace6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800acea:	4013      	ands	r3, r2
 800acec:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	f003 0303 	and.w	r3, r3, #3
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	220f      	movs	r2, #15
 800acf8:	fa02 f303 	lsl.w	r3, r2, r3
 800acfc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800acfe:	4a30      	ldr	r2, [pc, #192]	@ (800adc0 <HAL_GPIO_DeInit+0x1dc>)
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	089b      	lsrs	r3, r3, #2
 800ad04:	3302      	adds	r3, #2
 800ad06:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	43da      	mvns	r2, r3
 800ad0e:	482c      	ldr	r0, [pc, #176]	@ (800adc0 <HAL_GPIO_DeInit+0x1dc>)
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	089b      	lsrs	r3, r3, #2
 800ad14:	400a      	ands	r2, r1
 800ad16:	3302      	adds	r3, #2
 800ad18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	005b      	lsls	r3, r3, #1
 800ad24:	2103      	movs	r1, #3
 800ad26:	fa01 f303 	lsl.w	r3, r1, r3
 800ad2a:	431a      	orrs	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	08da      	lsrs	r2, r3, #3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	3208      	adds	r2, #8
 800ad38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	f003 0307 	and.w	r3, r3, #7
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	220f      	movs	r2, #15
 800ad46:	fa02 f303 	lsl.w	r3, r2, r3
 800ad4a:	43db      	mvns	r3, r3
 800ad4c:	697a      	ldr	r2, [r7, #20]
 800ad4e:	08d2      	lsrs	r2, r2, #3
 800ad50:	4019      	ands	r1, r3
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	3208      	adds	r2, #8
 800ad56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	68da      	ldr	r2, [r3, #12]
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	005b      	lsls	r3, r3, #1
 800ad62:	2103      	movs	r1, #3
 800ad64:	fa01 f303 	lsl.w	r3, r1, r3
 800ad68:	43db      	mvns	r3, r3
 800ad6a:	401a      	ands	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	685a      	ldr	r2, [r3, #4]
 800ad74:	2101      	movs	r1, #1
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	fa01 f303 	lsl.w	r3, r1, r3
 800ad7c:	43db      	mvns	r3, r3
 800ad7e:	401a      	ands	r2, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	689a      	ldr	r2, [r3, #8]
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	005b      	lsls	r3, r3, #1
 800ad8c:	2103      	movs	r1, #3
 800ad8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad92:	43db      	mvns	r3, r3
 800ad94:	401a      	ands	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	609a      	str	r2, [r3, #8]
    }

    position++;
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800ada0:	683a      	ldr	r2, [r7, #0]
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	fa22 f303 	lsr.w	r3, r2, r3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f47f af25 	bne.w	800abf8 <HAL_GPIO_DeInit+0x14>
  }
}
 800adae:	bf00      	nop
 800adb0:	bf00      	nop
 800adb2:	371c      	adds	r7, #28
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr
 800adbc:	58000080 	.word	0x58000080
 800adc0:	58000400 	.word	0x58000400
 800adc4:	58020000 	.word	0x58020000
 800adc8:	58020400 	.word	0x58020400
 800adcc:	58020800 	.word	0x58020800
 800add0:	58020c00 	.word	0x58020c00
 800add4:	58021000 	.word	0x58021000
 800add8:	58021400 	.word	0x58021400
 800addc:	58021800 	.word	0x58021800
 800ade0:	58021c00 	.word	0x58021c00
 800ade4:	58022400 	.word	0x58022400

0800ade8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	460b      	mov	r3, r1
 800adf2:	807b      	strh	r3, [r7, #2]
 800adf4:	4613      	mov	r3, r2
 800adf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800adf8:	787b      	ldrb	r3, [r7, #1]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d003      	beq.n	800ae06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800adfe:	887a      	ldrh	r2, [r7, #2]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800ae04:	e003      	b.n	800ae0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ae06:	887b      	ldrh	r3, [r7, #2]
 800ae08:	041a      	lsls	r2, r3, #16
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	619a      	str	r2, [r3, #24]
}
 800ae0e:	bf00      	nop
 800ae10:	370c      	adds	r7, #12
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
	...

0800ae1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d101      	bne.n	800ae2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e07f      	b.n	800af2e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d106      	bne.n	800ae48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 f8a9 	bl	800af9a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2224      	movs	r2, #36	@ 0x24
 800ae4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f022 0201 	bic.w	r2, r2, #1
 800ae5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685a      	ldr	r2, [r3, #4]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ae6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	689a      	ldr	r2, [r3, #8]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ae7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d107      	bne.n	800ae96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	689a      	ldr	r2, [r3, #8]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ae92:	609a      	str	r2, [r3, #8]
 800ae94:	e006      	b.n	800aea4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	689a      	ldr	r2, [r3, #8]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800aea2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	68db      	ldr	r3, [r3, #12]
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d104      	bne.n	800aeb6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aeb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	6859      	ldr	r1, [r3, #4]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	4b1d      	ldr	r3, [pc, #116]	@ (800af38 <HAL_I2C_Init+0x11c>)
 800aec2:	430b      	orrs	r3, r1
 800aec4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	68da      	ldr	r2, [r3, #12]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800aed4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	691a      	ldr	r2, [r3, #16]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	695b      	ldr	r3, [r3, #20]
 800aede:	ea42 0103 	orr.w	r1, r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	699b      	ldr	r3, [r3, #24]
 800aee6:	021a      	lsls	r2, r3, #8
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	430a      	orrs	r2, r1
 800aeee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	69d9      	ldr	r1, [r3, #28]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6a1a      	ldr	r2, [r3, #32]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	430a      	orrs	r2, r1
 800aefe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f042 0201 	orr.w	r2, r2, #1
 800af0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2220      	movs	r2, #32
 800af1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3708      	adds	r7, #8
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	02008000 	.word	0x02008000

0800af3c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d101      	bne.n	800af4e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
 800af4c:	e021      	b.n	800af92 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2224      	movs	r2, #36	@ 0x24
 800af52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f022 0201 	bic.w	r2, r2, #1
 800af64:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 f821 	bl	800afae <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800af9a:	b480      	push	{r7}
 800af9c:	b083      	sub	sp, #12
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800afa2:	bf00      	nop
 800afa4:	370c      	adds	r7, #12
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr

0800afae <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800afae:	b480      	push	{r7}
 800afb0:	b083      	sub	sp, #12
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800afb6:	bf00      	nop
 800afb8:	370c      	adds	r7, #12
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
	...

0800afc4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b088      	sub	sp, #32
 800afc8:	af02      	add	r7, sp, #8
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	4608      	mov	r0, r1
 800afce:	4611      	mov	r1, r2
 800afd0:	461a      	mov	r2, r3
 800afd2:	4603      	mov	r3, r0
 800afd4:	817b      	strh	r3, [r7, #10]
 800afd6:	460b      	mov	r3, r1
 800afd8:	813b      	strh	r3, [r7, #8]
 800afda:	4613      	mov	r3, r2
 800afdc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	2b20      	cmp	r3, #32
 800afe8:	f040 80f9 	bne.w	800b1de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800afec:	6a3b      	ldr	r3, [r7, #32]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d002      	beq.n	800aff8 <HAL_I2C_Mem_Write+0x34>
 800aff2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d105      	bne.n	800b004 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800affe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	e0ed      	b.n	800b1e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d101      	bne.n	800b012 <HAL_I2C_Mem_Write+0x4e>
 800b00e:	2302      	movs	r3, #2
 800b010:	e0e6      	b.n	800b1e0 <HAL_I2C_Mem_Write+0x21c>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2201      	movs	r2, #1
 800b016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b01a:	f7fc f943 	bl	80072a4 <HAL_GetTick>
 800b01e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	9300      	str	r3, [sp, #0]
 800b024:	2319      	movs	r3, #25
 800b026:	2201      	movs	r2, #1
 800b028:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f000 fadd 	bl	800b5ec <I2C_WaitOnFlagUntilTimeout>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d001      	beq.n	800b03c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	e0d1      	b.n	800b1e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2221      	movs	r2, #33	@ 0x21
 800b040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2240      	movs	r2, #64	@ 0x40
 800b048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2200      	movs	r2, #0
 800b050:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6a3a      	ldr	r2, [r7, #32]
 800b056:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b05c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b064:	88f8      	ldrh	r0, [r7, #6]
 800b066:	893a      	ldrh	r2, [r7, #8]
 800b068:	8979      	ldrh	r1, [r7, #10]
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	9301      	str	r3, [sp, #4]
 800b06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	4603      	mov	r3, r0
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f000 f9ed 	bl	800b454 <I2C_RequestMemoryWrite>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d005      	beq.n	800b08c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	e0a9      	b.n	800b1e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b090:	b29b      	uxth	r3, r3
 800b092:	2bff      	cmp	r3, #255	@ 0xff
 800b094:	d90e      	bls.n	800b0b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	22ff      	movs	r2, #255	@ 0xff
 800b09a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0a0:	b2da      	uxtb	r2, r3
 800b0a2:	8979      	ldrh	r1, [r7, #10]
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	9300      	str	r3, [sp, #0]
 800b0a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f000 fbbf 	bl	800b830 <I2C_TransferConfig>
 800b0b2:	e00f      	b.n	800b0d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0c2:	b2da      	uxtb	r2, r3
 800b0c4:	8979      	ldrh	r1, [r7, #10]
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b0ce:	68f8      	ldr	r0, [r7, #12]
 800b0d0:	f000 fbae 	bl	800b830 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f000 fac7 	bl	800b66c <I2C_WaitOnTXISFlagUntilTimeout>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d001      	beq.n	800b0e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e07b      	b.n	800b1e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ec:	781a      	ldrb	r2, [r3, #0]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f8:	1c5a      	adds	r2, r3, #1
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b102:	b29b      	uxth	r3, r3
 800b104:	3b01      	subs	r3, #1
 800b106:	b29a      	uxth	r2, r3
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b110:	3b01      	subs	r3, #1
 800b112:	b29a      	uxth	r2, r3
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d034      	beq.n	800b18c <HAL_I2C_Mem_Write+0x1c8>
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b126:	2b00      	cmp	r3, #0
 800b128:	d130      	bne.n	800b18c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	9300      	str	r3, [sp, #0]
 800b12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b130:	2200      	movs	r2, #0
 800b132:	2180      	movs	r1, #128	@ 0x80
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f000 fa59 	bl	800b5ec <I2C_WaitOnFlagUntilTimeout>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d001      	beq.n	800b144 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b140:	2301      	movs	r3, #1
 800b142:	e04d      	b.n	800b1e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b148:	b29b      	uxth	r3, r3
 800b14a:	2bff      	cmp	r3, #255	@ 0xff
 800b14c:	d90e      	bls.n	800b16c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	22ff      	movs	r2, #255	@ 0xff
 800b152:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b158:	b2da      	uxtb	r2, r3
 800b15a:	8979      	ldrh	r1, [r7, #10]
 800b15c:	2300      	movs	r3, #0
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f000 fb63 	bl	800b830 <I2C_TransferConfig>
 800b16a:	e00f      	b.n	800b18c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b170:	b29a      	uxth	r2, r3
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b17a:	b2da      	uxtb	r2, r3
 800b17c:	8979      	ldrh	r1, [r7, #10]
 800b17e:	2300      	movs	r3, #0
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f000 fb52 	bl	800b830 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b190:	b29b      	uxth	r3, r3
 800b192:	2b00      	cmp	r3, #0
 800b194:	d19e      	bne.n	800b0d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b196:	697a      	ldr	r2, [r7, #20]
 800b198:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f000 faa6 	bl	800b6ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e01a      	b.n	800b1e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2220      	movs	r2, #32
 800b1b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	6859      	ldr	r1, [r3, #4]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	4b0a      	ldr	r3, [pc, #40]	@ (800b1e8 <HAL_I2C_Mem_Write+0x224>)
 800b1be:	400b      	ands	r3, r1
 800b1c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2220      	movs	r2, #32
 800b1c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	e000      	b.n	800b1e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b1de:	2302      	movs	r3, #2
  }
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3718      	adds	r7, #24
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	fe00e800 	.word	0xfe00e800

0800b1ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b088      	sub	sp, #32
 800b1f0:	af02      	add	r7, sp, #8
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	4608      	mov	r0, r1
 800b1f6:	4611      	mov	r1, r2
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	817b      	strh	r3, [r7, #10]
 800b1fe:	460b      	mov	r3, r1
 800b200:	813b      	strh	r3, [r7, #8]
 800b202:	4613      	mov	r3, r2
 800b204:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	2b20      	cmp	r3, #32
 800b210:	f040 80fd 	bne.w	800b40e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b214:	6a3b      	ldr	r3, [r7, #32]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d002      	beq.n	800b220 <HAL_I2C_Mem_Read+0x34>
 800b21a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d105      	bne.n	800b22c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b226:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800b228:	2301      	movs	r3, #1
 800b22a:	e0f1      	b.n	800b410 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b232:	2b01      	cmp	r3, #1
 800b234:	d101      	bne.n	800b23a <HAL_I2C_Mem_Read+0x4e>
 800b236:	2302      	movs	r3, #2
 800b238:	e0ea      	b.n	800b410 <HAL_I2C_Mem_Read+0x224>
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2201      	movs	r2, #1
 800b23e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b242:	f7fc f82f 	bl	80072a4 <HAL_GetTick>
 800b246:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	2319      	movs	r3, #25
 800b24e:	2201      	movs	r2, #1
 800b250:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f000 f9c9 	bl	800b5ec <I2C_WaitOnFlagUntilTimeout>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d001      	beq.n	800b264 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	e0d5      	b.n	800b410 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2222      	movs	r2, #34	@ 0x22
 800b268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2240      	movs	r2, #64	@ 0x40
 800b270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2200      	movs	r2, #0
 800b278:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	6a3a      	ldr	r2, [r7, #32]
 800b27e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b284:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b28c:	88f8      	ldrh	r0, [r7, #6]
 800b28e:	893a      	ldrh	r2, [r7, #8]
 800b290:	8979      	ldrh	r1, [r7, #10]
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	9301      	str	r3, [sp, #4]
 800b296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b298:	9300      	str	r3, [sp, #0]
 800b29a:	4603      	mov	r3, r0
 800b29c:	68f8      	ldr	r0, [r7, #12]
 800b29e:	f000 f92d 	bl	800b4fc <I2C_RequestMemoryRead>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d005      	beq.n	800b2b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e0ad      	b.n	800b410 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	2bff      	cmp	r3, #255	@ 0xff
 800b2bc:	d90e      	bls.n	800b2dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	22ff      	movs	r2, #255	@ 0xff
 800b2c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2c8:	b2da      	uxtb	r2, r3
 800b2ca:	8979      	ldrh	r1, [r7, #10]
 800b2cc:	4b52      	ldr	r3, [pc, #328]	@ (800b418 <HAL_I2C_Mem_Read+0x22c>)
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f000 faab 	bl	800b830 <I2C_TransferConfig>
 800b2da:	e00f      	b.n	800b2fc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2e0:	b29a      	uxth	r2, r3
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2ea:	b2da      	uxtb	r2, r3
 800b2ec:	8979      	ldrh	r1, [r7, #10]
 800b2ee:	4b4a      	ldr	r3, [pc, #296]	@ (800b418 <HAL_I2C_Mem_Read+0x22c>)
 800b2f0:	9300      	str	r3, [sp, #0]
 800b2f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f000 fa9a 	bl	800b830 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	9300      	str	r3, [sp, #0]
 800b300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b302:	2200      	movs	r2, #0
 800b304:	2104      	movs	r1, #4
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f000 f970 	bl	800b5ec <I2C_WaitOnFlagUntilTimeout>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d001      	beq.n	800b316 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	e07c      	b.n	800b410 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b320:	b2d2      	uxtb	r2, r2
 800b322:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b328:	1c5a      	adds	r2, r3, #1
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b332:	3b01      	subs	r3, #1
 800b334:	b29a      	uxth	r2, r3
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b33e:	b29b      	uxth	r3, r3
 800b340:	3b01      	subs	r3, #1
 800b342:	b29a      	uxth	r2, r3
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d034      	beq.n	800b3bc <HAL_I2C_Mem_Read+0x1d0>
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b356:	2b00      	cmp	r3, #0
 800b358:	d130      	bne.n	800b3bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b360:	2200      	movs	r2, #0
 800b362:	2180      	movs	r1, #128	@ 0x80
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f000 f941 	bl	800b5ec <I2C_WaitOnFlagUntilTimeout>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d001      	beq.n	800b374 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	e04d      	b.n	800b410 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b378:	b29b      	uxth	r3, r3
 800b37a:	2bff      	cmp	r3, #255	@ 0xff
 800b37c:	d90e      	bls.n	800b39c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	22ff      	movs	r2, #255	@ 0xff
 800b382:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b388:	b2da      	uxtb	r2, r3
 800b38a:	8979      	ldrh	r1, [r7, #10]
 800b38c:	2300      	movs	r3, #0
 800b38e:	9300      	str	r3, [sp, #0]
 800b390:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f000 fa4b 	bl	800b830 <I2C_TransferConfig>
 800b39a:	e00f      	b.n	800b3bc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3aa:	b2da      	uxtb	r2, r3
 800b3ac:	8979      	ldrh	r1, [r7, #10]
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	9300      	str	r3, [sp, #0]
 800b3b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f000 fa3a 	bl	800b830 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d19a      	bne.n	800b2fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b3c6:	697a      	ldr	r2, [r7, #20]
 800b3c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	f000 f98e 	bl	800b6ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d001      	beq.n	800b3da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	e01a      	b.n	800b410 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2220      	movs	r2, #32
 800b3e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	6859      	ldr	r1, [r3, #4]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b41c <HAL_I2C_Mem_Read+0x230>)
 800b3ee:	400b      	ands	r3, r1
 800b3f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2220      	movs	r2, #32
 800b3f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b40a:	2300      	movs	r3, #0
 800b40c:	e000      	b.n	800b410 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b40e:	2302      	movs	r3, #2
  }
}
 800b410:	4618      	mov	r0, r3
 800b412:	3718      	adds	r7, #24
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	80002400 	.word	0x80002400
 800b41c:	fe00e800 	.word	0xfe00e800

0800b420 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b42e:	b2db      	uxtb	r3, r3
}
 800b430:	4618      	mov	r0, r3
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800b448:	4618      	mov	r0, r3
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b086      	sub	sp, #24
 800b458:	af02      	add	r7, sp, #8
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	4608      	mov	r0, r1
 800b45e:	4611      	mov	r1, r2
 800b460:	461a      	mov	r2, r3
 800b462:	4603      	mov	r3, r0
 800b464:	817b      	strh	r3, [r7, #10]
 800b466:	460b      	mov	r3, r1
 800b468:	813b      	strh	r3, [r7, #8]
 800b46a:	4613      	mov	r3, r2
 800b46c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b46e:	88fb      	ldrh	r3, [r7, #6]
 800b470:	b2da      	uxtb	r2, r3
 800b472:	8979      	ldrh	r1, [r7, #10]
 800b474:	4b20      	ldr	r3, [pc, #128]	@ (800b4f8 <I2C_RequestMemoryWrite+0xa4>)
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b47c:	68f8      	ldr	r0, [r7, #12]
 800b47e:	f000 f9d7 	bl	800b830 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b482:	69fa      	ldr	r2, [r7, #28]
 800b484:	69b9      	ldr	r1, [r7, #24]
 800b486:	68f8      	ldr	r0, [r7, #12]
 800b488:	f000 f8f0 	bl	800b66c <I2C_WaitOnTXISFlagUntilTimeout>
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d001      	beq.n	800b496 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b492:	2301      	movs	r3, #1
 800b494:	e02c      	b.n	800b4f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b496:	88fb      	ldrh	r3, [r7, #6]
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d105      	bne.n	800b4a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b49c:	893b      	ldrh	r3, [r7, #8]
 800b49e:	b2da      	uxtb	r2, r3
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	629a      	str	r2, [r3, #40]	@ 0x28
 800b4a6:	e015      	b.n	800b4d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b4a8:	893b      	ldrh	r3, [r7, #8]
 800b4aa:	0a1b      	lsrs	r3, r3, #8
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	b2da      	uxtb	r2, r3
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b4b6:	69fa      	ldr	r2, [r7, #28]
 800b4b8:	69b9      	ldr	r1, [r7, #24]
 800b4ba:	68f8      	ldr	r0, [r7, #12]
 800b4bc:	f000 f8d6 	bl	800b66c <I2C_WaitOnTXISFlagUntilTimeout>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d001      	beq.n	800b4ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e012      	b.n	800b4f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b4ca:	893b      	ldrh	r3, [r7, #8]
 800b4cc:	b2da      	uxtb	r2, r3
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	2180      	movs	r1, #128	@ 0x80
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f000 f884 	bl	800b5ec <I2C_WaitOnFlagUntilTimeout>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d001      	beq.n	800b4ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e000      	b.n	800b4f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	80002000 	.word	0x80002000

0800b4fc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b086      	sub	sp, #24
 800b500:	af02      	add	r7, sp, #8
 800b502:	60f8      	str	r0, [r7, #12]
 800b504:	4608      	mov	r0, r1
 800b506:	4611      	mov	r1, r2
 800b508:	461a      	mov	r2, r3
 800b50a:	4603      	mov	r3, r0
 800b50c:	817b      	strh	r3, [r7, #10]
 800b50e:	460b      	mov	r3, r1
 800b510:	813b      	strh	r3, [r7, #8]
 800b512:	4613      	mov	r3, r2
 800b514:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b516:	88fb      	ldrh	r3, [r7, #6]
 800b518:	b2da      	uxtb	r2, r3
 800b51a:	8979      	ldrh	r1, [r7, #10]
 800b51c:	4b20      	ldr	r3, [pc, #128]	@ (800b5a0 <I2C_RequestMemoryRead+0xa4>)
 800b51e:	9300      	str	r3, [sp, #0]
 800b520:	2300      	movs	r3, #0
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	f000 f984 	bl	800b830 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b528:	69fa      	ldr	r2, [r7, #28]
 800b52a:	69b9      	ldr	r1, [r7, #24]
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f000 f89d 	bl	800b66c <I2C_WaitOnTXISFlagUntilTimeout>
 800b532:	4603      	mov	r3, r0
 800b534:	2b00      	cmp	r3, #0
 800b536:	d001      	beq.n	800b53c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b538:	2301      	movs	r3, #1
 800b53a:	e02c      	b.n	800b596 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b53c:	88fb      	ldrh	r3, [r7, #6]
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d105      	bne.n	800b54e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b542:	893b      	ldrh	r3, [r7, #8]
 800b544:	b2da      	uxtb	r2, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	629a      	str	r2, [r3, #40]	@ 0x28
 800b54c:	e015      	b.n	800b57a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b54e:	893b      	ldrh	r3, [r7, #8]
 800b550:	0a1b      	lsrs	r3, r3, #8
 800b552:	b29b      	uxth	r3, r3
 800b554:	b2da      	uxtb	r2, r3
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b55c:	69fa      	ldr	r2, [r7, #28]
 800b55e:	69b9      	ldr	r1, [r7, #24]
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f000 f883 	bl	800b66c <I2C_WaitOnTXISFlagUntilTimeout>
 800b566:	4603      	mov	r3, r0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d001      	beq.n	800b570 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b56c:	2301      	movs	r3, #1
 800b56e:	e012      	b.n	800b596 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b570:	893b      	ldrh	r3, [r7, #8]
 800b572:	b2da      	uxtb	r2, r3
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	2200      	movs	r2, #0
 800b582:	2140      	movs	r1, #64	@ 0x40
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f000 f831 	bl	800b5ec <I2C_WaitOnFlagUntilTimeout>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d001      	beq.n	800b594 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b590:	2301      	movs	r3, #1
 800b592:	e000      	b.n	800b596 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	80002000 	.word	0x80002000

0800b5a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	699b      	ldr	r3, [r3, #24]
 800b5b2:	f003 0302 	and.w	r3, r3, #2
 800b5b6:	2b02      	cmp	r3, #2
 800b5b8:	d103      	bne.n	800b5c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	699b      	ldr	r3, [r3, #24]
 800b5c8:	f003 0301 	and.w	r3, r3, #1
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d007      	beq.n	800b5e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	699a      	ldr	r2, [r3, #24]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f042 0201 	orr.w	r2, r2, #1
 800b5de:	619a      	str	r2, [r3, #24]
  }
}
 800b5e0:	bf00      	nop
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	603b      	str	r3, [r7, #0]
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b5fc:	e022      	b.n	800b644 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b604:	d01e      	beq.n	800b644 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b606:	f7fb fe4d 	bl	80072a4 <HAL_GetTick>
 800b60a:	4602      	mov	r2, r0
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	683a      	ldr	r2, [r7, #0]
 800b612:	429a      	cmp	r2, r3
 800b614:	d302      	bcc.n	800b61c <I2C_WaitOnFlagUntilTimeout+0x30>
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d113      	bne.n	800b644 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b620:	f043 0220 	orr.w	r2, r3, #32
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2220      	movs	r2, #32
 800b62c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2200      	movs	r2, #0
 800b634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800b640:	2301      	movs	r3, #1
 800b642:	e00f      	b.n	800b664 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	699a      	ldr	r2, [r3, #24]
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	4013      	ands	r3, r2
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	429a      	cmp	r2, r3
 800b652:	bf0c      	ite	eq
 800b654:	2301      	moveq	r3, #1
 800b656:	2300      	movne	r3, #0
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	461a      	mov	r2, r3
 800b65c:	79fb      	ldrb	r3, [r7, #7]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d0cd      	beq.n	800b5fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b662:	2300      	movs	r3, #0
}
 800b664:	4618      	mov	r0, r3
 800b666:	3710      	adds	r7, #16
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b678:	e02c      	b.n	800b6d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	68b9      	ldr	r1, [r7, #8]
 800b67e:	68f8      	ldr	r0, [r7, #12]
 800b680:	f000 f870 	bl	800b764 <I2C_IsAcknowledgeFailed>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d001      	beq.n	800b68e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b68a:	2301      	movs	r3, #1
 800b68c:	e02a      	b.n	800b6e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b694:	d01e      	beq.n	800b6d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b696:	f7fb fe05 	bl	80072a4 <HAL_GetTick>
 800b69a:	4602      	mov	r2, r0
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	68ba      	ldr	r2, [r7, #8]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d302      	bcc.n	800b6ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d113      	bne.n	800b6d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6b0:	f043 0220 	orr.w	r2, r3, #32
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2220      	movs	r2, #32
 800b6bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e007      	b.n	800b6e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	699b      	ldr	r3, [r3, #24]
 800b6da:	f003 0302 	and.w	r3, r3, #2
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	d1cb      	bne.n	800b67a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b6f8:	e028      	b.n	800b74c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	68b9      	ldr	r1, [r7, #8]
 800b6fe:	68f8      	ldr	r0, [r7, #12]
 800b700:	f000 f830 	bl	800b764 <I2C_IsAcknowledgeFailed>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d001      	beq.n	800b70e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	e026      	b.n	800b75c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b70e:	f7fb fdc9 	bl	80072a4 <HAL_GetTick>
 800b712:	4602      	mov	r2, r0
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	1ad3      	subs	r3, r2, r3
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d302      	bcc.n	800b724 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d113      	bne.n	800b74c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b728:	f043 0220 	orr.w	r2, r3, #32
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2220      	movs	r2, #32
 800b734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800b748:	2301      	movs	r3, #1
 800b74a:	e007      	b.n	800b75c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	699b      	ldr	r3, [r3, #24]
 800b752:	f003 0320 	and.w	r3, r3, #32
 800b756:	2b20      	cmp	r3, #32
 800b758:	d1cf      	bne.n	800b6fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	699b      	ldr	r3, [r3, #24]
 800b776:	f003 0310 	and.w	r3, r3, #16
 800b77a:	2b10      	cmp	r3, #16
 800b77c:	d151      	bne.n	800b822 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b77e:	e022      	b.n	800b7c6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b786:	d01e      	beq.n	800b7c6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b788:	f7fb fd8c 	bl	80072a4 <HAL_GetTick>
 800b78c:	4602      	mov	r2, r0
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	1ad3      	subs	r3, r2, r3
 800b792:	68ba      	ldr	r2, [r7, #8]
 800b794:	429a      	cmp	r2, r3
 800b796:	d302      	bcc.n	800b79e <I2C_IsAcknowledgeFailed+0x3a>
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d113      	bne.n	800b7c6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7a2:	f043 0220 	orr.w	r2, r3, #32
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2220      	movs	r2, #32
 800b7ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e02e      	b.n	800b824 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	f003 0320 	and.w	r3, r3, #32
 800b7d0:	2b20      	cmp	r3, #32
 800b7d2:	d1d5      	bne.n	800b780 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2210      	movs	r2, #16
 800b7da:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2220      	movs	r2, #32
 800b7e2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f7ff fedd 	bl	800b5a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	6859      	ldr	r1, [r3, #4]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	4b0d      	ldr	r3, [pc, #52]	@ (800b82c <I2C_IsAcknowledgeFailed+0xc8>)
 800b7f6:	400b      	ands	r3, r1
 800b7f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7fe:	f043 0204 	orr.w	r2, r3, #4
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2220      	movs	r2, #32
 800b80a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2200      	movs	r2, #0
 800b812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800b81e:	2301      	movs	r3, #1
 800b820:	e000      	b.n	800b824 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800b822:	2300      	movs	r3, #0
}
 800b824:	4618      	mov	r0, r3
 800b826:	3710      	adds	r7, #16
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	fe00e800 	.word	0xfe00e800

0800b830 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b830:	b480      	push	{r7}
 800b832:	b085      	sub	sp, #20
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	607b      	str	r3, [r7, #4]
 800b83a:	460b      	mov	r3, r1
 800b83c:	817b      	strh	r3, [r7, #10]
 800b83e:	4613      	mov	r3, r2
 800b840:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	685a      	ldr	r2, [r3, #4]
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	0d5b      	lsrs	r3, r3, #21
 800b84c:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800b850:	4b0d      	ldr	r3, [pc, #52]	@ (800b888 <I2C_TransferConfig+0x58>)
 800b852:	430b      	orrs	r3, r1
 800b854:	43db      	mvns	r3, r3
 800b856:	ea02 0103 	and.w	r1, r2, r3
 800b85a:	897b      	ldrh	r3, [r7, #10]
 800b85c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b860:	7a7b      	ldrb	r3, [r7, #9]
 800b862:	041b      	lsls	r3, r3, #16
 800b864:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b868:	431a      	orrs	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	431a      	orrs	r2, r3
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	431a      	orrs	r2, r3
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	430a      	orrs	r2, r1
 800b878:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b87a:	bf00      	nop
 800b87c:	3714      	adds	r7, #20
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	03ff63ff 	.word	0x03ff63ff

0800b88c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	2b20      	cmp	r3, #32
 800b8a0:	d138      	bne.n	800b914 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d101      	bne.n	800b8b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	e032      	b.n	800b916 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2224      	movs	r2, #36	@ 0x24
 800b8bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f022 0201 	bic.w	r2, r2, #1
 800b8ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b8de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	6819      	ldr	r1, [r3, #0]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	683a      	ldr	r2, [r7, #0]
 800b8ec:	430a      	orrs	r2, r1
 800b8ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f042 0201 	orr.w	r2, r2, #1
 800b8fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2220      	movs	r2, #32
 800b904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b910:	2300      	movs	r3, #0
 800b912:	e000      	b.n	800b916 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b914:	2302      	movs	r3, #2
  }
}
 800b916:	4618      	mov	r0, r3
 800b918:	370c      	adds	r7, #12
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr

0800b922 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b922:	b480      	push	{r7}
 800b924:	b085      	sub	sp, #20
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b932:	b2db      	uxtb	r3, r3
 800b934:	2b20      	cmp	r3, #32
 800b936:	d139      	bne.n	800b9ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d101      	bne.n	800b946 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b942:	2302      	movs	r3, #2
 800b944:	e033      	b.n	800b9ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2201      	movs	r2, #1
 800b94a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2224      	movs	r2, #36	@ 0x24
 800b952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f022 0201 	bic.w	r2, r2, #1
 800b964:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b974:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	021b      	lsls	r3, r3, #8
 800b97a:	68fa      	ldr	r2, [r7, #12]
 800b97c:	4313      	orrs	r3, r2
 800b97e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f042 0201 	orr.w	r2, r2, #1
 800b996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2220      	movs	r2, #32
 800b99c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	e000      	b.n	800b9ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b9ac:	2302      	movs	r3, #2
  }
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3714      	adds	r7, #20
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
	...

0800b9bc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d101      	bne.n	800b9ce <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e0bf      	b.n	800bb4e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d106      	bne.n	800b9e8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 f8ba 	bl	800bb5c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2202      	movs	r2, #2
 800b9ec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	699a      	ldr	r2, [r3, #24]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800b9fe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	6999      	ldr	r1, [r3, #24]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	685a      	ldr	r2, [r3, #4]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ba14:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	430a      	orrs	r2, r1
 800ba22:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	6899      	ldr	r1, [r3, #8]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	4b4a      	ldr	r3, [pc, #296]	@ (800bb58 <HAL_LTDC_Init+0x19c>)
 800ba30:	400b      	ands	r3, r1
 800ba32:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	695b      	ldr	r3, [r3, #20]
 800ba38:	041b      	lsls	r3, r3, #16
 800ba3a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	6899      	ldr	r1, [r3, #8]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	699a      	ldr	r2, [r3, #24]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	431a      	orrs	r2, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	430a      	orrs	r2, r1
 800ba50:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	68d9      	ldr	r1, [r3, #12]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	4b3e      	ldr	r3, [pc, #248]	@ (800bb58 <HAL_LTDC_Init+0x19c>)
 800ba5e:	400b      	ands	r3, r1
 800ba60:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	69db      	ldr	r3, [r3, #28]
 800ba66:	041b      	lsls	r3, r3, #16
 800ba68:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	68d9      	ldr	r1, [r3, #12]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6a1a      	ldr	r2, [r3, #32]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	431a      	orrs	r2, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	430a      	orrs	r2, r1
 800ba7e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	6919      	ldr	r1, [r3, #16]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681a      	ldr	r2, [r3, #0]
 800ba8a:	4b33      	ldr	r3, [pc, #204]	@ (800bb58 <HAL_LTDC_Init+0x19c>)
 800ba8c:	400b      	ands	r3, r1
 800ba8e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba94:	041b      	lsls	r3, r3, #16
 800ba96:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	6919      	ldr	r1, [r3, #16]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	431a      	orrs	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	430a      	orrs	r2, r1
 800baac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	6959      	ldr	r1, [r3, #20]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	4b27      	ldr	r3, [pc, #156]	@ (800bb58 <HAL_LTDC_Init+0x19c>)
 800baba:	400b      	ands	r3, r1
 800babc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac2:	041b      	lsls	r3, r3, #16
 800bac4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	6959      	ldr	r1, [r3, #20]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	431a      	orrs	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	430a      	orrs	r2, r1
 800bada:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bae2:	021b      	lsls	r3, r3, #8
 800bae4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800baec:	041b      	lsls	r3, r3, #16
 800baee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800bafe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800bb12:	431a      	orrs	r2, r3
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	430a      	orrs	r2, r1
 800bb1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f042 0206 	orr.w	r2, r2, #6
 800bb2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	699a      	ldr	r2, [r3, #24]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f042 0201 	orr.w	r2, r2, #1
 800bb3a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2201      	movs	r2, #1
 800bb48:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	f000f800 	.word	0xf000f800

0800bb5c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800bb64:	bf00      	nop
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800bb70:	b5b0      	push	{r4, r5, r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d101      	bne.n	800bb8a <HAL_LTDC_ConfigLayer+0x1a>
 800bb86:	2302      	movs	r3, #2
 800bb88:	e02c      	b.n	800bbe4 <HAL_LTDC_ConfigLayer+0x74>
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2202      	movs	r2, #2
 800bb96:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2134      	movs	r1, #52	@ 0x34
 800bba0:	fb01 f303 	mul.w	r3, r1, r3
 800bba4:	4413      	add	r3, r2
 800bba6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	4614      	mov	r4, r2
 800bbae:	461d      	mov	r5, r3
 800bbb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbbc:	682b      	ldr	r3, [r5, #0]
 800bbbe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	68b9      	ldr	r1, [r7, #8]
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	f000 f811 	bl	800bbec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2201      	movs	r2, #1
 800bbd0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bdb0      	pop	{r4, r5, r7, pc}

0800bbec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b089      	sub	sp, #36	@ 0x24
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	685a      	ldr	r2, [r3, #4]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	0c1b      	lsrs	r3, r3, #16
 800bc04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc08:	4413      	add	r3, r2
 800bc0a:	041b      	lsls	r3, r3, #16
 800bc0c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	461a      	mov	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	01db      	lsls	r3, r3, #7
 800bc18:	4413      	add	r3, r2
 800bc1a:	3384      	adds	r3, #132	@ 0x84
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	68fa      	ldr	r2, [r7, #12]
 800bc20:	6812      	ldr	r2, [r2, #0]
 800bc22:	4611      	mov	r1, r2
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	01d2      	lsls	r2, r2, #7
 800bc28:	440a      	add	r2, r1
 800bc2a:	3284      	adds	r2, #132	@ 0x84
 800bc2c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800bc30:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	0c1b      	lsrs	r3, r3, #16
 800bc3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc42:	4413      	add	r3, r2
 800bc44:	1c5a      	adds	r2, r3, #1
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	01db      	lsls	r3, r3, #7
 800bc50:	440b      	add	r3, r1
 800bc52:	3384      	adds	r3, #132	@ 0x84
 800bc54:	4619      	mov	r1, r3
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	68da      	ldr	r2, [r3, #12]
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc6a:	4413      	add	r3, r2
 800bc6c:	041b      	lsls	r3, r3, #16
 800bc6e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	461a      	mov	r2, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	01db      	lsls	r3, r3, #7
 800bc7a:	4413      	add	r3, r2
 800bc7c:	3384      	adds	r3, #132	@ 0x84
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	68fa      	ldr	r2, [r7, #12]
 800bc82:	6812      	ldr	r2, [r2, #0]
 800bc84:	4611      	mov	r1, r2
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	01d2      	lsls	r2, r2, #7
 800bc8a:	440a      	add	r2, r1
 800bc8c:	3284      	adds	r2, #132	@ 0x84
 800bc8e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800bc92:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	689a      	ldr	r2, [r3, #8]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bca2:	4413      	add	r3, r2
 800bca4:	1c5a      	adds	r2, r3, #1
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4619      	mov	r1, r3
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	01db      	lsls	r3, r3, #7
 800bcb0:	440b      	add	r3, r1
 800bcb2:	3384      	adds	r3, #132	@ 0x84
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	69fb      	ldr	r3, [r7, #28]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	01db      	lsls	r3, r3, #7
 800bcc6:	4413      	add	r3, r2
 800bcc8:	3384      	adds	r3, #132	@ 0x84
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	6812      	ldr	r2, [r2, #0]
 800bcd0:	4611      	mov	r1, r2
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	01d2      	lsls	r2, r2, #7
 800bcd6:	440a      	add	r2, r1
 800bcd8:	3284      	adds	r2, #132	@ 0x84
 800bcda:	f023 0307 	bic.w	r3, r3, #7
 800bcde:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	461a      	mov	r2, r3
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	01db      	lsls	r3, r3, #7
 800bcea:	4413      	add	r3, r2
 800bcec:	3384      	adds	r3, #132	@ 0x84
 800bcee:	461a      	mov	r2, r3
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	691b      	ldr	r3, [r3, #16]
 800bcf4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bcfc:	021b      	lsls	r3, r3, #8
 800bcfe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800bd06:	041b      	lsls	r3, r3, #16
 800bd08:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	699b      	ldr	r3, [r3, #24]
 800bd0e:	061b      	lsls	r3, r3, #24
 800bd10:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	461a      	mov	r2, r3
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	01db      	lsls	r3, r3, #7
 800bd1c:	4413      	add	r3, r2
 800bd1e:	3384      	adds	r3, #132	@ 0x84
 800bd20:	699b      	ldr	r3, [r3, #24]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	461a      	mov	r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	01db      	lsls	r3, r3, #7
 800bd2c:	4413      	add	r3, r2
 800bd2e:	3384      	adds	r3, #132	@ 0x84
 800bd30:	461a      	mov	r2, r3
 800bd32:	2300      	movs	r3, #0
 800bd34:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	431a      	orrs	r2, r3
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	431a      	orrs	r2, r3
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	01db      	lsls	r3, r3, #7
 800bd50:	440b      	add	r3, r1
 800bd52:	3384      	adds	r3, #132	@ 0x84
 800bd54:	4619      	mov	r1, r3
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	461a      	mov	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	01db      	lsls	r3, r3, #7
 800bd66:	4413      	add	r3, r2
 800bd68:	3384      	adds	r3, #132	@ 0x84
 800bd6a:	695b      	ldr	r3, [r3, #20]
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	6812      	ldr	r2, [r2, #0]
 800bd70:	4611      	mov	r1, r2
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	01d2      	lsls	r2, r2, #7
 800bd76:	440a      	add	r2, r1
 800bd78:	3284      	adds	r2, #132	@ 0x84
 800bd7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bd7e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	461a      	mov	r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	01db      	lsls	r3, r3, #7
 800bd8a:	4413      	add	r3, r2
 800bd8c:	3384      	adds	r3, #132	@ 0x84
 800bd8e:	461a      	mov	r2, r3
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	695b      	ldr	r3, [r3, #20]
 800bd94:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	01db      	lsls	r3, r3, #7
 800bda0:	4413      	add	r3, r2
 800bda2:	3384      	adds	r3, #132	@ 0x84
 800bda4:	69da      	ldr	r2, [r3, #28]
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4619      	mov	r1, r3
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	01db      	lsls	r3, r3, #7
 800bdb0:	440b      	add	r3, r1
 800bdb2:	3384      	adds	r3, #132	@ 0x84
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	4b58      	ldr	r3, [pc, #352]	@ (800bf18 <LTDC_SetConfig+0x32c>)
 800bdb8:	4013      	ands	r3, r2
 800bdba:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	69da      	ldr	r2, [r3, #28]
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	6a1b      	ldr	r3, [r3, #32]
 800bdc4:	68f9      	ldr	r1, [r7, #12]
 800bdc6:	6809      	ldr	r1, [r1, #0]
 800bdc8:	4608      	mov	r0, r1
 800bdca:	6879      	ldr	r1, [r7, #4]
 800bdcc:	01c9      	lsls	r1, r1, #7
 800bdce:	4401      	add	r1, r0
 800bdd0:	3184      	adds	r1, #132	@ 0x84
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	461a      	mov	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	01db      	lsls	r3, r3, #7
 800bde0:	4413      	add	r3, r2
 800bde2:	3384      	adds	r3, #132	@ 0x84
 800bde4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	461a      	mov	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	01db      	lsls	r3, r3, #7
 800bdf0:	4413      	add	r3, r2
 800bdf2:	3384      	adds	r3, #132	@ 0x84
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	461a      	mov	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	01db      	lsls	r3, r3, #7
 800be04:	4413      	add	r3, r2
 800be06:	3384      	adds	r3, #132	@ 0x84
 800be08:	461a      	mov	r2, r3
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be0e:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	691b      	ldr	r3, [r3, #16]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d102      	bne.n	800be1e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800be18:	2304      	movs	r3, #4
 800be1a:	61fb      	str	r3, [r7, #28]
 800be1c:	e01b      	b.n	800be56 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	691b      	ldr	r3, [r3, #16]
 800be22:	2b01      	cmp	r3, #1
 800be24:	d102      	bne.n	800be2c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800be26:	2303      	movs	r3, #3
 800be28:	61fb      	str	r3, [r7, #28]
 800be2a:	e014      	b.n	800be56 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	2b04      	cmp	r3, #4
 800be32:	d00b      	beq.n	800be4c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800be38:	2b02      	cmp	r3, #2
 800be3a:	d007      	beq.n	800be4c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800be40:	2b03      	cmp	r3, #3
 800be42:	d003      	beq.n	800be4c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800be48:	2b07      	cmp	r3, #7
 800be4a:	d102      	bne.n	800be52 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800be4c:	2302      	movs	r3, #2
 800be4e:	61fb      	str	r3, [r7, #28]
 800be50:	e001      	b.n	800be56 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800be52:	2301      	movs	r3, #1
 800be54:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	461a      	mov	r2, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	01db      	lsls	r3, r3, #7
 800be60:	4413      	add	r3, r2
 800be62:	3384      	adds	r3, #132	@ 0x84
 800be64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be66:	68fa      	ldr	r2, [r7, #12]
 800be68:	6812      	ldr	r2, [r2, #0]
 800be6a:	4611      	mov	r1, r2
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	01d2      	lsls	r2, r2, #7
 800be70:	440a      	add	r2, r1
 800be72:	3284      	adds	r2, #132	@ 0x84
 800be74:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800be78:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be7e:	69fa      	ldr	r2, [r7, #28]
 800be80:	fb02 f303 	mul.w	r3, r2, r3
 800be84:	041a      	lsls	r2, r3, #16
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	6859      	ldr	r1, [r3, #4]
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	1acb      	subs	r3, r1, r3
 800be90:	69f9      	ldr	r1, [r7, #28]
 800be92:	fb01 f303 	mul.w	r3, r1, r3
 800be96:	3307      	adds	r3, #7
 800be98:	68f9      	ldr	r1, [r7, #12]
 800be9a:	6809      	ldr	r1, [r1, #0]
 800be9c:	4608      	mov	r0, r1
 800be9e:	6879      	ldr	r1, [r7, #4]
 800bea0:	01c9      	lsls	r1, r1, #7
 800bea2:	4401      	add	r1, r0
 800bea4:	3184      	adds	r1, #132	@ 0x84
 800bea6:	4313      	orrs	r3, r2
 800bea8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	461a      	mov	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	01db      	lsls	r3, r3, #7
 800beb4:	4413      	add	r3, r2
 800beb6:	3384      	adds	r3, #132	@ 0x84
 800beb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4619      	mov	r1, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	01db      	lsls	r3, r3, #7
 800bec4:	440b      	add	r3, r1
 800bec6:	3384      	adds	r3, #132	@ 0x84
 800bec8:	4619      	mov	r1, r3
 800beca:	4b14      	ldr	r3, [pc, #80]	@ (800bf1c <LTDC_SetConfig+0x330>)
 800becc:	4013      	ands	r3, r2
 800bece:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	461a      	mov	r2, r3
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	01db      	lsls	r3, r3, #7
 800beda:	4413      	add	r3, r2
 800bedc:	3384      	adds	r3, #132	@ 0x84
 800bede:	461a      	mov	r2, r3
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bee4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	461a      	mov	r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	01db      	lsls	r3, r3, #7
 800bef0:	4413      	add	r3, r2
 800bef2:	3384      	adds	r3, #132	@ 0x84
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	6812      	ldr	r2, [r2, #0]
 800befa:	4611      	mov	r1, r2
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	01d2      	lsls	r2, r2, #7
 800bf00:	440a      	add	r2, r1
 800bf02:	3284      	adds	r2, #132	@ 0x84
 800bf04:	f043 0301 	orr.w	r3, r3, #1
 800bf08:	6013      	str	r3, [r2, #0]
}
 800bf0a:	bf00      	nop
 800bf0c:	3724      	adds	r7, #36	@ 0x24
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr
 800bf16:	bf00      	nop
 800bf18:	fffff8f8 	.word	0xfffff8f8
 800bf1c:	fffff800 	.word	0xfffff800

0800bf20 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bf28:	f7fb f9bc 	bl	80072a4 <HAL_GetTick>
 800bf2c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d101      	bne.n	800bf38 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800bf34:	2301      	movs	r3, #1
 800bf36:	e03b      	b.n	800bfb0 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2202      	movs	r2, #2
 800bf44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68da      	ldr	r2, [r3, #12]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f022 0201 	bic.w	r2, r2, #1
 800bf56:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800bf58:	e00f      	b.n	800bf7a <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800bf5a:	f7fb f9a3 	bl	80072a4 <HAL_GetTick>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	1ad3      	subs	r3, r2, r3
 800bf64:	2b05      	cmp	r3, #5
 800bf66:	d908      	bls.n	800bf7a <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2240      	movs	r2, #64	@ 0x40
 800bf6c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2203      	movs	r2, #3
 800bf72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800bf76:	2301      	movs	r3, #1
 800bf78:	e01a      	b.n	800bfb0 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	f003 0301 	and.w	r3, r3, #1
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d1e8      	bne.n	800bf5a <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 f815 	bl	800bfb8 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bfae:	2300      	movs	r3, #0
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3710      	adds	r7, #16
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	68d9      	ldr	r1, [r3, #12]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	691a      	ldr	r2, [r3, #16]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	430a      	orrs	r2, r1
 800bfce:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	695a      	ldr	r2, [r3, #20]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	699b      	ldr	r3, [r3, #24]
 800bfd8:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bfde:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6a1b      	ldr	r3, [r3, #32]
 800bfe4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800bfea:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bff0:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bff6:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bffc:	3b01      	subs	r3, #1
 800bffe:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800c000:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800c00c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c00e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c018:	d107      	bne.n	800c02a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	691a      	ldr	r2, [r3, #16]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800c028:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	2200      	movs	r2, #0
 800c030:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c036:	2b00      	cmp	r3, #0
 800c038:	da11      	bge.n	800c05e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	695a      	ldr	r2, [r3, #20]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c048:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c04e:	425b      	negs	r3, r3
 800c050:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	68fa      	ldr	r2, [r7, #12]
 800c058:	b292      	uxth	r2, r2
 800c05a:	621a      	str	r2, [r3, #32]
 800c05c:	e006      	b.n	800c06c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c062:	461a      	mov	r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	b292      	uxth	r2, r2
 800c06a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c070:	2b00      	cmp	r3, #0
 800c072:	da15      	bge.n	800c0a0 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	695a      	ldr	r2, [r3, #20]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800c082:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c088:	425b      	negs	r3, r3
 800c08a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	6a19      	ldr	r1, [r3, #32]
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	041a      	lsls	r2, r3, #16
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	430a      	orrs	r2, r1
 800c09c:	621a      	str	r2, [r3, #32]
 800c09e:	e009      	b.n	800c0b4 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	6a19      	ldr	r1, [r3, #32]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0aa:	041a      	lsls	r2, r3, #16
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	430a      	orrs	r2, r1
 800c0b2:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0bc:	d006      	beq.n	800c0cc <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	685a      	ldr	r2, [r3, #4]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	b2d2      	uxtb	r2, r2
 800c0c8:	629a      	str	r2, [r3, #40]	@ 0x28
 800c0ca:	e003      	b.n	800c0d4 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800c0dc:	bf00      	nop
 800c0de:	3714      	adds	r7, #20
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	af00      	add	r7, sp, #0

}
 800c0ec:	bf00      	nop
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr
	...

0800c0f8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b086      	sub	sp, #24
 800c0fc:	af02      	add	r7, sp, #8
 800c0fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c100:	2300      	movs	r3, #0
 800c102:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800c104:	f7fb f8ce 	bl	80072a4 <HAL_GetTick>
 800c108:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d102      	bne.n	800c116 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800c110:	2301      	movs	r3, #1
 800c112:	73fb      	strb	r3, [r7, #15]
 800c114:	e0a9      	b.n	800c26a <HAL_OSPI_Init+0x172>
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c120:	2b00      	cmp	r3, #0
 800c122:	f040 80a2 	bne.w	800c26a <HAL_OSPI_Init+0x172>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 f8a6 	bl	800c278 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800c12c:	f241 3188 	movw	r1, #5000	@ 0x1388
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 fae1 	bl	800c6f8 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	689a      	ldr	r2, [r3, #8]
 800c13c:	4b4d      	ldr	r3, [pc, #308]	@ (800c274 <HAL_OSPI_Init+0x17c>)
 800c13e:	4013      	ands	r3, r2
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	68d1      	ldr	r1, [r2, #12]
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	6912      	ldr	r2, [r2, #16]
 800c148:	3a01      	subs	r2, #1
 800c14a:	0412      	lsls	r2, r2, #16
 800c14c:	4311      	orrs	r1, r2
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	6952      	ldr	r2, [r2, #20]
 800c152:	3a01      	subs	r2, #1
 800c154:	0212      	lsls	r2, r2, #8
 800c156:	4311      	orrs	r1, r2
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c15c:	0112      	lsls	r2, r2, #4
 800c15e:	4311      	orrs	r1, r2
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c164:	4311      	orrs	r1, r2
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	69d2      	ldr	r2, [r2, #28]
 800c16a:	4311      	orrs	r1, r2
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	6812      	ldr	r2, [r2, #0]
 800c170:	430b      	orrs	r3, r1
 800c172:	6093      	str	r3, [r2, #8]
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a1a      	ldr	r2, [r3, #32]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	430a      	orrs	r2, r1
 800c188:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c18e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	430a      	orrs	r2, r1
 800c19a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c1a4:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	021a      	lsls	r2, r3, #8
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	430a      	orrs	r2, r1
 800c1be:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1c4:	9300      	str	r3, [sp, #0]
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	2120      	movs	r1, #32
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 faa2 	bl	800c716 <OSPI_WaitFlagStateUntilTimeout>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800c1d6:	7bfb      	ldrb	r3, [r7, #15]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d146      	bne.n	800c26a <HAL_OSPI_Init+0x172>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, 
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ea:	1e5a      	subs	r2, r3, #1
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	430a      	orrs	r2, r1
 800c1f2:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	689a      	ldr	r2, [r3, #8]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	430a      	orrs	r2, r1
 800c208:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c212:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c21e:	431a      	orrs	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	430a      	orrs	r2, r1
 800c226:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f042 0201 	orr.w	r2, r2, #1
 800c238:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	699b      	ldr	r3, [r3, #24]
 800c23e:	2b02      	cmp	r3, #2
 800c240:	d107      	bne.n	800c252 <HAL_OSPI_Init+0x15a>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	689a      	ldr	r2, [r3, #8]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f042 0202 	orr.w	r2, r2, #2
 800c250:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	68db      	ldr	r3, [r3, #12]
 800c256:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c25a:	d103      	bne.n	800c264 <HAL_OSPI_Init+0x16c>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2201      	movs	r2, #1
 800c260:	655a      	str	r2, [r3, #84]	@ 0x54
 800c262:	e002      	b.n	800c26a <HAL_OSPI_Init+0x172>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2202      	movs	r2, #2
 800c268:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
  }

  /* Return function status */
  return status;
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3710      	adds	r7, #16
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	f8e0f884 	.word	0xf8e0f884

0800c278 <HAL_OSPI_MspInit>:
  * @brief  Initialize the OSPI MSP.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_MspInit(OSPI_HandleTypeDef *hospi)
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_MspInit can be implemented in the user file
   */
}
 800c280:	bf00      	nop
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c294:	2300      	movs	r3, #0
 800c296:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d102      	bne.n	800c2a4 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	73fb      	strb	r3, [r7, #15]
 800c2a2:	e015      	b.n	800c2d0 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f022 0201 	bic.w	r2, r2, #1
 800c2b2:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	689a      	ldr	r2, [r3, #8]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f022 0202 	bic.w	r2, r2, #2
 800c2c2:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 f808 	bl	800c2da <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  return status;
 800c2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3710      	adds	r7, #16
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <HAL_OSPI_MspDeInit>:
  * @brief  DeInitialize the OSPI MSP.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 800c2da:	b480      	push	{r7}
 800c2dc:	b083      	sub	sp, #12
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_MspDeInit can be implemented in the user file
   */
}
 800c2e2:	bf00      	nop
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 800c2ee:	b580      	push	{r7, lr}
 800c2f0:	b08a      	sub	sp, #40	@ 0x28
 800c2f2:	af02      	add	r7, sp, #8
 800c2f4:	60f8      	str	r0, [r7, #12]
 800c2f6:	60b9      	str	r1, [r7, #8]
 800c2f8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800c2fa:	f7fa ffd3 	bl	80072a4 <HAL_GetTick>
 800c2fe:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME       (cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE      (cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c304:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d002      	beq.n	800c312 <HAL_OSPI_HyperbusCfg+0x24>
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	2b02      	cmp	r3, #2
 800c310:	d122      	bne.n	800c358 <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	9300      	str	r3, [sp, #0]
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	2200      	movs	r2, #0
 800c31a:	2120      	movs	r1, #32
 800c31c:	68f8      	ldr	r0, [r7, #12]
 800c31e:	f000 f9fa 	bl	800c716 <OSPI_WaitFlagStateUntilTimeout>
 800c322:	4603      	mov	r3, r0
 800c324:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800c326:	7ffb      	ldrb	r3, [r7, #31]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d11a      	bne.n	800c362 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	041a      	lsls	r2, r3, #16
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	021b      	lsls	r3, r3, #8
 800c338:	431a      	orrs	r2, r3
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	ea42 0103 	orr.w	r1, r2, r3
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	68da      	ldr	r2, [r3, #12]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	430a      	orrs	r2, r1
 800c34c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2202      	movs	r2, #2
 800c354:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 800c356:	e004      	b.n	800c362 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 800c358:	2301      	movs	r3, #1
 800c35a:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2210      	movs	r2, #16
 800c360:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Return function status */
  return status;
 800c362:	7ffb      	ldrb	r3, [r7, #31]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3720      	adds	r7, #32
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <HAL_OSPI_HyperbusCmd>:
  * @param  cmd     : Structure containing the Hyperbus command
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCmd(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCmdTypeDef *cmd, uint32_t Timeout)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b088      	sub	sp, #32
 800c370:	af02      	add	r7, sp, #8
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c378:	f7fa ff94 	bl	80072a4 <HAL_GetTick>
 800c37c:	6138      	str	r0, [r7, #16]
  assert_param(IS_OSPI_ADDRESS_SIZE (cmd->AddressSize));
  assert_param(IS_OSPI_NUMBER_DATA  (cmd->NbData));
  assert_param(IS_OSPI_DQS_MODE     (cmd->DQSMode));

  /* Check the state of the driver */
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c382:	2b02      	cmp	r3, #2
 800c384:	d149      	bne.n	800c41a <HAL_OSPI_HyperbusCmd+0xae>
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	68db      	ldr	r3, [r3, #12]
 800c38a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c38e:	d144      	bne.n	800c41a <HAL_OSPI_HyperbusCmd+0xae>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	2200      	movs	r2, #0
 800c398:	2120      	movs	r1, #32
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f000 f9bb 	bl	800c716 <OSPI_WaitFlagStateUntilTimeout>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c3a4:	7dfb      	ldrb	r3, [r7, #23]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d13c      	bne.n	800c424 <HAL_OSPI_HyperbusCmd+0xb8>
    {
      /* Re-initialize the value of the functional mode */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	681a      	ldr	r2, [r3, #0]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800c3b8:	601a      	str	r2, [r3, #0]

      /* Configure the address space in the DCR1 register */
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	430a      	orrs	r2, r1
 800c3ce:	609a      	str	r2, [r3, #8]

      /* Configure the CCR and WCCR registers with the address size and the following configuration :
         - DQS signal enabled (used as RWDS)
         - DTR mode enabled on address and data
         - address and data on 8 lines */
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	691a      	ldr	r2, [r3, #16]
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	431a      	orrs	r2, r3
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f042 220c 	orr.w	r2, r2, #201329664	@ 0xc000c00
 800c3e2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
                                       cmd->AddressSize | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADMODE_2));
      WRITE_REG(hospi->Instance->WCCR, (cmd->DQSMode | OCTOSPI_WCCR_DDTR | OCTOSPI_WCCR_DMODE_2 |
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	691a      	ldr	r2, [r3, #16]
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	689b      	ldr	r3, [r3, #8]
 800c3ee:	431a      	orrs	r2, r3
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f042 220c 	orr.w	r2, r2, #201329664	@ 0xc000c00
 800c3f8:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
                                        cmd->AddressSize | OCTOSPI_WCCR_ADDTR | OCTOSPI_WCCR_ADMODE_2));

      /* Configure the DLR register with the number of data */
      WRITE_REG(hospi->Instance->DLR, (cmd->NbData - 1U));
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	68da      	ldr	r2, [r3, #12]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	3a01      	subs	r2, #1
 800c406:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure the AR register with the address value */
      WRITE_REG(hospi->Instance->AR, cmd->Address);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	68ba      	ldr	r2, [r7, #8]
 800c40e:	6852      	ldr	r2, [r2, #4]
 800c410:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2204      	movs	r2, #4
 800c416:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 800c418:	e004      	b.n	800c424 <HAL_OSPI_HyperbusCmd+0xb8>
    }
  }
  else
  {
    status = HAL_ERROR;
 800c41a:	2301      	movs	r3, #1
 800c41c:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2210      	movs	r2, #16
 800c422:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Return function status */
  return status;
 800c424:	7dfb      	ldrb	r3, [r7, #23]
}
 800c426:	4618      	mov	r0, r3
 800c428:	3718      	adds	r7, #24
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}

0800c42e <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800c42e:	b580      	push	{r7, lr}
 800c430:	b08a      	sub	sp, #40	@ 0x28
 800c432:	af02      	add	r7, sp, #8
 800c434:	60f8      	str	r0, [r7, #12]
 800c436:	60b9      	str	r1, [r7, #8]
 800c438:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c43a:	f7fa ff33 	bl	80072a4 <HAL_GetTick>
 800c43e:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	3350      	adds	r3, #80	@ 0x50
 800c446:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d105      	bne.n	800c45a <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800c44e:	2301      	movs	r3, #1
 800c450:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2208      	movs	r2, #8
 800c456:	659a      	str	r2, [r3, #88]	@ 0x58
 800c458:	e057      	b.n	800c50a <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c45e:	2b04      	cmp	r3, #4
 800c460:	d14e      	bne.n	800c500 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c468:	1c5a      	adds	r2, r3, #1
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hospi->XferSize  = hospi->XferCount;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->pBuffPtr  = pData;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	68ba      	ldr	r2, [r7, #8]
 800c47a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800c48a:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	9300      	str	r3, [sp, #0]
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	2201      	movs	r2, #1
 800c494:	2104      	movs	r1, #4
 800c496:	68f8      	ldr	r0, [r7, #12]
 800c498:	f000 f93d 	bl	800c716 <OSPI_WaitFlagStateUntilTimeout>
 800c49c:	4603      	mov	r3, r0
 800c49e:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800c4a0:	7ffb      	ldrb	r3, [r7, #31]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d113      	bne.n	800c4ce <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4aa:	781a      	ldrb	r2, [r3, #0]
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4b4:	1c5a      	adds	r2, r3, #1
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->XferCount--;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4be:	1e5a      	subs	r2, r3, #1
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hospi->XferCount > 0U);
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d1df      	bne.n	800c48c <HAL_OSPI_Transmit+0x5e>
 800c4cc:	e000      	b.n	800c4d0 <HAL_OSPI_Transmit+0xa2>
          break;
 800c4ce:	bf00      	nop

      if (status == HAL_OK)
 800c4d0:	7ffb      	ldrb	r3, [r7, #31]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d119      	bne.n	800c50a <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	9300      	str	r3, [sp, #0]
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	2102      	movs	r1, #2
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f000 f918 	bl	800c716 <OSPI_WaitFlagStateUntilTimeout>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800c4ea:	7ffb      	ldrb	r3, [r7, #31]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10c      	bne.n	800c50a <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2202      	movs	r2, #2
 800c4f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2202      	movs	r2, #2
 800c4fc:	655a      	str	r2, [r3, #84]	@ 0x54
 800c4fe:	e004      	b.n	800c50a <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800c500:	2301      	movs	r3, #1
 800c502:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2210      	movs	r2, #16
 800c508:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Return function status */
  return status;
 800c50a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3720      	adds	r7, #32
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b08c      	sub	sp, #48	@ 0x30
 800c518:	af02      	add	r7, sp, #8
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c520:	f7fa fec0 	bl	80072a4 <HAL_GetTick>
 800c524:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	3350      	adds	r3, #80	@ 0x50
 800c52c:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c534:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800c53e:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d106      	bne.n	800c554 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800c546:	2301      	movs	r3, #1
 800c548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2208      	movs	r2, #8
 800c550:	659a      	str	r2, [r3, #88]	@ 0x58
 800c552:	e07c      	b.n	800c64e <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c558:	2b04      	cmp	r3, #4
 800c55a:	d172      	bne.n	800c642 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c562:	1c5a      	adds	r2, r3, #1
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	64da      	str	r2, [r3, #76]	@ 0x4c
      hospi->XferSize  = hospi->XferCount;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->pBuffPtr  = pData;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	68ba      	ldr	r2, [r7, #8]
 800c574:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800c588:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c592:	d104      	bne.n	800c59e <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	69ba      	ldr	r2, [r7, #24]
 800c59a:	649a      	str	r2, [r3, #72]	@ 0x48
 800c59c:	e011      	b.n	800c5c2 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800c5a6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d004      	beq.n	800c5b8 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	69ba      	ldr	r2, [r7, #24]
 800c5b4:	649a      	str	r2, [r3, #72]	@ 0x48
 800c5b6:	e004      	b.n	800c5c2 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	697a      	ldr	r2, [r7, #20]
 800c5be:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	9300      	str	r3, [sp, #0]
 800c5c6:	6a3b      	ldr	r3, [r7, #32]
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	2106      	movs	r1, #6
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f000 f8a2 	bl	800c716 <OSPI_WaitFlagStateUntilTimeout>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 800c5d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d114      	bne.n	800c60a <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5e4:	69fa      	ldr	r2, [r7, #28]
 800c5e6:	7812      	ldrb	r2, [r2, #0]
 800c5e8:	b2d2      	uxtb	r2, r2
 800c5ea:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5f0:	1c5a      	adds	r2, r3, #1
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->XferCount--;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5fa:	1e5a      	subs	r2, r3, #1
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while(hospi->XferCount > 0U);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c604:	2b00      	cmp	r3, #0
 800c606:	d1dc      	bne.n	800c5c2 <HAL_OSPI_Receive+0xae>
 800c608:	e000      	b.n	800c60c <HAL_OSPI_Receive+0xf8>
          break;
 800c60a:	bf00      	nop

      if (status == HAL_OK)
 800c60c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c610:	2b00      	cmp	r3, #0
 800c612:	d11c      	bne.n	800c64e <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	9300      	str	r3, [sp, #0]
 800c618:	6a3b      	ldr	r3, [r7, #32]
 800c61a:	2201      	movs	r2, #1
 800c61c:	2102      	movs	r1, #2
 800c61e:	68f8      	ldr	r0, [r7, #12]
 800c620:	f000 f879 	bl	800c716 <OSPI_WaitFlagStateUntilTimeout>
 800c624:	4603      	mov	r3, r0
 800c626:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 800c62a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10d      	bne.n	800c64e <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2202      	movs	r2, #2
 800c638:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2202      	movs	r2, #2
 800c63e:	655a      	str	r2, [r3, #84]	@ 0x54
 800c640:	e005      	b.n	800c64e <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800c642:	2301      	movs	r3, #1
 800c644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2210      	movs	r2, #16
 800c64c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Return function status */
  return status;
 800c64e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c652:	4618      	mov	r0, r3
 800c654:	3728      	adds	r7, #40	@ 0x28
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
	...

0800c65c <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b086      	sub	sp, #24
 800c660:	af02      	add	r7, sp, #8
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c666:	f7fa fe1d 	bl	80072a4 <HAL_GetTick>
 800c66a:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c670:	2b04      	cmp	r3, #4
 800c672:	d134      	bne.n	800c6de <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c678:	9300      	str	r3, [sp, #0]
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	2200      	movs	r2, #0
 800c67e:	2120      	movs	r1, #32
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 f848 	bl	800c716 <OSPI_WaitFlagStateUntilTimeout>
 800c686:	4603      	mov	r3, r0
 800c688:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800c68a:	7bfb      	ldrb	r3, [r7, #15]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d12b      	bne.n	800c6e8 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2288      	movs	r2, #136	@ 0x88
 800c694:	655a      	str	r2, [r3, #84]	@ 0x54

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b08      	cmp	r3, #8
 800c69c:	d111      	bne.n	800c6c2 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	683a      	ldr	r2, [r7, #0]
 800c6a4:	6852      	ldr	r2, [r2, #4]
 800c6a6:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	2210      	movs	r2, #16
 800c6b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800c6c0:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	4b0a      	ldr	r3, [pc, #40]	@ (800c6f4 <HAL_OSPI_MemoryMapped+0x98>)
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	683a      	ldr	r2, [r7, #0]
 800c6ce:	6812      	ldr	r2, [r2, #0]
 800c6d0:	431a      	orrs	r2, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 800c6da:	601a      	str	r2, [r3, #0]
 800c6dc:	e004      	b.n	800c6e8 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2210      	movs	r2, #16
 800c6e6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Return function status */
  return status;
 800c6e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3710      	adds	r7, #16
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	cffffff7 	.word	0xcffffff7

0800c6f8 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	683a      	ldr	r2, [r7, #0]
 800c706:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 800c708:	2300      	movs	r3, #0
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	370c      	adds	r7, #12
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr

0800c716 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b084      	sub	sp, #16
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	60f8      	str	r0, [r7, #12]
 800c71e:	60b9      	str	r1, [r7, #8]
 800c720:	603b      	str	r3, [r7, #0]
 800c722:	4613      	mov	r3, r2
 800c724:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800c726:	e01a      	b.n	800c75e <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c72e:	d016      	beq.n	800c75e <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c730:	f7fa fdb8 	bl	80072a4 <HAL_GetTick>
 800c734:	4602      	mov	r2, r0
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	1ad3      	subs	r3, r2, r3
 800c73a:	69ba      	ldr	r2, [r7, #24]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d302      	bcc.n	800c746 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10b      	bne.n	800c75e <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c74c:	655a      	str	r2, [r3, #84]	@ 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c752:	f043 0201 	orr.w	r2, r3, #1
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800c75a:	2301      	movs	r3, #1
 800c75c:	e00e      	b.n	800c77c <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	6a1a      	ldr	r2, [r3, #32]
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	4013      	ands	r3, r2
 800c768:	2b00      	cmp	r3, #0
 800c76a:	bf14      	ite	ne
 800c76c:	2301      	movne	r3, #1
 800c76e:	2300      	moveq	r3, #0
 800c770:	b2db      	uxtb	r3, r3
 800c772:	461a      	mov	r2, r3
 800c774:	79fb      	ldrb	r3, [r7, #7]
 800c776:	429a      	cmp	r2, r3
 800c778:	d1d6      	bne.n	800c728 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c77a:	2300      	movs	r3, #0
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3710      	adds	r7, #16
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800c78c:	4b29      	ldr	r3, [pc, #164]	@ (800c834 <HAL_PWREx_ConfigSupply+0xb0>)
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	f003 0307 	and.w	r3, r3, #7
 800c794:	2b06      	cmp	r3, #6
 800c796:	d00a      	beq.n	800c7ae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c798:	4b26      	ldr	r3, [pc, #152]	@ (800c834 <HAL_PWREx_ConfigSupply+0xb0>)
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d001      	beq.n	800c7aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e03f      	b.n	800c82a <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	e03d      	b.n	800c82a <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c7ae:	4b21      	ldr	r3, [pc, #132]	@ (800c834 <HAL_PWREx_ConfigSupply+0xb0>)
 800c7b0:	68db      	ldr	r3, [r3, #12]
 800c7b2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800c7b6:	491f      	ldr	r1, [pc, #124]	@ (800c834 <HAL_PWREx_ConfigSupply+0xb0>)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c7be:	f7fa fd71 	bl	80072a4 <HAL_GetTick>
 800c7c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c7c4:	e009      	b.n	800c7da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c7c6:	f7fa fd6d 	bl	80072a4 <HAL_GetTick>
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	1ad3      	subs	r3, r2, r3
 800c7d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c7d4:	d901      	bls.n	800c7da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e027      	b.n	800c82a <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c7da:	4b16      	ldr	r3, [pc, #88]	@ (800c834 <HAL_PWREx_ConfigSupply+0xb0>)
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c7e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7e6:	d1ee      	bne.n	800c7c6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2b1e      	cmp	r3, #30
 800c7ec:	d008      	beq.n	800c800 <HAL_PWREx_ConfigSupply+0x7c>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7f2:	d005      	beq.n	800c800 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b1d      	cmp	r3, #29
 800c7f8:	d002      	beq.n	800c800 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2b2d      	cmp	r3, #45	@ 0x2d
 800c7fe:	d113      	bne.n	800c828 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800c800:	f7fa fd50 	bl	80072a4 <HAL_GetTick>
 800c804:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800c806:	e009      	b.n	800c81c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c808:	f7fa fd4c 	bl	80072a4 <HAL_GetTick>
 800c80c:	4602      	mov	r2, r0
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	1ad3      	subs	r3, r2, r3
 800c812:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c816:	d901      	bls.n	800c81c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800c818:	2301      	movs	r3, #1
 800c81a:	e006      	b.n	800c82a <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800c81c:	4b05      	ldr	r3, [pc, #20]	@ (800c834 <HAL_PWREx_ConfigSupply+0xb0>)
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	f003 0311 	and.w	r3, r3, #17
 800c824:	2b11      	cmp	r3, #17
 800c826:	d1ef      	bne.n	800c808 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c828:	2300      	movs	r3, #0
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	58024800 	.word	0x58024800

0800c838 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b08c      	sub	sp, #48	@ 0x30
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d101      	bne.n	800c84a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c846:	2301      	movs	r3, #1
 800c848:	e37b      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f003 0301 	and.w	r3, r3, #1
 800c852:	2b00      	cmp	r3, #0
 800c854:	f000 8087 	beq.w	800c966 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c858:	4b95      	ldr	r3, [pc, #596]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c85a:	691b      	ldr	r3, [r3, #16]
 800c85c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c860:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c862:	4b93      	ldr	r3, [pc, #588]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c866:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c86a:	2b10      	cmp	r3, #16
 800c86c:	d007      	beq.n	800c87e <HAL_RCC_OscConfig+0x46>
 800c86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c870:	2b18      	cmp	r3, #24
 800c872:	d110      	bne.n	800c896 <HAL_RCC_OscConfig+0x5e>
 800c874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c876:	f003 0303 	and.w	r3, r3, #3
 800c87a:	2b02      	cmp	r3, #2
 800c87c:	d10b      	bne.n	800c896 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c87e:	4b8c      	ldr	r3, [pc, #560]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c886:	2b00      	cmp	r3, #0
 800c888:	d06c      	beq.n	800c964 <HAL_RCC_OscConfig+0x12c>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d168      	bne.n	800c964 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800c892:	2301      	movs	r3, #1
 800c894:	e355      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c89e:	d106      	bne.n	800c8ae <HAL_RCC_OscConfig+0x76>
 800c8a0:	4b83      	ldr	r3, [pc, #524]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a82      	ldr	r2, [pc, #520]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c8a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c8aa:	6013      	str	r3, [r2, #0]
 800c8ac:	e02e      	b.n	800c90c <HAL_RCC_OscConfig+0xd4>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	685b      	ldr	r3, [r3, #4]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d10c      	bne.n	800c8d0 <HAL_RCC_OscConfig+0x98>
 800c8b6:	4b7e      	ldr	r3, [pc, #504]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a7d      	ldr	r2, [pc, #500]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c8bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c8c0:	6013      	str	r3, [r2, #0]
 800c8c2:	4b7b      	ldr	r3, [pc, #492]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4a7a      	ldr	r2, [pc, #488]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c8c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c8cc:	6013      	str	r3, [r2, #0]
 800c8ce:	e01d      	b.n	800c90c <HAL_RCC_OscConfig+0xd4>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c8d8:	d10c      	bne.n	800c8f4 <HAL_RCC_OscConfig+0xbc>
 800c8da:	4b75      	ldr	r3, [pc, #468]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4a74      	ldr	r2, [pc, #464]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c8e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c8e4:	6013      	str	r3, [r2, #0]
 800c8e6:	4b72      	ldr	r3, [pc, #456]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a71      	ldr	r2, [pc, #452]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c8ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c8f0:	6013      	str	r3, [r2, #0]
 800c8f2:	e00b      	b.n	800c90c <HAL_RCC_OscConfig+0xd4>
 800c8f4:	4b6e      	ldr	r3, [pc, #440]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a6d      	ldr	r2, [pc, #436]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c8fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c8fe:	6013      	str	r3, [r2, #0]
 800c900:	4b6b      	ldr	r3, [pc, #428]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a6a      	ldr	r2, [pc, #424]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c90a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d013      	beq.n	800c93c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c914:	f7fa fcc6 	bl	80072a4 <HAL_GetTick>
 800c918:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c91a:	e008      	b.n	800c92e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c91c:	f7fa fcc2 	bl	80072a4 <HAL_GetTick>
 800c920:	4602      	mov	r2, r0
 800c922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c924:	1ad3      	subs	r3, r2, r3
 800c926:	2b64      	cmp	r3, #100	@ 0x64
 800c928:	d901      	bls.n	800c92e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800c92a:	2303      	movs	r3, #3
 800c92c:	e309      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c92e:	4b60      	ldr	r3, [pc, #384]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c936:	2b00      	cmp	r3, #0
 800c938:	d0f0      	beq.n	800c91c <HAL_RCC_OscConfig+0xe4>
 800c93a:	e014      	b.n	800c966 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c93c:	f7fa fcb2 	bl	80072a4 <HAL_GetTick>
 800c940:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c942:	e008      	b.n	800c956 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c944:	f7fa fcae 	bl	80072a4 <HAL_GetTick>
 800c948:	4602      	mov	r2, r0
 800c94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c94c:	1ad3      	subs	r3, r2, r3
 800c94e:	2b64      	cmp	r3, #100	@ 0x64
 800c950:	d901      	bls.n	800c956 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800c952:	2303      	movs	r3, #3
 800c954:	e2f5      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c956:	4b56      	ldr	r3, [pc, #344]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1f0      	bne.n	800c944 <HAL_RCC_OscConfig+0x10c>
 800c962:	e000      	b.n	800c966 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f003 0302 	and.w	r3, r3, #2
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d06d      	beq.n	800ca4e <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c972:	4b4f      	ldr	r3, [pc, #316]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c974:	691b      	ldr	r3, [r3, #16]
 800c976:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c97a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c97c:	4b4c      	ldr	r3, [pc, #304]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c97e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c980:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c982:	6a3b      	ldr	r3, [r7, #32]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d007      	beq.n	800c998 <HAL_RCC_OscConfig+0x160>
 800c988:	6a3b      	ldr	r3, [r7, #32]
 800c98a:	2b18      	cmp	r3, #24
 800c98c:	d11b      	bne.n	800c9c6 <HAL_RCC_OscConfig+0x18e>
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	f003 0303 	and.w	r3, r3, #3
 800c994:	2b00      	cmp	r3, #0
 800c996:	d116      	bne.n	800c9c6 <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c998:	4b45      	ldr	r3, [pc, #276]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 0304 	and.w	r3, r3, #4
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d005      	beq.n	800c9b0 <HAL_RCC_OscConfig+0x178>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d101      	bne.n	800c9b0 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	e2c8      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c9b0:	4b3f      	ldr	r3, [pc, #252]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	691b      	ldr	r3, [r3, #16]
 800c9bc:	061b      	lsls	r3, r3, #24
 800c9be:	493c      	ldr	r1, [pc, #240]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c9c4:	e043      	b.n	800ca4e <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d026      	beq.n	800ca1c <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c9ce:	4b38      	ldr	r3, [pc, #224]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f023 0219 	bic.w	r2, r3, #25
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	4935      	ldr	r1, [pc, #212]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9e0:	f7fa fc60 	bl	80072a4 <HAL_GetTick>
 800c9e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c9e6:	e008      	b.n	800c9fa <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c9e8:	f7fa fc5c 	bl	80072a4 <HAL_GetTick>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f0:	1ad3      	subs	r3, r2, r3
 800c9f2:	2b02      	cmp	r3, #2
 800c9f4:	d901      	bls.n	800c9fa <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800c9f6:	2303      	movs	r3, #3
 800c9f8:	e2a3      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c9fa:	4b2d      	ldr	r3, [pc, #180]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f003 0304 	and.w	r3, r3, #4
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d0f0      	beq.n	800c9e8 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca06:	4b2a      	ldr	r3, [pc, #168]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	691b      	ldr	r3, [r3, #16]
 800ca12:	061b      	lsls	r3, r3, #24
 800ca14:	4926      	ldr	r1, [pc, #152]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800ca16:	4313      	orrs	r3, r2
 800ca18:	604b      	str	r3, [r1, #4]
 800ca1a:	e018      	b.n	800ca4e <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ca1c:	4b24      	ldr	r3, [pc, #144]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a23      	ldr	r2, [pc, #140]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800ca22:	f023 0301 	bic.w	r3, r3, #1
 800ca26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca28:	f7fa fc3c 	bl	80072a4 <HAL_GetTick>
 800ca2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ca2e:	e008      	b.n	800ca42 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ca30:	f7fa fc38 	bl	80072a4 <HAL_GetTick>
 800ca34:	4602      	mov	r2, r0
 800ca36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	2b02      	cmp	r3, #2
 800ca3c:	d901      	bls.n	800ca42 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800ca3e:	2303      	movs	r3, #3
 800ca40:	e27f      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ca42:	4b1b      	ldr	r3, [pc, #108]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f003 0304 	and.w	r3, r3, #4
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d1f0      	bne.n	800ca30 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f003 0310 	and.w	r3, r3, #16
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d06d      	beq.n	800cb36 <HAL_RCC_OscConfig+0x2fe>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ca5a:	4b15      	ldr	r3, [pc, #84]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800ca5c:	691b      	ldr	r3, [r3, #16]
 800ca5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ca62:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ca64:	4b12      	ldr	r3, [pc, #72]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800ca66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca68:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	2b08      	cmp	r3, #8
 800ca6e:	d007      	beq.n	800ca80 <HAL_RCC_OscConfig+0x248>
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	2b18      	cmp	r3, #24
 800ca74:	d11e      	bne.n	800cab4 <HAL_RCC_OscConfig+0x27c>
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	f003 0303 	and.w	r3, r3, #3
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d119      	bne.n	800cab4 <HAL_RCC_OscConfig+0x27c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ca80:	4b0b      	ldr	r3, [pc, #44]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d005      	beq.n	800ca98 <HAL_RCC_OscConfig+0x260>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	69db      	ldr	r3, [r3, #28]
 800ca90:	2b80      	cmp	r3, #128	@ 0x80
 800ca92:	d001      	beq.n	800ca98 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 800ca94:	2301      	movs	r3, #1
 800ca96:	e254      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ca98:	4b05      	ldr	r3, [pc, #20]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6a1b      	ldr	r3, [r3, #32]
 800caa4:	061b      	lsls	r3, r3, #24
 800caa6:	4902      	ldr	r1, [pc, #8]	@ (800cab0 <HAL_RCC_OscConfig+0x278>)
 800caa8:	4313      	orrs	r3, r2
 800caaa:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800caac:	e043      	b.n	800cb36 <HAL_RCC_OscConfig+0x2fe>
 800caae:	bf00      	nop
 800cab0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	69db      	ldr	r3, [r3, #28]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d023      	beq.n	800cb04 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800cabc:	4b9c      	ldr	r3, [pc, #624]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a9b      	ldr	r2, [pc, #620]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cac8:	f7fa fbec 	bl	80072a4 <HAL_GetTick>
 800cacc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cace:	e008      	b.n	800cae2 <HAL_RCC_OscConfig+0x2aa>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800cad0:	f7fa fbe8 	bl	80072a4 <HAL_GetTick>
 800cad4:	4602      	mov	r2, r0
 800cad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad8:	1ad3      	subs	r3, r2, r3
 800cada:	2b02      	cmp	r3, #2
 800cadc:	d901      	bls.n	800cae2 <HAL_RCC_OscConfig+0x2aa>
          {
            return HAL_TIMEOUT;
 800cade:	2303      	movs	r3, #3
 800cae0:	e22f      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cae2:	4b93      	ldr	r3, [pc, #588]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800caea:	2b00      	cmp	r3, #0
 800caec:	d0f0      	beq.n	800cad0 <HAL_RCC_OscConfig+0x298>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800caee:	4b90      	ldr	r3, [pc, #576]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6a1b      	ldr	r3, [r3, #32]
 800cafa:	061b      	lsls	r3, r3, #24
 800cafc:	498c      	ldr	r1, [pc, #560]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cafe:	4313      	orrs	r3, r2
 800cb00:	60cb      	str	r3, [r1, #12]
 800cb02:	e018      	b.n	800cb36 <HAL_RCC_OscConfig+0x2fe>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800cb04:	4b8a      	ldr	r3, [pc, #552]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a89      	ldr	r2, [pc, #548]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cb0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb10:	f7fa fbc8 	bl	80072a4 <HAL_GetTick>
 800cb14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cb16:	e008      	b.n	800cb2a <HAL_RCC_OscConfig+0x2f2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800cb18:	f7fa fbc4 	bl	80072a4 <HAL_GetTick>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb20:	1ad3      	subs	r3, r2, r3
 800cb22:	2b02      	cmp	r3, #2
 800cb24:	d901      	bls.n	800cb2a <HAL_RCC_OscConfig+0x2f2>
          {
            return HAL_TIMEOUT;
 800cb26:	2303      	movs	r3, #3
 800cb28:	e20b      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cb2a:	4b81      	ldr	r3, [pc, #516]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d1f0      	bne.n	800cb18 <HAL_RCC_OscConfig+0x2e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f003 0308 	and.w	r3, r3, #8
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d036      	beq.n	800cbb0 <HAL_RCC_OscConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	695b      	ldr	r3, [r3, #20]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d019      	beq.n	800cb7e <HAL_RCC_OscConfig+0x346>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb4a:	4b79      	ldr	r3, [pc, #484]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cb4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb4e:	4a78      	ldr	r2, [pc, #480]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cb50:	f043 0301 	orr.w	r3, r3, #1
 800cb54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb56:	f7fa fba5 	bl	80072a4 <HAL_GetTick>
 800cb5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cb5c:	e008      	b.n	800cb70 <HAL_RCC_OscConfig+0x338>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cb5e:	f7fa fba1 	bl	80072a4 <HAL_GetTick>
 800cb62:	4602      	mov	r2, r0
 800cb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb66:	1ad3      	subs	r3, r2, r3
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	d901      	bls.n	800cb70 <HAL_RCC_OscConfig+0x338>
        {
          return HAL_TIMEOUT;
 800cb6c:	2303      	movs	r3, #3
 800cb6e:	e1e8      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cb70:	4b6f      	ldr	r3, [pc, #444]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cb72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb74:	f003 0302 	and.w	r3, r3, #2
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d0f0      	beq.n	800cb5e <HAL_RCC_OscConfig+0x326>
 800cb7c:	e018      	b.n	800cbb0 <HAL_RCC_OscConfig+0x378>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cb7e:	4b6c      	ldr	r3, [pc, #432]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cb80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb82:	4a6b      	ldr	r2, [pc, #428]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cb84:	f023 0301 	bic.w	r3, r3, #1
 800cb88:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb8a:	f7fa fb8b 	bl	80072a4 <HAL_GetTick>
 800cb8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cb90:	e008      	b.n	800cba4 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cb92:	f7fa fb87 	bl	80072a4 <HAL_GetTick>
 800cb96:	4602      	mov	r2, r0
 800cb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9a:	1ad3      	subs	r3, r2, r3
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d901      	bls.n	800cba4 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 800cba0:	2303      	movs	r3, #3
 800cba2:	e1ce      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cba4:	4b62      	ldr	r3, [pc, #392]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cba8:	f003 0302 	and.w	r3, r3, #2
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d1f0      	bne.n	800cb92 <HAL_RCC_OscConfig+0x35a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f003 0320 	and.w	r3, r3, #32
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d036      	beq.n	800cc2a <HAL_RCC_OscConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	699b      	ldr	r3, [r3, #24]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d019      	beq.n	800cbf8 <HAL_RCC_OscConfig+0x3c0>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cbc4:	4b5a      	ldr	r3, [pc, #360]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a59      	ldr	r2, [pc, #356]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cbca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800cbce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cbd0:	f7fa fb68 	bl	80072a4 <HAL_GetTick>
 800cbd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cbd6:	e008      	b.n	800cbea <HAL_RCC_OscConfig+0x3b2>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800cbd8:	f7fa fb64 	bl	80072a4 <HAL_GetTick>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	2b02      	cmp	r3, #2
 800cbe4:	d901      	bls.n	800cbea <HAL_RCC_OscConfig+0x3b2>
        {
          return HAL_TIMEOUT;
 800cbe6:	2303      	movs	r3, #3
 800cbe8:	e1ab      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cbea:	4b51      	ldr	r3, [pc, #324]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d0f0      	beq.n	800cbd8 <HAL_RCC_OscConfig+0x3a0>
 800cbf6:	e018      	b.n	800cc2a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cbf8:	4b4d      	ldr	r3, [pc, #308]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a4c      	ldr	r2, [pc, #304]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cbfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc02:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cc04:	f7fa fb4e 	bl	80072a4 <HAL_GetTick>
 800cc08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cc0a:	e008      	b.n	800cc1e <HAL_RCC_OscConfig+0x3e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800cc0c:	f7fa fb4a 	bl	80072a4 <HAL_GetTick>
 800cc10:	4602      	mov	r2, r0
 800cc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc14:	1ad3      	subs	r3, r2, r3
 800cc16:	2b02      	cmp	r3, #2
 800cc18:	d901      	bls.n	800cc1e <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	e191      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cc1e:	4b44      	ldr	r3, [pc, #272]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d1f0      	bne.n	800cc0c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f003 0304 	and.w	r3, r3, #4
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	f000 8086 	beq.w	800cd44 <HAL_RCC_OscConfig+0x50c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cc38:	4b3e      	ldr	r3, [pc, #248]	@ (800cd34 <HAL_RCC_OscConfig+0x4fc>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4a3d      	ldr	r2, [pc, #244]	@ (800cd34 <HAL_RCC_OscConfig+0x4fc>)
 800cc3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cc42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cc44:	f7fa fb2e 	bl	80072a4 <HAL_GetTick>
 800cc48:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cc4a:	e008      	b.n	800cc5e <HAL_RCC_OscConfig+0x426>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cc4c:	f7fa fb2a 	bl	80072a4 <HAL_GetTick>
 800cc50:	4602      	mov	r2, r0
 800cc52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc54:	1ad3      	subs	r3, r2, r3
 800cc56:	2b64      	cmp	r3, #100	@ 0x64
 800cc58:	d901      	bls.n	800cc5e <HAL_RCC_OscConfig+0x426>
      {
        return HAL_TIMEOUT;
 800cc5a:	2303      	movs	r3, #3
 800cc5c:	e171      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cc5e:	4b35      	ldr	r3, [pc, #212]	@ (800cd34 <HAL_RCC_OscConfig+0x4fc>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d0f0      	beq.n	800cc4c <HAL_RCC_OscConfig+0x414>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d106      	bne.n	800cc80 <HAL_RCC_OscConfig+0x448>
 800cc72:	4b2f      	ldr	r3, [pc, #188]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cc74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc76:	4a2e      	ldr	r2, [pc, #184]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cc78:	f043 0301 	orr.w	r3, r3, #1
 800cc7c:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc7e:	e02d      	b.n	800ccdc <HAL_RCC_OscConfig+0x4a4>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d10c      	bne.n	800cca2 <HAL_RCC_OscConfig+0x46a>
 800cc88:	4b29      	ldr	r3, [pc, #164]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cc8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc8c:	4a28      	ldr	r2, [pc, #160]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cc8e:	f023 0301 	bic.w	r3, r3, #1
 800cc92:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc94:	4b26      	ldr	r3, [pc, #152]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cc96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc98:	4a25      	ldr	r2, [pc, #148]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cc9a:	f023 0304 	bic.w	r3, r3, #4
 800cc9e:	6713      	str	r3, [r2, #112]	@ 0x70
 800cca0:	e01c      	b.n	800ccdc <HAL_RCC_OscConfig+0x4a4>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	2b05      	cmp	r3, #5
 800cca8:	d10c      	bne.n	800ccc4 <HAL_RCC_OscConfig+0x48c>
 800ccaa:	4b21      	ldr	r3, [pc, #132]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800ccac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccae:	4a20      	ldr	r2, [pc, #128]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800ccb0:	f043 0304 	orr.w	r3, r3, #4
 800ccb4:	6713      	str	r3, [r2, #112]	@ 0x70
 800ccb6:	4b1e      	ldr	r3, [pc, #120]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800ccb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccba:	4a1d      	ldr	r2, [pc, #116]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800ccbc:	f043 0301 	orr.w	r3, r3, #1
 800ccc0:	6713      	str	r3, [r2, #112]	@ 0x70
 800ccc2:	e00b      	b.n	800ccdc <HAL_RCC_OscConfig+0x4a4>
 800ccc4:	4b1a      	ldr	r3, [pc, #104]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800ccc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccc8:	4a19      	ldr	r2, [pc, #100]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800ccca:	f023 0301 	bic.w	r3, r3, #1
 800ccce:	6713      	str	r3, [r2, #112]	@ 0x70
 800ccd0:	4b17      	ldr	r3, [pc, #92]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800ccd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccd4:	4a16      	ldr	r2, [pc, #88]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800ccd6:	f023 0304 	bic.w	r3, r3, #4
 800ccda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	689b      	ldr	r3, [r3, #8]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d015      	beq.n	800cd10 <HAL_RCC_OscConfig+0x4d8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cce4:	f7fa fade 	bl	80072a4 <HAL_GetTick>
 800cce8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ccea:	e00a      	b.n	800cd02 <HAL_RCC_OscConfig+0x4ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ccec:	f7fa fada 	bl	80072a4 <HAL_GetTick>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf4:	1ad3      	subs	r3, r2, r3
 800ccf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d901      	bls.n	800cd02 <HAL_RCC_OscConfig+0x4ca>
        {
          return HAL_TIMEOUT;
 800ccfe:	2303      	movs	r3, #3
 800cd00:	e11f      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cd02:	4b0b      	ldr	r3, [pc, #44]	@ (800cd30 <HAL_RCC_OscConfig+0x4f8>)
 800cd04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd06:	f003 0302 	and.w	r3, r3, #2
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d0ee      	beq.n	800ccec <HAL_RCC_OscConfig+0x4b4>
 800cd0e:	e019      	b.n	800cd44 <HAL_RCC_OscConfig+0x50c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd10:	f7fa fac8 	bl	80072a4 <HAL_GetTick>
 800cd14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cd16:	e00f      	b.n	800cd38 <HAL_RCC_OscConfig+0x500>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cd18:	f7fa fac4 	bl	80072a4 <HAL_GetTick>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd20:	1ad3      	subs	r3, r2, r3
 800cd22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d906      	bls.n	800cd38 <HAL_RCC_OscConfig+0x500>
        {
          return HAL_TIMEOUT;
 800cd2a:	2303      	movs	r3, #3
 800cd2c:	e109      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
 800cd2e:	bf00      	nop
 800cd30:	58024400 	.word	0x58024400
 800cd34:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cd38:	4b84      	ldr	r3, [pc, #528]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800cd3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd3c:	f003 0302 	and.w	r3, r3, #2
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d1e9      	bne.n	800cd18 <HAL_RCC_OscConfig+0x4e0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	f000 80f9 	beq.w	800cf40 <HAL_RCC_OscConfig+0x708>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800cd4e:	4b7f      	ldr	r3, [pc, #508]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800cd50:	691b      	ldr	r3, [r3, #16]
 800cd52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cd56:	2b18      	cmp	r3, #24
 800cd58:	f000 80b4 	beq.w	800cec4 <HAL_RCC_OscConfig+0x68c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd60:	2b02      	cmp	r3, #2
 800cd62:	f040 8095 	bne.w	800ce90 <HAL_RCC_OscConfig+0x658>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd66:	4b79      	ldr	r3, [pc, #484]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a78      	ldr	r2, [pc, #480]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800cd6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cd70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd72:	f7fa fa97 	bl	80072a4 <HAL_GetTick>
 800cd76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cd78:	e008      	b.n	800cd8c <HAL_RCC_OscConfig+0x554>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cd7a:	f7fa fa93 	bl	80072a4 <HAL_GetTick>
 800cd7e:	4602      	mov	r2, r0
 800cd80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd82:	1ad3      	subs	r3, r2, r3
 800cd84:	2b02      	cmp	r3, #2
 800cd86:	d901      	bls.n	800cd8c <HAL_RCC_OscConfig+0x554>
          {
            return HAL_TIMEOUT;
 800cd88:	2303      	movs	r3, #3
 800cd8a:	e0da      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cd8c:	4b6f      	ldr	r3, [pc, #444]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d1f0      	bne.n	800cd7a <HAL_RCC_OscConfig+0x542>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cd98:	4b6c      	ldr	r3, [pc, #432]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800cd9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cd9c:	4b6c      	ldr	r3, [pc, #432]	@ (800cf50 <HAL_RCC_OscConfig+0x718>)
 800cd9e:	4013      	ands	r3, r2
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800cda8:	0112      	lsls	r2, r2, #4
 800cdaa:	430a      	orrs	r2, r1
 800cdac:	4967      	ldr	r1, [pc, #412]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	628b      	str	r3, [r1, #40]	@ 0x28
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdc0:	3b01      	subs	r3, #1
 800cdc2:	025b      	lsls	r3, r3, #9
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	431a      	orrs	r2, r3
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	041b      	lsls	r3, r3, #16
 800cdd0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cdd4:	431a      	orrs	r2, r3
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdda:	3b01      	subs	r3, #1
 800cddc:	061b      	lsls	r3, r3, #24
 800cdde:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cde2:	495a      	ldr	r1, [pc, #360]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800cde4:	4313      	orrs	r3, r2
 800cde6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800cde8:	4b58      	ldr	r3, [pc, #352]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800cdea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdec:	4a57      	ldr	r2, [pc, #348]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800cdee:	f023 0301 	bic.w	r3, r3, #1
 800cdf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800cdf4:	4b55      	ldr	r3, [pc, #340]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800cdf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cdf8:	4b56      	ldr	r3, [pc, #344]	@ (800cf54 <HAL_RCC_OscConfig+0x71c>)
 800cdfa:	4013      	ands	r3, r2
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ce00:	00d2      	lsls	r2, r2, #3
 800ce02:	4952      	ldr	r1, [pc, #328]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800ce04:	4313      	orrs	r3, r2
 800ce06:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ce08:	4b50      	ldr	r3, [pc, #320]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800ce0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce0c:	f023 020c 	bic.w	r2, r3, #12
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce14:	494d      	ldr	r1, [pc, #308]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800ce16:	4313      	orrs	r3, r2
 800ce18:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ce1a:	4b4c      	ldr	r3, [pc, #304]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800ce1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce1e:	f023 0202 	bic.w	r2, r3, #2
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce26:	4949      	ldr	r1, [pc, #292]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ce2c:	4b47      	ldr	r3, [pc, #284]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800ce2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce30:	4a46      	ldr	r2, [pc, #280]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800ce32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ce36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce38:	4b44      	ldr	r3, [pc, #272]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800ce3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce3c:	4a43      	ldr	r2, [pc, #268]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800ce3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ce44:	4b41      	ldr	r3, [pc, #260]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800ce46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce48:	4a40      	ldr	r2, [pc, #256]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800ce4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ce4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800ce50:	4b3e      	ldr	r3, [pc, #248]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800ce52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce54:	4a3d      	ldr	r2, [pc, #244]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800ce56:	f043 0301 	orr.w	r3, r3, #1
 800ce5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ce5c:	4b3b      	ldr	r3, [pc, #236]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a3a      	ldr	r2, [pc, #232]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800ce62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ce66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce68:	f7fa fa1c 	bl	80072a4 <HAL_GetTick>
 800ce6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ce6e:	e008      	b.n	800ce82 <HAL_RCC_OscConfig+0x64a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce70:	f7fa fa18 	bl	80072a4 <HAL_GetTick>
 800ce74:	4602      	mov	r2, r0
 800ce76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce78:	1ad3      	subs	r3, r2, r3
 800ce7a:	2b02      	cmp	r3, #2
 800ce7c:	d901      	bls.n	800ce82 <HAL_RCC_OscConfig+0x64a>
          {
            return HAL_TIMEOUT;
 800ce7e:	2303      	movs	r3, #3
 800ce80:	e05f      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ce82:	4b32      	ldr	r3, [pc, #200]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d0f0      	beq.n	800ce70 <HAL_RCC_OscConfig+0x638>
 800ce8e:	e057      	b.n	800cf40 <HAL_RCC_OscConfig+0x708>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce90:	4b2e      	ldr	r3, [pc, #184]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a2d      	ldr	r2, [pc, #180]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800ce96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ce9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce9c:	f7fa fa02 	bl	80072a4 <HAL_GetTick>
 800cea0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cea2:	e008      	b.n	800ceb6 <HAL_RCC_OscConfig+0x67e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cea4:	f7fa f9fe 	bl	80072a4 <HAL_GetTick>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceac:	1ad3      	subs	r3, r2, r3
 800ceae:	2b02      	cmp	r3, #2
 800ceb0:	d901      	bls.n	800ceb6 <HAL_RCC_OscConfig+0x67e>
          {
            return HAL_TIMEOUT;
 800ceb2:	2303      	movs	r3, #3
 800ceb4:	e045      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ceb6:	4b25      	ldr	r3, [pc, #148]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d1f0      	bne.n	800cea4 <HAL_RCC_OscConfig+0x66c>
 800cec2:	e03d      	b.n	800cf40 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800cec4:	4b21      	ldr	r3, [pc, #132]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800cec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cec8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ceca:	4b20      	ldr	r3, [pc, #128]	@ (800cf4c <HAL_RCC_OscConfig+0x714>)
 800cecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cece:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d031      	beq.n	800cf3c <HAL_RCC_OscConfig+0x704>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	f003 0203 	and.w	r2, r3, #3
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d12a      	bne.n	800cf3c <HAL_RCC_OscConfig+0x704>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	091b      	lsrs	r3, r3, #4
 800ceea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d122      	bne.n	800cf3c <HAL_RCC_OscConfig+0x704>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf00:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d11a      	bne.n	800cf3c <HAL_RCC_OscConfig+0x704>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	0a5b      	lsrs	r3, r3, #9
 800cf0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf12:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d111      	bne.n	800cf3c <HAL_RCC_OscConfig+0x704>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	0c1b      	lsrs	r3, r3, #16
 800cf1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf24:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d108      	bne.n	800cf3c <HAL_RCC_OscConfig+0x704>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	0e1b      	lsrs	r3, r3, #24
 800cf2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf36:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d001      	beq.n	800cf40 <HAL_RCC_OscConfig+0x708>
      {
        return HAL_ERROR;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	e000      	b.n	800cf42 <HAL_RCC_OscConfig+0x70a>
      }
    }
  }
  return HAL_OK;
 800cf40:	2300      	movs	r3, #0
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3730      	adds	r7, #48	@ 0x30
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	58024400 	.word	0x58024400
 800cf50:	fffffc0c 	.word	0xfffffc0c
 800cf54:	ffff0007 	.word	0xffff0007

0800cf58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b086      	sub	sp, #24
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d101      	bne.n	800cf6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	e19c      	b.n	800d2a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cf6c:	4b8a      	ldr	r3, [pc, #552]	@ (800d198 <HAL_RCC_ClockConfig+0x240>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f003 030f 	and.w	r3, r3, #15
 800cf74:	683a      	ldr	r2, [r7, #0]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d910      	bls.n	800cf9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf7a:	4b87      	ldr	r3, [pc, #540]	@ (800d198 <HAL_RCC_ClockConfig+0x240>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f023 020f 	bic.w	r2, r3, #15
 800cf82:	4985      	ldr	r1, [pc, #532]	@ (800d198 <HAL_RCC_ClockConfig+0x240>)
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	4313      	orrs	r3, r2
 800cf88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf8a:	4b83      	ldr	r3, [pc, #524]	@ (800d198 <HAL_RCC_ClockConfig+0x240>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f003 030f 	and.w	r3, r3, #15
 800cf92:	683a      	ldr	r2, [r7, #0]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d001      	beq.n	800cf9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	e184      	b.n	800d2a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f003 0304 	and.w	r3, r3, #4
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d010      	beq.n	800cfca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	691a      	ldr	r2, [r3, #16]
 800cfac:	4b7b      	ldr	r3, [pc, #492]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800cfae:	699b      	ldr	r3, [r3, #24]
 800cfb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d908      	bls.n	800cfca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800cfb8:	4b78      	ldr	r3, [pc, #480]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800cfba:	699b      	ldr	r3, [r3, #24]
 800cfbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	691b      	ldr	r3, [r3, #16]
 800cfc4:	4975      	ldr	r1, [pc, #468]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f003 0308 	and.w	r3, r3, #8
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d010      	beq.n	800cff8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	695a      	ldr	r2, [r3, #20]
 800cfda:	4b70      	ldr	r3, [pc, #448]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800cfdc:	69db      	ldr	r3, [r3, #28]
 800cfde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d908      	bls.n	800cff8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800cfe6:	4b6d      	ldr	r3, [pc, #436]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800cfe8:	69db      	ldr	r3, [r3, #28]
 800cfea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	695b      	ldr	r3, [r3, #20]
 800cff2:	496a      	ldr	r1, [pc, #424]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800cff4:	4313      	orrs	r3, r2
 800cff6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f003 0310 	and.w	r3, r3, #16
 800d000:	2b00      	cmp	r3, #0
 800d002:	d010      	beq.n	800d026 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	699a      	ldr	r2, [r3, #24]
 800d008:	4b64      	ldr	r3, [pc, #400]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d00a:	69db      	ldr	r3, [r3, #28]
 800d00c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d010:	429a      	cmp	r2, r3
 800d012:	d908      	bls.n	800d026 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d014:	4b61      	ldr	r3, [pc, #388]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d016:	69db      	ldr	r3, [r3, #28]
 800d018:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	699b      	ldr	r3, [r3, #24]
 800d020:	495e      	ldr	r1, [pc, #376]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d022:	4313      	orrs	r3, r2
 800d024:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f003 0320 	and.w	r3, r3, #32
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d010      	beq.n	800d054 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	69da      	ldr	r2, [r3, #28]
 800d036:	4b59      	ldr	r3, [pc, #356]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d038:	6a1b      	ldr	r3, [r3, #32]
 800d03a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d03e:	429a      	cmp	r2, r3
 800d040:	d908      	bls.n	800d054 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800d042:	4b56      	ldr	r3, [pc, #344]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d044:	6a1b      	ldr	r3, [r3, #32]
 800d046:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	69db      	ldr	r3, [r3, #28]
 800d04e:	4953      	ldr	r1, [pc, #332]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d050:	4313      	orrs	r3, r2
 800d052:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f003 0302 	and.w	r3, r3, #2
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d010      	beq.n	800d082 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	68da      	ldr	r2, [r3, #12]
 800d064:	4b4d      	ldr	r3, [pc, #308]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d066:	699b      	ldr	r3, [r3, #24]
 800d068:	f003 030f 	and.w	r3, r3, #15
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d908      	bls.n	800d082 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d070:	4b4a      	ldr	r3, [pc, #296]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d072:	699b      	ldr	r3, [r3, #24]
 800d074:	f023 020f 	bic.w	r2, r3, #15
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	68db      	ldr	r3, [r3, #12]
 800d07c:	4947      	ldr	r1, [pc, #284]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d07e:	4313      	orrs	r3, r2
 800d080:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f003 0301 	and.w	r3, r3, #1
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d055      	beq.n	800d13a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d08e:	4b43      	ldr	r3, [pc, #268]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d090:	699b      	ldr	r3, [r3, #24]
 800d092:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	4940      	ldr	r1, [pc, #256]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d09c:	4313      	orrs	r3, r2
 800d09e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	2b02      	cmp	r3, #2
 800d0a6:	d107      	bne.n	800d0b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d0a8:	4b3c      	ldr	r3, [pc, #240]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d121      	bne.n	800d0f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e0f6      	b.n	800d2a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	2b03      	cmp	r3, #3
 800d0be:	d107      	bne.n	800d0d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d0c0:	4b36      	ldr	r3, [pc, #216]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d115      	bne.n	800d0f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	e0ea      	b.n	800d2a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d107      	bne.n	800d0e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d0d8:	4b30      	ldr	r3, [pc, #192]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d109      	bne.n	800d0f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	e0de      	b.n	800d2a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d0e8:	4b2c      	ldr	r3, [pc, #176]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f003 0304 	and.w	r3, r3, #4
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d101      	bne.n	800d0f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	e0d6      	b.n	800d2a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d0f8:	4b28      	ldr	r3, [pc, #160]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	f023 0207 	bic.w	r2, r3, #7
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	4925      	ldr	r1, [pc, #148]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d106:	4313      	orrs	r3, r2
 800d108:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d10a:	f7fa f8cb 	bl	80072a4 <HAL_GetTick>
 800d10e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d110:	e00a      	b.n	800d128 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d112:	f7fa f8c7 	bl	80072a4 <HAL_GetTick>
 800d116:	4602      	mov	r2, r0
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	1ad3      	subs	r3, r2, r3
 800d11c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d120:	4293      	cmp	r3, r2
 800d122:	d901      	bls.n	800d128 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800d124:	2303      	movs	r3, #3
 800d126:	e0be      	b.n	800d2a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d128:	4b1c      	ldr	r3, [pc, #112]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d12a:	691b      	ldr	r3, [r3, #16]
 800d12c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	00db      	lsls	r3, r3, #3
 800d136:	429a      	cmp	r2, r3
 800d138:	d1eb      	bne.n	800d112 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f003 0302 	and.w	r3, r3, #2
 800d142:	2b00      	cmp	r3, #0
 800d144:	d010      	beq.n	800d168 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	68da      	ldr	r2, [r3, #12]
 800d14a:	4b14      	ldr	r3, [pc, #80]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d14c:	699b      	ldr	r3, [r3, #24]
 800d14e:	f003 030f 	and.w	r3, r3, #15
 800d152:	429a      	cmp	r2, r3
 800d154:	d208      	bcs.n	800d168 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d156:	4b11      	ldr	r3, [pc, #68]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d158:	699b      	ldr	r3, [r3, #24]
 800d15a:	f023 020f 	bic.w	r2, r3, #15
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	490e      	ldr	r1, [pc, #56]	@ (800d19c <HAL_RCC_ClockConfig+0x244>)
 800d164:	4313      	orrs	r3, r2
 800d166:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d168:	4b0b      	ldr	r3, [pc, #44]	@ (800d198 <HAL_RCC_ClockConfig+0x240>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f003 030f 	and.w	r3, r3, #15
 800d170:	683a      	ldr	r2, [r7, #0]
 800d172:	429a      	cmp	r2, r3
 800d174:	d214      	bcs.n	800d1a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d176:	4b08      	ldr	r3, [pc, #32]	@ (800d198 <HAL_RCC_ClockConfig+0x240>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f023 020f 	bic.w	r2, r3, #15
 800d17e:	4906      	ldr	r1, [pc, #24]	@ (800d198 <HAL_RCC_ClockConfig+0x240>)
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	4313      	orrs	r3, r2
 800d184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d186:	4b04      	ldr	r3, [pc, #16]	@ (800d198 <HAL_RCC_ClockConfig+0x240>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f003 030f 	and.w	r3, r3, #15
 800d18e:	683a      	ldr	r2, [r7, #0]
 800d190:	429a      	cmp	r2, r3
 800d192:	d005      	beq.n	800d1a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d194:	2301      	movs	r3, #1
 800d196:	e086      	b.n	800d2a6 <HAL_RCC_ClockConfig+0x34e>
 800d198:	52002000 	.word	0x52002000
 800d19c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f003 0304 	and.w	r3, r3, #4
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d010      	beq.n	800d1ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	691a      	ldr	r2, [r3, #16]
 800d1b0:	4b3f      	ldr	r3, [pc, #252]	@ (800d2b0 <HAL_RCC_ClockConfig+0x358>)
 800d1b2:	699b      	ldr	r3, [r3, #24]
 800d1b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d208      	bcs.n	800d1ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d1bc:	4b3c      	ldr	r3, [pc, #240]	@ (800d2b0 <HAL_RCC_ClockConfig+0x358>)
 800d1be:	699b      	ldr	r3, [r3, #24]
 800d1c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	691b      	ldr	r3, [r3, #16]
 800d1c8:	4939      	ldr	r1, [pc, #228]	@ (800d2b0 <HAL_RCC_ClockConfig+0x358>)
 800d1ca:	4313      	orrs	r3, r2
 800d1cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f003 0308 	and.w	r3, r3, #8
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d010      	beq.n	800d1fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	695a      	ldr	r2, [r3, #20]
 800d1de:	4b34      	ldr	r3, [pc, #208]	@ (800d2b0 <HAL_RCC_ClockConfig+0x358>)
 800d1e0:	69db      	ldr	r3, [r3, #28]
 800d1e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d208      	bcs.n	800d1fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d1ea:	4b31      	ldr	r3, [pc, #196]	@ (800d2b0 <HAL_RCC_ClockConfig+0x358>)
 800d1ec:	69db      	ldr	r3, [r3, #28]
 800d1ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	695b      	ldr	r3, [r3, #20]
 800d1f6:	492e      	ldr	r1, [pc, #184]	@ (800d2b0 <HAL_RCC_ClockConfig+0x358>)
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f003 0310 	and.w	r3, r3, #16
 800d204:	2b00      	cmp	r3, #0
 800d206:	d010      	beq.n	800d22a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	699a      	ldr	r2, [r3, #24]
 800d20c:	4b28      	ldr	r3, [pc, #160]	@ (800d2b0 <HAL_RCC_ClockConfig+0x358>)
 800d20e:	69db      	ldr	r3, [r3, #28]
 800d210:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d214:	429a      	cmp	r2, r3
 800d216:	d208      	bcs.n	800d22a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d218:	4b25      	ldr	r3, [pc, #148]	@ (800d2b0 <HAL_RCC_ClockConfig+0x358>)
 800d21a:	69db      	ldr	r3, [r3, #28]
 800d21c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	699b      	ldr	r3, [r3, #24]
 800d224:	4922      	ldr	r1, [pc, #136]	@ (800d2b0 <HAL_RCC_ClockConfig+0x358>)
 800d226:	4313      	orrs	r3, r2
 800d228:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f003 0320 	and.w	r3, r3, #32
 800d232:	2b00      	cmp	r3, #0
 800d234:	d010      	beq.n	800d258 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	69da      	ldr	r2, [r3, #28]
 800d23a:	4b1d      	ldr	r3, [pc, #116]	@ (800d2b0 <HAL_RCC_ClockConfig+0x358>)
 800d23c:	6a1b      	ldr	r3, [r3, #32]
 800d23e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d242:	429a      	cmp	r2, r3
 800d244:	d208      	bcs.n	800d258 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800d246:	4b1a      	ldr	r3, [pc, #104]	@ (800d2b0 <HAL_RCC_ClockConfig+0x358>)
 800d248:	6a1b      	ldr	r3, [r3, #32]
 800d24a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	69db      	ldr	r3, [r3, #28]
 800d252:	4917      	ldr	r1, [pc, #92]	@ (800d2b0 <HAL_RCC_ClockConfig+0x358>)
 800d254:	4313      	orrs	r3, r2
 800d256:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d258:	f000 f89e 	bl	800d398 <HAL_RCC_GetSysClockFreq>
 800d25c:	4602      	mov	r2, r0
 800d25e:	4b14      	ldr	r3, [pc, #80]	@ (800d2b0 <HAL_RCC_ClockConfig+0x358>)
 800d260:	699b      	ldr	r3, [r3, #24]
 800d262:	0a1b      	lsrs	r3, r3, #8
 800d264:	f003 030f 	and.w	r3, r3, #15
 800d268:	4912      	ldr	r1, [pc, #72]	@ (800d2b4 <HAL_RCC_ClockConfig+0x35c>)
 800d26a:	5ccb      	ldrb	r3, [r1, r3]
 800d26c:	f003 031f 	and.w	r3, r3, #31
 800d270:	fa22 f303 	lsr.w	r3, r2, r3
 800d274:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d276:	4b0e      	ldr	r3, [pc, #56]	@ (800d2b0 <HAL_RCC_ClockConfig+0x358>)
 800d278:	699b      	ldr	r3, [r3, #24]
 800d27a:	f003 030f 	and.w	r3, r3, #15
 800d27e:	4a0d      	ldr	r2, [pc, #52]	@ (800d2b4 <HAL_RCC_ClockConfig+0x35c>)
 800d280:	5cd3      	ldrb	r3, [r2, r3]
 800d282:	f003 031f 	and.w	r3, r3, #31
 800d286:	693a      	ldr	r2, [r7, #16]
 800d288:	fa22 f303 	lsr.w	r3, r2, r3
 800d28c:	4a0a      	ldr	r2, [pc, #40]	@ (800d2b8 <HAL_RCC_ClockConfig+0x360>)
 800d28e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d290:	4a0a      	ldr	r2, [pc, #40]	@ (800d2bc <HAL_RCC_ClockConfig+0x364>)
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800d296:	4b0a      	ldr	r3, [pc, #40]	@ (800d2c0 <HAL_RCC_ClockConfig+0x368>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7f9 ffb8 	bl	8007210 <HAL_InitTick>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3718      	adds	r7, #24
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	58024400 	.word	0x58024400
 800d2b4:	08015a3c 	.word	0x08015a3c
 800d2b8:	24000598 	.word	0x24000598
 800d2bc:	24000594 	.word	0x24000594
 800d2c0:	24000468 	.word	0x24000468

0800d2c4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b08c      	sub	sp, #48	@ 0x30
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d12a      	bne.n	800d32c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800d2d6:	4b2d      	ldr	r3, [pc, #180]	@ (800d38c <HAL_RCC_MCOConfig+0xc8>)
 800d2d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d2dc:	4a2b      	ldr	r2, [pc, #172]	@ (800d38c <HAL_RCC_MCOConfig+0xc8>)
 800d2de:	f043 0301 	orr.w	r3, r3, #1
 800d2e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d2e6:	4b29      	ldr	r3, [pc, #164]	@ (800d38c <HAL_RCC_MCOConfig+0xc8>)
 800d2e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d2ec:	f003 0301 	and.w	r3, r3, #1
 800d2f0:	61bb      	str	r3, [r7, #24]
 800d2f2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800d2f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d2f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2fa:	2302      	movs	r3, #2
 800d2fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d2fe:	2303      	movs	r3, #3
 800d300:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d302:	2300      	movs	r3, #0
 800d304:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800d306:	2300      	movs	r3, #0
 800d308:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800d30a:	f107 031c 	add.w	r3, r7, #28
 800d30e:	4619      	mov	r1, r3
 800d310:	481f      	ldr	r0, [pc, #124]	@ (800d390 <HAL_RCC_MCOConfig+0xcc>)
 800d312:	f7fd fabf 	bl	800a894 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800d316:	4b1d      	ldr	r3, [pc, #116]	@ (800d38c <HAL_RCC_MCOConfig+0xc8>)
 800d318:	691b      	ldr	r3, [r3, #16]
 800d31a:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800d31e:	68b9      	ldr	r1, [r7, #8]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	430b      	orrs	r3, r1
 800d324:	4919      	ldr	r1, [pc, #100]	@ (800d38c <HAL_RCC_MCOConfig+0xc8>)
 800d326:	4313      	orrs	r3, r2
 800d328:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800d32a:	e02a      	b.n	800d382 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800d32c:	4b17      	ldr	r3, [pc, #92]	@ (800d38c <HAL_RCC_MCOConfig+0xc8>)
 800d32e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d332:	4a16      	ldr	r2, [pc, #88]	@ (800d38c <HAL_RCC_MCOConfig+0xc8>)
 800d334:	f043 0304 	orr.w	r3, r3, #4
 800d338:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d33c:	4b13      	ldr	r3, [pc, #76]	@ (800d38c <HAL_RCC_MCOConfig+0xc8>)
 800d33e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d342:	f003 0304 	and.w	r3, r3, #4
 800d346:	617b      	str	r3, [r7, #20]
 800d348:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800d34a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d34e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d350:	2302      	movs	r3, #2
 800d352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d354:	2303      	movs	r3, #3
 800d356:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d358:	2300      	movs	r3, #0
 800d35a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800d35c:	2300      	movs	r3, #0
 800d35e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800d360:	f107 031c 	add.w	r3, r7, #28
 800d364:	4619      	mov	r1, r3
 800d366:	480b      	ldr	r0, [pc, #44]	@ (800d394 <HAL_RCC_MCOConfig+0xd0>)
 800d368:	f7fd fa94 	bl	800a894 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800d36c:	4b07      	ldr	r3, [pc, #28]	@ (800d38c <HAL_RCC_MCOConfig+0xc8>)
 800d36e:	691b      	ldr	r3, [r3, #16]
 800d370:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	01d9      	lsls	r1, r3, #7
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	430b      	orrs	r3, r1
 800d37c:	4903      	ldr	r1, [pc, #12]	@ (800d38c <HAL_RCC_MCOConfig+0xc8>)
 800d37e:	4313      	orrs	r3, r2
 800d380:	610b      	str	r3, [r1, #16]
}
 800d382:	bf00      	nop
 800d384:	3730      	adds	r7, #48	@ 0x30
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}
 800d38a:	bf00      	nop
 800d38c:	58024400 	.word	0x58024400
 800d390:	58020000 	.word	0x58020000
 800d394:	58020800 	.word	0x58020800

0800d398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d398:	b480      	push	{r7}
 800d39a:	b089      	sub	sp, #36	@ 0x24
 800d39c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d39e:	4bb3      	ldr	r3, [pc, #716]	@ (800d66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d3a6:	2b18      	cmp	r3, #24
 800d3a8:	f200 8155 	bhi.w	800d656 <HAL_RCC_GetSysClockFreq+0x2be>
 800d3ac:	a201      	add	r2, pc, #4	@ (adr r2, 800d3b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b2:	bf00      	nop
 800d3b4:	0800d419 	.word	0x0800d419
 800d3b8:	0800d657 	.word	0x0800d657
 800d3bc:	0800d657 	.word	0x0800d657
 800d3c0:	0800d657 	.word	0x0800d657
 800d3c4:	0800d657 	.word	0x0800d657
 800d3c8:	0800d657 	.word	0x0800d657
 800d3cc:	0800d657 	.word	0x0800d657
 800d3d0:	0800d657 	.word	0x0800d657
 800d3d4:	0800d43f 	.word	0x0800d43f
 800d3d8:	0800d657 	.word	0x0800d657
 800d3dc:	0800d657 	.word	0x0800d657
 800d3e0:	0800d657 	.word	0x0800d657
 800d3e4:	0800d657 	.word	0x0800d657
 800d3e8:	0800d657 	.word	0x0800d657
 800d3ec:	0800d657 	.word	0x0800d657
 800d3f0:	0800d657 	.word	0x0800d657
 800d3f4:	0800d445 	.word	0x0800d445
 800d3f8:	0800d657 	.word	0x0800d657
 800d3fc:	0800d657 	.word	0x0800d657
 800d400:	0800d657 	.word	0x0800d657
 800d404:	0800d657 	.word	0x0800d657
 800d408:	0800d657 	.word	0x0800d657
 800d40c:	0800d657 	.word	0x0800d657
 800d410:	0800d657 	.word	0x0800d657
 800d414:	0800d44b 	.word	0x0800d44b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d418:	4b94      	ldr	r3, [pc, #592]	@ (800d66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f003 0320 	and.w	r3, r3, #32
 800d420:	2b00      	cmp	r3, #0
 800d422:	d009      	beq.n	800d438 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d424:	4b91      	ldr	r3, [pc, #580]	@ (800d66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	08db      	lsrs	r3, r3, #3
 800d42a:	f003 0303 	and.w	r3, r3, #3
 800d42e:	4a90      	ldr	r2, [pc, #576]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d430:	fa22 f303 	lsr.w	r3, r2, r3
 800d434:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800d436:	e111      	b.n	800d65c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d438:	4b8d      	ldr	r3, [pc, #564]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d43a:	61bb      	str	r3, [r7, #24]
    break;
 800d43c:	e10e      	b.n	800d65c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800d43e:	4b8d      	ldr	r3, [pc, #564]	@ (800d674 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d440:	61bb      	str	r3, [r7, #24]
    break;
 800d442:	e10b      	b.n	800d65c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800d444:	4b8c      	ldr	r3, [pc, #560]	@ (800d678 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d446:	61bb      	str	r3, [r7, #24]
    break;
 800d448:	e108      	b.n	800d65c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d44a:	4b88      	ldr	r3, [pc, #544]	@ (800d66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d44c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d44e:	f003 0303 	and.w	r3, r3, #3
 800d452:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800d454:	4b85      	ldr	r3, [pc, #532]	@ (800d66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d458:	091b      	lsrs	r3, r3, #4
 800d45a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d45e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d460:	4b82      	ldr	r3, [pc, #520]	@ (800d66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d464:	f003 0301 	and.w	r3, r3, #1
 800d468:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800d46a:	4b80      	ldr	r3, [pc, #512]	@ (800d66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d46c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d46e:	08db      	lsrs	r3, r3, #3
 800d470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d474:	68fa      	ldr	r2, [r7, #12]
 800d476:	fb02 f303 	mul.w	r3, r2, r3
 800d47a:	ee07 3a90 	vmov	s15, r3
 800d47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d482:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	f000 80e1 	beq.w	800d650 <HAL_RCC_GetSysClockFreq+0x2b8>
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	2b02      	cmp	r3, #2
 800d492:	f000 8083 	beq.w	800d59c <HAL_RCC_GetSysClockFreq+0x204>
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	2b02      	cmp	r3, #2
 800d49a:	f200 80a1 	bhi.w	800d5e0 <HAL_RCC_GetSysClockFreq+0x248>
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d003      	beq.n	800d4ac <HAL_RCC_GetSysClockFreq+0x114>
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	d056      	beq.n	800d558 <HAL_RCC_GetSysClockFreq+0x1c0>
 800d4aa:	e099      	b.n	800d5e0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4ac:	4b6f      	ldr	r3, [pc, #444]	@ (800d66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f003 0320 	and.w	r3, r3, #32
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d02d      	beq.n	800d514 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d4b8:	4b6c      	ldr	r3, [pc, #432]	@ (800d66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	08db      	lsrs	r3, r3, #3
 800d4be:	f003 0303 	and.w	r3, r3, #3
 800d4c2:	4a6b      	ldr	r2, [pc, #428]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d4c4:	fa22 f303 	lsr.w	r3, r2, r3
 800d4c8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	ee07 3a90 	vmov	s15, r3
 800d4d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	ee07 3a90 	vmov	s15, r3
 800d4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4e2:	4b62      	ldr	r3, [pc, #392]	@ (800d66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ea:	ee07 3a90 	vmov	s15, r3
 800d4ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4f2:	ed97 6a02 	vldr	s12, [r7, #8]
 800d4f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800d67c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d4fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d50a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d50e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800d512:	e087      	b.n	800d624 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	ee07 3a90 	vmov	s15, r3
 800d51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d51e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800d680 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d526:	4b51      	ldr	r3, [pc, #324]	@ (800d66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d52a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d52e:	ee07 3a90 	vmov	s15, r3
 800d532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d536:	ed97 6a02 	vldr	s12, [r7, #8]
 800d53a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800d67c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d53e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d546:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d54a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d54e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d552:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d556:	e065      	b.n	800d624 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	ee07 3a90 	vmov	s15, r3
 800d55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d562:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800d684 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d56a:	4b40      	ldr	r3, [pc, #256]	@ (800d66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d56c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d56e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d572:	ee07 3a90 	vmov	s15, r3
 800d576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d57a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d57e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d67c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d58a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d58e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d592:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d596:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d59a:	e043      	b.n	800d624 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	ee07 3a90 	vmov	s15, r3
 800d5a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800d688 <HAL_RCC_GetSysClockFreq+0x2f0>
 800d5aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5ae:	4b2f      	ldr	r3, [pc, #188]	@ (800d66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5b6:	ee07 3a90 	vmov	s15, r3
 800d5ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5be:	ed97 6a02 	vldr	s12, [r7, #8]
 800d5c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800d67c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d5c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d5d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5de:	e021      	b.n	800d624 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	ee07 3a90 	vmov	s15, r3
 800d5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800d684 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d5ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5f2:	4b1e      	ldr	r3, [pc, #120]	@ (800d66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5fa:	ee07 3a90 	vmov	s15, r3
 800d5fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d602:	ed97 6a02 	vldr	s12, [r7, #8]
 800d606:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800d67c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d60a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d60e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d61a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d61e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d622:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800d624:	4b11      	ldr	r3, [pc, #68]	@ (800d66c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d628:	0a5b      	lsrs	r3, r3, #9
 800d62a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d62e:	3301      	adds	r3, #1
 800d630:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	ee07 3a90 	vmov	s15, r3
 800d638:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d63c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d648:	ee17 3a90 	vmov	r3, s15
 800d64c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800d64e:	e005      	b.n	800d65c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800d650:	2300      	movs	r3, #0
 800d652:	61bb      	str	r3, [r7, #24]
    break;
 800d654:	e002      	b.n	800d65c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800d656:	4b07      	ldr	r3, [pc, #28]	@ (800d674 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d658:	61bb      	str	r3, [r7, #24]
    break;
 800d65a:	bf00      	nop
  }

  return sysclockfreq;
 800d65c:	69bb      	ldr	r3, [r7, #24]
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3724      	adds	r7, #36	@ 0x24
 800d662:	46bd      	mov	sp, r7
 800d664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d668:	4770      	bx	lr
 800d66a:	bf00      	nop
 800d66c:	58024400 	.word	0x58024400
 800d670:	03d09000 	.word	0x03d09000
 800d674:	003d0900 	.word	0x003d0900
 800d678:	017d7840 	.word	0x017d7840
 800d67c:	46000000 	.word	0x46000000
 800d680:	4c742400 	.word	0x4c742400
 800d684:	4a742400 	.word	0x4a742400
 800d688:	4bbebc20 	.word	0x4bbebc20

0800d68c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d692:	f7ff fe81 	bl	800d398 <HAL_RCC_GetSysClockFreq>
 800d696:	4602      	mov	r2, r0
 800d698:	4b10      	ldr	r3, [pc, #64]	@ (800d6dc <HAL_RCC_GetHCLKFreq+0x50>)
 800d69a:	699b      	ldr	r3, [r3, #24]
 800d69c:	0a1b      	lsrs	r3, r3, #8
 800d69e:	f003 030f 	and.w	r3, r3, #15
 800d6a2:	490f      	ldr	r1, [pc, #60]	@ (800d6e0 <HAL_RCC_GetHCLKFreq+0x54>)
 800d6a4:	5ccb      	ldrb	r3, [r1, r3]
 800d6a6:	f003 031f 	and.w	r3, r3, #31
 800d6aa:	fa22 f303 	lsr.w	r3, r2, r3
 800d6ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d6b0:	4b0a      	ldr	r3, [pc, #40]	@ (800d6dc <HAL_RCC_GetHCLKFreq+0x50>)
 800d6b2:	699b      	ldr	r3, [r3, #24]
 800d6b4:	f003 030f 	and.w	r3, r3, #15
 800d6b8:	4a09      	ldr	r2, [pc, #36]	@ (800d6e0 <HAL_RCC_GetHCLKFreq+0x54>)
 800d6ba:	5cd3      	ldrb	r3, [r2, r3]
 800d6bc:	f003 031f 	and.w	r3, r3, #31
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	fa22 f303 	lsr.w	r3, r2, r3
 800d6c6:	4a07      	ldr	r2, [pc, #28]	@ (800d6e4 <HAL_RCC_GetHCLKFreq+0x58>)
 800d6c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d6ca:	4a07      	ldr	r2, [pc, #28]	@ (800d6e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d6d0:	4b04      	ldr	r3, [pc, #16]	@ (800d6e4 <HAL_RCC_GetHCLKFreq+0x58>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3708      	adds	r7, #8
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	58024400 	.word	0x58024400
 800d6e0:	08015a3c 	.word	0x08015a3c
 800d6e4:	24000598 	.word	0x24000598
 800d6e8:	24000594 	.word	0x24000594

0800d6ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d6f0:	f7ff ffcc 	bl	800d68c <HAL_RCC_GetHCLKFreq>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	4b06      	ldr	r3, [pc, #24]	@ (800d710 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d6f8:	69db      	ldr	r3, [r3, #28]
 800d6fa:	0a1b      	lsrs	r3, r3, #8
 800d6fc:	f003 0307 	and.w	r3, r3, #7
 800d700:	4904      	ldr	r1, [pc, #16]	@ (800d714 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d702:	5ccb      	ldrb	r3, [r1, r3]
 800d704:	f003 031f 	and.w	r3, r3, #31
 800d708:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	58024400 	.word	0x58024400
 800d714:	08015a3c 	.word	0x08015a3c

0800d718 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b086      	sub	sp, #24
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d720:	2300      	movs	r3, #0
 800d722:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d724:	2300      	movs	r3, #0
 800d726:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d730:	2b00      	cmp	r3, #0
 800d732:	d03f      	beq.n	800d7b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d738:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d73c:	d02a      	beq.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800d73e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d742:	d824      	bhi.n	800d78e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800d744:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d748:	d018      	beq.n	800d77c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d74a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d74e:	d81e      	bhi.n	800d78e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800d750:	2b00      	cmp	r3, #0
 800d752:	d003      	beq.n	800d75c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800d754:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d758:	d007      	beq.n	800d76a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800d75a:	e018      	b.n	800d78e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d75c:	4ba4      	ldr	r3, [pc, #656]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d75e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d760:	4aa3      	ldr	r2, [pc, #652]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d766:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800d768:	e015      	b.n	800d796 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	3304      	adds	r3, #4
 800d76e:	2102      	movs	r1, #2
 800d770:	4618      	mov	r0, r3
 800d772:	f002 f84f 	bl	800f814 <RCCEx_PLL2_Config>
 800d776:	4603      	mov	r3, r0
 800d778:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800d77a:	e00c      	b.n	800d796 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	3324      	adds	r3, #36	@ 0x24
 800d780:	2102      	movs	r1, #2
 800d782:	4618      	mov	r0, r3
 800d784:	f002 f8f8 	bl	800f978 <RCCEx_PLL3_Config>
 800d788:	4603      	mov	r3, r0
 800d78a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800d78c:	e003      	b.n	800d796 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d78e:	2301      	movs	r3, #1
 800d790:	75fb      	strb	r3, [r7, #23]
      break;
 800d792:	e000      	b.n	800d796 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800d794:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d796:	7dfb      	ldrb	r3, [r7, #23]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d109      	bne.n	800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d79c:	4b94      	ldr	r3, [pc, #592]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d79e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7a0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d7a8:	4991      	ldr	r1, [pc, #580]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	650b      	str	r3, [r1, #80]	@ 0x50
 800d7ae:	e001      	b.n	800d7b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7b0:	7dfb      	ldrb	r3, [r7, #23]
 800d7b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d03d      	beq.n	800d83c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7c4:	2b04      	cmp	r3, #4
 800d7c6:	d826      	bhi.n	800d816 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800d7c8:	a201      	add	r2, pc, #4	@ (adr r2, 800d7d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800d7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ce:	bf00      	nop
 800d7d0:	0800d7e5 	.word	0x0800d7e5
 800d7d4:	0800d7f3 	.word	0x0800d7f3
 800d7d8:	0800d805 	.word	0x0800d805
 800d7dc:	0800d81d 	.word	0x0800d81d
 800d7e0:	0800d81d 	.word	0x0800d81d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d7e4:	4b82      	ldr	r3, [pc, #520]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d7e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7e8:	4a81      	ldr	r2, [pc, #516]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d7ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d7ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d7f0:	e015      	b.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	3304      	adds	r3, #4
 800d7f6:	2100      	movs	r1, #0
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f002 f80b 	bl	800f814 <RCCEx_PLL2_Config>
 800d7fe:	4603      	mov	r3, r0
 800d800:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d802:	e00c      	b.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	3324      	adds	r3, #36	@ 0x24
 800d808:	2100      	movs	r1, #0
 800d80a:	4618      	mov	r0, r3
 800d80c:	f002 f8b4 	bl	800f978 <RCCEx_PLL3_Config>
 800d810:	4603      	mov	r3, r0
 800d812:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d814:	e003      	b.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d816:	2301      	movs	r3, #1
 800d818:	75fb      	strb	r3, [r7, #23]
      break;
 800d81a:	e000      	b.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800d81c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d81e:	7dfb      	ldrb	r3, [r7, #23]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d109      	bne.n	800d838 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d824:	4b72      	ldr	r3, [pc, #456]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d828:	f023 0207 	bic.w	r2, r3, #7
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d830:	496f      	ldr	r1, [pc, #444]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d832:	4313      	orrs	r3, r2
 800d834:	650b      	str	r3, [r1, #80]	@ 0x50
 800d836:	e001      	b.n	800d83c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d838:	7dfb      	ldrb	r3, [r7, #23]
 800d83a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d844:	2b00      	cmp	r3, #0
 800d846:	d051      	beq.n	800d8ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d84e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800d852:	d036      	beq.n	800d8c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800d854:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800d858:	d830      	bhi.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800d85a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d85e:	d032      	beq.n	800d8c6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800d860:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d864:	d82a      	bhi.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800d866:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d86a:	d02e      	beq.n	800d8ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800d86c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d870:	d824      	bhi.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800d872:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d876:	d018      	beq.n	800d8aa <HAL_RCCEx_PeriphCLKConfig+0x192>
 800d878:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d87c:	d81e      	bhi.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d003      	beq.n	800d88a <HAL_RCCEx_PeriphCLKConfig+0x172>
 800d882:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d886:	d007      	beq.n	800d898 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800d888:	e018      	b.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d88a:	4b59      	ldr	r3, [pc, #356]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d88c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d88e:	4a58      	ldr	r2, [pc, #352]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d894:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d896:	e019      	b.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	3304      	adds	r3, #4
 800d89c:	2100      	movs	r1, #0
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f001 ffb8 	bl	800f814 <RCCEx_PLL2_Config>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800d8a8:	e010      	b.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	3324      	adds	r3, #36	@ 0x24
 800d8ae:	2100      	movs	r1, #0
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f002 f861 	bl	800f978 <RCCEx_PLL3_Config>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d8ba:	e007      	b.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800d8bc:	2301      	movs	r3, #1
 800d8be:	75fb      	strb	r3, [r7, #23]
      break;
 800d8c0:	e004      	b.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800d8c2:	bf00      	nop
 800d8c4:	e002      	b.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800d8c6:	bf00      	nop
 800d8c8:	e000      	b.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800d8ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d8cc:	7dfb      	ldrb	r3, [r7, #23]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d10a      	bne.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800d8d2:	4b47      	ldr	r3, [pc, #284]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d8d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8d6:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d8e0:	4943      	ldr	r1, [pc, #268]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	658b      	str	r3, [r1, #88]	@ 0x58
 800d8e6:	e001      	b.n	800d8ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8e8:	7dfb      	ldrb	r3, [r7, #23]
 800d8ea:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d051      	beq.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d8fe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800d902:	d036      	beq.n	800d972 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800d904:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800d908:	d830      	bhi.n	800d96c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800d90a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d90e:	d032      	beq.n	800d976 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800d910:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d914:	d82a      	bhi.n	800d96c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800d916:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d91a:	d02e      	beq.n	800d97a <HAL_RCCEx_PeriphCLKConfig+0x262>
 800d91c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d920:	d824      	bhi.n	800d96c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800d922:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d926:	d018      	beq.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0x242>
 800d928:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d92c:	d81e      	bhi.n	800d96c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d003      	beq.n	800d93a <HAL_RCCEx_PeriphCLKConfig+0x222>
 800d932:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d936:	d007      	beq.n	800d948 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800d938:	e018      	b.n	800d96c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d93a:	4b2d      	ldr	r3, [pc, #180]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d93c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d93e:	4a2c      	ldr	r2, [pc, #176]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d944:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d946:	e019      	b.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	3304      	adds	r3, #4
 800d94c:	2100      	movs	r1, #0
 800d94e:	4618      	mov	r0, r3
 800d950:	f001 ff60 	bl	800f814 <RCCEx_PLL2_Config>
 800d954:	4603      	mov	r3, r0
 800d956:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800d958:	e010      	b.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	3324      	adds	r3, #36	@ 0x24
 800d95e:	2100      	movs	r1, #0
 800d960:	4618      	mov	r0, r3
 800d962:	f002 f809 	bl	800f978 <RCCEx_PLL3_Config>
 800d966:	4603      	mov	r3, r0
 800d968:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d96a:	e007      	b.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800d96c:	2301      	movs	r3, #1
 800d96e:	75fb      	strb	r3, [r7, #23]
      break;
 800d970:	e004      	b.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800d972:	bf00      	nop
 800d974:	e002      	b.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800d976:	bf00      	nop
 800d978:	e000      	b.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800d97a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d97c:	7dfb      	ldrb	r3, [r7, #23]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d10a      	bne.n	800d998 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800d982:	4b1b      	ldr	r3, [pc, #108]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d986:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d990:	4917      	ldr	r1, [pc, #92]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d992:	4313      	orrs	r3, r2
 800d994:	658b      	str	r3, [r1, #88]	@ 0x58
 800d996:	e001      	b.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d998:	7dfb      	ldrb	r3, [r7, #23]
 800d99a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d035      	beq.n	800da14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d9ac:	2b30      	cmp	r3, #48	@ 0x30
 800d9ae:	d01c      	beq.n	800d9ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800d9b0:	2b30      	cmp	r3, #48	@ 0x30
 800d9b2:	d817      	bhi.n	800d9e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800d9b4:	2b20      	cmp	r3, #32
 800d9b6:	d00c      	beq.n	800d9d2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800d9b8:	2b20      	cmp	r3, #32
 800d9ba:	d813      	bhi.n	800d9e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d019      	beq.n	800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800d9c0:	2b10      	cmp	r3, #16
 800d9c2:	d10f      	bne.n	800d9e4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d9c4:	4b0a      	ldr	r3, [pc, #40]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9c8:	4a09      	ldr	r2, [pc, #36]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d9ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d9ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800d9d0:	e011      	b.n	800d9f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	3304      	adds	r3, #4
 800d9d6:	2102      	movs	r1, #2
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f001 ff1b 	bl	800f814 <RCCEx_PLL2_Config>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800d9e2:	e008      	b.n	800d9f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	75fb      	strb	r3, [r7, #23]
      break;
 800d9e8:	e005      	b.n	800d9f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800d9ea:	bf00      	nop
 800d9ec:	e003      	b.n	800d9f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800d9ee:	bf00      	nop
 800d9f0:	58024400 	.word	0x58024400
      break;
 800d9f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d9f6:	7dfb      	ldrb	r3, [r7, #23]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d109      	bne.n	800da10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800d9fc:	4ba3      	ldr	r3, [pc, #652]	@ (800dc8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800d9fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da00:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da08:	49a0      	ldr	r1, [pc, #640]	@ (800dc8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800da0a:	4313      	orrs	r3, r2
 800da0c:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800da0e:	e001      	b.n	800da14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da10:	7dfb      	ldrb	r3, [r7, #23]
 800da12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d047      	beq.n	800dab0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800da28:	d030      	beq.n	800da8c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800da2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800da2e:	d82a      	bhi.n	800da86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800da30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800da34:	d02c      	beq.n	800da90 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800da36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800da3a:	d824      	bhi.n	800da86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800da3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da40:	d018      	beq.n	800da74 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800da42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da46:	d81e      	bhi.n	800da86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d003      	beq.n	800da54 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800da4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da50:	d007      	beq.n	800da62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800da52:	e018      	b.n	800da86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da54:	4b8d      	ldr	r3, [pc, #564]	@ (800dc8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800da56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da58:	4a8c      	ldr	r2, [pc, #560]	@ (800dc8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800da5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800da5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800da60:	e017      	b.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	3304      	adds	r3, #4
 800da66:	2100      	movs	r1, #0
 800da68:	4618      	mov	r0, r3
 800da6a:	f001 fed3 	bl	800f814 <RCCEx_PLL2_Config>
 800da6e:	4603      	mov	r3, r0
 800da70:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800da72:	e00e      	b.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	3324      	adds	r3, #36	@ 0x24
 800da78:	2100      	movs	r1, #0
 800da7a:	4618      	mov	r0, r3
 800da7c:	f001 ff7c 	bl	800f978 <RCCEx_PLL3_Config>
 800da80:	4603      	mov	r3, r0
 800da82:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800da84:	e005      	b.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800da86:	2301      	movs	r3, #1
 800da88:	75fb      	strb	r3, [r7, #23]
      break;
 800da8a:	e002      	b.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800da8c:	bf00      	nop
 800da8e:	e000      	b.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800da90:	bf00      	nop
    }

    if(ret == HAL_OK)
 800da92:	7dfb      	ldrb	r3, [r7, #23]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d109      	bne.n	800daac <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800da98:	4b7c      	ldr	r3, [pc, #496]	@ (800dc8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800da9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da9c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800daa4:	4979      	ldr	r1, [pc, #484]	@ (800dc8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800daa6:	4313      	orrs	r3, r2
 800daa8:	650b      	str	r3, [r1, #80]	@ 0x50
 800daaa:	e001      	b.n	800dab0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800daac:	7dfb      	ldrb	r3, [r7, #23]
 800daae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d049      	beq.n	800db50 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dac0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dac4:	d02e      	beq.n	800db24 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800dac6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800daca:	d828      	bhi.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800dacc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dad0:	d02a      	beq.n	800db28 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800dad2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dad6:	d822      	bhi.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800dad8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dadc:	d026      	beq.n	800db2c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800dade:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dae2:	d81c      	bhi.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800dae4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dae8:	d010      	beq.n	800db0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800daea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800daee:	d816      	bhi.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d01d      	beq.n	800db30 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800daf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800daf8:	d111      	bne.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	3304      	adds	r3, #4
 800dafe:	2101      	movs	r1, #1
 800db00:	4618      	mov	r0, r3
 800db02:	f001 fe87 	bl	800f814 <RCCEx_PLL2_Config>
 800db06:	4603      	mov	r3, r0
 800db08:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800db0a:	e012      	b.n	800db32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	3324      	adds	r3, #36	@ 0x24
 800db10:	2101      	movs	r1, #1
 800db12:	4618      	mov	r0, r3
 800db14:	f001 ff30 	bl	800f978 <RCCEx_PLL3_Config>
 800db18:	4603      	mov	r3, r0
 800db1a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800db1c:	e009      	b.n	800db32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800db1e:	2301      	movs	r3, #1
 800db20:	75fb      	strb	r3, [r7, #23]
      break;
 800db22:	e006      	b.n	800db32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800db24:	bf00      	nop
 800db26:	e004      	b.n	800db32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800db28:	bf00      	nop
 800db2a:	e002      	b.n	800db32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800db2c:	bf00      	nop
 800db2e:	e000      	b.n	800db32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800db30:	bf00      	nop
    }

    if(ret == HAL_OK)
 800db32:	7dfb      	ldrb	r3, [r7, #23]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d109      	bne.n	800db4c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800db38:	4b54      	ldr	r3, [pc, #336]	@ (800dc8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800db3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db3c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db44:	4951      	ldr	r1, [pc, #324]	@ (800dc8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800db46:	4313      	orrs	r3, r2
 800db48:	650b      	str	r3, [r1, #80]	@ 0x50
 800db4a:	e001      	b.n	800db50 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db4c:	7dfb      	ldrb	r3, [r7, #23]
 800db4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d04b      	beq.n	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800db62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800db66:	d02e      	beq.n	800dbc6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800db68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800db6c:	d828      	bhi.n	800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800db6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db72:	d02a      	beq.n	800dbca <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800db74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db78:	d822      	bhi.n	800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800db7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800db7e:	d026      	beq.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800db80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800db84:	d81c      	bhi.n	800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800db86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db8a:	d010      	beq.n	800dbae <HAL_RCCEx_PeriphCLKConfig+0x496>
 800db8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db90:	d816      	bhi.n	800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800db92:	2b00      	cmp	r3, #0
 800db94:	d01d      	beq.n	800dbd2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800db96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db9a:	d111      	bne.n	800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	3304      	adds	r3, #4
 800dba0:	2101      	movs	r1, #1
 800dba2:	4618      	mov	r0, r3
 800dba4:	f001 fe36 	bl	800f814 <RCCEx_PLL2_Config>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800dbac:	e012      	b.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	3324      	adds	r3, #36	@ 0x24
 800dbb2:	2101      	movs	r1, #1
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f001 fedf 	bl	800f978 <RCCEx_PLL3_Config>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800dbbe:	e009      	b.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	75fb      	strb	r3, [r7, #23]
      break;
 800dbc4:	e006      	b.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800dbc6:	bf00      	nop
 800dbc8:	e004      	b.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800dbca:	bf00      	nop
 800dbcc:	e002      	b.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800dbce:	bf00      	nop
 800dbd0:	e000      	b.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800dbd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dbd4:	7dfb      	ldrb	r3, [r7, #23]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d10a      	bne.n	800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800dbda:	4b2c      	ldr	r3, [pc, #176]	@ (800dc8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dbdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbde:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800dbe8:	4928      	ldr	r1, [pc, #160]	@ (800dc8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dbea:	4313      	orrs	r3, r2
 800dbec:	658b      	str	r3, [r1, #88]	@ 0x58
 800dbee:	e001      	b.n	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbf0:	7dfb      	ldrb	r3, [r7, #23]
 800dbf2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d02f      	beq.n	800dc60 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dc04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dc08:	d00e      	beq.n	800dc28 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800dc0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dc0e:	d814      	bhi.n	800dc3a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d015      	beq.n	800dc40 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800dc14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc18:	d10f      	bne.n	800dc3a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc1a:	4b1c      	ldr	r3, [pc, #112]	@ (800dc8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dc1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc1e:	4a1b      	ldr	r2, [pc, #108]	@ (800dc8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dc20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc24:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800dc26:	e00c      	b.n	800dc42 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	3304      	adds	r3, #4
 800dc2c:	2101      	movs	r1, #1
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f001 fdf0 	bl	800f814 <RCCEx_PLL2_Config>
 800dc34:	4603      	mov	r3, r0
 800dc36:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800dc38:	e003      	b.n	800dc42 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	75fb      	strb	r3, [r7, #23]
      break;
 800dc3e:	e000      	b.n	800dc42 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800dc40:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dc42:	7dfb      	ldrb	r3, [r7, #23]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d109      	bne.n	800dc5c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800dc48:	4b10      	ldr	r3, [pc, #64]	@ (800dc8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dc4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc4c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dc54:	490d      	ldr	r1, [pc, #52]	@ (800dc8c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dc56:	4313      	orrs	r3, r2
 800dc58:	650b      	str	r3, [r1, #80]	@ 0x50
 800dc5a:	e001      	b.n	800dc60 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc5c:	7dfb      	ldrb	r3, [r7, #23]
 800dc5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d034      	beq.n	800dcd6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc70:	2b03      	cmp	r3, #3
 800dc72:	d81d      	bhi.n	800dcb0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800dc74:	a201      	add	r2, pc, #4	@ (adr r2, 800dc7c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800dc76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc7a:	bf00      	nop
 800dc7c:	0800dcb7 	.word	0x0800dcb7
 800dc80:	0800dc91 	.word	0x0800dc91
 800dc84:	0800dc9f 	.word	0x0800dc9f
 800dc88:	0800dcb7 	.word	0x0800dcb7
 800dc8c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc90:	4bb1      	ldr	r3, [pc, #708]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dc92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc94:	4ab0      	ldr	r2, [pc, #704]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dc96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800dc9c:	e00c      	b.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	3304      	adds	r3, #4
 800dca2:	2102      	movs	r1, #2
 800dca4:	4618      	mov	r0, r3
 800dca6:	f001 fdb5 	bl	800f814 <RCCEx_PLL2_Config>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800dcae:	e003      	b.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	75fb      	strb	r3, [r7, #23]
      break;
 800dcb4:	e000      	b.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800dcb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dcb8:	7dfb      	ldrb	r3, [r7, #23]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d109      	bne.n	800dcd2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800dcbe:	4ba6      	ldr	r3, [pc, #664]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dcc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcc2:	f023 0203 	bic.w	r2, r3, #3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcca:	49a3      	ldr	r1, [pc, #652]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dccc:	4313      	orrs	r3, r2
 800dcce:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800dcd0:	e001      	b.n	800dcd6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcd2:	7dfb      	ldrb	r3, [r7, #23]
 800dcd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	f000 8086 	beq.w	800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dce4:	4b9d      	ldr	r3, [pc, #628]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4a9c      	ldr	r2, [pc, #624]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800dcea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dcee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dcf0:	f7f9 fad8 	bl	80072a4 <HAL_GetTick>
 800dcf4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dcf6:	e009      	b.n	800dd0c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dcf8:	f7f9 fad4 	bl	80072a4 <HAL_GetTick>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	1ad3      	subs	r3, r2, r3
 800dd02:	2b64      	cmp	r3, #100	@ 0x64
 800dd04:	d902      	bls.n	800dd0c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800dd06:	2303      	movs	r3, #3
 800dd08:	75fb      	strb	r3, [r7, #23]
        break;
 800dd0a:	e005      	b.n	800dd18 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dd0c:	4b93      	ldr	r3, [pc, #588]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d0ef      	beq.n	800dcf8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800dd18:	7dfb      	ldrb	r3, [r7, #23]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d166      	bne.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800dd1e:	4b8e      	ldr	r3, [pc, #568]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dd20:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800dd28:	4053      	eors	r3, r2
 800dd2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d013      	beq.n	800dd5a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800dd32:	4b89      	ldr	r3, [pc, #548]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dd34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dd3a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800dd3c:	4b86      	ldr	r3, [pc, #536]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dd3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd40:	4a85      	ldr	r2, [pc, #532]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dd42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dd46:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800dd48:	4b83      	ldr	r3, [pc, #524]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dd4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd4c:	4a82      	ldr	r2, [pc, #520]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dd4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dd52:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800dd54:	4a80      	ldr	r2, [pc, #512]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800dd60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd64:	d115      	bne.n	800dd92 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd66:	f7f9 fa9d 	bl	80072a4 <HAL_GetTick>
 800dd6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dd6c:	e00b      	b.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dd6e:	f7f9 fa99 	bl	80072a4 <HAL_GetTick>
 800dd72:	4602      	mov	r2, r0
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	1ad3      	subs	r3, r2, r3
 800dd78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d902      	bls.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800dd80:	2303      	movs	r3, #3
 800dd82:	75fb      	strb	r3, [r7, #23]
            break;
 800dd84:	e005      	b.n	800dd92 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dd86:	4b74      	ldr	r3, [pc, #464]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dd88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd8a:	f003 0302 	and.w	r3, r3, #2
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d0ed      	beq.n	800dd6e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800dd92:	7dfb      	ldrb	r3, [r7, #23]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d126      	bne.n	800dde6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800dd9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dda2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dda6:	d10d      	bne.n	800ddc4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800dda8:	4b6b      	ldr	r3, [pc, #428]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ddaa:	691b      	ldr	r3, [r3, #16]
 800ddac:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ddb6:	0919      	lsrs	r1, r3, #4
 800ddb8:	4b69      	ldr	r3, [pc, #420]	@ (800df60 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ddba:	400b      	ands	r3, r1
 800ddbc:	4966      	ldr	r1, [pc, #408]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ddbe:	4313      	orrs	r3, r2
 800ddc0:	610b      	str	r3, [r1, #16]
 800ddc2:	e005      	b.n	800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800ddc4:	4b64      	ldr	r3, [pc, #400]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ddc6:	691b      	ldr	r3, [r3, #16]
 800ddc8:	4a63      	ldr	r2, [pc, #396]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ddca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ddce:	6113      	str	r3, [r2, #16]
 800ddd0:	4b61      	ldr	r3, [pc, #388]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ddd2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ddda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ddde:	495e      	ldr	r1, [pc, #376]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dde0:	4313      	orrs	r3, r2
 800dde2:	670b      	str	r3, [r1, #112]	@ 0x70
 800dde4:	e004      	b.n	800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800dde6:	7dfb      	ldrb	r3, [r7, #23]
 800dde8:	75bb      	strb	r3, [r7, #22]
 800ddea:	e001      	b.n	800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddec:	7dfb      	ldrb	r3, [r7, #23]
 800ddee:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f003 0301 	and.w	r3, r3, #1
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d07e      	beq.n	800defa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de00:	2b28      	cmp	r3, #40	@ 0x28
 800de02:	d867      	bhi.n	800ded4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800de04:	a201      	add	r2, pc, #4	@ (adr r2, 800de0c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800de06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de0a:	bf00      	nop
 800de0c:	0800dedb 	.word	0x0800dedb
 800de10:	0800ded5 	.word	0x0800ded5
 800de14:	0800ded5 	.word	0x0800ded5
 800de18:	0800ded5 	.word	0x0800ded5
 800de1c:	0800ded5 	.word	0x0800ded5
 800de20:	0800ded5 	.word	0x0800ded5
 800de24:	0800ded5 	.word	0x0800ded5
 800de28:	0800ded5 	.word	0x0800ded5
 800de2c:	0800deb1 	.word	0x0800deb1
 800de30:	0800ded5 	.word	0x0800ded5
 800de34:	0800ded5 	.word	0x0800ded5
 800de38:	0800ded5 	.word	0x0800ded5
 800de3c:	0800ded5 	.word	0x0800ded5
 800de40:	0800ded5 	.word	0x0800ded5
 800de44:	0800ded5 	.word	0x0800ded5
 800de48:	0800ded5 	.word	0x0800ded5
 800de4c:	0800dec3 	.word	0x0800dec3
 800de50:	0800ded5 	.word	0x0800ded5
 800de54:	0800ded5 	.word	0x0800ded5
 800de58:	0800ded5 	.word	0x0800ded5
 800de5c:	0800ded5 	.word	0x0800ded5
 800de60:	0800ded5 	.word	0x0800ded5
 800de64:	0800ded5 	.word	0x0800ded5
 800de68:	0800ded5 	.word	0x0800ded5
 800de6c:	0800dedb 	.word	0x0800dedb
 800de70:	0800ded5 	.word	0x0800ded5
 800de74:	0800ded5 	.word	0x0800ded5
 800de78:	0800ded5 	.word	0x0800ded5
 800de7c:	0800ded5 	.word	0x0800ded5
 800de80:	0800ded5 	.word	0x0800ded5
 800de84:	0800ded5 	.word	0x0800ded5
 800de88:	0800ded5 	.word	0x0800ded5
 800de8c:	0800dedb 	.word	0x0800dedb
 800de90:	0800ded5 	.word	0x0800ded5
 800de94:	0800ded5 	.word	0x0800ded5
 800de98:	0800ded5 	.word	0x0800ded5
 800de9c:	0800ded5 	.word	0x0800ded5
 800dea0:	0800ded5 	.word	0x0800ded5
 800dea4:	0800ded5 	.word	0x0800ded5
 800dea8:	0800ded5 	.word	0x0800ded5
 800deac:	0800dedb 	.word	0x0800dedb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	3304      	adds	r3, #4
 800deb4:	2101      	movs	r1, #1
 800deb6:	4618      	mov	r0, r3
 800deb8:	f001 fcac 	bl	800f814 <RCCEx_PLL2_Config>
 800debc:	4603      	mov	r3, r0
 800debe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800dec0:	e00c      	b.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	3324      	adds	r3, #36	@ 0x24
 800dec6:	2101      	movs	r1, #1
 800dec8:	4618      	mov	r0, r3
 800deca:	f001 fd55 	bl	800f978 <RCCEx_PLL3_Config>
 800dece:	4603      	mov	r3, r0
 800ded0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ded2:	e003      	b.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ded4:	2301      	movs	r3, #1
 800ded6:	75fb      	strb	r3, [r7, #23]
      break;
 800ded8:	e000      	b.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800deda:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dedc:	7dfb      	ldrb	r3, [r7, #23]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d109      	bne.n	800def6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800dee2:	4b1d      	ldr	r3, [pc, #116]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dee6:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800deee:	491a      	ldr	r1, [pc, #104]	@ (800df58 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800def0:	4313      	orrs	r3, r2
 800def2:	654b      	str	r3, [r1, #84]	@ 0x54
 800def4:	e001      	b.n	800defa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800def6:	7dfb      	ldrb	r3, [r7, #23]
 800def8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	f003 0302 	and.w	r3, r3, #2
 800df02:	2b00      	cmp	r3, #0
 800df04:	d03e      	beq.n	800df84 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df0a:	2b05      	cmp	r3, #5
 800df0c:	d820      	bhi.n	800df50 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800df0e:	a201      	add	r2, pc, #4	@ (adr r2, 800df14 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800df10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df14:	0800df65 	.word	0x0800df65
 800df18:	0800df2d 	.word	0x0800df2d
 800df1c:	0800df3f 	.word	0x0800df3f
 800df20:	0800df65 	.word	0x0800df65
 800df24:	0800df65 	.word	0x0800df65
 800df28:	0800df65 	.word	0x0800df65
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	3304      	adds	r3, #4
 800df30:	2101      	movs	r1, #1
 800df32:	4618      	mov	r0, r3
 800df34:	f001 fc6e 	bl	800f814 <RCCEx_PLL2_Config>
 800df38:	4603      	mov	r3, r0
 800df3a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800df3c:	e013      	b.n	800df66 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	3324      	adds	r3, #36	@ 0x24
 800df42:	2101      	movs	r1, #1
 800df44:	4618      	mov	r0, r3
 800df46:	f001 fd17 	bl	800f978 <RCCEx_PLL3_Config>
 800df4a:	4603      	mov	r3, r0
 800df4c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800df4e:	e00a      	b.n	800df66 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800df50:	2301      	movs	r3, #1
 800df52:	75fb      	strb	r3, [r7, #23]
      break;
 800df54:	e007      	b.n	800df66 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800df56:	bf00      	nop
 800df58:	58024400 	.word	0x58024400
 800df5c:	58024800 	.word	0x58024800
 800df60:	00ffffcf 	.word	0x00ffffcf
      break;
 800df64:	bf00      	nop
    }

    if(ret == HAL_OK)
 800df66:	7dfb      	ldrb	r3, [r7, #23]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d109      	bne.n	800df80 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800df6c:	4b9f      	ldr	r3, [pc, #636]	@ (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800df6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df70:	f023 0207 	bic.w	r2, r3, #7
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df78:	499c      	ldr	r1, [pc, #624]	@ (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800df7a:	4313      	orrs	r3, r2
 800df7c:	654b      	str	r3, [r1, #84]	@ 0x54
 800df7e:	e001      	b.n	800df84 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df80:	7dfb      	ldrb	r3, [r7, #23]
 800df82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f003 0304 	and.w	r3, r3, #4
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d039      	beq.n	800e004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800df96:	2b05      	cmp	r3, #5
 800df98:	d820      	bhi.n	800dfdc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800df9a:	a201      	add	r2, pc, #4	@ (adr r2, 800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800df9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfa0:	0800dfe3 	.word	0x0800dfe3
 800dfa4:	0800dfb9 	.word	0x0800dfb9
 800dfa8:	0800dfcb 	.word	0x0800dfcb
 800dfac:	0800dfe3 	.word	0x0800dfe3
 800dfb0:	0800dfe3 	.word	0x0800dfe3
 800dfb4:	0800dfe3 	.word	0x0800dfe3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	3304      	adds	r3, #4
 800dfbc:	2101      	movs	r1, #1
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f001 fc28 	bl	800f814 <RCCEx_PLL2_Config>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800dfc8:	e00c      	b.n	800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	3324      	adds	r3, #36	@ 0x24
 800dfce:	2101      	movs	r1, #1
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f001 fcd1 	bl	800f978 <RCCEx_PLL3_Config>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800dfda:	e003      	b.n	800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dfdc:	2301      	movs	r3, #1
 800dfde:	75fb      	strb	r3, [r7, #23]
      break;
 800dfe0:	e000      	b.n	800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800dfe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dfe4:	7dfb      	ldrb	r3, [r7, #23]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d10a      	bne.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dfea:	4b80      	ldr	r3, [pc, #512]	@ (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800dfec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dfee:	f023 0207 	bic.w	r2, r3, #7
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dff8:	497c      	ldr	r1, [pc, #496]	@ (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800dffa:	4313      	orrs	r3, r2
 800dffc:	658b      	str	r3, [r1, #88]	@ 0x58
 800dffe:	e001      	b.n	800e004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e000:	7dfb      	ldrb	r3, [r7, #23]
 800e002:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f003 0320 	and.w	r3, r3, #32
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d04b      	beq.n	800e0a8 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e016:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e01a:	d02e      	beq.n	800e07a <HAL_RCCEx_PeriphCLKConfig+0x962>
 800e01c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e020:	d828      	bhi.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800e022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e026:	d02a      	beq.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0x966>
 800e028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e02c:	d822      	bhi.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800e02e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e032:	d026      	beq.n	800e082 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800e034:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e038:	d81c      	bhi.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800e03a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e03e:	d010      	beq.n	800e062 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800e040:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e044:	d816      	bhi.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800e046:	2b00      	cmp	r3, #0
 800e048:	d01d      	beq.n	800e086 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800e04a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e04e:	d111      	bne.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	3304      	adds	r3, #4
 800e054:	2100      	movs	r1, #0
 800e056:	4618      	mov	r0, r3
 800e058:	f001 fbdc 	bl	800f814 <RCCEx_PLL2_Config>
 800e05c:	4603      	mov	r3, r0
 800e05e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800e060:	e012      	b.n	800e088 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	3324      	adds	r3, #36	@ 0x24
 800e066:	2102      	movs	r1, #2
 800e068:	4618      	mov	r0, r3
 800e06a:	f001 fc85 	bl	800f978 <RCCEx_PLL3_Config>
 800e06e:	4603      	mov	r3, r0
 800e070:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800e072:	e009      	b.n	800e088 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e074:	2301      	movs	r3, #1
 800e076:	75fb      	strb	r3, [r7, #23]
      break;
 800e078:	e006      	b.n	800e088 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800e07a:	bf00      	nop
 800e07c:	e004      	b.n	800e088 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800e07e:	bf00      	nop
 800e080:	e002      	b.n	800e088 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800e082:	bf00      	nop
 800e084:	e000      	b.n	800e088 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800e086:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e088:	7dfb      	ldrb	r3, [r7, #23]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d10a      	bne.n	800e0a4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e08e:	4b57      	ldr	r3, [pc, #348]	@ (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e092:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e09c:	4953      	ldr	r1, [pc, #332]	@ (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	654b      	str	r3, [r1, #84]	@ 0x54
 800e0a2:	e001      	b.n	800e0a8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0a4:	7dfb      	ldrb	r3, [r7, #23]
 800e0a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d04b      	beq.n	800e14c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e0ba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e0be:	d02e      	beq.n	800e11e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800e0c0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e0c4:	d828      	bhi.n	800e118 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800e0c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e0ca:	d02a      	beq.n	800e122 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800e0cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e0d0:	d822      	bhi.n	800e118 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800e0d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e0d6:	d026      	beq.n	800e126 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800e0d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e0dc:	d81c      	bhi.n	800e118 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800e0de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e0e2:	d010      	beq.n	800e106 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800e0e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e0e8:	d816      	bhi.n	800e118 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d01d      	beq.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800e0ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e0f2:	d111      	bne.n	800e118 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	3304      	adds	r3, #4
 800e0f8:	2100      	movs	r1, #0
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f001 fb8a 	bl	800f814 <RCCEx_PLL2_Config>
 800e100:	4603      	mov	r3, r0
 800e102:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800e104:	e012      	b.n	800e12c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	3324      	adds	r3, #36	@ 0x24
 800e10a:	2102      	movs	r1, #2
 800e10c:	4618      	mov	r0, r3
 800e10e:	f001 fc33 	bl	800f978 <RCCEx_PLL3_Config>
 800e112:	4603      	mov	r3, r0
 800e114:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800e116:	e009      	b.n	800e12c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e118:	2301      	movs	r3, #1
 800e11a:	75fb      	strb	r3, [r7, #23]
      break;
 800e11c:	e006      	b.n	800e12c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800e11e:	bf00      	nop
 800e120:	e004      	b.n	800e12c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800e122:	bf00      	nop
 800e124:	e002      	b.n	800e12c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800e126:	bf00      	nop
 800e128:	e000      	b.n	800e12c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800e12a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e12c:	7dfb      	ldrb	r3, [r7, #23]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d10a      	bne.n	800e148 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e132:	4b2e      	ldr	r3, [pc, #184]	@ (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e136:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e140:	492a      	ldr	r1, [pc, #168]	@ (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e142:	4313      	orrs	r3, r2
 800e144:	658b      	str	r3, [r1, #88]	@ 0x58
 800e146:	e001      	b.n	800e14c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e148:	7dfb      	ldrb	r3, [r7, #23]
 800e14a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e154:	2b00      	cmp	r3, #0
 800e156:	d04d      	beq.n	800e1f4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e15e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e162:	d02e      	beq.n	800e1c2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800e164:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e168:	d828      	bhi.n	800e1bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800e16a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e16e:	d02a      	beq.n	800e1c6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800e170:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e174:	d822      	bhi.n	800e1bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800e176:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e17a:	d026      	beq.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800e17c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e180:	d81c      	bhi.n	800e1bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800e182:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e186:	d010      	beq.n	800e1aa <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800e188:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e18c:	d816      	bhi.n	800e1bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d01d      	beq.n	800e1ce <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800e192:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e196:	d111      	bne.n	800e1bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	3304      	adds	r3, #4
 800e19c:	2100      	movs	r1, #0
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f001 fb38 	bl	800f814 <RCCEx_PLL2_Config>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800e1a8:	e012      	b.n	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	3324      	adds	r3, #36	@ 0x24
 800e1ae:	2102      	movs	r1, #2
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f001 fbe1 	bl	800f978 <RCCEx_PLL3_Config>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800e1ba:	e009      	b.n	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	75fb      	strb	r3, [r7, #23]
      break;
 800e1c0:	e006      	b.n	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800e1c2:	bf00      	nop
 800e1c4:	e004      	b.n	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800e1c6:	bf00      	nop
 800e1c8:	e002      	b.n	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800e1ca:	bf00      	nop
 800e1cc:	e000      	b.n	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800e1ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e1d0:	7dfb      	ldrb	r3, [r7, #23]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d10c      	bne.n	800e1f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e1d6:	4b05      	ldr	r3, [pc, #20]	@ (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e1d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e1e4:	4901      	ldr	r1, [pc, #4]	@ (800e1ec <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	658b      	str	r3, [r1, #88]	@ 0x58
 800e1ea:	e003      	b.n	800e1f4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800e1ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1f0:	7dfb      	ldrb	r3, [r7, #23]
 800e1f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f003 0308 	and.w	r3, r3, #8
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d018      	beq.n	800e232 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e208:	d10a      	bne.n	800e220 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	3324      	adds	r3, #36	@ 0x24
 800e20e:	2102      	movs	r1, #2
 800e210:	4618      	mov	r0, r3
 800e212:	f001 fbb1 	bl	800f978 <RCCEx_PLL3_Config>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d001      	beq.n	800e220 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800e21c:	2301      	movs	r3, #1
 800e21e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800e220:	4b8a      	ldr	r3, [pc, #552]	@ (800e44c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e224:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e22c:	4987      	ldr	r1, [pc, #540]	@ (800e44c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e22e:	4313      	orrs	r3, r2
 800e230:	654b      	str	r3, [r1, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f003 0310 	and.w	r3, r3, #16
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d01a      	beq.n	800e274 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e244:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e248:	d10a      	bne.n	800e260 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	3324      	adds	r3, #36	@ 0x24
 800e24e:	2102      	movs	r1, #2
 800e250:	4618      	mov	r0, r3
 800e252:	f001 fb91 	bl	800f978 <RCCEx_PLL3_Config>
 800e256:	4603      	mov	r3, r0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d001      	beq.n	800e260 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800e25c:	2301      	movs	r3, #1
 800e25e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e260:	4b7a      	ldr	r3, [pc, #488]	@ (800e44c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e264:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e26e:	4977      	ldr	r1, [pc, #476]	@ (800e44c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e270:	4313      	orrs	r3, r2
 800e272:	658b      	str	r3, [r1, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d034      	beq.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e286:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e28a:	d01d      	beq.n	800e2c8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800e28c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e290:	d817      	bhi.n	800e2c2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800e292:	2b00      	cmp	r3, #0
 800e294:	d003      	beq.n	800e29e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800e296:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e29a:	d009      	beq.n	800e2b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e29c:	e011      	b.n	800e2c2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	3304      	adds	r3, #4
 800e2a2:	2100      	movs	r1, #0
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f001 fab5 	bl	800f814 <RCCEx_PLL2_Config>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800e2ae:	e00c      	b.n	800e2ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	3324      	adds	r3, #36	@ 0x24
 800e2b4:	2102      	movs	r1, #2
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f001 fb5e 	bl	800f978 <RCCEx_PLL3_Config>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800e2c0:	e003      	b.n	800e2ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	75fb      	strb	r3, [r7, #23]
      break;
 800e2c6:	e000      	b.n	800e2ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800e2c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e2ca:	7dfb      	ldrb	r3, [r7, #23]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d10a      	bne.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e2d0:	4b5e      	ldr	r3, [pc, #376]	@ (800e44c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e2d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e2de:	495b      	ldr	r1, [pc, #364]	@ (800e44c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	658b      	str	r3, [r1, #88]	@ 0x58
 800e2e4:	e001      	b.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2e6:	7dfb      	ldrb	r3, [r7, #23]
 800e2e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d033      	beq.n	800e35e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e300:	d01c      	beq.n	800e33c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800e302:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e306:	d816      	bhi.n	800e336 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e308:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e30c:	d003      	beq.n	800e316 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800e30e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e312:	d007      	beq.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800e314:	e00f      	b.n	800e336 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e316:	4b4d      	ldr	r3, [pc, #308]	@ (800e44c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e31a:	4a4c      	ldr	r2, [pc, #304]	@ (800e44c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e31c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e320:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800e322:	e00c      	b.n	800e33e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	3324      	adds	r3, #36	@ 0x24
 800e328:	2101      	movs	r1, #1
 800e32a:	4618      	mov	r0, r3
 800e32c:	f001 fb24 	bl	800f978 <RCCEx_PLL3_Config>
 800e330:	4603      	mov	r3, r0
 800e332:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800e334:	e003      	b.n	800e33e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e336:	2301      	movs	r3, #1
 800e338:	75fb      	strb	r3, [r7, #23]
      break;
 800e33a:	e000      	b.n	800e33e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800e33c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e33e:	7dfb      	ldrb	r3, [r7, #23]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d10a      	bne.n	800e35a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e344:	4b41      	ldr	r3, [pc, #260]	@ (800e44c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e348:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e352:	493e      	ldr	r1, [pc, #248]	@ (800e44c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e354:	4313      	orrs	r3, r2
 800e356:	654b      	str	r3, [r1, #84]	@ 0x54
 800e358:	e001      	b.n	800e35e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e35a:	7dfb      	ldrb	r3, [r7, #23]
 800e35c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e366:	2b00      	cmp	r3, #0
 800e368:	d029      	beq.n	800e3be <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d003      	beq.n	800e37a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800e372:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e376:	d007      	beq.n	800e388 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800e378:	e00f      	b.n	800e39a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e37a:	4b34      	ldr	r3, [pc, #208]	@ (800e44c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e37c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e37e:	4a33      	ldr	r2, [pc, #204]	@ (800e44c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e384:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800e386:	e00b      	b.n	800e3a0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	3304      	adds	r3, #4
 800e38c:	2102      	movs	r1, #2
 800e38e:	4618      	mov	r0, r3
 800e390:	f001 fa40 	bl	800f814 <RCCEx_PLL2_Config>
 800e394:	4603      	mov	r3, r0
 800e396:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800e398:	e002      	b.n	800e3a0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800e39a:	2301      	movs	r3, #1
 800e39c:	75fb      	strb	r3, [r7, #23]
      break;
 800e39e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e3a0:	7dfb      	ldrb	r3, [r7, #23]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d109      	bne.n	800e3ba <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e3a6:	4b29      	ldr	r3, [pc, #164]	@ (800e44c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e3a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3b2:	4926      	ldr	r1, [pc, #152]	@ (800e44c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800e3b8:	e001      	b.n	800e3be <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3ba:	7dfb      	ldrb	r3, [r7, #23]
 800e3bc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d00a      	beq.n	800e3e0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	3324      	adds	r3, #36	@ 0x24
 800e3ce:	2102      	movs	r1, #2
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f001 fad1 	bl	800f978 <RCCEx_PLL3_Config>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d001      	beq.n	800e3e0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800e3dc:	2301      	movs	r3, #1
 800e3de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d033      	beq.n	800e454 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e3f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e3f4:	d017      	beq.n	800e426 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800e3f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e3fa:	d811      	bhi.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e3fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e400:	d013      	beq.n	800e42a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800e402:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e406:	d80b      	bhi.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d010      	beq.n	800e42e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800e40c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e410:	d106      	bne.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e412:	4b0e      	ldr	r3, [pc, #56]	@ (800e44c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e416:	4a0d      	ldr	r2, [pc, #52]	@ (800e44c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e41c:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800e41e:	e007      	b.n	800e430 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e420:	2301      	movs	r3, #1
 800e422:	75fb      	strb	r3, [r7, #23]
      break;
 800e424:	e004      	b.n	800e430 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800e426:	bf00      	nop
 800e428:	e002      	b.n	800e430 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800e42a:	bf00      	nop
 800e42c:	e000      	b.n	800e430 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800e42e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e430:	7dfb      	ldrb	r3, [r7, #23]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d10c      	bne.n	800e450 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e436:	4b05      	ldr	r3, [pc, #20]	@ (800e44c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e43a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e442:	4902      	ldr	r1, [pc, #8]	@ (800e44c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e444:	4313      	orrs	r3, r2
 800e446:	654b      	str	r3, [r1, #84]	@ 0x54
 800e448:	e004      	b.n	800e454 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800e44a:	bf00      	nop
 800e44c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e450:	7dfb      	ldrb	r3, [r7, #23]
 800e452:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d008      	beq.n	800e472 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e460:	4b29      	ldr	r3, [pc, #164]	@ (800e508 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e464:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e46c:	4926      	ldr	r1, [pc, #152]	@ (800e508 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e46e:	4313      	orrs	r3, r2
 800e470:	650b      	str	r3, [r1, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d008      	beq.n	800e490 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e47e:	4b22      	ldr	r3, [pc, #136]	@ (800e508 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e482:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e48a:	491f      	ldr	r1, [pc, #124]	@ (800e508 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e48c:	4313      	orrs	r3, r2
 800e48e:	650b      	str	r3, [r1, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d00d      	beq.n	800e4b8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e49c:	4b1a      	ldr	r3, [pc, #104]	@ (800e508 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e49e:	691b      	ldr	r3, [r3, #16]
 800e4a0:	4a19      	ldr	r2, [pc, #100]	@ (800e508 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e4a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e4a6:	6113      	str	r3, [r2, #16]
 800e4a8:	4b17      	ldr	r3, [pc, #92]	@ (800e508 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e4aa:	691a      	ldr	r2, [r3, #16]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e4b2:	4915      	ldr	r1, [pc, #84]	@ (800e508 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e4b4:	4313      	orrs	r3, r2
 800e4b6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	da08      	bge.n	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e4c0:	4b11      	ldr	r3, [pc, #68]	@ (800e508 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e4c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4c4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4cc:	490e      	ldr	r1, [pc, #56]	@ (800e508 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d009      	beq.n	800e4f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e4de:	4b0a      	ldr	r3, [pc, #40]	@ (800e508 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e4e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4ec:	4906      	ldr	r1, [pc, #24]	@ (800e508 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	654b      	str	r3, [r1, #84]	@ 0x54
  }

  if (status == HAL_OK)
 800e4f2:	7dbb      	ldrb	r3, [r7, #22]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d101      	bne.n	800e4fc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	e000      	b.n	800e4fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800e4fc:	2301      	movs	r3, #1
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3718      	adds	r7, #24
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	58024400 	.word	0x58024400

0800e50c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e50c:	b480      	push	{r7}
 800e50e:	b083      	sub	sp, #12
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	4aa2      	ldr	r2, [pc, #648]	@ (800e7a0 <HAL_RCCEx_GetPeriphCLKConfig+0x294>)
 800e518:	601a      	str	r2, [r3, #0]
	         RCC_PERIPHCLK_ADC     | RCC_PERIPHCLK_SWPMI1      | RCC_PERIPHCLK_DFSDM1  | RCC_PERIPHCLK_RTC      |
	         RCC_PERIPHCLK_CEC     | RCC_PERIPHCLK_FMC         | RCC_PERIPHCLK_SPDIFRX | RCC_PERIPHCLK_TIM      |
	         RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f043 0208 	orr.w	r2, r3, #8
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	601a      	str	r2, [r3, #0]
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)	 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	601a      	str	r2, [r3, #0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	601a      	str	r2, [r3, #0]
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	601a      	str	r2, [r3, #0]
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	601a      	str	r2, [r3, #0]
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> RCC_PLLCKSELR_DIVM3_Pos);
 800e556:	4b93      	ldr	r3, [pc, #588]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e55a:	0d1b      	lsrs	r3, r3, #20
 800e55c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos)+ 1U;
 800e564:	4b8f      	ldr	r3, [pc, #572]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e56c:	1c5a      	adds	r2, r3, #1
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos)+ 1U;
 800e572:	4b8c      	ldr	r3, [pc, #560]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e576:	0e1b      	lsrs	r3, r3, #24
 800e578:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e57c:	1c5a      	adds	r2, r3, #1
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos)+ 1U;
 800e582:	4b88      	ldr	r3, [pc, #544]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e586:	0a5b      	lsrs	r3, r3, #9
 800e588:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e58c:	1c5a      	adds	r2, r3, #1
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos)+ 1U;
 800e592:	4b84      	ldr	r3, [pc, #528]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e596:	0c1b      	lsrs	r3, r3, #16
 800e598:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e59c:	1c5a      	adds	r2, r3, #1
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
 800e5a2:	4b80      	ldr	r3, [pc, #512]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5a6:	0a9b      	lsrs	r3, r3, #10
 800e5a8:	f003 0203 	and.w	r2, r3, #3
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	639a      	str	r2, [r3, #56]	@ 0x38
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
 800e5b0:	4b7c      	ldr	r3, [pc, #496]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e5b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5b4:	0a5b      	lsrs	r3, r3, #9
 800e5b6:	f003 0201 	and.w	r2, r3, #1
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> RCC_PLLCKSELR_DIVM2_Pos);
 800e5be:	4b79      	ldr	r3, [pc, #484]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e5c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5c2:	0b1b      	lsrs	r3, r3, #12
 800e5c4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos)+ 1U;
 800e5cc:	4b75      	ldr	r3, [pc, #468]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e5ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5d4:	1c5a      	adds	r2, r3, #1
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos)+ 1U;
 800e5da:	4b72      	ldr	r3, [pc, #456]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e5dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5de:	0e1b      	lsrs	r3, r3, #24
 800e5e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e5e4:	1c5a      	adds	r2, r3, #1
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos)+ 1U;
 800e5ea:	4b6e      	ldr	r3, [pc, #440]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e5ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5ee:	0a5b      	lsrs	r3, r3, #9
 800e5f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e5f4:	1c5a      	adds	r2, r3, #1
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos)+ 1U;
 800e5fa:	4b6a      	ldr	r3, [pc, #424]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e5fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5fe:	0c1b      	lsrs	r3, r3, #16
 800e600:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e604:	1c5a      	adds	r2, r3, #1
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
 800e60a:	4b66      	ldr	r3, [pc, #408]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e60e:	099b      	lsrs	r3, r3, #6
 800e610:	f003 0203 	and.w	r2, r3, #3
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
 800e618:	4b62      	ldr	r3, [pc, #392]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e61a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e61c:	095b      	lsrs	r3, r3, #5
 800e61e:	f003 0201 	and.w	r2, r3, #1
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	61da      	str	r2, [r3, #28]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
 800e626:	4b5f      	ldr	r3, [pc, #380]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e62a:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	675a      	str	r2, [r3, #116]	@ 0x74
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
 800e632:	4b5c      	ldr	r3, [pc, #368]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e636:	f003 0207 	and.w	r2, r3, #7
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	671a      	str	r2, [r3, #112]	@ 0x70
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
 800e63e:	4b59      	ldr	r3, [pc, #356]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e642:	f003 0207 	and.w	r2, r3, #7
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
 800e64c:	4b55      	ldr	r3, [pc, #340]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e64e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e650:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	67da      	str	r2, [r3, #124]	@ 0x7c
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
 800e658:	4b52      	ldr	r3, [pc, #328]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e65a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e65c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
 800e666:	4b4f      	ldr	r3, [pc, #316]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e66a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
 800e674:	4b4b      	ldr	r3, [pc, #300]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e678:	f403 4260 	and.w	r2, r3, #57344	@ 0xe000
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
 800e682:	4b48      	ldr	r3, [pc, #288]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e686:	f003 0207 	and.w	r2, r3, #7
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
 800e68e:	4b45      	ldr	r3, [pc, #276]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e692:	f403 0260 	and.w	r2, r3, #14680064	@ 0xe00000
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
 800e69c:	4b41      	ldr	r3, [pc, #260]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e69e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6a0:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
 800e6aa:	4b3e      	ldr	r3, [pc, #248]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e6ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6ae:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
 800e6b8:	4b3a      	ldr	r3, [pc, #232]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e6ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6bc:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
 800e6c6:	4b37      	ldr	r3, [pc, #220]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e6c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e6ca:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
 800e6d2:	4b34      	ldr	r3, [pc, #208]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e6d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6d6:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	679a      	str	r2, [r3, #120]	@ 0x78
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
 800e6de:	4b31      	ldr	r3, [pc, #196]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e6e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
 800e6ec:	4b2d      	ldr	r3, [pc, #180]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e6ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e6f0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
 800e6f8:	4b2a      	ldr	r3, [pc, #168]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e6fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e6fc:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
 800e704:	4b27      	ldr	r3, [pc, #156]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e708:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
 800e710:	4b24      	ldr	r3, [pc, #144]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e714:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	659a      	str	r2, [r3, #88]	@ 0x58
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
 800e71c:	4b21      	ldr	r3, [pc, #132]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e71e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e720:	f403 22e0 	and.w	r2, r3, #458752	@ 0x70000
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
 800e728:	4b1e      	ldr	r3, [pc, #120]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e72a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e72c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
 800e736:	4b1b      	ldr	r3, [pc, #108]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e73a:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	669a      	str	r2, [r3, #104]	@ 0x68
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
 800e742:	4b18      	ldr	r3, [pc, #96]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e746:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
 800e750:	4b14      	ldr	r3, [pc, #80]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e754:	f003 0203 	and.w	r2, r3, #3
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OSPI clock source -----------------------------------------------*/
  PeriphClkInit->OspiClockSelection         = __HAL_RCC_GET_OSPI_SOURCE();
 800e75c:	4b11      	ldr	r3, [pc, #68]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e75e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e760:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
 800e768:	4b0e      	ldr	r3, [pc, #56]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e76a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e76c:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
 800e774:	4b0b      	ldr	r3, [pc, #44]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e776:	691b      	ldr	r3, [r3, #16]
 800e778:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d104      	bne.n	800e78a <HAL_RCCEx_GetPeriphCLKConfig+0x27e>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2200      	movs	r2, #0
 800e784:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800e788:	e004      	b.n	800e794 <HAL_RCCEx_GetPeriphCLKConfig+0x288>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800e790:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 800e794:	bf00      	nop
 800e796:	370c      	adds	r7, #12
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr
 800e7a0:	c9fff1f7 	.word	0xc9fff1f7
 800e7a4:	58024400 	.word	0x58024400

0800e7a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b090      	sub	sp, #64	@ 0x40
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e7b6:	f040 8089 	bne.w	800e8cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800e7ba:	4b95      	ldr	r3, [pc, #596]	@ (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e7bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7be:	f003 0307 	and.w	r3, r3, #7
 800e7c2:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (saiclocksource)
 800e7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7c6:	2b04      	cmp	r3, #4
 800e7c8:	d87d      	bhi.n	800e8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800e7ca:	a201      	add	r2, pc, #4	@ (adr r2, 800e7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800e7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d0:	0800e7e5 	.word	0x0800e7e5
 800e7d4:	0800e809 	.word	0x0800e809
 800e7d8:	0800e82d 	.word	0x0800e82d
 800e7dc:	0800e8c1 	.word	0x0800e8c1
 800e7e0:	0800e851 	.word	0x0800e851
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e7e4:	4b8a      	ldr	r3, [pc, #552]	@ (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e7ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e7f0:	d107      	bne.n	800e802 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e7f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f000 feba 	bl	800f570 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800e7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e800:	e3ef      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e802:	2300      	movs	r3, #0
 800e804:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800e806:	e3ec      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e808:	4b81      	ldr	r3, [pc, #516]	@ (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e810:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e814:	d107      	bne.n	800e826 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e816:	f107 0318 	add.w	r3, r7, #24
 800e81a:	4618      	mov	r0, r3
 800e81c:	f000 fc00 	bl	800f020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e820:	69bb      	ldr	r3, [r7, #24]
 800e822:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e824:	e3dd      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e826:	2300      	movs	r3, #0
 800e828:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800e82a:	e3da      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e82c:	4b78      	ldr	r3, [pc, #480]	@ (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e834:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e838:	d107      	bne.n	800e84a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e83a:	f107 030c 	add.w	r3, r7, #12
 800e83e:	4618      	mov	r0, r3
 800e840:	f000 fd42 	bl	800f2c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e848:	e3cb      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e84a:	2300      	movs	r3, #0
 800e84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800e84e:	e3c8      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800e850:	4b6f      	ldr	r3, [pc, #444]	@ (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e854:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e858:	637b      	str	r3, [r7, #52]	@ 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e85a:	4b6d      	ldr	r3, [pc, #436]	@ (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f003 0304 	and.w	r3, r3, #4
 800e862:	2b04      	cmp	r3, #4
 800e864:	d10c      	bne.n	800e880 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800e866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d109      	bne.n	800e880 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e86c:	4b68      	ldr	r3, [pc, #416]	@ (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	08db      	lsrs	r3, r3, #3
 800e872:	f003 0303 	and.w	r3, r3, #3
 800e876:	4a67      	ldr	r2, [pc, #412]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800e878:	fa22 f303 	lsr.w	r3, r2, r3
 800e87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e87e:	e01e      	b.n	800e8be <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e880:	4b63      	ldr	r3, [pc, #396]	@ (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e888:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e88c:	d106      	bne.n	800e89c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800e88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e890:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e894:	d102      	bne.n	800e89c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800e896:	4b60      	ldr	r3, [pc, #384]	@ (800ea18 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800e898:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e89a:	e010      	b.n	800e8be <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e89c:	4b5c      	ldr	r3, [pc, #368]	@ (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e8a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e8a8:	d106      	bne.n	800e8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800e8aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e8b0:	d102      	bne.n	800e8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800e8b2:	4b5a      	ldr	r3, [pc, #360]	@ (800ea1c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800e8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e8b6:	e002      	b.n	800e8be <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 800e8bc:	e391      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e8be:	e390      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800e8c0:	4b57      	ldr	r3, [pc, #348]	@ (800ea20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e8c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800e8c4:	e38d      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800e8ca:	e38a      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e8d2:	f040 80a7 	bne.w	800ea24 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800e8d6:	4b4e      	ldr	r3, [pc, #312]	@ (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e8d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e8da:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800e8de:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (saiclocksource)
 800e8e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e8e6:	d054      	beq.n	800e992 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800e8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e8ee:	f200 808b 	bhi.w	800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800e8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8f4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e8f8:	f000 8083 	beq.w	800ea02 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800e8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e902:	f200 8081 	bhi.w	800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800e906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e908:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e90c:	d02f      	beq.n	800e96e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800e90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e910:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e914:	d878      	bhi.n	800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800e916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d004      	beq.n	800e926 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800e91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e91e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e922:	d012      	beq.n	800e94a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800e924:	e070      	b.n	800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e926:	4b3a      	ldr	r3, [pc, #232]	@ (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e92e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e932:	d107      	bne.n	800e944 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e934:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e938:	4618      	mov	r0, r3
 800e93a:	f000 fe19 	bl	800f570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e940:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e942:	e34e      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e944:	2300      	movs	r3, #0
 800e946:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800e948:	e34b      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e94a:	4b31      	ldr	r3, [pc, #196]	@ (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e952:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e956:	d107      	bne.n	800e968 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e958:	f107 0318 	add.w	r3, r7, #24
 800e95c:	4618      	mov	r0, r3
 800e95e:	f000 fb5f 	bl	800f020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e962:	69bb      	ldr	r3, [r7, #24]
 800e964:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e966:	e33c      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e968:	2300      	movs	r3, #0
 800e96a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800e96c:	e339      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e96e:	4b28      	ldr	r3, [pc, #160]	@ (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e976:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e97a:	d107      	bne.n	800e98c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e97c:	f107 030c 	add.w	r3, r7, #12
 800e980:	4618      	mov	r0, r3
 800e982:	f000 fca1 	bl	800f2c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e98a:	e32a      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e98c:	2300      	movs	r3, #0
 800e98e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800e990:	e327      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800e992:	4b1f      	ldr	r3, [pc, #124]	@ (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e996:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e99a:	637b      	str	r3, [r7, #52]	@ 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e99c:	4b1c      	ldr	r3, [pc, #112]	@ (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	f003 0304 	and.w	r3, r3, #4
 800e9a4:	2b04      	cmp	r3, #4
 800e9a6:	d10c      	bne.n	800e9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800e9a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d109      	bne.n	800e9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e9ae:	4b18      	ldr	r3, [pc, #96]	@ (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	08db      	lsrs	r3, r3, #3
 800e9b4:	f003 0303 	and.w	r3, r3, #3
 800e9b8:	4a16      	ldr	r2, [pc, #88]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800e9ba:	fa22 f303 	lsr.w	r3, r2, r3
 800e9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e9c0:	e01e      	b.n	800ea00 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e9c2:	4b13      	ldr	r3, [pc, #76]	@ (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e9ce:	d106      	bne.n	800e9de <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800e9d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e9d6:	d102      	bne.n	800e9de <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800e9d8:	4b0f      	ldr	r3, [pc, #60]	@ (800ea18 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800e9da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e9dc:	e010      	b.n	800ea00 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e9de:	4b0c      	ldr	r3, [pc, #48]	@ (800ea10 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e9e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e9ea:	d106      	bne.n	800e9fa <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800e9ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e9f2:	d102      	bne.n	800e9fa <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800e9f4:	4b09      	ldr	r3, [pc, #36]	@ (800ea1c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800e9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e9f8:	e002      	b.n	800ea00 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 800e9fe:	e2f0      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ea00:	e2ef      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ea02:	4b07      	ldr	r3, [pc, #28]	@ (800ea20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ea04:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ea06:	e2ec      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ea0c:	e2e9      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ea0e:	bf00      	nop
 800ea10:	58024400 	.word	0x58024400
 800ea14:	03d09000 	.word	0x03d09000
 800ea18:	003d0900 	.word	0x003d0900
 800ea1c:	017d7840 	.word	0x017d7840
 800ea20:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ea2a:	f040 809c 	bne.w	800eb66 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800ea2e:	4b9d      	ldr	r3, [pc, #628]	@ (800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ea30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea32:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ea36:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (saiclocksource)
 800ea38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ea3e:	d054      	beq.n	800eaea <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ea40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ea46:	f200 808b 	bhi.w	800eb60 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ea4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea4c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ea50:	f000 8083 	beq.w	800eb5a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ea54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ea5a:	f200 8081 	bhi.w	800eb60 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ea5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ea64:	d02f      	beq.n	800eac6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ea66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ea6c:	d878      	bhi.n	800eb60 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ea6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d004      	beq.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800ea74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ea7a:	d012      	beq.n	800eaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ea7c:	e070      	b.n	800eb60 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ea7e:	4b89      	ldr	r3, [pc, #548]	@ (800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ea8a:	d107      	bne.n	800ea9c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ea8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ea90:	4618      	mov	r0, r3
 800ea92:	f000 fd6d 	bl	800f570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ea96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea98:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ea9a:	e2a2      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800eaa0:	e29f      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eaa2:	4b80      	ldr	r3, [pc, #512]	@ (800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eaaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eaae:	d107      	bne.n	800eac0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eab0:	f107 0318 	add.w	r3, r7, #24
 800eab4:	4618      	mov	r0, r3
 800eab6:	f000 fab3 	bl	800f020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800eaba:	69bb      	ldr	r3, [r7, #24]
 800eabc:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800eabe:	e290      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800eac0:	2300      	movs	r3, #0
 800eac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800eac4:	e28d      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800eac6:	4b77      	ldr	r3, [pc, #476]	@ (800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800eace:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ead2:	d107      	bne.n	800eae4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ead4:	f107 030c 	add.w	r3, r7, #12
 800ead8:	4618      	mov	r0, r3
 800eada:	f000 fbf5 	bl	800f2c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800eae2:	e27e      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800eae4:	2300      	movs	r3, #0
 800eae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800eae8:	e27b      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800eaea:	4b6e      	ldr	r3, [pc, #440]	@ (800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eaec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eaee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800eaf2:	637b      	str	r3, [r7, #52]	@ 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800eaf4:	4b6b      	ldr	r3, [pc, #428]	@ (800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	f003 0304 	and.w	r3, r3, #4
 800eafc:	2b04      	cmp	r3, #4
 800eafe:	d10c      	bne.n	800eb1a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800eb00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d109      	bne.n	800eb1a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800eb06:	4b67      	ldr	r3, [pc, #412]	@ (800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	08db      	lsrs	r3, r3, #3
 800eb0c:	f003 0303 	and.w	r3, r3, #3
 800eb10:	4a65      	ldr	r2, [pc, #404]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800eb12:	fa22 f303 	lsr.w	r3, r2, r3
 800eb16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb18:	e01e      	b.n	800eb58 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eb1a:	4b62      	ldr	r3, [pc, #392]	@ (800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eb26:	d106      	bne.n	800eb36 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800eb28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eb2e:	d102      	bne.n	800eb36 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800eb30:	4b5e      	ldr	r3, [pc, #376]	@ (800ecac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800eb32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb34:	e010      	b.n	800eb58 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eb36:	4b5b      	ldr	r3, [pc, #364]	@ (800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eb3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eb42:	d106      	bne.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800eb44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eb4a:	d102      	bne.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800eb4c:	4b58      	ldr	r3, [pc, #352]	@ (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800eb4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb50:	e002      	b.n	800eb58 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800eb52:	2300      	movs	r3, #0
 800eb54:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 800eb56:	e244      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800eb58:	e243      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800eb5a:	4b56      	ldr	r3, [pc, #344]	@ (800ecb4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800eb5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800eb5e:	e240      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800eb60:	2300      	movs	r3, #0
 800eb62:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800eb64:	e23d      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb6c:	f040 80a7 	bne.w	800ecbe <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800eb70:	4b4c      	ldr	r3, [pc, #304]	@ (800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eb72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb74:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800eb78:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800eb7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800eb80:	d055      	beq.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800eb82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800eb88:	f200 8096 	bhi.w	800ecb8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800eb8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800eb92:	f000 8084 	beq.w	800ec9e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800eb96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800eb9c:	f200 808c 	bhi.w	800ecb8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800eba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eba6:	d030      	beq.n	800ec0a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800eba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ebae:	f200 8083 	bhi.w	800ecb8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800ebb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d004      	beq.n	800ebc2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 800ebb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ebbe:	d012      	beq.n	800ebe6 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 800ebc0:	e07a      	b.n	800ecb8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ebc2:	4b38      	ldr	r3, [pc, #224]	@ (800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ebca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ebce:	d107      	bne.n	800ebe0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ebd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f000 fccb 	bl	800f570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ebda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ebde:	e200      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ebe4:	e1fd      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ebe6:	4b2f      	ldr	r3, [pc, #188]	@ (800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ebee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ebf2:	d107      	bne.n	800ec04 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ebf4:	f107 0318 	add.w	r3, r7, #24
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f000 fa11 	bl	800f020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ebfe:	69bb      	ldr	r3, [r7, #24]
 800ec00:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ec02:	e1ee      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ec04:	2300      	movs	r3, #0
 800ec06:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ec08:	e1eb      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ec0a:	4b26      	ldr	r3, [pc, #152]	@ (800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ec12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec16:	d107      	bne.n	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec18:	f107 030c 	add.w	r3, r7, #12
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f000 fb53 	bl	800f2c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ec26:	e1dc      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ec2c:	e1d9      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ec2e:	4b1d      	ldr	r3, [pc, #116]	@ (800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ec30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ec36:	637b      	str	r3, [r7, #52]	@ 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ec38:	4b1a      	ldr	r3, [pc, #104]	@ (800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f003 0304 	and.w	r3, r3, #4
 800ec40:	2b04      	cmp	r3, #4
 800ec42:	d10c      	bne.n	800ec5e <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 800ec44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d109      	bne.n	800ec5e <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ec4a:	4b16      	ldr	r3, [pc, #88]	@ (800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	08db      	lsrs	r3, r3, #3
 800ec50:	f003 0303 	and.w	r3, r3, #3
 800ec54:	4a14      	ldr	r2, [pc, #80]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ec56:	fa22 f303 	lsr.w	r3, r2, r3
 800ec5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec5c:	e01e      	b.n	800ec9c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ec5e:	4b11      	ldr	r3, [pc, #68]	@ (800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ec66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec6a:	d106      	bne.n	800ec7a <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 800ec6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec72:	d102      	bne.n	800ec7a <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ec74:	4b0d      	ldr	r3, [pc, #52]	@ (800ecac <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ec76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec78:	e010      	b.n	800ec9c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ec7a:	4b0a      	ldr	r3, [pc, #40]	@ (800eca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ec86:	d106      	bne.n	800ec96 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800ec88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec8e:	d102      	bne.n	800ec96 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ec90:	4b07      	ldr	r3, [pc, #28]	@ (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800ec92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec94:	e002      	b.n	800ec9c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ec96:	2300      	movs	r3, #0
 800ec98:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 800ec9a:	e1a2      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ec9c:	e1a1      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ec9e:	4b05      	ldr	r3, [pc, #20]	@ (800ecb4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800eca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800eca2:	e19e      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800eca4:	58024400 	.word	0x58024400
 800eca8:	03d09000 	.word	0x03d09000
 800ecac:	003d0900 	.word	0x003d0900
 800ecb0:	017d7840 	.word	0x017d7840
 800ecb4:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ecbc:	e191      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ecc4:	d173      	bne.n	800edae <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800ecc6:	4b9b      	ldr	r3, [pc, #620]	@ (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ecc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ecce:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800ecd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ecd6:	d02f      	beq.n	800ed38 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800ecd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ecde:	d863      	bhi.n	800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800ece0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d004      	beq.n	800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800ece6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ece8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ecec:	d012      	beq.n	800ed14 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800ecee:	e05b      	b.n	800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ecf0:	4b90      	ldr	r3, [pc, #576]	@ (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ecf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ecfc:	d107      	bne.n	800ed0e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecfe:	f107 0318 	add.w	r3, r7, #24
 800ed02:	4618      	mov	r0, r3
 800ed04:	f000 f98c 	bl	800f020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ed0c:	e169      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ed12:	e166      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ed14:	4b87      	ldr	r3, [pc, #540]	@ (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ed1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed20:	d107      	bne.n	800ed32 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed22:	f107 030c 	add.w	r3, r7, #12
 800ed26:	4618      	mov	r0, r3
 800ed28:	f000 face 	bl	800f2c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ed30:	e157      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ed32:	2300      	movs	r3, #0
 800ed34:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ed36:	e154      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ed38:	4b7e      	ldr	r3, [pc, #504]	@ (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ed3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ed40:	637b      	str	r3, [r7, #52]	@ 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ed42:	4b7c      	ldr	r3, [pc, #496]	@ (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	f003 0304 	and.w	r3, r3, #4
 800ed4a:	2b04      	cmp	r3, #4
 800ed4c:	d10c      	bne.n	800ed68 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800ed4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d109      	bne.n	800ed68 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ed54:	4b77      	ldr	r3, [pc, #476]	@ (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	08db      	lsrs	r3, r3, #3
 800ed5a:	f003 0303 	and.w	r3, r3, #3
 800ed5e:	4a76      	ldr	r2, [pc, #472]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800ed60:	fa22 f303 	lsr.w	r3, r2, r3
 800ed64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed66:	e01e      	b.n	800eda6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ed68:	4b72      	ldr	r3, [pc, #456]	@ (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ed74:	d106      	bne.n	800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 800ed76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed7c:	d102      	bne.n	800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ed7e:	4b6f      	ldr	r3, [pc, #444]	@ (800ef3c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800ed80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed82:	e010      	b.n	800eda6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ed84:	4b6b      	ldr	r3, [pc, #428]	@ (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ed8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ed90:	d106      	bne.n	800eda0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800ed92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed98:	d102      	bne.n	800eda0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ed9a:	4b69      	ldr	r3, [pc, #420]	@ (800ef40 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ed9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed9e:	e002      	b.n	800eda6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800eda0:	2300      	movs	r3, #0
 800eda2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 800eda4:	e11d      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800eda6:	e11c      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800eda8:	2300      	movs	r3, #0
 800edaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800edac:	e119      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800edb4:	d133      	bne.n	800ee1e <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800edb6:	4b5f      	ldr	r3, [pc, #380]	@ (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800edb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800edba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800edbe:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800edc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d004      	beq.n	800edd0 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 800edc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800edcc:	d012      	beq.n	800edf4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800edce:	e023      	b.n	800ee18 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800edd0:	4b58      	ldr	r3, [pc, #352]	@ (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800edd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eddc:	d107      	bne.n	800edee <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800edde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ede2:	4618      	mov	r0, r3
 800ede4:	f000 fbc4 	bl	800f570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ede8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edea:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800edec:	e0f9      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800edee:	2300      	movs	r3, #0
 800edf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800edf2:	e0f6      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800edf4:	4b4f      	ldr	r3, [pc, #316]	@ (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800edfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ee00:	d107      	bne.n	800ee12 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee02:	f107 0318 	add.w	r3, r7, #24
 800ee06:	4618      	mov	r0, r3
 800ee08:	f000 f90a 	bl	800f020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ee0c:	6a3b      	ldr	r3, [r7, #32]
 800ee0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ee10:	e0e7      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800ee12:	2300      	movs	r3, #0
 800ee14:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ee16:	e0e4      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ee1c:	e0e1      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ee24:	f040 808e 	bne.w	800ef44 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800ee28:	4b42      	ldr	r3, [pc, #264]	@ (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ee2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee2c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ee30:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800ee32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ee38:	d06b      	beq.n	800ef12 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800ee3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ee40:	d874      	bhi.n	800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800ee42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee48:	d056      	beq.n	800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 800ee4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee50:	d86c      	bhi.n	800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800ee52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ee58:	d03b      	beq.n	800eed2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800ee5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ee60:	d864      	bhi.n	800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800ee62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ee68:	d021      	beq.n	800eeae <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 800ee6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ee70:	d85c      	bhi.n	800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800ee72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d004      	beq.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800ee78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ee7e:	d004      	beq.n	800ee8a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800ee80:	e054      	b.n	800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ee82:	f000 f8b7 	bl	800eff4 <HAL_RCCEx_GetD3PCLK1Freq>
 800ee86:	63f8      	str	r0, [r7, #60]	@ 0x3c
          break;
 800ee88:	e0ab      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ee8a:	4b2a      	ldr	r3, [pc, #168]	@ (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ee92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ee96:	d107      	bne.n	800eea8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee98:	f107 0318 	add.w	r3, r7, #24
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f000 f8bf 	bl	800f020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800eea2:	69fb      	ldr	r3, [r7, #28]
 800eea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800eea6:	e09c      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800eeac:	e099      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800eeae:	4b21      	ldr	r3, [pc, #132]	@ (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800eeb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eeba:	d107      	bne.n	800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eebc:	f107 030c 	add.w	r3, r7, #12
 800eec0:	4618      	mov	r0, r3
 800eec2:	f000 fa01 	bl	800f2c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800eeca:	e08a      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800eecc:	2300      	movs	r3, #0
 800eece:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800eed0:	e087      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800eed2:	4b18      	ldr	r3, [pc, #96]	@ (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	f003 0304 	and.w	r3, r3, #4
 800eeda:	2b04      	cmp	r3, #4
 800eedc:	d109      	bne.n	800eef2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800eede:	4b15      	ldr	r3, [pc, #84]	@ (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	08db      	lsrs	r3, r3, #3
 800eee4:	f003 0303 	and.w	r3, r3, #3
 800eee8:	4a13      	ldr	r2, [pc, #76]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800eeea:	fa22 f303 	lsr.w	r3, r2, r3
 800eeee:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800eef0:	e077      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800eef2:	2300      	movs	r3, #0
 800eef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800eef6:	e074      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800eef8:	4b0e      	ldr	r3, [pc, #56]	@ (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef04:	d102      	bne.n	800ef0c <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 800ef06:	4b0d      	ldr	r3, [pc, #52]	@ (800ef3c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800ef08:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ef0a:	e06a      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ef10:	e067      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ef12:	4b08      	ldr	r3, [pc, #32]	@ (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ef1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ef1e:	d102      	bne.n	800ef26 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 800ef20:	4b07      	ldr	r3, [pc, #28]	@ (800ef40 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ef22:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ef24:	e05d      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800ef26:	2300      	movs	r3, #0
 800ef28:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ef2a:	e05a      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ef30:	e057      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ef32:	bf00      	nop
 800ef34:	58024400 	.word	0x58024400
 800ef38:	03d09000 	.word	0x03d09000
 800ef3c:	003d0900 	.word	0x003d0900
 800ef40:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef4a:	d148      	bne.n	800efde <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800ef4c:	4b27      	ldr	r3, [pc, #156]	@ (800efec <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ef4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ef54:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800ef56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ef5c:	d02a      	beq.n	800efb4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800ef5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ef64:	d838      	bhi.n	800efd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 800ef66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d004      	beq.n	800ef76 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 800ef6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef72:	d00d      	beq.n	800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800ef74:	e030      	b.n	800efd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ef76:	4b1d      	ldr	r3, [pc, #116]	@ (800efec <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ef7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ef82:	d102      	bne.n	800ef8a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 800ef84:	4b1a      	ldr	r3, [pc, #104]	@ (800eff0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800ef86:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ef88:	e02b      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ef8e:	e028      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ef90:	4b16      	ldr	r3, [pc, #88]	@ (800efec <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ef98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ef9c:	d107      	bne.n	800efae <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ef9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800efa2:	4618      	mov	r0, r3
 800efa4:	f000 fae4 	bl	800f570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800efa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800efac:	e019      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800efae:	2300      	movs	r3, #0
 800efb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800efb2:	e016      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800efb4:	4b0d      	ldr	r3, [pc, #52]	@ (800efec <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800efbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800efc0:	d107      	bne.n	800efd2 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efc2:	f107 0318 	add.w	r3, r7, #24
 800efc6:	4618      	mov	r0, r3
 800efc8:	f000 f82a 	bl	800f020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800efcc:	69fb      	ldr	r3, [r7, #28]
 800efce:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800efd0:	e007      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800efd2:	2300      	movs	r3, #0
 800efd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800efd6:	e004      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800efd8:	2300      	movs	r3, #0
 800efda:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800efdc:	e001      	b.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 800efde:	2300      	movs	r3, #0
 800efe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

  return frequency;
 800efe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	3740      	adds	r7, #64	@ 0x40
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}
 800efec:	58024400 	.word	0x58024400
 800eff0:	017d7840 	.word	0x017d7840

0800eff4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800eff8:	f7fe fb48 	bl	800d68c <HAL_RCC_GetHCLKFreq>
 800effc:	4602      	mov	r2, r0
 800effe:	4b06      	ldr	r3, [pc, #24]	@ (800f018 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f000:	6a1b      	ldr	r3, [r3, #32]
 800f002:	091b      	lsrs	r3, r3, #4
 800f004:	f003 0307 	and.w	r3, r3, #7
 800f008:	4904      	ldr	r1, [pc, #16]	@ (800f01c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f00a:	5ccb      	ldrb	r3, [r1, r3]
 800f00c:	f003 031f 	and.w	r3, r3, #31
 800f010:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f014:	4618      	mov	r0, r3
 800f016:	bd80      	pop	{r7, pc}
 800f018:	58024400 	.word	0x58024400
 800f01c:	08015a3c 	.word	0x08015a3c

0800f020 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800f020:	b480      	push	{r7}
 800f022:	b089      	sub	sp, #36	@ 0x24
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f028:	4ba1      	ldr	r3, [pc, #644]	@ (800f2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f02a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f02c:	f003 0303 	and.w	r3, r3, #3
 800f030:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800f032:	4b9f      	ldr	r3, [pc, #636]	@ (800f2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f036:	0b1b      	lsrs	r3, r3, #12
 800f038:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f03c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f03e:	4b9c      	ldr	r3, [pc, #624]	@ (800f2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f042:	091b      	lsrs	r3, r3, #4
 800f044:	f003 0301 	and.w	r3, r3, #1
 800f048:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800f04a:	4b99      	ldr	r3, [pc, #612]	@ (800f2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f04c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f04e:	08db      	lsrs	r3, r3, #3
 800f050:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f054:	693a      	ldr	r2, [r7, #16]
 800f056:	fb02 f303 	mul.w	r3, r2, r3
 800f05a:	ee07 3a90 	vmov	s15, r3
 800f05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f062:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	f000 8111 	beq.w	800f290 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	2b02      	cmp	r3, #2
 800f072:	f000 8083 	beq.w	800f17c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f076:	69bb      	ldr	r3, [r7, #24]
 800f078:	2b02      	cmp	r3, #2
 800f07a:	f200 80a1 	bhi.w	800f1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f07e:	69bb      	ldr	r3, [r7, #24]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d003      	beq.n	800f08c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f084:	69bb      	ldr	r3, [r7, #24]
 800f086:	2b01      	cmp	r3, #1
 800f088:	d056      	beq.n	800f138 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f08a:	e099      	b.n	800f1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f08c:	4b88      	ldr	r3, [pc, #544]	@ (800f2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f003 0320 	and.w	r3, r3, #32
 800f094:	2b00      	cmp	r3, #0
 800f096:	d02d      	beq.n	800f0f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f098:	4b85      	ldr	r3, [pc, #532]	@ (800f2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	08db      	lsrs	r3, r3, #3
 800f09e:	f003 0303 	and.w	r3, r3, #3
 800f0a2:	4a84      	ldr	r2, [pc, #528]	@ (800f2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f0a4:	fa22 f303 	lsr.w	r3, r2, r3
 800f0a8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	ee07 3a90 	vmov	s15, r3
 800f0b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	ee07 3a90 	vmov	s15, r3
 800f0ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f0c2:	4b7b      	ldr	r3, [pc, #492]	@ (800f2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f0c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0ca:	ee07 3a90 	vmov	s15, r3
 800f0ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f0d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f0d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f0da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f0de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f0e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f0e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f0ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800f0f2:	e087      	b.n	800f204 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	ee07 3a90 	vmov	s15, r3
 800f0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0fe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f2bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f106:	4b6a      	ldr	r3, [pc, #424]	@ (800f2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f10e:	ee07 3a90 	vmov	s15, r3
 800f112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f116:	ed97 6a03 	vldr	s12, [r7, #12]
 800f11a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f11e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f136:	e065      	b.n	800f204 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	ee07 3a90 	vmov	s15, r3
 800f13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f142:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f2c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f14a:	4b59      	ldr	r3, [pc, #356]	@ (800f2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f14c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f14e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f152:	ee07 3a90 	vmov	s15, r3
 800f156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f15a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f15e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f16a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f16e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f172:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f17a:	e043      	b.n	800f204 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	ee07 3a90 	vmov	s15, r3
 800f182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f186:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f18a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f18e:	4b48      	ldr	r3, [pc, #288]	@ (800f2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f196:	ee07 3a90 	vmov	s15, r3
 800f19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f19e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f1a2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f1a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f1be:	e021      	b.n	800f204 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	ee07 3a90 	vmov	s15, r3
 800f1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f2c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1d2:	4b37      	ldr	r3, [pc, #220]	@ (800f2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f1d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1da:	ee07 3a90 	vmov	s15, r3
 800f1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f1e6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f202:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800f204:	4b2a      	ldr	r3, [pc, #168]	@ (800f2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f208:	0a5b      	lsrs	r3, r3, #9
 800f20a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f20e:	ee07 3a90 	vmov	s15, r3
 800f212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f216:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f21a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f21e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f22a:	ee17 2a90 	vmov	r2, s15
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800f232:	4b1f      	ldr	r3, [pc, #124]	@ (800f2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f236:	0c1b      	lsrs	r3, r3, #16
 800f238:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f23c:	ee07 3a90 	vmov	s15, r3
 800f240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f244:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f248:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f24c:	edd7 6a07 	vldr	s13, [r7, #28]
 800f250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f258:	ee17 2a90 	vmov	r2, s15
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800f260:	4b13      	ldr	r3, [pc, #76]	@ (800f2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f264:	0e1b      	lsrs	r3, r3, #24
 800f266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f26a:	ee07 3a90 	vmov	s15, r3
 800f26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f272:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f27a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f27e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f286:	ee17 2a90 	vmov	r2, s15
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f28e:	e008      	b.n	800f2a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2200      	movs	r2, #0
 800f294:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2200      	movs	r2, #0
 800f29a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2200      	movs	r2, #0
 800f2a0:	609a      	str	r2, [r3, #8]
}
 800f2a2:	bf00      	nop
 800f2a4:	3724      	adds	r7, #36	@ 0x24
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ac:	4770      	bx	lr
 800f2ae:	bf00      	nop
 800f2b0:	58024400 	.word	0x58024400
 800f2b4:	03d09000 	.word	0x03d09000
 800f2b8:	46000000 	.word	0x46000000
 800f2bc:	4c742400 	.word	0x4c742400
 800f2c0:	4a742400 	.word	0x4a742400
 800f2c4:	4bbebc20 	.word	0x4bbebc20

0800f2c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b089      	sub	sp, #36	@ 0x24
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f2d0:	4ba1      	ldr	r3, [pc, #644]	@ (800f558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f2d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2d4:	f003 0303 	and.w	r3, r3, #3
 800f2d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800f2da:	4b9f      	ldr	r3, [pc, #636]	@ (800f558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f2dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2de:	0d1b      	lsrs	r3, r3, #20
 800f2e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f2e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f2e6:	4b9c      	ldr	r3, [pc, #624]	@ (800f558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f2e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2ea:	0a1b      	lsrs	r3, r3, #8
 800f2ec:	f003 0301 	and.w	r3, r3, #1
 800f2f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800f2f2:	4b99      	ldr	r3, [pc, #612]	@ (800f558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f2f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2f6:	08db      	lsrs	r3, r3, #3
 800f2f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f2fc:	693a      	ldr	r2, [r7, #16]
 800f2fe:	fb02 f303 	mul.w	r3, r2, r3
 800f302:	ee07 3a90 	vmov	s15, r3
 800f306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f30a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	2b00      	cmp	r3, #0
 800f312:	f000 8111 	beq.w	800f538 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f316:	69bb      	ldr	r3, [r7, #24]
 800f318:	2b02      	cmp	r3, #2
 800f31a:	f000 8083 	beq.w	800f424 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f31e:	69bb      	ldr	r3, [r7, #24]
 800f320:	2b02      	cmp	r3, #2
 800f322:	f200 80a1 	bhi.w	800f468 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f326:	69bb      	ldr	r3, [r7, #24]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d003      	beq.n	800f334 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f32c:	69bb      	ldr	r3, [r7, #24]
 800f32e:	2b01      	cmp	r3, #1
 800f330:	d056      	beq.n	800f3e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f332:	e099      	b.n	800f468 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f334:	4b88      	ldr	r3, [pc, #544]	@ (800f558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	f003 0320 	and.w	r3, r3, #32
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d02d      	beq.n	800f39c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f340:	4b85      	ldr	r3, [pc, #532]	@ (800f558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	08db      	lsrs	r3, r3, #3
 800f346:	f003 0303 	and.w	r3, r3, #3
 800f34a:	4a84      	ldr	r2, [pc, #528]	@ (800f55c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f34c:	fa22 f303 	lsr.w	r3, r2, r3
 800f350:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	ee07 3a90 	vmov	s15, r3
 800f358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	ee07 3a90 	vmov	s15, r3
 800f362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f36a:	4b7b      	ldr	r3, [pc, #492]	@ (800f558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f36c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f36e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f372:	ee07 3a90 	vmov	s15, r3
 800f376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f37a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f37e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f38a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f38e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f392:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f396:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800f39a:	e087      	b.n	800f4ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	ee07 3a90 	vmov	s15, r3
 800f3a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f564 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f3aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f3ae:	4b6a      	ldr	r3, [pc, #424]	@ (800f558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f3b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3b6:	ee07 3a90 	vmov	s15, r3
 800f3ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3be:	ed97 6a03 	vldr	s12, [r7, #12]
 800f3c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f3c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f3d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f3de:	e065      	b.n	800f4ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	ee07 3a90 	vmov	s15, r3
 800f3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f568 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f3ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f3f2:	4b59      	ldr	r3, [pc, #356]	@ (800f558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f3f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3fa:	ee07 3a90 	vmov	s15, r3
 800f3fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f402:	ed97 6a03 	vldr	s12, [r7, #12]
 800f406:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f40a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f40e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f41a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f41e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f422:	e043      	b.n	800f4ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	ee07 3a90 	vmov	s15, r3
 800f42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f42e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f56c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f436:	4b48      	ldr	r3, [pc, #288]	@ (800f558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f43a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f43e:	ee07 3a90 	vmov	s15, r3
 800f442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f446:	ed97 6a03 	vldr	s12, [r7, #12]
 800f44a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f44e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f45a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f45e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f462:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f466:	e021      	b.n	800f4ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	ee07 3a90 	vmov	s15, r3
 800f46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f472:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f568 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f47a:	4b37      	ldr	r3, [pc, #220]	@ (800f558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f47e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f482:	ee07 3a90 	vmov	s15, r3
 800f486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f48a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f48e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f49a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f49e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f4aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800f4ac:	4b2a      	ldr	r3, [pc, #168]	@ (800f558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f4ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4b0:	0a5b      	lsrs	r3, r3, #9
 800f4b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f4b6:	ee07 3a90 	vmov	s15, r3
 800f4ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f4c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f4c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800f4ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f4ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f4d2:	ee17 2a90 	vmov	r2, s15
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800f4da:	4b1f      	ldr	r3, [pc, #124]	@ (800f558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f4dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4de:	0c1b      	lsrs	r3, r3, #16
 800f4e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f4e4:	ee07 3a90 	vmov	s15, r3
 800f4e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f4f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f4f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800f4f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f4fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f500:	ee17 2a90 	vmov	r2, s15
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800f508:	4b13      	ldr	r3, [pc, #76]	@ (800f558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f50a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f50c:	0e1b      	lsrs	r3, r3, #24
 800f50e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f512:	ee07 3a90 	vmov	s15, r3
 800f516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f51a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f51e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f522:	edd7 6a07 	vldr	s13, [r7, #28]
 800f526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f52a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f52e:	ee17 2a90 	vmov	r2, s15
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f536:	e008      	b.n	800f54a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2200      	movs	r2, #0
 800f53c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2200      	movs	r2, #0
 800f542:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2200      	movs	r2, #0
 800f548:	609a      	str	r2, [r3, #8]
}
 800f54a:	bf00      	nop
 800f54c:	3724      	adds	r7, #36	@ 0x24
 800f54e:	46bd      	mov	sp, r7
 800f550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f554:	4770      	bx	lr
 800f556:	bf00      	nop
 800f558:	58024400 	.word	0x58024400
 800f55c:	03d09000 	.word	0x03d09000
 800f560:	46000000 	.word	0x46000000
 800f564:	4c742400 	.word	0x4c742400
 800f568:	4a742400 	.word	0x4a742400
 800f56c:	4bbebc20 	.word	0x4bbebc20

0800f570 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800f570:	b480      	push	{r7}
 800f572:	b089      	sub	sp, #36	@ 0x24
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f578:	4ba0      	ldr	r3, [pc, #640]	@ (800f7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f57a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f57c:	f003 0303 	and.w	r3, r3, #3
 800f580:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800f582:	4b9e      	ldr	r3, [pc, #632]	@ (800f7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f586:	091b      	lsrs	r3, r3, #4
 800f588:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f58c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800f58e:	4b9b      	ldr	r3, [pc, #620]	@ (800f7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f592:	f003 0301 	and.w	r3, r3, #1
 800f596:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f598:	4b98      	ldr	r3, [pc, #608]	@ (800f7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f59a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f59c:	08db      	lsrs	r3, r3, #3
 800f59e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f5a2:	693a      	ldr	r2, [r7, #16]
 800f5a4:	fb02 f303 	mul.w	r3, r2, r3
 800f5a8:	ee07 3a90 	vmov	s15, r3
 800f5ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5b0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	f000 8111 	beq.w	800f7de <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800f5bc:	69bb      	ldr	r3, [r7, #24]
 800f5be:	2b02      	cmp	r3, #2
 800f5c0:	f000 8083 	beq.w	800f6ca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800f5c4:	69bb      	ldr	r3, [r7, #24]
 800f5c6:	2b02      	cmp	r3, #2
 800f5c8:	f200 80a1 	bhi.w	800f70e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800f5cc:	69bb      	ldr	r3, [r7, #24]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d003      	beq.n	800f5da <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800f5d2:	69bb      	ldr	r3, [r7, #24]
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	d056      	beq.n	800f686 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800f5d8:	e099      	b.n	800f70e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5da:	4b88      	ldr	r3, [pc, #544]	@ (800f7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	f003 0320 	and.w	r3, r3, #32
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d02d      	beq.n	800f642 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f5e6:	4b85      	ldr	r3, [pc, #532]	@ (800f7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	08db      	lsrs	r3, r3, #3
 800f5ec:	f003 0303 	and.w	r3, r3, #3
 800f5f0:	4a83      	ldr	r2, [pc, #524]	@ (800f800 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800f5f2:	fa22 f303 	lsr.w	r3, r2, r3
 800f5f6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	ee07 3a90 	vmov	s15, r3
 800f5fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	ee07 3a90 	vmov	s15, r3
 800f608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f60c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f610:	4b7a      	ldr	r3, [pc, #488]	@ (800f7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f618:	ee07 3a90 	vmov	s15, r3
 800f61c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f620:	ed97 6a03 	vldr	s12, [r7, #12]
 800f624:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800f804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f628:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f62c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f630:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f634:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f63c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800f640:	e087      	b.n	800f752 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	ee07 3a90 	vmov	s15, r3
 800f648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f64c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800f808 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f654:	4b69      	ldr	r3, [pc, #420]	@ (800f7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f65c:	ee07 3a90 	vmov	s15, r3
 800f660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f664:	ed97 6a03 	vldr	s12, [r7, #12]
 800f668:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800f804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f66c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f674:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f67c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f680:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f684:	e065      	b.n	800f752 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	ee07 3a90 	vmov	s15, r3
 800f68c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f690:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800f80c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800f694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f698:	4b58      	ldr	r3, [pc, #352]	@ (800f7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f69a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f69c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6a0:	ee07 3a90 	vmov	s15, r3
 800f6a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800f6ac:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800f804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f6b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f6b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f6b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f6bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f6c8:	e043      	b.n	800f752 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	ee07 3a90 	vmov	s15, r3
 800f6d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6d4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800f810 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800f6d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f6dc:	4b47      	ldr	r3, [pc, #284]	@ (800f7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f6de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6e4:	ee07 3a90 	vmov	s15, r3
 800f6e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800f6f0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800f804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f6f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f6f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f6fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f704:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f708:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f70c:	e021      	b.n	800f752 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	ee07 3a90 	vmov	s15, r3
 800f714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f718:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800f808 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f71c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f720:	4b36      	ldr	r3, [pc, #216]	@ (800f7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f728:	ee07 3a90 	vmov	s15, r3
 800f72c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f730:	ed97 6a03 	vldr	s12, [r7, #12]
 800f734:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800f804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f738:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f73c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f740:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f744:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f74c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f750:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800f752:	4b2a      	ldr	r3, [pc, #168]	@ (800f7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f756:	0a5b      	lsrs	r3, r3, #9
 800f758:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f75c:	ee07 3a90 	vmov	s15, r3
 800f760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f764:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f768:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f76c:	edd7 6a07 	vldr	s13, [r7, #28]
 800f770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f778:	ee17 2a90 	vmov	r2, s15
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800f780:	4b1e      	ldr	r3, [pc, #120]	@ (800f7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f784:	0c1b      	lsrs	r3, r3, #16
 800f786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f78a:	ee07 3a90 	vmov	s15, r3
 800f78e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f792:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f79a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f79e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f7a6:	ee17 2a90 	vmov	r2, s15
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800f7ae:	4b13      	ldr	r3, [pc, #76]	@ (800f7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f7b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7b2:	0e1b      	lsrs	r3, r3, #24
 800f7b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f7b8:	ee07 3a90 	vmov	s15, r3
 800f7bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f7c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f7c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800f7cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f7d4:	ee17 2a90 	vmov	r2, s15
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800f7dc:	e008      	b.n	800f7f0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	609a      	str	r2, [r3, #8]
}
 800f7f0:	bf00      	nop
 800f7f2:	3724      	adds	r7, #36	@ 0x24
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr
 800f7fc:	58024400 	.word	0x58024400
 800f800:	03d09000 	.word	0x03d09000
 800f804:	46000000 	.word	0x46000000
 800f808:	4c742400 	.word	0x4c742400
 800f80c:	4a742400 	.word	0x4a742400
 800f810:	4bbebc20 	.word	0x4bbebc20

0800f814 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b084      	sub	sp, #16
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f81e:	2300      	movs	r3, #0
 800f820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f822:	4b53      	ldr	r3, [pc, #332]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f826:	f003 0303 	and.w	r3, r3, #3
 800f82a:	2b03      	cmp	r3, #3
 800f82c:	d101      	bne.n	800f832 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f82e:	2301      	movs	r3, #1
 800f830:	e099      	b.n	800f966 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f832:	4b4f      	ldr	r3, [pc, #316]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	4a4e      	ldr	r2, [pc, #312]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f838:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f83c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f83e:	f7f7 fd31 	bl	80072a4 <HAL_GetTick>
 800f842:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f844:	e008      	b.n	800f858 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800f846:	f7f7 fd2d 	bl	80072a4 <HAL_GetTick>
 800f84a:	4602      	mov	r2, r0
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	1ad3      	subs	r3, r2, r3
 800f850:	2b02      	cmp	r3, #2
 800f852:	d901      	bls.n	800f858 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f854:	2303      	movs	r3, #3
 800f856:	e086      	b.n	800f966 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f858:	4b45      	ldr	r3, [pc, #276]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f860:	2b00      	cmp	r3, #0
 800f862:	d1f0      	bne.n	800f846 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f864:	4b42      	ldr	r3, [pc, #264]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f868:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	031b      	lsls	r3, r3, #12
 800f872:	493f      	ldr	r1, [pc, #252]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f874:	4313      	orrs	r3, r2
 800f876:	628b      	str	r3, [r1, #40]	@ 0x28
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	3b01      	subs	r3, #1
 800f87e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	689b      	ldr	r3, [r3, #8]
 800f886:	3b01      	subs	r3, #1
 800f888:	025b      	lsls	r3, r3, #9
 800f88a:	b29b      	uxth	r3, r3
 800f88c:	431a      	orrs	r2, r3
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	68db      	ldr	r3, [r3, #12]
 800f892:	3b01      	subs	r3, #1
 800f894:	041b      	lsls	r3, r3, #16
 800f896:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f89a:	431a      	orrs	r2, r3
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	691b      	ldr	r3, [r3, #16]
 800f8a0:	3b01      	subs	r3, #1
 800f8a2:	061b      	lsls	r3, r3, #24
 800f8a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f8a8:	4931      	ldr	r1, [pc, #196]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f8ae:	4b30      	ldr	r3, [pc, #192]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f8b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	695b      	ldr	r3, [r3, #20]
 800f8ba:	492d      	ldr	r1, [pc, #180]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f8bc:	4313      	orrs	r3, r2
 800f8be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f8c0:	4b2b      	ldr	r3, [pc, #172]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f8c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8c4:	f023 0220 	bic.w	r2, r3, #32
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	699b      	ldr	r3, [r3, #24]
 800f8cc:	4928      	ldr	r1, [pc, #160]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f8ce:	4313      	orrs	r3, r2
 800f8d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f8d2:	4b27      	ldr	r3, [pc, #156]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8d6:	4a26      	ldr	r2, [pc, #152]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f8d8:	f023 0310 	bic.w	r3, r3, #16
 800f8dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f8de:	4b24      	ldr	r3, [pc, #144]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f8e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f8e2:	4b24      	ldr	r3, [pc, #144]	@ (800f974 <RCCEx_PLL2_Config+0x160>)
 800f8e4:	4013      	ands	r3, r2
 800f8e6:	687a      	ldr	r2, [r7, #4]
 800f8e8:	69d2      	ldr	r2, [r2, #28]
 800f8ea:	00d2      	lsls	r2, r2, #3
 800f8ec:	4920      	ldr	r1, [pc, #128]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f8ee:	4313      	orrs	r3, r2
 800f8f0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f8f2:	4b1f      	ldr	r3, [pc, #124]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f8f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8f6:	4a1e      	ldr	r2, [pc, #120]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f8f8:	f043 0310 	orr.w	r3, r3, #16
 800f8fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d106      	bne.n	800f912 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f904:	4b1a      	ldr	r3, [pc, #104]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f908:	4a19      	ldr	r2, [pc, #100]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f90a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f90e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f910:	e00f      	b.n	800f932 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	2b01      	cmp	r3, #1
 800f916:	d106      	bne.n	800f926 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f918:	4b15      	ldr	r3, [pc, #84]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f91a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f91c:	4a14      	ldr	r2, [pc, #80]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f91e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f922:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f924:	e005      	b.n	800f932 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f926:	4b12      	ldr	r3, [pc, #72]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f92a:	4a11      	ldr	r2, [pc, #68]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f92c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f930:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f932:	4b0f      	ldr	r3, [pc, #60]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	4a0e      	ldr	r2, [pc, #56]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f938:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f93c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f93e:	f7f7 fcb1 	bl	80072a4 <HAL_GetTick>
 800f942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f944:	e008      	b.n	800f958 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800f946:	f7f7 fcad 	bl	80072a4 <HAL_GetTick>
 800f94a:	4602      	mov	r2, r0
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	1ad3      	subs	r3, r2, r3
 800f950:	2b02      	cmp	r3, #2
 800f952:	d901      	bls.n	800f958 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f954:	2303      	movs	r3, #3
 800f956:	e006      	b.n	800f966 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f958:	4b05      	ldr	r3, [pc, #20]	@ (800f970 <RCCEx_PLL2_Config+0x15c>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f960:	2b00      	cmp	r3, #0
 800f962:	d0f0      	beq.n	800f946 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f964:	7bfb      	ldrb	r3, [r7, #15]
}
 800f966:	4618      	mov	r0, r3
 800f968:	3710      	adds	r7, #16
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}
 800f96e:	bf00      	nop
 800f970:	58024400 	.word	0x58024400
 800f974:	ffff0007 	.word	0xffff0007

0800f978 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b084      	sub	sp, #16
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f982:	2300      	movs	r3, #0
 800f984:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f986:	4b53      	ldr	r3, [pc, #332]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800f988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f98a:	f003 0303 	and.w	r3, r3, #3
 800f98e:	2b03      	cmp	r3, #3
 800f990:	d101      	bne.n	800f996 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f992:	2301      	movs	r3, #1
 800f994:	e099      	b.n	800faca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f996:	4b4f      	ldr	r3, [pc, #316]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	4a4e      	ldr	r2, [pc, #312]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800f99c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f9a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f9a2:	f7f7 fc7f 	bl	80072a4 <HAL_GetTick>
 800f9a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f9a8:	e008      	b.n	800f9bc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800f9aa:	f7f7 fc7b 	bl	80072a4 <HAL_GetTick>
 800f9ae:	4602      	mov	r2, r0
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	1ad3      	subs	r3, r2, r3
 800f9b4:	2b02      	cmp	r3, #2
 800f9b6:	d901      	bls.n	800f9bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f9b8:	2303      	movs	r3, #3
 800f9ba:	e086      	b.n	800faca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f9bc:	4b45      	ldr	r3, [pc, #276]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d1f0      	bne.n	800f9aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f9c8:	4b42      	ldr	r3, [pc, #264]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800f9ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9cc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	051b      	lsls	r3, r3, #20
 800f9d6:	493f      	ldr	r1, [pc, #252]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800f9d8:	4313      	orrs	r3, r2
 800f9da:	628b      	str	r3, [r1, #40]	@ 0x28
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	685b      	ldr	r3, [r3, #4]
 800f9e0:	3b01      	subs	r3, #1
 800f9e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	689b      	ldr	r3, [r3, #8]
 800f9ea:	3b01      	subs	r3, #1
 800f9ec:	025b      	lsls	r3, r3, #9
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	431a      	orrs	r2, r3
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	68db      	ldr	r3, [r3, #12]
 800f9f6:	3b01      	subs	r3, #1
 800f9f8:	041b      	lsls	r3, r3, #16
 800f9fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f9fe:	431a      	orrs	r2, r3
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	691b      	ldr	r3, [r3, #16]
 800fa04:	3b01      	subs	r3, #1
 800fa06:	061b      	lsls	r3, r3, #24
 800fa08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800fa0c:	4931      	ldr	r1, [pc, #196]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800fa12:	4b30      	ldr	r3, [pc, #192]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fa14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa16:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	695b      	ldr	r3, [r3, #20]
 800fa1e:	492d      	ldr	r1, [pc, #180]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fa20:	4313      	orrs	r3, r2
 800fa22:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800fa24:	4b2b      	ldr	r3, [pc, #172]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fa26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa28:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	699b      	ldr	r3, [r3, #24]
 800fa30:	4928      	ldr	r1, [pc, #160]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fa32:	4313      	orrs	r3, r2
 800fa34:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800fa36:	4b27      	ldr	r3, [pc, #156]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fa38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa3a:	4a26      	ldr	r2, [pc, #152]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fa3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fa40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800fa42:	4b24      	ldr	r3, [pc, #144]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fa44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fa46:	4b24      	ldr	r3, [pc, #144]	@ (800fad8 <RCCEx_PLL3_Config+0x160>)
 800fa48:	4013      	ands	r3, r2
 800fa4a:	687a      	ldr	r2, [r7, #4]
 800fa4c:	69d2      	ldr	r2, [r2, #28]
 800fa4e:	00d2      	lsls	r2, r2, #3
 800fa50:	4920      	ldr	r1, [pc, #128]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fa52:	4313      	orrs	r3, r2
 800fa54:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800fa56:	4b1f      	ldr	r3, [pc, #124]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fa58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa5a:	4a1e      	ldr	r2, [pc, #120]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fa5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fa60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d106      	bne.n	800fa76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800fa68:	4b1a      	ldr	r3, [pc, #104]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fa6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa6c:	4a19      	ldr	r2, [pc, #100]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fa6e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800fa72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fa74:	e00f      	b.n	800fa96 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	2b01      	cmp	r3, #1
 800fa7a:	d106      	bne.n	800fa8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800fa7c:	4b15      	ldr	r3, [pc, #84]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fa7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa80:	4a14      	ldr	r2, [pc, #80]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fa82:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800fa86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fa88:	e005      	b.n	800fa96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800fa8a:	4b12      	ldr	r3, [pc, #72]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fa8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa8e:	4a11      	ldr	r2, [pc, #68]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fa90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fa94:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800fa96:	4b0f      	ldr	r3, [pc, #60]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	4a0e      	ldr	r2, [pc, #56]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fa9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800faa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800faa2:	f7f7 fbff 	bl	80072a4 <HAL_GetTick>
 800faa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800faa8:	e008      	b.n	800fabc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800faaa:	f7f7 fbfb 	bl	80072a4 <HAL_GetTick>
 800faae:	4602      	mov	r2, r0
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	1ad3      	subs	r3, r2, r3
 800fab4:	2b02      	cmp	r3, #2
 800fab6:	d901      	bls.n	800fabc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fab8:	2303      	movs	r3, #3
 800faba:	e006      	b.n	800faca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fabc:	4b05      	ldr	r3, [pc, #20]	@ (800fad4 <RCCEx_PLL3_Config+0x15c>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d0f0      	beq.n	800faaa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800fac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800faca:	4618      	mov	r0, r3
 800facc:	3710      	adds	r7, #16
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}
 800fad2:	bf00      	nop
 800fad4:	58024400 	.word	0x58024400
 800fad8:	ffff0007 	.word	0xffff0007

0800fadc <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b086      	sub	sp, #24
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	607a      	str	r2, [r7, #4]
 800fae8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	2b02      	cmp	r3, #2
 800faee:	d904      	bls.n	800fafa <HAL_SAI_InitProtocol+0x1e>
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	3b03      	subs	r3, #3
 800faf4:	2b01      	cmp	r3, #1
 800faf6:	d812      	bhi.n	800fb1e <HAL_SAI_InitProtocol+0x42>
 800faf8:	e008      	b.n	800fb0c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	687a      	ldr	r2, [r7, #4]
 800fafe:	68b9      	ldr	r1, [r7, #8]
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	f000 fb85 	bl	8010210 <SAI_InitI2S>
 800fb06:	4603      	mov	r3, r0
 800fb08:	75fb      	strb	r3, [r7, #23]
      break;
 800fb0a:	e00b      	b.n	800fb24 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	68b9      	ldr	r1, [r7, #8]
 800fb12:	68f8      	ldr	r0, [r7, #12]
 800fb14:	f000 fc2e 	bl	8010374 <SAI_InitPCM>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	75fb      	strb	r3, [r7, #23]
      break;
 800fb1c:	e002      	b.n	800fb24 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800fb1e:	2301      	movs	r3, #1
 800fb20:	75fb      	strb	r3, [r7, #23]
      break;
 800fb22:	bf00      	nop
  }

  if (status == HAL_OK)
 800fb24:	7dfb      	ldrb	r3, [r7, #23]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d104      	bne.n	800fb34 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800fb2a:	68f8      	ldr	r0, [r7, #12]
 800fb2c:	f000 f808 	bl	800fb40 <HAL_SAI_Init>
 800fb30:	4603      	mov	r3, r0
 800fb32:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800fb34:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3718      	adds	r7, #24
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}
	...

0800fb40 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b08a      	sub	sp, #40	@ 0x28
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d101      	bne.n	800fb52 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800fb4e:	2301      	movs	r3, #1
 800fb50:	e1fb      	b.n	800ff4a <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fb58:	2b01      	cmp	r3, #1
 800fb5a:	d113      	bne.n	800fb84 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	4a96      	ldr	r2, [pc, #600]	@ (800fdbc <HAL_SAI_Init+0x27c>)
 800fb62:	4293      	cmp	r3, r2
 800fb64:	d004      	beq.n	800fb70 <HAL_SAI_Init+0x30>
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	4a95      	ldr	r2, [pc, #596]	@ (800fdc0 <HAL_SAI_Init+0x280>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d107      	bne.n	800fb80 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800fb74:	2b01      	cmp	r3, #1
 800fb76:	d103      	bne.n	800fb80 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d001      	beq.n	800fb84 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 800fb80:	2301      	movs	r3, #1
 800fb82:	e1e2      	b.n	800ff4a <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4a8c      	ldr	r2, [pc, #560]	@ (800fdbc <HAL_SAI_Init+0x27c>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d004      	beq.n	800fb98 <HAL_SAI_Init+0x58>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	4a8c      	ldr	r2, [pc, #560]	@ (800fdc4 <HAL_SAI_Init+0x284>)
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d102      	bne.n	800fb9e <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 800fb98:	4b8b      	ldr	r3, [pc, #556]	@ (800fdc8 <HAL_SAI_Init+0x288>)
 800fb9a:	61bb      	str	r3, [r7, #24]
 800fb9c:	e00e      	b.n	800fbbc <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	4a87      	ldr	r2, [pc, #540]	@ (800fdc0 <HAL_SAI_Init+0x280>)
 800fba4:	4293      	cmp	r3, r2
 800fba6:	d004      	beq.n	800fbb2 <HAL_SAI_Init+0x72>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	4a87      	ldr	r2, [pc, #540]	@ (800fdcc <HAL_SAI_Init+0x28c>)
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d102      	bne.n	800fbb8 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800fbb2:	4b87      	ldr	r3, [pc, #540]	@ (800fdd0 <HAL_SAI_Init+0x290>)
 800fbb4:	61bb      	str	r3, [r7, #24]
 800fbb6:	e001      	b.n	800fbbc <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800fbb8:	2301      	movs	r3, #1
 800fbba:	e1c6      	b.n	800ff4a <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800fbc2:	b2db      	uxtb	r3, r3
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d106      	bne.n	800fbd6 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2200      	movs	r2, #0
 800fbcc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f000 f9c9 	bl	800ff68 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	f000 fc86 	bl	80104e8 <SAI_Disable>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d001      	beq.n	800fbe6 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	e1b1      	b.n	800ff4a <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2202      	movs	r2, #2
 800fbea:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	68db      	ldr	r3, [r3, #12]
 800fbf2:	2b02      	cmp	r3, #2
 800fbf4:	d00c      	beq.n	800fc10 <HAL_SAI_Init+0xd0>
 800fbf6:	2b02      	cmp	r3, #2
 800fbf8:	d80d      	bhi.n	800fc16 <HAL_SAI_Init+0xd6>
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d002      	beq.n	800fc04 <HAL_SAI_Init+0xc4>
 800fbfe:	2b01      	cmp	r3, #1
 800fc00:	d003      	beq.n	800fc0a <HAL_SAI_Init+0xca>
 800fc02:	e008      	b.n	800fc16 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800fc04:	2300      	movs	r3, #0
 800fc06:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800fc08:	e008      	b.n	800fc1c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800fc0a:	2310      	movs	r3, #16
 800fc0c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800fc0e:	e005      	b.n	800fc1c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800fc10:	2320      	movs	r3, #32
 800fc12:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800fc14:	e002      	b.n	800fc1c <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 800fc16:	2300      	movs	r3, #0
 800fc18:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800fc1a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	689b      	ldr	r3, [r3, #8]
 800fc20:	2b05      	cmp	r3, #5
 800fc22:	d822      	bhi.n	800fc6a <HAL_SAI_Init+0x12a>
 800fc24:	a201      	add	r2, pc, #4	@ (adr r2, 800fc2c <HAL_SAI_Init+0xec>)
 800fc26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc2a:	bf00      	nop
 800fc2c:	0800fc45 	.word	0x0800fc45
 800fc30:	0800fc4b 	.word	0x0800fc4b
 800fc34:	0800fc53 	.word	0x0800fc53
 800fc38:	0800fc6b 	.word	0x0800fc6b
 800fc3c:	0800fc6b 	.word	0x0800fc6b
 800fc40:	0800fc5b 	.word	0x0800fc5b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800fc44:	2300      	movs	r3, #0
 800fc46:	61fb      	str	r3, [r7, #28]
      break;
 800fc48:	e012      	b.n	800fc70 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800fc4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc4e:	61fb      	str	r3, [r7, #28]
      break;
 800fc50:	e00e      	b.n	800fc70 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800fc52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fc56:	61fb      	str	r3, [r7, #28]
      break;
 800fc58:	e00a      	b.n	800fc70 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800fc5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fc5e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800fc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc62:	f043 0303 	orr.w	r3, r3, #3
 800fc66:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800fc68:	e002      	b.n	800fc70 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	61fb      	str	r3, [r7, #28]
      break;
 800fc6e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800fc70:	69bb      	ldr	r3, [r7, #24]
 800fc72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc74:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6a1b      	ldr	r3, [r3, #32]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	f000 8084 	beq.w	800fd88 <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 800fc80:	2300      	movs	r3, #0
 800fc82:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	4a4c      	ldr	r2, [pc, #304]	@ (800fdbc <HAL_SAI_Init+0x27c>)
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	d004      	beq.n	800fc98 <HAL_SAI_Init+0x158>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	4a4c      	ldr	r2, [pc, #304]	@ (800fdc4 <HAL_SAI_Init+0x284>)
 800fc94:	4293      	cmp	r3, r2
 800fc96:	d104      	bne.n	800fca2 <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800fc98:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800fc9c:	f7fe fd84 	bl	800e7a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800fca0:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	4a46      	ldr	r2, [pc, #280]	@ (800fdc0 <HAL_SAI_Init+0x280>)
 800fca8:	4293      	cmp	r3, r2
 800fcaa:	d104      	bne.n	800fcb6 <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800fcac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800fcb0:	f7fe fd7a 	bl	800e7a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800fcb4:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	4a44      	ldr	r2, [pc, #272]	@ (800fdcc <HAL_SAI_Init+0x28c>)
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	d104      	bne.n	800fcca <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800fcc0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800fcc4:	f7fe fd70 	bl	800e7a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800fcc8:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	699b      	ldr	r3, [r3, #24]
 800fcce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800fcd2:	d120      	bne.n	800fd16 <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcd8:	2b04      	cmp	r3, #4
 800fcda:	d102      	bne.n	800fce2 <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800fcdc:	2340      	movs	r3, #64	@ 0x40
 800fcde:	60fb      	str	r3, [r7, #12]
 800fce0:	e00a      	b.n	800fcf8 <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fce6:	2b08      	cmp	r3, #8
 800fce8:	d103      	bne.n	800fcf2 <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800fcea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fcee:	60fb      	str	r3, [r7, #12]
 800fcf0:	e002      	b.n	800fcf8 <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fcf6:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800fcf8:	697a      	ldr	r2, [r7, #20]
 800fcfa:	4613      	mov	r3, r2
 800fcfc:	009b      	lsls	r3, r3, #2
 800fcfe:	4413      	add	r3, r2
 800fd00:	005b      	lsls	r3, r3, #1
 800fd02:	4619      	mov	r1, r3
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	6a1b      	ldr	r3, [r3, #32]
 800fd08:	68fa      	ldr	r2, [r7, #12]
 800fd0a:	fb02 f303 	mul.w	r3, r2, r3
 800fd0e:	fbb1 f3f3 	udiv	r3, r1, r3
 800fd12:	613b      	str	r3, [r7, #16]
 800fd14:	e017      	b.n	800fd46 <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd1a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fd1e:	d101      	bne.n	800fd24 <HAL_SAI_Init+0x1e4>
 800fd20:	2302      	movs	r3, #2
 800fd22:	e000      	b.n	800fd26 <HAL_SAI_Init+0x1e6>
 800fd24:	2301      	movs	r3, #1
 800fd26:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800fd28:	697a      	ldr	r2, [r7, #20]
 800fd2a:	4613      	mov	r3, r2
 800fd2c:	009b      	lsls	r3, r3, #2
 800fd2e:	4413      	add	r3, r2
 800fd30:	005b      	lsls	r3, r3, #1
 800fd32:	4619      	mov	r1, r3
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6a1b      	ldr	r3, [r3, #32]
 800fd38:	68ba      	ldr	r2, [r7, #8]
 800fd3a:	fb02 f303 	mul.w	r3, r2, r3
 800fd3e:	021b      	lsls	r3, r3, #8
 800fd40:	fbb1 f3f3 	udiv	r3, r1, r3
 800fd44:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	4a22      	ldr	r2, [pc, #136]	@ (800fdd4 <HAL_SAI_Init+0x294>)
 800fd4a:	fba2 2303 	umull	r2, r3, r2, r3
 800fd4e:	08da      	lsrs	r2, r3, #3
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800fd54:	6939      	ldr	r1, [r7, #16]
 800fd56:	4b1f      	ldr	r3, [pc, #124]	@ (800fdd4 <HAL_SAI_Init+0x294>)
 800fd58:	fba3 2301 	umull	r2, r3, r3, r1
 800fd5c:	08da      	lsrs	r2, r3, #3
 800fd5e:	4613      	mov	r3, r2
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	4413      	add	r3, r2
 800fd64:	005b      	lsls	r3, r3, #1
 800fd66:	1aca      	subs	r2, r1, r3
 800fd68:	2a08      	cmp	r2, #8
 800fd6a:	d904      	bls.n	800fd76 <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd70:	1c5a      	adds	r2, r3, #1
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd7a:	2b04      	cmp	r3, #4
 800fd7c:	d104      	bne.n	800fd88 <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd82:	085a      	lsrs	r2, r3, #1
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	685b      	ldr	r3, [r3, #4]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d003      	beq.n	800fd98 <HAL_SAI_Init+0x258>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	2b02      	cmp	r3, #2
 800fd96:	d109      	bne.n	800fdac <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd9c:	2b01      	cmp	r3, #1
 800fd9e:	d101      	bne.n	800fda4 <HAL_SAI_Init+0x264>
 800fda0:	2300      	movs	r3, #0
 800fda2:	e001      	b.n	800fda8 <HAL_SAI_Init+0x268>
 800fda4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fda8:	623b      	str	r3, [r7, #32]
 800fdaa:	e017      	b.n	800fddc <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d111      	bne.n	800fdd8 <HAL_SAI_Init+0x298>
 800fdb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fdb8:	e00f      	b.n	800fdda <HAL_SAI_Init+0x29a>
 800fdba:	bf00      	nop
 800fdbc:	40015804 	.word	0x40015804
 800fdc0:	58005404 	.word	0x58005404
 800fdc4:	40015824 	.word	0x40015824
 800fdc8:	40015800 	.word	0x40015800
 800fdcc:	58005424 	.word	0x58005424
 800fdd0:	58005400 	.word	0x58005400
 800fdd4:	cccccccd 	.word	0xcccccccd
 800fdd8:	2300      	movs	r3, #0
 800fdda:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	6819      	ldr	r1, [r3, #0]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681a      	ldr	r2, [r3, #0]
 800fde6:	4b5b      	ldr	r3, [pc, #364]	@ (800ff54 <HAL_SAI_Init+0x414>)
 800fde8:	400b      	ands	r3, r1
 800fdea:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	6819      	ldr	r1, [r3, #0]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	685a      	ldr	r2, [r3, #4]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdfa:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fe00:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe06:	431a      	orrs	r2, r3
 800fe08:	6a3b      	ldr	r3, [r7, #32]
 800fe0a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800fe0c:	69fb      	ldr	r3, [r7, #28]
 800fe0e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800fe14:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	695b      	ldr	r3, [r3, #20]
 800fe1a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fe20:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe26:	051b      	lsls	r3, r3, #20
 800fe28:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fe2e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	691b      	ldr	r3, [r3, #16]
 800fe34:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	430a      	orrs	r2, r1
 800fe3c:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	6859      	ldr	r1, [r3, #4]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681a      	ldr	r2, [r3, #0]
 800fe48:	4b43      	ldr	r3, [pc, #268]	@ (800ff58 <HAL_SAI_Init+0x418>)
 800fe4a:	400b      	ands	r3, r1
 800fe4c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	6859      	ldr	r1, [r3, #4]
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	69da      	ldr	r2, [r3, #28]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe5c:	431a      	orrs	r2, r3
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe62:	431a      	orrs	r2, r3
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	430a      	orrs	r2, r1
 800fe6a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	6899      	ldr	r1, [r3, #8]
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681a      	ldr	r2, [r3, #0]
 800fe76:	4b39      	ldr	r3, [pc, #228]	@ (800ff5c <HAL_SAI_Init+0x41c>)
 800fe78:	400b      	ands	r3, r1
 800fe7a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	6899      	ldr	r1, [r3, #8]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe86:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800fe8c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800fe92:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800fe98:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe9e:	3b01      	subs	r3, #1
 800fea0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800fea2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	430a      	orrs	r2, r1
 800feaa:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	68d9      	ldr	r1, [r3, #12]
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681a      	ldr	r2, [r3, #0]
 800feb6:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800feba:	400b      	ands	r3, r1
 800febc:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	68d9      	ldr	r1, [r3, #12]
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fecc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fed2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800fed4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800feda:	3b01      	subs	r3, #1
 800fedc:	021b      	lsls	r3, r3, #8
 800fede:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	430a      	orrs	r2, r1
 800fee6:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	4a1c      	ldr	r2, [pc, #112]	@ (800ff60 <HAL_SAI_Init+0x420>)
 800feee:	4293      	cmp	r3, r2
 800fef0:	d004      	beq.n	800fefc <HAL_SAI_Init+0x3bc>
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	4a1b      	ldr	r2, [pc, #108]	@ (800ff64 <HAL_SAI_Init+0x424>)
 800fef8:	4293      	cmp	r3, r2
 800fefa:	d119      	bne.n	800ff30 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800fefc:	69bb      	ldr	r3, [r7, #24]
 800fefe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff00:	f023 0201 	bic.w	r2, r3, #1
 800ff04:	69bb      	ldr	r3, [r7, #24]
 800ff06:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ff0e:	2b01      	cmp	r3, #1
 800ff10:	d10e      	bne.n	800ff30 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff1a:	3b01      	subs	r3, #1
 800ff1c:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ff1e:	431a      	orrs	r2, r3
 800ff20:	69bb      	ldr	r3, [r7, #24]
 800ff22:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800ff24:	69bb      	ldr	r3, [r7, #24]
 800ff26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff28:	f043 0201 	orr.w	r2, r3, #1
 800ff2c:	69bb      	ldr	r3, [r7, #24]
 800ff2e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2200      	movs	r2, #0
 800ff34:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2201      	movs	r2, #1
 800ff3c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2200      	movs	r2, #0
 800ff44:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800ff48:	2300      	movs	r3, #0
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3728      	adds	r7, #40	@ 0x28
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
 800ff52:	bf00      	nop
 800ff54:	f005c010 	.word	0xf005c010
 800ff58:	ffff1ff0 	.word	0xffff1ff0
 800ff5c:	fff88000 	.word	0xfff88000
 800ff60:	40015804 	.word	0x40015804
 800ff64:	58005404 	.word	0x58005404

0800ff68 <HAL_SAI_MspInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 800ff68:	b480      	push	{r7}
 800ff6a:	b083      	sub	sp, #12
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 800ff70:	bf00      	nop
 800ff72:	370c      	adds	r7, #12
 800ff74:	46bd      	mov	sp, r7
 800ff76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7a:	4770      	bx	lr

0800ff7c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b086      	sub	sp, #24
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	60f8      	str	r0, [r7, #12]
 800ff84:	60b9      	str	r1, [r7, #8]
 800ff86:	4613      	mov	r3, r2
 800ff88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800ff8a:	f7f7 f98b 	bl	80072a4 <HAL_GetTick>
 800ff8e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d002      	beq.n	800ff9c <HAL_SAI_Transmit_DMA+0x20>
 800ff96:	88fb      	ldrh	r3, [r7, #6]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d101      	bne.n	800ffa0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	e098      	b.n	80100d2 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800ffa6:	b2db      	uxtb	r3, r3
 800ffa8:	2b01      	cmp	r3, #1
 800ffaa:	f040 8091 	bne.w	80100d0 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d101      	bne.n	800ffbc <HAL_SAI_Transmit_DMA+0x40>
 800ffb8:	2302      	movs	r3, #2
 800ffba:	e08a      	b.n	80100d2 <HAL_SAI_Transmit_DMA+0x156>
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	68ba      	ldr	r2, [r7, #8]
 800ffc8:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	88fa      	ldrh	r2, [r7, #6]
 800ffce:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	88fa      	ldrh	r2, [r7, #6]
 800ffd6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	2212      	movs	r2, #18
 800ffe6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fff0:	4a3a      	ldr	r2, [pc, #232]	@ (80100dc <HAL_SAI_Transmit_DMA+0x160>)
 800fff2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fffa:	4a39      	ldr	r2, [pc, #228]	@ (80100e0 <HAL_SAI_Transmit_DMA+0x164>)
 800fffc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010004:	4a37      	ldr	r2, [pc, #220]	@ (80100e4 <HAL_SAI_Transmit_DMA+0x168>)
 8010006:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801000e:	2200      	movs	r2, #0
 8010010:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801001c:	4619      	mov	r1, r3
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	331c      	adds	r3, #28
 8010024:	461a      	mov	r2, r3
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 801002c:	f7f8 fb70 	bl	8008710 <HAL_DMA_Start_IT>
 8010030:	4603      	mov	r3, r0
 8010032:	2b00      	cmp	r3, #0
 8010034:	d005      	beq.n	8010042 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	2200      	movs	r2, #0
 801003a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 801003e:	2301      	movs	r3, #1
 8010040:	e047      	b.n	80100d2 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8010042:	2100      	movs	r1, #0
 8010044:	68f8      	ldr	r0, [r7, #12]
 8010046:	f000 fa17 	bl	8010478 <SAI_InterruptFlag>
 801004a:	4601      	mov	r1, r0
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	691a      	ldr	r2, [r3, #16]
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	430a      	orrs	r2, r1
 8010058:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	681a      	ldr	r2, [r3, #0]
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8010068:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 801006a:	e015      	b.n	8010098 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 801006c:	f7f7 f91a 	bl	80072a4 <HAL_GetTick>
 8010070:	4602      	mov	r2, r0
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	1ad3      	subs	r3, r2, r3
 8010076:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801007a:	d90d      	bls.n	8010098 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010082:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	2200      	movs	r2, #0
 8010090:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 8010094:	2303      	movs	r3, #3
 8010096:	e01c      	b.n	80100d2 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	695b      	ldr	r3, [r3, #20]
 801009e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d0e2      	beq.n	801006c <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d107      	bne.n	80100c4 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80100c2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	2200      	movs	r2, #0
 80100c8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 80100cc:	2300      	movs	r3, #0
 80100ce:	e000      	b.n	80100d2 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 80100d0:	2302      	movs	r3, #2
  }
}
 80100d2:	4618      	mov	r0, r3
 80100d4:	3718      	adds	r7, #24
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}
 80100da:	bf00      	nop
 80100dc:	080105bd 	.word	0x080105bd
 80100e0:	0801055d 	.word	0x0801055d
 80100e4:	08010655 	.word	0x08010655

080100e8 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b084      	sub	sp, #16
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	60f8      	str	r0, [r7, #12]
 80100f0:	60b9      	str	r1, [r7, #8]
 80100f2:	4613      	mov	r3, r2
 80100f4:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d002      	beq.n	8010102 <HAL_SAI_Receive_DMA+0x1a>
 80100fc:	88fb      	ldrh	r3, [r7, #6]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d101      	bne.n	8010106 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8010102:	2301      	movs	r3, #1
 8010104:	e079      	b.n	80101fa <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 801010c:	b2db      	uxtb	r3, r3
 801010e:	2b01      	cmp	r3, #1
 8010110:	d172      	bne.n	80101f8 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8010118:	2b01      	cmp	r3, #1
 801011a:	d101      	bne.n	8010120 <HAL_SAI_Receive_DMA+0x38>
 801011c:	2302      	movs	r3, #2
 801011e:	e06c      	b.n	80101fa <HAL_SAI_Receive_DMA+0x112>
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	2201      	movs	r2, #1
 8010124:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	68ba      	ldr	r2, [r7, #8]
 801012c:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	88fa      	ldrh	r2, [r7, #6]
 8010132:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	88fa      	ldrh	r2, [r7, #6]
 801013a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	2200      	movs	r2, #0
 8010142:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	2222      	movs	r2, #34	@ 0x22
 801014a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010154:	4a2b      	ldr	r2, [pc, #172]	@ (8010204 <HAL_SAI_Receive_DMA+0x11c>)
 8010156:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801015e:	4a2a      	ldr	r2, [pc, #168]	@ (8010208 <HAL_SAI_Receive_DMA+0x120>)
 8010160:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010168:	4a28      	ldr	r2, [pc, #160]	@ (801020c <HAL_SAI_Receive_DMA+0x124>)
 801016a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010172:	2200      	movs	r2, #0
 8010174:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	331c      	adds	r3, #28
 8010182:	4619      	mov	r1, r3
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010188:	461a      	mov	r2, r3
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8010190:	f7f8 fabe 	bl	8008710 <HAL_DMA_Start_IT>
 8010194:	4603      	mov	r3, r0
 8010196:	2b00      	cmp	r3, #0
 8010198:	d005      	beq.n	80101a6 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	2200      	movs	r2, #0
 801019e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 80101a2:	2301      	movs	r3, #1
 80101a4:	e029      	b.n	80101fa <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80101a6:	2100      	movs	r1, #0
 80101a8:	68f8      	ldr	r0, [r7, #12]
 80101aa:	f000 f965 	bl	8010478 <SAI_InterruptFlag>
 80101ae:	4601      	mov	r1, r0
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	691a      	ldr	r2, [r3, #16]
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	430a      	orrs	r2, r1
 80101bc:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	681a      	ldr	r2, [r3, #0]
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80101cc:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d107      	bne.n	80101ec <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	681a      	ldr	r2, [r3, #0]
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80101ea:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	2200      	movs	r2, #0
 80101f0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 80101f4:	2300      	movs	r3, #0
 80101f6:	e000      	b.n	80101fa <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80101f8:	2302      	movs	r3, #2
  }
}
 80101fa:	4618      	mov	r0, r3
 80101fc:	3710      	adds	r7, #16
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}
 8010202:	bf00      	nop
 8010204:	08010639 	.word	0x08010639
 8010208:	080105d9 	.word	0x080105d9
 801020c:	08010655 	.word	0x08010655

08010210 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8010210:	b480      	push	{r7}
 8010212:	b087      	sub	sp, #28
 8010214:	af00      	add	r7, sp, #0
 8010216:	60f8      	str	r0, [r7, #12]
 8010218:	60b9      	str	r1, [r7, #8]
 801021a:	607a      	str	r2, [r7, #4]
 801021c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801021e:	2300      	movs	r3, #0
 8010220:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2200      	movs	r2, #0
 8010226:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	2200      	movs	r2, #0
 801022c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	685b      	ldr	r3, [r3, #4]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d003      	beq.n	801023e <SAI_InitI2S+0x2e>
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	2b02      	cmp	r3, #2
 801023c:	d103      	bne.n	8010246 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2200      	movs	r2, #0
 8010242:	651a      	str	r2, [r3, #80]	@ 0x50
 8010244:	e002      	b.n	801024c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2201      	movs	r2, #1
 801024a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8010252:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801025a:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	2200      	movs	r2, #0
 8010260:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	683a      	ldr	r2, [r7, #0]
 8010266:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	f003 0301 	and.w	r3, r3, #1
 801026e:	2b00      	cmp	r3, #0
 8010270:	d001      	beq.n	8010276 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8010272:	2301      	movs	r3, #1
 8010274:	e077      	b.n	8010366 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d107      	bne.n	801028c <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2200      	movs	r2, #0
 8010280:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8010288:	665a      	str	r2, [r3, #100]	@ 0x64
 801028a:	e006      	b.n	801029a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8010292:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2200      	movs	r2, #0
 8010298:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2b03      	cmp	r3, #3
 801029e:	d84f      	bhi.n	8010340 <SAI_InitI2S+0x130>
 80102a0:	a201      	add	r2, pc, #4	@ (adr r2, 80102a8 <SAI_InitI2S+0x98>)
 80102a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102a6:	bf00      	nop
 80102a8:	080102b9 	.word	0x080102b9
 80102ac:	080102db 	.word	0x080102db
 80102b0:	080102fd 	.word	0x080102fd
 80102b4:	0801031f 	.word	0x0801031f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	2280      	movs	r2, #128	@ 0x80
 80102bc:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	085b      	lsrs	r3, r3, #1
 80102c2:	015a      	lsls	r2, r3, #5
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	085b      	lsrs	r3, r3, #1
 80102cc:	011a      	lsls	r2, r3, #4
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	2240      	movs	r2, #64	@ 0x40
 80102d6:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80102d8:	e035      	b.n	8010346 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2280      	movs	r2, #128	@ 0x80
 80102de:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	085b      	lsrs	r3, r3, #1
 80102e4:	019a      	lsls	r2, r3, #6
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	085b      	lsrs	r3, r3, #1
 80102ee:	015a      	lsls	r2, r3, #5
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2280      	movs	r2, #128	@ 0x80
 80102f8:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80102fa:	e024      	b.n	8010346 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	22c0      	movs	r2, #192	@ 0xc0
 8010300:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	085b      	lsrs	r3, r3, #1
 8010306:	019a      	lsls	r2, r3, #6
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	085b      	lsrs	r3, r3, #1
 8010310:	015a      	lsls	r2, r3, #5
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	2280      	movs	r2, #128	@ 0x80
 801031a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 801031c:	e013      	b.n	8010346 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	22e0      	movs	r2, #224	@ 0xe0
 8010322:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	085b      	lsrs	r3, r3, #1
 8010328:	019a      	lsls	r2, r3, #6
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	085b      	lsrs	r3, r3, #1
 8010332:	015a      	lsls	r2, r3, #5
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2280      	movs	r2, #128	@ 0x80
 801033c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 801033e:	e002      	b.n	8010346 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8010340:	2301      	movs	r3, #1
 8010342:	75fb      	strb	r3, [r7, #23]
      break;
 8010344:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	2b02      	cmp	r3, #2
 801034a:	d10b      	bne.n	8010364 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2b01      	cmp	r3, #1
 8010350:	d102      	bne.n	8010358 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	2210      	movs	r2, #16
 8010356:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2b02      	cmp	r3, #2
 801035c:	d102      	bne.n	8010364 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	2208      	movs	r2, #8
 8010362:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 8010364:	7dfb      	ldrb	r3, [r7, #23]
}
 8010366:	4618      	mov	r0, r3
 8010368:	371c      	adds	r7, #28
 801036a:	46bd      	mov	sp, r7
 801036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010370:	4770      	bx	lr
 8010372:	bf00      	nop

08010374 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8010374:	b480      	push	{r7}
 8010376:	b087      	sub	sp, #28
 8010378:	af00      	add	r7, sp, #0
 801037a:	60f8      	str	r0, [r7, #12]
 801037c:	60b9      	str	r1, [r7, #8]
 801037e:	607a      	str	r2, [r7, #4]
 8010380:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010382:	2300      	movs	r3, #0
 8010384:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	2200      	movs	r2, #0
 801038a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	2200      	movs	r2, #0
 8010390:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	685b      	ldr	r3, [r3, #4]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d003      	beq.n	80103a2 <SAI_InitPCM+0x2e>
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	685b      	ldr	r3, [r3, #4]
 801039e:	2b02      	cmp	r3, #2
 80103a0:	d103      	bne.n	80103aa <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	2201      	movs	r2, #1
 80103a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80103a8:	e002      	b.n	80103b0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	2200      	movs	r2, #0
 80103ae:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	2200      	movs	r2, #0
 80103b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80103bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80103c4:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	2200      	movs	r2, #0
 80103ca:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	683a      	ldr	r2, [r7, #0]
 80103d0:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80103d8:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	2b04      	cmp	r3, #4
 80103de:	d103      	bne.n	80103e8 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	2201      	movs	r2, #1
 80103e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80103e6:	e002      	b.n	80103ee <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	220d      	movs	r2, #13
 80103ec:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2b03      	cmp	r3, #3
 80103f2:	d837      	bhi.n	8010464 <SAI_InitPCM+0xf0>
 80103f4:	a201      	add	r2, pc, #4	@ (adr r2, 80103fc <SAI_InitPCM+0x88>)
 80103f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103fa:	bf00      	nop
 80103fc:	0801040d 	.word	0x0801040d
 8010400:	08010423 	.word	0x08010423
 8010404:	08010439 	.word	0x08010439
 8010408:	0801044f 	.word	0x0801044f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	2280      	movs	r2, #128	@ 0x80
 8010410:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	011a      	lsls	r2, r3, #4
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	2240      	movs	r2, #64	@ 0x40
 801041e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8010420:	e023      	b.n	801046a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	2280      	movs	r2, #128	@ 0x80
 8010426:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	015a      	lsls	r2, r3, #5
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2280      	movs	r2, #128	@ 0x80
 8010434:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8010436:	e018      	b.n	801046a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	22c0      	movs	r2, #192	@ 0xc0
 801043c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	015a      	lsls	r2, r3, #5
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	2280      	movs	r2, #128	@ 0x80
 801044a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 801044c:	e00d      	b.n	801046a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	22e0      	movs	r2, #224	@ 0xe0
 8010452:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	015a      	lsls	r2, r3, #5
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2280      	movs	r2, #128	@ 0x80
 8010460:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8010462:	e002      	b.n	801046a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8010464:	2301      	movs	r3, #1
 8010466:	75fb      	strb	r3, [r7, #23]
      break;
 8010468:	bf00      	nop
  }

  return status;
 801046a:	7dfb      	ldrb	r3, [r7, #23]
}
 801046c:	4618      	mov	r0, r3
 801046e:	371c      	adds	r7, #28
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr

08010478 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8010478:	b480      	push	{r7}
 801047a:	b085      	sub	sp, #20
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
 8010480:	460b      	mov	r3, r1
 8010482:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8010484:	2301      	movs	r3, #1
 8010486:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8010488:	78fb      	ldrb	r3, [r7, #3]
 801048a:	2b01      	cmp	r3, #1
 801048c:	d103      	bne.n	8010496 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	f043 0308 	orr.w	r3, r3, #8
 8010494:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801049a:	2b08      	cmp	r3, #8
 801049c:	d10b      	bne.n	80104b6 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80104a2:	2b03      	cmp	r3, #3
 80104a4:	d003      	beq.n	80104ae <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	685b      	ldr	r3, [r3, #4]
 80104aa:	2b01      	cmp	r3, #1
 80104ac:	d103      	bne.n	80104b6 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	f043 0310 	orr.w	r3, r3, #16
 80104b4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	2b03      	cmp	r3, #3
 80104bc:	d003      	beq.n	80104c6 <SAI_InterruptFlag+0x4e>
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	685b      	ldr	r3, [r3, #4]
 80104c2:	2b02      	cmp	r3, #2
 80104c4:	d104      	bne.n	80104d0 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80104cc:	60fb      	str	r3, [r7, #12]
 80104ce:	e003      	b.n	80104d8 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	f043 0304 	orr.w	r3, r3, #4
 80104d6:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80104d8:	68fb      	ldr	r3, [r7, #12]
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3714      	adds	r7, #20
 80104de:	46bd      	mov	sp, r7
 80104e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e4:	4770      	bx	lr
	...

080104e8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80104e8:	b480      	push	{r7}
 80104ea:	b085      	sub	sp, #20
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80104f0:	4b18      	ldr	r3, [pc, #96]	@ (8010554 <SAI_Disable+0x6c>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	4a18      	ldr	r2, [pc, #96]	@ (8010558 <SAI_Disable+0x70>)
 80104f6:	fba2 2303 	umull	r2, r3, r2, r3
 80104fa:	0b1b      	lsrs	r3, r3, #12
 80104fc:	009b      	lsls	r3, r3, #2
 80104fe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8010500:	2300      	movs	r3, #0
 8010502:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	681a      	ldr	r2, [r3, #0]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8010512:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d10a      	bne.n	8010530 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010520:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 801052a:	2303      	movs	r3, #3
 801052c:	72fb      	strb	r3, [r7, #11]
      break;
 801052e:	e009      	b.n	8010544 <SAI_Disable+0x5c>
    }
    count--;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	3b01      	subs	r3, #1
 8010534:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010540:	2b00      	cmp	r3, #0
 8010542:	d1e7      	bne.n	8010514 <SAI_Disable+0x2c>

  return status;
 8010544:	7afb      	ldrb	r3, [r7, #11]
}
 8010546:	4618      	mov	r0, r3
 8010548:	3714      	adds	r7, #20
 801054a:	46bd      	mov	sp, r7
 801054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010550:	4770      	bx	lr
 8010552:	bf00      	nop
 8010554:	24000594 	.word	0x24000594
 8010558:	95cbec1b 	.word	0x95cbec1b

0801055c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b084      	sub	sp, #16
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010568:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	69db      	ldr	r3, [r3, #28]
 801056e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010572:	d01c      	beq.n	80105ae <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	2200      	movs	r2, #0
 8010578:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	681a      	ldr	r2, [r3, #0]
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 801058a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 801058c:	2100      	movs	r1, #0
 801058e:	68f8      	ldr	r0, [r7, #12]
 8010590:	f7ff ff72 	bl	8010478 <SAI_InterruptFlag>
 8010594:	4603      	mov	r3, r0
 8010596:	43d9      	mvns	r1, r3
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	691a      	ldr	r2, [r3, #16]
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	400a      	ands	r2, r1
 80105a4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	2201      	movs	r2, #1
 80105aa:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80105ae:	68f8      	ldr	r0, [r7, #12]
 80105b0:	f7f2 f960 	bl	8002874 <HAL_SAI_TxCpltCallback>
#endif
}
 80105b4:	bf00      	nop
 80105b6:	3710      	adds	r7, #16
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}

080105bc <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b084      	sub	sp, #16
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105c8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80105ca:	68f8      	ldr	r0, [r7, #12]
 80105cc:	f7f2 f95d 	bl	800288a <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80105d0:	bf00      	nop
 80105d2:	3710      	adds	r7, #16
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b084      	sub	sp, #16
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105e4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	69db      	ldr	r3, [r3, #28]
 80105ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80105ee:	d01c      	beq.n	801062a <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	681a      	ldr	r2, [r3, #0]
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80105fe:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	2200      	movs	r2, #0
 8010604:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8010608:	2100      	movs	r1, #0
 801060a:	68f8      	ldr	r0, [r7, #12]
 801060c:	f7ff ff34 	bl	8010478 <SAI_InterruptFlag>
 8010610:	4603      	mov	r3, r0
 8010612:	43d9      	mvns	r1, r3
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	691a      	ldr	r2, [r3, #16]
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	400a      	ands	r2, r1
 8010620:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	2201      	movs	r2, #1
 8010626:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 801062a:	68f8      	ldr	r0, [r7, #12]
 801062c:	f7f4 fa51 	bl	8004ad2 <HAL_SAI_RxCpltCallback>
#endif
}
 8010630:	bf00      	nop
 8010632:	3710      	adds	r7, #16
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}

08010638 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b084      	sub	sp, #16
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010644:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8010646:	68f8      	ldr	r0, [r7, #12]
 8010648:	f7f4 fa38 	bl	8004abc <HAL_SAI_RxHalfCpltCallback>
#endif
}
 801064c:	bf00      	nop
 801064e:	3710      	adds	r7, #16
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}

08010654 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b084      	sub	sp, #16
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010660:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f7f9 f9e8 	bl	8009a38 <HAL_DMA_GetError>
 8010668:	4603      	mov	r3, r0
 801066a:	2b02      	cmp	r3, #2
 801066c:	d01d      	beq.n	80106aa <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010674:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	681a      	ldr	r2, [r3, #0]
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 801068c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 801068e:	68f8      	ldr	r0, [r7, #12]
 8010690:	f7ff ff2a 	bl	80104e8 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2201      	movs	r2, #1
 8010698:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	2200      	movs	r2, #0
 80106a0:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80106a4:	68f8      	ldr	r0, [r7, #12]
 80106a6:	f7f2 f8fb 	bl	80028a0 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80106aa:	bf00      	nop
 80106ac:	3710      	adds	r7, #16
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
	...

080106b4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b084      	sub	sp, #16
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106c0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80106c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d008      	beq.n	80106e2 <HAL_SD_IRQHandler+0x2e>
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	f003 0308 	and.w	r3, r3, #8
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d003      	beq.n	80106e2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f000 f9ac 	bl	8010a38 <SD_Read_IT>
 80106e0:	e19a      	b.n	8010a18 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80106e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	f000 80ac 	beq.w	801084a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80106fa:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681a      	ldr	r2, [r3, #0]
 8010706:	4b59      	ldr	r3, [pc, #356]	@ (801086c <HAL_SD_IRQHandler+0x1b8>)
 8010708:	400b      	ands	r3, r1
 801070a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 801071a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	68da      	ldr	r2, [r3, #12]
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801072a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	f003 0308 	and.w	r3, r3, #8
 8010732:	2b00      	cmp	r3, #0
 8010734:	d038      	beq.n	80107a8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	f003 0302 	and.w	r3, r3, #2
 801073c:	2b00      	cmp	r3, #0
 801073e:	d104      	bne.n	801074a <HAL_SD_IRQHandler+0x96>
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	f003 0320 	and.w	r3, r3, #32
 8010746:	2b00      	cmp	r3, #0
 8010748:	d011      	beq.n	801076e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	4618      	mov	r0, r3
 8010750:	f000 fa92 	bl	8010c78 <SDMMC_CmdStopTransfer>
 8010754:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d008      	beq.n	801076e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	431a      	orrs	r2, r3
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f000 f95b 	bl	8010a24 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	4a3f      	ldr	r2, [pc, #252]	@ (8010870 <HAL_SD_IRQHandler+0x1bc>)
 8010774:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2201      	movs	r2, #1
 801077a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2200      	movs	r2, #0
 8010782:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	f003 0301 	and.w	r3, r3, #1
 801078a:	2b00      	cmp	r3, #0
 801078c:	d104      	bne.n	8010798 <HAL_SD_IRQHandler+0xe4>
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	f003 0302 	and.w	r3, r3, #2
 8010794:	2b00      	cmp	r3, #0
 8010796:	d003      	beq.n	80107a0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8010798:	6878      	ldr	r0, [r7, #4]
 801079a:	f7f6 fcc3 	bl	8007124 <HAL_SD_RxCpltCallback>
 801079e:	e13b      	b.n	8010a18 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f7f6 fcab 	bl	80070fc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80107a6:	e137      	b.n	8010a18 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	f000 8132 	beq.w	8010a18 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	2200      	movs	r2, #0
 80107ba:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	2200      	movs	r2, #0
 80107c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	2200      	movs	r2, #0
 80107ca:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	f003 0302 	and.w	r3, r3, #2
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d104      	bne.n	80107e0 <HAL_SD_IRQHandler+0x12c>
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	f003 0320 	and.w	r3, r3, #32
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d011      	beq.n	8010804 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	4618      	mov	r0, r3
 80107e6:	f000 fa47 	bl	8010c78 <SDMMC_CmdStopTransfer>
 80107ea:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d008      	beq.n	8010804 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	431a      	orrs	r2, r3
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f000 f910 	bl	8010a24 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2201      	movs	r2, #1
 8010808:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2200      	movs	r2, #0
 8010810:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	f003 0310 	and.w	r3, r3, #16
 8010818:	2b00      	cmp	r3, #0
 801081a:	d104      	bne.n	8010826 <HAL_SD_IRQHandler+0x172>
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	f003 0320 	and.w	r3, r3, #32
 8010822:	2b00      	cmp	r3, #0
 8010824:	d002      	beq.n	801082c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	f7f6 fc68 	bl	80070fc <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	f003 0301 	and.w	r3, r3, #1
 8010832:	2b00      	cmp	r3, #0
 8010834:	d105      	bne.n	8010842 <HAL_SD_IRQHandler+0x18e>
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	f003 0302 	and.w	r3, r3, #2
 801083c:	2b00      	cmp	r3, #0
 801083e:	f000 80eb 	beq.w	8010a18 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f7f6 fc6e 	bl	8007124 <HAL_SD_RxCpltCallback>
}
 8010848:	e0e6      	b.n	8010a18 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010854:	2b00      	cmp	r3, #0
 8010856:	d00d      	beq.n	8010874 <HAL_SD_IRQHandler+0x1c0>
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	f003 0308 	and.w	r3, r3, #8
 801085e:	2b00      	cmp	r3, #0
 8010860:	d008      	beq.n	8010874 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8010862:	6878      	ldr	r0, [r7, #4]
 8010864:	f000 f92e 	bl	8010ac4 <SD_Write_IT>
 8010868:	e0d6      	b.n	8010a18 <HAL_SD_IRQHandler+0x364>
 801086a:	bf00      	nop
 801086c:	ffff3ec5 	.word	0xffff3ec5
 8010870:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801087a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 801087e:	2b00      	cmp	r3, #0
 8010880:	f000 809d 	beq.w	80109be <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801088a:	f003 0302 	and.w	r3, r3, #2
 801088e:	2b00      	cmp	r3, #0
 8010890:	d005      	beq.n	801089e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010896:	f043 0202 	orr.w	r2, r3, #2
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108a4:	f003 0308 	and.w	r3, r3, #8
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d005      	beq.n	80108b8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108b0:	f043 0208 	orr.w	r2, r3, #8
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108be:	f003 0320 	and.w	r3, r3, #32
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d005      	beq.n	80108d2 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108ca:	f043 0220 	orr.w	r2, r3, #32
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108d8:	f003 0310 	and.w	r3, r3, #16
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d005      	beq.n	80108ec <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108e4:	f043 0210 	orr.w	r2, r3, #16
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	4a4b      	ldr	r2, [pc, #300]	@ (8010a20 <HAL_SD_IRQHandler+0x36c>)
 80108f2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8010902:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	68da      	ldr	r2, [r3, #12]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010912:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010922:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	68da      	ldr	r2, [r3, #12]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8010932:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	4618      	mov	r0, r3
 801093a:	f000 f99d 	bl	8010c78 <SDMMC_CmdStopTransfer>
 801093e:	4602      	mov	r2, r0
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010944:	431a      	orrs	r2, r3
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	68da      	ldr	r2, [r3, #12]
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010958:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010962:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	f003 0308 	and.w	r3, r3, #8
 801096a:	2b00      	cmp	r3, #0
 801096c:	d00a      	beq.n	8010984 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2201      	movs	r2, #1
 8010972:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2200      	movs	r2, #0
 801097a:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 801097c:	6878      	ldr	r0, [r7, #4]
 801097e:	f000 f851 	bl	8010a24 <HAL_SD_ErrorCallback>
}
 8010982:	e049      	b.n	8010a18 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801098a:	2b00      	cmp	r3, #0
 801098c:	d044      	beq.n	8010a18 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010992:	2b00      	cmp	r3, #0
 8010994:	d040      	beq.n	8010a18 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80109a4:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	2200      	movs	r2, #0
 80109ac:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2201      	movs	r2, #1
 80109b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f000 f834 	bl	8010a24 <HAL_SD_ErrorCallback>
}
 80109bc:	e02c      	b.n	8010a18 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d025      	beq.n	8010a18 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80109d4:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80109dc:	f003 0304 	and.w	r3, r3, #4
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d10c      	bne.n	80109fe <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f003 0320 	and.w	r3, r3, #32
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d003      	beq.n	80109f6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	f000 f8d0 	bl	8010b94 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80109f4:	e010      	b.n	8010a18 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f000 f8b8 	bl	8010b6c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80109fc:	e00c      	b.n	8010a18 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	f003 0320 	and.w	r3, r3, #32
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d003      	beq.n	8010a10 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f000 f8b9 	bl	8010b80 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8010a0e:	e003      	b.n	8010a18 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f000 f8a1 	bl	8010b58 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8010a16:	e7ff      	b.n	8010a18 <HAL_SD_IRQHandler+0x364>
 8010a18:	bf00      	nop
 8010a1a:	3710      	adds	r7, #16
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	18000f3a 	.word	0x18000f3a

08010a24 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8010a24:	b480      	push	{r7}
 8010a26:	b083      	sub	sp, #12
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8010a2c:	bf00      	nop
 8010a2e:	370c      	adds	r7, #12
 8010a30:	46bd      	mov	sp, r7
 8010a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a36:	4770      	bx	lr

08010a38 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b086      	sub	sp, #24
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a44:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a4a:	2b1f      	cmp	r3, #31
 8010a4c:	d936      	bls.n	8010abc <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8010a4e:	2300      	movs	r3, #0
 8010a50:	617b      	str	r3, [r7, #20]
 8010a52:	e027      	b.n	8010aa4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f000 f8a5 	bl	8010ba8 <SDMMC_ReadFIFO>
 8010a5e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	b2da      	uxtb	r2, r3
 8010a64:	693b      	ldr	r3, [r7, #16]
 8010a66:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	3301      	adds	r3, #1
 8010a6c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	0a1b      	lsrs	r3, r3, #8
 8010a72:	b2da      	uxtb	r2, r3
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010a78:	693b      	ldr	r3, [r7, #16]
 8010a7a:	3301      	adds	r3, #1
 8010a7c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	0c1b      	lsrs	r3, r3, #16
 8010a82:	b2da      	uxtb	r2, r3
 8010a84:	693b      	ldr	r3, [r7, #16]
 8010a86:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010a88:	693b      	ldr	r3, [r7, #16]
 8010a8a:	3301      	adds	r3, #1
 8010a8c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	0e1b      	lsrs	r3, r3, #24
 8010a92:	b2da      	uxtb	r2, r3
 8010a94:	693b      	ldr	r3, [r7, #16]
 8010a96:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010a98:	693b      	ldr	r3, [r7, #16]
 8010a9a:	3301      	adds	r3, #1
 8010a9c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	3301      	adds	r3, #1
 8010aa2:	617b      	str	r3, [r7, #20]
 8010aa4:	697b      	ldr	r3, [r7, #20]
 8010aa6:	2b07      	cmp	r3, #7
 8010aa8:	d9d4      	bls.n	8010a54 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	693a      	ldr	r2, [r7, #16]
 8010aae:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ab4:	f1a3 0220 	sub.w	r2, r3, #32
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8010abc:	bf00      	nop
 8010abe:	3718      	adds	r7, #24
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}

08010ac4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b086      	sub	sp, #24
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	69db      	ldr	r3, [r3, #28]
 8010ad0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	6a1b      	ldr	r3, [r3, #32]
 8010ad6:	2b1f      	cmp	r3, #31
 8010ad8:	d93a      	bls.n	8010b50 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8010ada:	2300      	movs	r3, #0
 8010adc:	617b      	str	r3, [r7, #20]
 8010ade:	e02b      	b.n	8010b38 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	60fb      	str	r3, [r7, #12]
      tmp++;
 8010ae6:	693b      	ldr	r3, [r7, #16]
 8010ae8:	3301      	adds	r3, #1
 8010aea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	781b      	ldrb	r3, [r3, #0]
 8010af0:	021a      	lsls	r2, r3, #8
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	4313      	orrs	r3, r2
 8010af6:	60fb      	str	r3, [r7, #12]
      tmp++;
 8010af8:	693b      	ldr	r3, [r7, #16]
 8010afa:	3301      	adds	r3, #1
 8010afc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8010afe:	693b      	ldr	r3, [r7, #16]
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	041a      	lsls	r2, r3, #16
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	4313      	orrs	r3, r2
 8010b08:	60fb      	str	r3, [r7, #12]
      tmp++;
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	3301      	adds	r3, #1
 8010b0e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8010b10:	693b      	ldr	r3, [r7, #16]
 8010b12:	781b      	ldrb	r3, [r3, #0]
 8010b14:	061a      	lsls	r2, r3, #24
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	4313      	orrs	r3, r2
 8010b1a:	60fb      	str	r3, [r7, #12]
      tmp++;
 8010b1c:	693b      	ldr	r3, [r7, #16]
 8010b1e:	3301      	adds	r3, #1
 8010b20:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	f107 020c 	add.w	r2, r7, #12
 8010b2a:	4611      	mov	r1, r2
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f000 f848 	bl	8010bc2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8010b32:	697b      	ldr	r3, [r7, #20]
 8010b34:	3301      	adds	r3, #1
 8010b36:	617b      	str	r3, [r7, #20]
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	2b07      	cmp	r3, #7
 8010b3c:	d9d0      	bls.n	8010ae0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	693a      	ldr	r2, [r7, #16]
 8010b42:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6a1b      	ldr	r3, [r3, #32]
 8010b48:	f1a3 0220 	sub.w	r2, r3, #32
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	621a      	str	r2, [r3, #32]
  }
}
 8010b50:	bf00      	nop
 8010b52:	3718      	adds	r7, #24
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}

08010b58 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b083      	sub	sp, #12
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8010b60:	bf00      	nop
 8010b62:	370c      	adds	r7, #12
 8010b64:	46bd      	mov	sp, r7
 8010b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6a:	4770      	bx	lr

08010b6c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8010b6c:	b480      	push	{r7}
 8010b6e:	b083      	sub	sp, #12
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8010b74:	bf00      	nop
 8010b76:	370c      	adds	r7, #12
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7e:	4770      	bx	lr

08010b80 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8010b80:	b480      	push	{r7}
 8010b82:	b083      	sub	sp, #12
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8010b88:	bf00      	nop
 8010b8a:	370c      	adds	r7, #12
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b92:	4770      	bx	lr

08010b94 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8010b94:	b480      	push	{r7}
 8010b96:	b083      	sub	sp, #12
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8010b9c:	bf00      	nop
 8010b9e:	370c      	adds	r7, #12
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba6:	4770      	bx	lr

08010ba8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b083      	sub	sp, #12
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	370c      	adds	r7, #12
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc0:	4770      	bx	lr

08010bc2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010bc2:	b480      	push	{r7}
 8010bc4:	b083      	sub	sp, #12
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	6078      	str	r0, [r7, #4]
 8010bca:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	681a      	ldr	r2, [r3, #0]
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010bd6:	2300      	movs	r3, #0
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	370c      	adds	r7, #12
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr

08010be4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010be4:	b480      	push	{r7}
 8010be6:	b085      	sub	sp, #20
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	681a      	ldr	r2, [r3, #0]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010c02:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8010c08:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8010c0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010c10:	68fa      	ldr	r2, [r7, #12]
 8010c12:	4313      	orrs	r3, r2
 8010c14:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	68da      	ldr	r2, [r3, #12]
 8010c1a:	4b06      	ldr	r3, [pc, #24]	@ (8010c34 <SDMMC_SendCommand+0x50>)
 8010c1c:	4013      	ands	r3, r2
 8010c1e:	68fa      	ldr	r2, [r7, #12]
 8010c20:	431a      	orrs	r2, r3
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010c26:	2300      	movs	r3, #0
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3714      	adds	r7, #20
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c32:	4770      	bx	lr
 8010c34:	fffee0c0 	.word	0xfffee0c0

08010c38 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010c38:	b480      	push	{r7}
 8010c3a:	b083      	sub	sp, #12
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	691b      	ldr	r3, [r3, #16]
 8010c44:	b2db      	uxtb	r3, r3
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	370c      	adds	r7, #12
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr

08010c52 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010c52:	b480      	push	{r7}
 8010c54:	b085      	sub	sp, #20
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	6078      	str	r0, [r7, #4]
 8010c5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	3314      	adds	r3, #20
 8010c60:	461a      	mov	r2, r3
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	4413      	add	r3, r2
 8010c66:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	681b      	ldr	r3, [r3, #0]
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3714      	adds	r7, #20
 8010c70:	46bd      	mov	sp, r7
 8010c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c76:	4770      	bx	lr

08010c78 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b088      	sub	sp, #32
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010c80:	2300      	movs	r3, #0
 8010c82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010c84:	230c      	movs	r3, #12
 8010c86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010c8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010c96:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	68db      	ldr	r3, [r3, #12]
 8010c9c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	68db      	ldr	r3, [r3, #12]
 8010ca8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cb0:	f107 0308 	add.w	r3, r7, #8
 8010cb4:	4619      	mov	r1, r3
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f7ff ff94 	bl	8010be4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8010cec <SDMMC_CmdStopTransfer+0x74>)
 8010cbe:	210c      	movs	r1, #12
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f000 f815 	bl	8010cf0 <SDMMC_GetCmdResp1>
 8010cc6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	68db      	ldr	r3, [r3, #12]
 8010ccc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010cd4:	69fb      	ldr	r3, [r7, #28]
 8010cd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010cda:	d101      	bne.n	8010ce0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010ce0:	69fb      	ldr	r3, [r7, #28]
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3720      	adds	r7, #32
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	05f5e100 	.word	0x05f5e100

08010cf0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b088      	sub	sp, #32
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	60f8      	str	r0, [r7, #12]
 8010cf8:	460b      	mov	r3, r1
 8010cfa:	607a      	str	r2, [r7, #4]
 8010cfc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010cfe:	4b70      	ldr	r3, [pc, #448]	@ (8010ec0 <SDMMC_GetCmdResp1+0x1d0>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	4a70      	ldr	r2, [pc, #448]	@ (8010ec4 <SDMMC_GetCmdResp1+0x1d4>)
 8010d04:	fba2 2303 	umull	r2, r3, r2, r3
 8010d08:	0a5a      	lsrs	r2, r3, #9
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	fb02 f303 	mul.w	r3, r2, r3
 8010d10:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010d12:	69fb      	ldr	r3, [r7, #28]
 8010d14:	1e5a      	subs	r2, r3, #1
 8010d16:	61fa      	str	r2, [r7, #28]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d102      	bne.n	8010d22 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d1c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010d20:	e0c9      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d26:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010d28:	69ba      	ldr	r2, [r7, #24]
 8010d2a:	4b67      	ldr	r3, [pc, #412]	@ (8010ec8 <SDMMC_GetCmdResp1+0x1d8>)
 8010d2c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d0ef      	beq.n	8010d12 <SDMMC_GetCmdResp1+0x22>
 8010d32:	69bb      	ldr	r3, [r7, #24]
 8010d34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d1ea      	bne.n	8010d12 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d40:	f003 0304 	and.w	r3, r3, #4
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d004      	beq.n	8010d52 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	2204      	movs	r2, #4
 8010d4c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d4e:	2304      	movs	r3, #4
 8010d50:	e0b1      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d56:	f003 0301 	and.w	r3, r3, #1
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d004      	beq.n	8010d68 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	2201      	movs	r2, #1
 8010d62:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d64:	2301      	movs	r3, #1
 8010d66:	e0a6      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	4a58      	ldr	r2, [pc, #352]	@ (8010ecc <SDMMC_GetCmdResp1+0x1dc>)
 8010d6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010d6e:	68f8      	ldr	r0, [r7, #12]
 8010d70:	f7ff ff62 	bl	8010c38 <SDMMC_GetCommandResponse>
 8010d74:	4603      	mov	r3, r0
 8010d76:	461a      	mov	r2, r3
 8010d78:	7afb      	ldrb	r3, [r7, #11]
 8010d7a:	4293      	cmp	r3, r2
 8010d7c:	d001      	beq.n	8010d82 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d7e:	2301      	movs	r3, #1
 8010d80:	e099      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010d82:	2100      	movs	r1, #0
 8010d84:	68f8      	ldr	r0, [r7, #12]
 8010d86:	f7ff ff64 	bl	8010c52 <SDMMC_GetResponse>
 8010d8a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010d8c:	697a      	ldr	r2, [r7, #20]
 8010d8e:	4b50      	ldr	r3, [pc, #320]	@ (8010ed0 <SDMMC_GetCmdResp1+0x1e0>)
 8010d90:	4013      	ands	r3, r2
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d101      	bne.n	8010d9a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010d96:	2300      	movs	r3, #0
 8010d98:	e08d      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010d9a:	697b      	ldr	r3, [r7, #20]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	da02      	bge.n	8010da6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010da0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010da4:	e087      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010da6:	697b      	ldr	r3, [r7, #20]
 8010da8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d001      	beq.n	8010db4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010db0:	2340      	movs	r3, #64	@ 0x40
 8010db2:	e080      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d001      	beq.n	8010dc2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010dbe:	2380      	movs	r3, #128	@ 0x80
 8010dc0:	e079      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d002      	beq.n	8010dd2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010dcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010dd0:	e071      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d002      	beq.n	8010de2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010ddc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010de0:	e069      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d002      	beq.n	8010df2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010dec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010df0:	e061      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d002      	beq.n	8010e02 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010dfc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010e00:	e059      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d002      	beq.n	8010e12 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010e0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010e10:	e051      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d002      	beq.n	8010e22 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010e1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010e20:	e049      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d002      	beq.n	8010e32 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010e2c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010e30:	e041      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d002      	beq.n	8010e42 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010e3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010e40:	e039      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d002      	beq.n	8010e52 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010e4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010e50:	e031      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d002      	beq.n	8010e62 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010e5c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010e60:	e029      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010e62:	697b      	ldr	r3, [r7, #20]
 8010e64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d002      	beq.n	8010e72 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010e6c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010e70:	e021      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d002      	beq.n	8010e82 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010e7c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010e80:	e019      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d002      	beq.n	8010e92 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010e8c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010e90:	e011      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d002      	beq.n	8010ea2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010e9c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010ea0:	e009      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	f003 0308 	and.w	r3, r3, #8
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d002      	beq.n	8010eb2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010eac:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010eb0:	e001      	b.n	8010eb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010eb2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3720      	adds	r7, #32
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
 8010ebe:	bf00      	nop
 8010ec0:	24000594 	.word	0x24000594
 8010ec4:	10624dd3 	.word	0x10624dd3
 8010ec8:	00200045 	.word	0x00200045
 8010ecc:	002000c5 	.word	0x002000c5
 8010ed0:	fdffe008 	.word	0xfdffe008

08010ed4 <lab_init>:
float32_t filter_in[FRAME_SIZE/4] = {0};
float32_t filter_out[FRAME_SIZE/4] = {0};
float32_t state[31+(FRAME_SIZE/4)-1] = {0};
arm_fir_instance_f32 filter_instance;
void lab_init(int16_t* output_buffer)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b084      	sub	sp, #16
 8010ed8:	af02      	add	r7, sp, #8
 8010eda:	6078      	str	r0, [r7, #4]
	arm_fir_init_f32(&filter_instance, 31, b, state, FRAME_SIZE/4);
 8010edc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010ee0:	9300      	str	r3, [sp, #0]
 8010ee2:	4b05      	ldr	r3, [pc, #20]	@ (8010ef8 <lab_init+0x24>)
 8010ee4:	4a05      	ldr	r2, [pc, #20]	@ (8010efc <lab_init+0x28>)
 8010ee6:	211f      	movs	r1, #31
 8010ee8:	4805      	ldr	r0, [pc, #20]	@ (8010f00 <lab_init+0x2c>)
 8010eea:	f003 fe1f 	bl	8014b2c <arm_fir_init_f32>
	return;
 8010eee:	bf00      	nop
}
 8010ef0:	3708      	adds	r7, #8
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}
 8010ef6:	bf00      	nop
 8010ef8:	24005c6c 	.word	0x24005c6c
 8010efc:	24000470 	.word	0x24000470
 8010f00:	24007ce4 	.word	0x24007ce4

08010f04 <process_input_buffer>:
	2. Combine the two channels (by addition) into one signal
	3. Save the result to the fft_in buffer which will be used for the display
	4. The original audio buffer is left unchanged (passthrough)
*/
void process_input_buffer(int16_t* input_buffer)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b084      	sub	sp, #16
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
	int16_t left_sample;
	int16_t right_sample;
	for (uint32_t i_sample = 0; i_sample < FRAME_SIZE/2; i_sample+=1)
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	60fb      	str	r3, [r7, #12]
 8010f10:	e02a      	b.n	8010f68 <process_input_buffer+0x64>
	{
		left_sample = input_buffer[i_sample];
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	005b      	lsls	r3, r3, #1
 8010f16:	687a      	ldr	r2, [r7, #4]
 8010f18:	4413      	add	r3, r2
 8010f1a:	881b      	ldrh	r3, [r3, #0]
 8010f1c:	817b      	strh	r3, [r7, #10]
		i_sample +=1;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	3301      	adds	r3, #1
 8010f22:	60fb      	str	r3, [r7, #12]
		right_sample = input_buffer[i_sample];
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	005b      	lsls	r3, r3, #1
 8010f28:	687a      	ldr	r2, [r7, #4]
 8010f2a:	4413      	add	r3, r2
 8010f2c:	881b      	ldrh	r3, [r3, #0]
 8010f2e:	813b      	strh	r3, [r7, #8]
		fft_in[i_sample/2] =  (((float32_t) left_sample) + ((float32_t) right_sample))/2;
 8010f30:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010f34:	ee07 3a90 	vmov	s15, r3
 8010f38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010f3c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010f40:	ee07 3a90 	vmov	s15, r3
 8010f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	085b      	lsrs	r3, r3, #1
 8010f50:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010f54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010f58:	4a0d      	ldr	r2, [pc, #52]	@ (8010f90 <process_input_buffer+0x8c>)
 8010f5a:	009b      	lsls	r3, r3, #2
 8010f5c:	4413      	add	r3, r2
 8010f5e:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t i_sample = 0; i_sample < FRAME_SIZE/2; i_sample+=1)
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	3301      	adds	r3, #1
 8010f66:	60fb      	str	r3, [r7, #12]
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010f6e:	d3d0      	bcc.n	8010f12 <process_input_buffer+0xe>
	}
	arm_rfft_fast_f32(&fft_inst, fft_in, fft_out, 0);
 8010f70:	2300      	movs	r3, #0
 8010f72:	4a08      	ldr	r2, [pc, #32]	@ (8010f94 <process_input_buffer+0x90>)
 8010f74:	4906      	ldr	r1, [pc, #24]	@ (8010f90 <process_input_buffer+0x8c>)
 8010f76:	4808      	ldr	r0, [pc, #32]	@ (8010f98 <process_input_buffer+0x94>)
 8010f78:	f003 f9f2 	bl	8014360 <arm_rfft_fast_f32>
	arm_cmplx_mag_f32(fft_out, fft_mag, FRAME_SIZE/8);
 8010f7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010f80:	4906      	ldr	r1, [pc, #24]	@ (8010f9c <process_input_buffer+0x98>)
 8010f82:	4804      	ldr	r0, [pc, #16]	@ (8010f94 <process_input_buffer+0x90>)
 8010f84:	f003 fde4 	bl	8014b50 <arm_cmplx_mag_f32>
	return;
 8010f88:	bf00      	nop
}
 8010f8a:	3710      	adds	r7, #16
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}
 8010f90:	2400fd40 	.word	0x2400fd40
 8010f94:	24011d40 	.word	0x24011d40
 8010f98:	2400fd28 	.word	0x2400fd28
 8010f9c:	24013d40 	.word	0x24013d40

08010fa0 <mod>:
	1. Copy input to output without modification (passthrough)
	2. Estimate the number of cycles that have elapsed during the function call
*/


int16_t mod(int16_t num, int16_t mod){
 8010fa0:	b480      	push	{r7}
 8010fa2:	b083      	sub	sp, #12
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	460a      	mov	r2, r1
 8010faa:	80fb      	strh	r3, [r7, #6]
 8010fac:	4613      	mov	r3, r2
 8010fae:	80bb      	strh	r3, [r7, #4]
	if(num < 0)
 8010fb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	da05      	bge.n	8010fc4 <mod+0x24>
		return num + mod;
 8010fb8:	88fa      	ldrh	r2, [r7, #6]
 8010fba:	88bb      	ldrh	r3, [r7, #4]
 8010fbc:	4413      	add	r3, r2
 8010fbe:	b29b      	uxth	r3, r3
 8010fc0:	b21b      	sxth	r3, r3
 8010fc2:	e01e      	b.n	8011002 <mod+0x62>

	if(num == mod)
 8010fc4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010fc8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d101      	bne.n	8010fd4 <mod+0x34>
		return 0;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	e016      	b.n	8011002 <mod+0x62>

	if(num > mod){
 8010fd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010fd8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	dd0e      	ble.n	8010ffe <mod+0x5e>
		while(num > mod){
 8010fe0:	e004      	b.n	8010fec <mod+0x4c>
			num -= mod;
 8010fe2:	88fa      	ldrh	r2, [r7, #6]
 8010fe4:	88bb      	ldrh	r3, [r7, #4]
 8010fe6:	1ad3      	subs	r3, r2, r3
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	80fb      	strh	r3, [r7, #6]
		while(num > mod){
 8010fec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010ff0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	dcf4      	bgt.n	8010fe2 <mod+0x42>
		}
		return num;
 8010ff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ffc:	e001      	b.n	8011002 <mod+0x62>
	}

	return num;
 8010ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8011002:	4618      	mov	r0, r3
 8011004:	370c      	adds	r7, #12
 8011006:	46bd      	mov	sp, r7
 8011008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100c:	4770      	bx	lr
	...

08011010 <circular_buffer_shift>:

void circular_buffer_shift(float32_t new_element)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b082      	sub	sp, #8
 8011014:	af00      	add	r7, sp, #0
 8011016:	ed87 0a01 	vstr	s0, [r7, #4]
    position = position-1;
 801101a:	4b0d      	ldr	r3, [pc, #52]	@ (8011050 <circular_buffer_shift+0x40>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	3b01      	subs	r3, #1
 8011020:	4a0b      	ldr	r2, [pc, #44]	@ (8011050 <circular_buffer_shift+0x40>)
 8011022:	6013      	str	r3, [r2, #0]
    position = mod(position, 31);
 8011024:	4b0a      	ldr	r3, [pc, #40]	@ (8011050 <circular_buffer_shift+0x40>)
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	b21b      	sxth	r3, r3
 801102a:	211f      	movs	r1, #31
 801102c:	4618      	mov	r0, r3
 801102e:	f7ff ffb7 	bl	8010fa0 <mod>
 8011032:	4603      	mov	r3, r0
 8011034:	461a      	mov	r2, r3
 8011036:	4b06      	ldr	r3, [pc, #24]	@ (8011050 <circular_buffer_shift+0x40>)
 8011038:	601a      	str	r2, [r3, #0]
    x[position] = new_element;
 801103a:	4b05      	ldr	r3, [pc, #20]	@ (8011050 <circular_buffer_shift+0x40>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	4a05      	ldr	r2, [pc, #20]	@ (8011054 <circular_buffer_shift+0x44>)
 8011040:	009b      	lsls	r3, r3, #2
 8011042:	4413      	add	r3, r2
 8011044:	687a      	ldr	r2, [r7, #4]
 8011046:	601a      	str	r2, [r3, #0]
}
 8011048:	bf00      	nop
 801104a:	3708      	adds	r7, #8
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}
 8011050:	24005c68 	.word	0x24005c68
 8011054:	24005be8 	.word	0x24005be8

08011058 <process_left_sample>:

int16_t process_left_sample(int16_t input_sample)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b084      	sub	sp, #16
 801105c:	af00      	add	r7, sp, #0
 801105e:	4603      	mov	r3, r0
 8011060:	80fb      	strh	r3, [r7, #6]
	tic();
 8011062:	f000 f91d 	bl	80112a0 <tic>
	int16_t output_sample;
	circular_buffer_shift(((float32_t) input_sample) * INPUT_SCALE_FACTOR);
 8011066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801106a:	ee07 3a90 	vmov	s15, r3
 801106e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011072:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011076:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 8011130 <process_left_sample+0xd8>
 801107a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801107e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011082:	eeb0 0a67 	vmov.f32	s0, s15
 8011086:	f7ff ffc3 	bl	8011010 <circular_buffer_shift>

	y = 0;
 801108a:	4b2d      	ldr	r3, [pc, #180]	@ (8011140 <process_left_sample+0xe8>)
 801108c:	f04f 0200 	mov.w	r2, #0
 8011090:	601a      	str	r2, [r3, #0]

	for(int16_t i = 0; i < 31; i++){
 8011092:	2300      	movs	r3, #0
 8011094:	81fb      	strh	r3, [r7, #14]
 8011096:	e02b      	b.n	80110f0 <process_left_sample+0x98>
		y += b[i]*x[(position + i)%31];
 8011098:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801109c:	4a29      	ldr	r2, [pc, #164]	@ (8011144 <process_left_sample+0xec>)
 801109e:	009b      	lsls	r3, r3, #2
 80110a0:	4413      	add	r3, r2
 80110a2:	ed93 7a00 	vldr	s14, [r3]
 80110a6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80110aa:	4b27      	ldr	r3, [pc, #156]	@ (8011148 <process_left_sample+0xf0>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	441a      	add	r2, r3
 80110b0:	4b26      	ldr	r3, [pc, #152]	@ (801114c <process_left_sample+0xf4>)
 80110b2:	fb83 1302 	smull	r1, r3, r3, r2
 80110b6:	4413      	add	r3, r2
 80110b8:	1119      	asrs	r1, r3, #4
 80110ba:	17d3      	asrs	r3, r2, #31
 80110bc:	1ac9      	subs	r1, r1, r3
 80110be:	460b      	mov	r3, r1
 80110c0:	015b      	lsls	r3, r3, #5
 80110c2:	1a5b      	subs	r3, r3, r1
 80110c4:	1ad1      	subs	r1, r2, r3
 80110c6:	4a22      	ldr	r2, [pc, #136]	@ (8011150 <process_left_sample+0xf8>)
 80110c8:	008b      	lsls	r3, r1, #2
 80110ca:	4413      	add	r3, r2
 80110cc:	edd3 7a00 	vldr	s15, [r3]
 80110d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80110d4:	4b1a      	ldr	r3, [pc, #104]	@ (8011140 <process_left_sample+0xe8>)
 80110d6:	edd3 7a00 	vldr	s15, [r3]
 80110da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110de:	4b18      	ldr	r3, [pc, #96]	@ (8011140 <process_left_sample+0xe8>)
 80110e0:	edc3 7a00 	vstr	s15, [r3]
	for(int16_t i = 0; i < 31; i++){
 80110e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80110e8:	b29b      	uxth	r3, r3
 80110ea:	3301      	adds	r3, #1
 80110ec:	b29b      	uxth	r3, r3
 80110ee:	81fb      	strh	r3, [r7, #14]
 80110f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80110f4:	2b1e      	cmp	r3, #30
 80110f6:	ddcf      	ble.n	8011098 <process_left_sample+0x40>
	}

	output_sample = y * OUTPUT_SCALE_FACTOR;
 80110f8:	4b11      	ldr	r3, [pc, #68]	@ (8011140 <process_left_sample+0xe8>)
 80110fa:	edd3 7a00 	vldr	s15, [r3]
 80110fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011102:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8011138 <process_left_sample+0xe0>
 8011106:	ee27 7b06 	vmul.f64	d7, d7, d6
 801110a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801110e:	ee17 3a90 	vmov	r3, s15
 8011112:	81bb      	strh	r3, [r7, #12]
	elapsed_cycles = toc();
 8011114:	f000 f8d4 	bl	80112c0 <toc>
 8011118:	4603      	mov	r3, r0
 801111a:	4a0e      	ldr	r2, [pc, #56]	@ (8011154 <process_left_sample+0xfc>)
 801111c:	6013      	str	r3, [r2, #0]
	return output_sample;
 801111e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8011122:	4618      	mov	r0, r3
 8011124:	3710      	adds	r7, #16
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}
 801112a:	bf00      	nop
 801112c:	f3af 8000 	nop.w
 8011130:	47ae147b 	.word	0x47ae147b
 8011134:	3f347ae1 	.word	0x3f347ae1
 8011138:	00000000 	.word	0x00000000
 801113c:	40a90000 	.word	0x40a90000
 8011140:	24005c64 	.word	0x24005c64
 8011144:	24000470 	.word	0x24000470
 8011148:	24005c68 	.word	0x24005c68
 801114c:	84210843 	.word	0x84210843
 8011150:	24005be8 	.word	0x24005be8
 8011154:	24005be4 	.word	0x24005be4

08011158 <process_right_sample>:
Default behavior:
	1. Copy input to output without modification (passthrough)
	2. Estimate the number of cycles that have elapsed during the function call
*/
int16_t process_right_sample(int16_t input_sample)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b084      	sub	sp, #16
 801115c:	af00      	add	r7, sp, #0
 801115e:	4603      	mov	r3, r0
 8011160:	80fb      	strh	r3, [r7, #6]
	tic();
 8011162:	f000 f89d 	bl	80112a0 <tic>
	int16_t output_sample;
	output_sample = input_sample;
 8011166:	88fb      	ldrh	r3, [r7, #6]
 8011168:	81fb      	strh	r3, [r7, #14]
	elapsed_cycles = toc();
 801116a:	f000 f8a9 	bl	80112c0 <toc>
 801116e:	4603      	mov	r3, r0
 8011170:	4a03      	ldr	r2, [pc, #12]	@ (8011180 <process_right_sample+0x28>)
 8011172:	6013      	str	r3, [r2, #0]
	return output_sample;
 8011174:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8011178:	4618      	mov	r0, r3
 801117a:	3710      	adds	r7, #16
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}
 8011180:	24005be4 	.word	0x24005be4

08011184 <process_output_buffer>:
The buffer you see here will have any changes that occurred to the signal due to:
	1. the process_input_buffer function
	2. the process_left_sample and process_right_sample functions
*/
void process_output_buffer(int16_t* output_buffer)
{
 8011184:	b480      	push	{r7}
 8011186:	b083      	sub	sp, #12
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
	return;
 801118c:	bf00      	nop
}
 801118e:	370c      	adds	r7, #12
 8011190:	46bd      	mov	sp, r7
 8011192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011196:	4770      	bx	lr

08011198 <main>:
extern int16_t process_right_sample(int16_t input_sample);
extern void process_input_buffer(int16_t* input_buffer);
extern void process_output_buffer(int16_t* output_buffer);

int main(void)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	af00      	add	r7, sp, #0
  MPU_Config();
 801119c:	f000 fb6e 	bl	801187c <MPU_Config>
  CPU_CACHE_Enable();
 80111a0:	f000 fb94 	bl	80118cc <CPU_CACHE_Enable>
  HAL_Init();
 80111a4:	f7f5 fff8 	bl	8007198 <HAL_Init>
  SystemClock_Config();
 80111a8:	f000 fa5a 	bl	8011660 <SystemClock_Config>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80111ac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80111b0:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
 80111b4:	2000      	movs	r0, #0
 80111b6:	f7fc f885 	bl	800d2c4 <HAL_RCC_MCOConfig>
  BSP_LED_Init(LED1);
 80111ba:	2000      	movs	r0, #0
 80111bc:	f7f1 f962 	bl	8002484 <BSP_LED_Init>
  BSP_LCD_Init(0, LCD_ORIENTATION_PORTRAIT);
 80111c0:	2100      	movs	r1, #0
 80111c2:	2000      	movs	r0, #0
 80111c4:	f7f4 fbea 	bl	800599c <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80111c8:	480f      	ldr	r0, [pc, #60]	@ (8011208 <main+0x70>)
 80111ca:	f000 fcf9 	bl	8011bc0 <UTIL_LCD_SetFuncDriver>
  Display_DemoDescription();
 80111ce:	f000 fad1 	bl	8011774 <Display_DemoDescription>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80111d2:	2101      	movs	r1, #1
 80111d4:	2000      	movs	r0, #0
 80111d6:	f7f1 f9b3 	bl	8002540 <BSP_PB_Init>
  arm_rfft_fast_init_f32(&fft_inst, FRAME_SIZE/4);
 80111da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80111de:	480b      	ldr	r0, [pc, #44]	@ (801120c <main+0x74>)
 80111e0:	f002 ffd8 	bl	8014194 <arm_rfft_fast_init_f32>
  audio_init();
 80111e4:	f000 f818 	bl	8011218 <audio_init>
  lab_init(play_buffer);
 80111e8:	4809      	ldr	r0, [pc, #36]	@ (8011210 <main+0x78>)
 80111ea:	f7ff fe73 	bl	8010ed4 <lab_init>
  #ifdef ENABLE_VISUALIZATION
	  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 80111ee:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80111f2:	f000 fd4f 	bl	8011c94 <UTIL_LCD_SetBackColor>
	  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80111f6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80111fa:	f000 fdc5 	bl	8011d88 <UTIL_LCD_Clear>
  #endif

  while (1)
  {
    #ifdef ENABLE_VISUALIZATION
	  display_spectrum(fft_mag);
 80111fe:	4805      	ldr	r0, [pc, #20]	@ (8011214 <main+0x7c>)
 8011200:	f000 f870 	bl	80112e4 <display_spectrum>
 8011204:	e7fb      	b.n	80111fe <main+0x66>
 8011206:	bf00      	nop
 8011208:	08015a08 	.word	0x08015a08
 801120c:	2400fd28 	.word	0x2400fd28
 8011210:	24007d00 	.word	0x24007d00
 8011214:	24013d40 	.word	0x24013d40

08011218 <audio_init>:
    #endif
  }
}

void audio_init(void)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	af00      	add	r7, sp, #0
  audio_out_init.Device = AUDIO_OUT_DEVICE_HEADPHONE;
 801121c:	4b1b      	ldr	r3, [pc, #108]	@ (801128c <audio_init+0x74>)
 801121e:	2202      	movs	r2, #2
 8011220:	601a      	str	r2, [r3, #0]
  audio_out_init.ChannelsNbr = 2;
 8011222:	4b1a      	ldr	r3, [pc, #104]	@ (801128c <audio_init+0x74>)
 8011224:	2202      	movs	r2, #2
 8011226:	60da      	str	r2, [r3, #12]
  audio_out_init.SampleRate = SAMPLE_RATE;
 8011228:	4b18      	ldr	r3, [pc, #96]	@ (801128c <audio_init+0x74>)
 801122a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 801122e:	605a      	str	r2, [r3, #4]
  audio_out_init.BitsPerSample = AUDIO_RESOLUTION_16B;
 8011230:	4b16      	ldr	r3, [pc, #88]	@ (801128c <audio_init+0x74>)
 8011232:	2210      	movs	r2, #16
 8011234:	609a      	str	r2, [r3, #8]
  audio_out_init.Volume = 50;
 8011236:	4b15      	ldr	r3, [pc, #84]	@ (801128c <audio_init+0x74>)
 8011238:	2232      	movs	r2, #50	@ 0x32
 801123a:	611a      	str	r2, [r3, #16]
  audio_in_init.Device = AUDIO_IN_DEVICE_ANALOG_MIC;
 801123c:	4b14      	ldr	r3, [pc, #80]	@ (8011290 <audio_init+0x78>)
 801123e:	2200      	movs	r2, #0
 8011240:	601a      	str	r2, [r3, #0]
  audio_in_init.ChannelsNbr = 2;
 8011242:	4b13      	ldr	r3, [pc, #76]	@ (8011290 <audio_init+0x78>)
 8011244:	2202      	movs	r2, #2
 8011246:	60da      	str	r2, [r3, #12]
  audio_in_init.SampleRate = SAMPLE_RATE;
 8011248:	4b11      	ldr	r3, [pc, #68]	@ (8011290 <audio_init+0x78>)
 801124a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 801124e:	605a      	str	r2, [r3, #4]
  audio_in_init.BitsPerSample = AUDIO_RESOLUTION_16B;
 8011250:	4b0f      	ldr	r3, [pc, #60]	@ (8011290 <audio_init+0x78>)
 8011252:	2210      	movs	r2, #16
 8011254:	609a      	str	r2, [r3, #8]
  audio_in_init.Volume = 100;
 8011256:	4b0e      	ldr	r3, [pc, #56]	@ (8011290 <audio_init+0x78>)
 8011258:	2264      	movs	r2, #100	@ 0x64
 801125a:	611a      	str	r2, [r3, #16]
  BSP_AUDIO_IN_OUT_Init_Ex(0, 0, &audio_in_init, &audio_in_init);
 801125c:	4b0c      	ldr	r3, [pc, #48]	@ (8011290 <audio_init+0x78>)
 801125e:	4a0c      	ldr	r2, [pc, #48]	@ (8011290 <audio_init+0x78>)
 8011260:	2100      	movs	r1, #0
 8011262:	2000      	movs	r0, #0
 8011264:	f7f2 fa2a 	bl	80036bc <BSP_AUDIO_IN_OUT_Init_Ex>
  BSP_AUDIO_IN_Record_Ex(0, (uint8_t*) record_buffer, FRAME_SIZE*2);
 8011268:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 801126c:	4909      	ldr	r1, [pc, #36]	@ (8011294 <audio_init+0x7c>)
 801126e:	2000      	movs	r0, #0
 8011270:	f7f2 fe48 	bl	8003f04 <BSP_AUDIO_IN_Record_Ex>
  BSP_AUDIO_OUT_Play(0, (uint8_t*) play_buffer, FRAME_SIZE*2);
 8011274:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8011278:	4907      	ldr	r1, [pc, #28]	@ (8011298 <audio_init+0x80>)
 801127a:	2000      	movs	r0, #0
 801127c:	f7f1 fa7c 	bl	8002778 <BSP_AUDIO_OUT_Play>
  audio_buffer_offset  = BUFFER_OFFSET_NONE;
 8011280:	4b06      	ldr	r3, [pc, #24]	@ (801129c <audio_init+0x84>)
 8011282:	2200      	movs	r2, #0
 8011284:	601a      	str	r2, [r3, #0]
}
 8011286:	bf00      	nop
 8011288:	bd80      	pop	{r7, pc}
 801128a:	bf00      	nop
 801128c:	2400fd14 	.word	0x2400fd14
 8011290:	2400fd00 	.word	0x2400fd00
 8011294:	2400bd00 	.word	0x2400bd00
 8011298:	24007d00 	.word	0x24007d00
 801129c:	24007cf4 	.word	0x24007cf4

080112a0 <tic>:

void tic(void)
{
 80112a0:	b480      	push	{r7}
 80112a2:	af00      	add	r7, sp, #0
	t = *systick;
 80112a4:	4b04      	ldr	r3, [pc, #16]	@ (80112b8 <tic+0x18>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	4a04      	ldr	r2, [pc, #16]	@ (80112bc <tic+0x1c>)
 80112ac:	6013      	str	r3, [r2, #0]
}
 80112ae:	bf00      	nop
 80112b0:	46bd      	mov	sp, r7
 80112b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b6:	4770      	bx	lr
 80112b8:	240004ec 	.word	0x240004ec
 80112bc:	24007cf8 	.word	0x24007cf8

080112c0 <toc>:

uint32_t toc(void)
{
 80112c0:	b480      	push	{r7}
 80112c2:	af00      	add	r7, sp, #0
	return t - *systick;
 80112c4:	4b05      	ldr	r3, [pc, #20]	@ (80112dc <toc+0x1c>)
 80112c6:	681a      	ldr	r2, [r3, #0]
 80112c8:	4b05      	ldr	r3, [pc, #20]	@ (80112e0 <toc+0x20>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	1ad3      	subs	r3, r2, r3
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	46bd      	mov	sp, r7
 80112d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d8:	4770      	bx	lr
 80112da:	bf00      	nop
 80112dc:	24007cf8 	.word	0x24007cf8
 80112e0:	240004ec 	.word	0x240004ec

080112e4 <display_spectrum>:

void display_spectrum(float32_t *fft_mag)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b088      	sub	sp, #32
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
	uint32_t x1, x2;
	float32_t height;

	for(uint32_t i_bar = 0; i_bar<160; i_bar+=1)
 80112ec:	2300      	movs	r3, #0
 80112ee:	61bb      	str	r3, [r7, #24]
 80112f0:	e07f      	b.n	80113f2 <display_spectrum+0x10e>
	{
		x1 = FFT_to_CQ_LUT[i_bar];
 80112f2:	4a44      	ldr	r2, [pc, #272]	@ (8011404 <display_spectrum+0x120>)
 80112f4:	69bb      	ldr	r3, [r7, #24]
 80112f6:	4413      	add	r3, r2
 80112f8:	781b      	ldrb	r3, [r3, #0]
 80112fa:	613b      	str	r3, [r7, #16]
		x2 = FFT_to_CQ_LUT[i_bar+1];
 80112fc:	69bb      	ldr	r3, [r7, #24]
 80112fe:	3301      	adds	r3, #1
 8011300:	4a40      	ldr	r2, [pc, #256]	@ (8011404 <display_spectrum+0x120>)
 8011302:	5cd3      	ldrb	r3, [r2, r3]
 8011304:	60fb      	str	r3, [r7, #12]
		if (x1 == x2){height = 20*logf(fft_mag[x1]);}
 8011306:	693a      	ldr	r2, [r7, #16]
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	429a      	cmp	r2, r3
 801130c:	d112      	bne.n	8011334 <display_spectrum+0x50>
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	009b      	lsls	r3, r3, #2
 8011312:	687a      	ldr	r2, [r7, #4]
 8011314:	4413      	add	r3, r2
 8011316:	edd3 7a00 	vldr	s15, [r3]
 801131a:	eeb0 0a67 	vmov.f32	s0, s15
 801131e:	f004 f84d 	bl	80153bc <logf>
 8011322:	eef0 7a40 	vmov.f32	s15, s0
 8011326:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 801132a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801132e:	edc7 7a07 	vstr	s15, [r7, #28]
 8011332:	e024      	b.n	801137e <display_spectrum+0x9a>
		else
		{
			height = 0;
 8011334:	f04f 0300 	mov.w	r3, #0
 8011338:	61fb      	str	r3, [r7, #28]
			for (uint32_t bin = x1; bin<x2; bin+=1)
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	617b      	str	r3, [r7, #20]
 801133e:	e00e      	b.n	801135e <display_spectrum+0x7a>
			{
				height += fft_mag[bin];
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	009b      	lsls	r3, r3, #2
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	4413      	add	r3, r2
 8011348:	edd3 7a00 	vldr	s15, [r3]
 801134c:	ed97 7a07 	vldr	s14, [r7, #28]
 8011350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011354:	edc7 7a07 	vstr	s15, [r7, #28]
			for (uint32_t bin = x1; bin<x2; bin+=1)
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	3301      	adds	r3, #1
 801135c:	617b      	str	r3, [r7, #20]
 801135e:	697a      	ldr	r2, [r7, #20]
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	429a      	cmp	r2, r3
 8011364:	d3ec      	bcc.n	8011340 <display_spectrum+0x5c>
			}
			height = 20*logf(height);
 8011366:	ed97 0a07 	vldr	s0, [r7, #28]
 801136a:	f004 f827 	bl	80153bc <logf>
 801136e:	eef0 7a40 	vmov.f32	s15, s0
 8011372:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8011376:	ee67 7a87 	vmul.f32	s15, s15, s14
 801137a:	edc7 7a07 	vstr	s15, [r7, #28]
		}

		height = 2*height - 200;
 801137e:	edd7 7a07 	vldr	s15, [r7, #28]
 8011382:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011386:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8011408 <display_spectrum+0x124>
 801138a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801138e:	edc7 7a07 	vstr	s15, [r7, #28]
		if (height>270){height = 270;}
 8011392:	edd7 7a07 	vldr	s15, [r7, #28]
 8011396:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 801140c <display_spectrum+0x128>
 801139a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113a2:	dd01      	ble.n	80113a8 <display_spectrum+0xc4>
 80113a4:	4b1a      	ldr	r3, [pc, #104]	@ (8011410 <display_spectrum+0x12c>)
 80113a6:	61fb      	str	r3, [r7, #28]
		UTIL_LCD_DrawVLine(3*i_bar, 0, 272, UTIL_LCD_COLOR_BLACK);
 80113a8:	69ba      	ldr	r2, [r7, #24]
 80113aa:	4613      	mov	r3, r2
 80113ac:	005b      	lsls	r3, r3, #1
 80113ae:	1898      	adds	r0, r3, r2
 80113b0:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80113b4:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80113b8:	2100      	movs	r1, #0
 80113ba:	f000 fcaf 	bl	8011d1c <UTIL_LCD_DrawVLine>
		UTIL_LCD_DrawVLine(3*i_bar, (uint32_t)(272-height), (uint32_t)height, UTIL_LCD_COLOR_BLUE);
 80113be:	69ba      	ldr	r2, [r7, #24]
 80113c0:	4613      	mov	r3, r2
 80113c2:	005b      	lsls	r3, r3, #1
 80113c4:	1898      	adds	r0, r3, r2
 80113c6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8011414 <display_spectrum+0x130>
 80113ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80113ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80113d2:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80113d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80113da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80113de:	4b0e      	ldr	r3, [pc, #56]	@ (8011418 <display_spectrum+0x134>)
 80113e0:	ee17 2a90 	vmov	r2, s15
 80113e4:	ee17 1a10 	vmov	r1, s14
 80113e8:	f000 fc98 	bl	8011d1c <UTIL_LCD_DrawVLine>
	for(uint32_t i_bar = 0; i_bar<160; i_bar+=1)
 80113ec:	69bb      	ldr	r3, [r7, #24]
 80113ee:	3301      	adds	r3, #1
 80113f0:	61bb      	str	r3, [r7, #24]
 80113f2:	69bb      	ldr	r3, [r7, #24]
 80113f4:	2b9f      	cmp	r3, #159	@ 0x9f
 80113f6:	f67f af7c 	bls.w	80112f2 <display_spectrum+0xe>
	}
}
 80113fa:	bf00      	nop
 80113fc:	bf00      	nop
 80113fe:	3720      	adds	r7, #32
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}
 8011404:	240004f0 	.word	0x240004f0
 8011408:	43480000 	.word	0x43480000
 801140c:	43870000 	.word	0x43870000
 8011410:	43870000 	.word	0x43870000
 8011414:	43880000 	.word	0x43880000
 8011418:	ff0000ff 	.word	0xff0000ff

0801141c <BSP_AUDIO_IN_HalfTransfer_CallBack>:
    }
  }
}

void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b08c      	sub	sp, #48	@ 0x30
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	4b40      	ldr	r3, [pc, #256]	@ (8011528 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x10c>)
 8011426:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011428:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801142c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ( dsize > 0 ) { 
 801142e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011430:	2b00      	cmp	r3, #0
 8011432:	dd1d      	ble.n	8011470 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x54>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8011434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011436:	f003 021f 	and.w	r2, r3, #31
 801143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801143c:	4413      	add	r3, r2
 801143e:	623b      	str	r3, [r7, #32]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8011440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011442:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8011444:	f3bf 8f4f 	dsb	sy
}
 8011448:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801144a:	4a38      	ldr	r2, [pc, #224]	@ (801152c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x110>)
 801144c:	69fb      	ldr	r3, [r7, #28]
 801144e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8011452:	69fb      	ldr	r3, [r7, #28]
 8011454:	3320      	adds	r3, #32
 8011456:	61fb      	str	r3, [r7, #28]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8011458:	6a3b      	ldr	r3, [r7, #32]
 801145a:	3b20      	subs	r3, #32
 801145c:	623b      	str	r3, [r7, #32]
      } while ( op_size > 0 );
 801145e:	6a3b      	ldr	r3, [r7, #32]
 8011460:	2b00      	cmp	r3, #0
 8011462:	dcf2      	bgt.n	801144a <BSP_AUDIO_IN_HalfTransfer_CallBack+0x2e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011464:	f3bf 8f4f 	dsb	sy
}
 8011468:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801146a:	f3bf 8f6f 	isb	sy
}
 801146e:	bf00      	nop
}
 8011470:	bf00      	nop
    SCB_InvalidateDCache_by_Addr((uint32_t *) record_buffer, FRAME_SIZE*2);
	#ifdef PROCESS_INPUT_BUFFER
    	process_input_buffer(record_buffer);
 8011472:	482d      	ldr	r0, [pc, #180]	@ (8011528 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x10c>)
 8011474:	f7ff fd46 	bl	8010f04 <process_input_buffer>
	#endif
    for(uint32_t i_sample = 0 ; i_sample < FRAME_SIZE/2; i_sample+=1)
 8011478:	2300      	movs	r3, #0
 801147a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801147c:	e01f      	b.n	80114be <BSP_AUDIO_IN_HalfTransfer_CallBack+0xa2>
    {
		#ifdef PROCESS_LEFT_CHANNEL
			play_buffer[i_sample] = process_left_sample(record_buffer[i_sample]);
 801147e:	4a2a      	ldr	r2, [pc, #168]	@ (8011528 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x10c>)
 8011480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011482:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011486:	4618      	mov	r0, r3
 8011488:	f7ff fde6 	bl	8011058 <process_left_sample>
 801148c:	4603      	mov	r3, r0
 801148e:	4619      	mov	r1, r3
 8011490:	4a27      	ldr	r2, [pc, #156]	@ (8011530 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x114>)
 8011492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011494:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		#elif defined(PERIODIC_LOOKUP_TABLE)
		#else
			play_buffer[i_sample] = record_buffer[i_sample];
		#endif
		i_sample +=1;
 8011498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801149a:	3301      	adds	r3, #1
 801149c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		#ifdef PROCESS_RIGHT_CHANNEL
			play_buffer[i_sample] = process_right_sample(record_buffer[i_sample]);
 801149e:	4a22      	ldr	r2, [pc, #136]	@ (8011528 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x10c>)
 80114a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114a2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7ff fe56 	bl	8011158 <process_right_sample>
 80114ac:	4603      	mov	r3, r0
 80114ae:	4619      	mov	r1, r3
 80114b0:	4a1f      	ldr	r2, [pc, #124]	@ (8011530 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x114>)
 80114b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint32_t i_sample = 0 ; i_sample < FRAME_SIZE/2; i_sample+=1)
 80114b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114ba:	3301      	adds	r3, #1
 80114bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80114be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80114c4:	d3db      	bcc.n	801147e <BSP_AUDIO_IN_HalfTransfer_CallBack+0x62>
		#else
			play_buffer[i_sample] = record_buffer[i_sample];
		#endif
    }
	#ifdef PROCESS_OUTPUT_BUFFER
    	process_output_buffer(play_buffer);
 80114c6:	481a      	ldr	r0, [pc, #104]	@ (8011530 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x114>)
 80114c8:	f7ff fe5c 	bl	8011184 <process_output_buffer>
 80114cc:	4b18      	ldr	r3, [pc, #96]	@ (8011530 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x114>)
 80114ce:	61bb      	str	r3, [r7, #24]
 80114d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80114d4:	617b      	str	r3, [r7, #20]
    if ( dsize > 0 ) { 
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	dd1d      	ble.n	8011518 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xfc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80114dc:	69bb      	ldr	r3, [r7, #24]
 80114de:	f003 021f 	and.w	r2, r3, #31
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	4413      	add	r3, r2
 80114e6:	613b      	str	r3, [r7, #16]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80114e8:	69bb      	ldr	r3, [r7, #24]
 80114ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80114ec:	f3bf 8f4f 	dsb	sy
}
 80114f0:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80114f2:	4a0e      	ldr	r2, [pc, #56]	@ (801152c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x110>)
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	3320      	adds	r3, #32
 80114fe:	60fb      	str	r3, [r7, #12]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	3b20      	subs	r3, #32
 8011504:	613b      	str	r3, [r7, #16]
      } while ( op_size > 0 );
 8011506:	693b      	ldr	r3, [r7, #16]
 8011508:	2b00      	cmp	r3, #0
 801150a:	dcf2      	bgt.n	80114f2 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xd6>
  __ASM volatile ("dsb 0xF":::"memory");
 801150c:	f3bf 8f4f 	dsb	sy
}
 8011510:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011512:	f3bf 8f6f 	isb	sy
}
 8011516:	bf00      	nop
}
 8011518:	bf00      	nop
	#endif
    SCB_CleanDCache_by_Addr((uint32_t *)play_buffer, FRAME_SIZE);
    audio_buffer_offset  = BUFFER_OFFSET_HALF;
 801151a:	4b06      	ldr	r3, [pc, #24]	@ (8011534 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x118>)
 801151c:	2201      	movs	r2, #1
 801151e:	601a      	str	r2, [r3, #0]
}
 8011520:	bf00      	nop
 8011522:	3730      	adds	r7, #48	@ 0x30
 8011524:	46bd      	mov	sp, r7
 8011526:	bd80      	pop	{r7, pc}
 8011528:	2400bd00 	.word	0x2400bd00
 801152c:	e000ed00 	.word	0xe000ed00
 8011530:	24007d00 	.word	0x24007d00
 8011534:	24007cf4 	.word	0x24007cf4

08011538 <BSP_AUDIO_IN_TransferComplete_CallBack>:
void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b08c      	sub	sp, #48	@ 0x30
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
 8011540:	4b41      	ldr	r3, [pc, #260]	@ (8011648 <BSP_AUDIO_IN_TransferComplete_CallBack+0x110>)
 8011542:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011544:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011548:	627b      	str	r3, [r7, #36]	@ 0x24
    if ( dsize > 0 ) { 
 801154a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801154c:	2b00      	cmp	r3, #0
 801154e:	dd1d      	ble.n	801158c <BSP_AUDIO_IN_TransferComplete_CallBack+0x54>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8011550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011552:	f003 021f 	and.w	r2, r3, #31
 8011556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011558:	4413      	add	r3, r2
 801155a:	623b      	str	r3, [r7, #32]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801155c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801155e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8011560:	f3bf 8f4f 	dsb	sy
}
 8011564:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8011566:	4a39      	ldr	r2, [pc, #228]	@ (801164c <BSP_AUDIO_IN_TransferComplete_CallBack+0x114>)
 8011568:	69fb      	ldr	r3, [r7, #28]
 801156a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801156e:	69fb      	ldr	r3, [r7, #28]
 8011570:	3320      	adds	r3, #32
 8011572:	61fb      	str	r3, [r7, #28]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8011574:	6a3b      	ldr	r3, [r7, #32]
 8011576:	3b20      	subs	r3, #32
 8011578:	623b      	str	r3, [r7, #32]
      } while ( op_size > 0 );
 801157a:	6a3b      	ldr	r3, [r7, #32]
 801157c:	2b00      	cmp	r3, #0
 801157e:	dcf2      	bgt.n	8011566 <BSP_AUDIO_IN_TransferComplete_CallBack+0x2e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011580:	f3bf 8f4f 	dsb	sy
}
 8011584:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011586:	f3bf 8f6f 	isb	sy
}
 801158a:	bf00      	nop
}
 801158c:	bf00      	nop
    SCB_InvalidateDCache_by_Addr((uint32_t*) &record_buffer[FRAME_SIZE/2], FRAME_SIZE*2);
	#ifdef PROCESS_INPUT_BUFFER
		process_input_buffer(&record_buffer[FRAME_SIZE/2]);
 801158e:	482e      	ldr	r0, [pc, #184]	@ (8011648 <BSP_AUDIO_IN_TransferComplete_CallBack+0x110>)
 8011590:	f7ff fcb8 	bl	8010f04 <process_input_buffer>
	#endif
	for(uint32_t i_sample = FRAME_SIZE/2; i_sample < FRAME_SIZE; i_sample+=1)
 8011594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801159a:	e01f      	b.n	80115dc <BSP_AUDIO_IN_TransferComplete_CallBack+0xa4>
	{
		#ifdef PROCESS_LEFT_CHANNEL
			play_buffer[i_sample] = process_left_sample(record_buffer[i_sample]);
 801159c:	4a2c      	ldr	r2, [pc, #176]	@ (8011650 <BSP_AUDIO_IN_TransferComplete_CallBack+0x118>)
 801159e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115a0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80115a4:	4618      	mov	r0, r3
 80115a6:	f7ff fd57 	bl	8011058 <process_left_sample>
 80115aa:	4603      	mov	r3, r0
 80115ac:	4619      	mov	r1, r3
 80115ae:	4a29      	ldr	r2, [pc, #164]	@ (8011654 <BSP_AUDIO_IN_TransferComplete_CallBack+0x11c>)
 80115b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		#elif defined(PERIODIC_LOOKUP_TABLE)
		#else
			play_buffer[i_sample] = record_buffer[i_sample];
		#endif
		i_sample +=1;
 80115b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115b8:	3301      	adds	r3, #1
 80115ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
		#ifdef PROCESS_RIGHT_CHANNEL
			play_buffer[i_sample] = process_right_sample(record_buffer[i_sample]);
 80115bc:	4a24      	ldr	r2, [pc, #144]	@ (8011650 <BSP_AUDIO_IN_TransferComplete_CallBack+0x118>)
 80115be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115c0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7ff fdc7 	bl	8011158 <process_right_sample>
 80115ca:	4603      	mov	r3, r0
 80115cc:	4619      	mov	r1, r3
 80115ce:	4a21      	ldr	r2, [pc, #132]	@ (8011654 <BSP_AUDIO_IN_TransferComplete_CallBack+0x11c>)
 80115d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i_sample = FRAME_SIZE/2; i_sample < FRAME_SIZE; i_sample+=1)
 80115d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115d8:	3301      	adds	r3, #1
 80115da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80115dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80115e2:	d3db      	bcc.n	801159c <BSP_AUDIO_IN_TransferComplete_CallBack+0x64>
		#else
			play_buffer[i_sample] = record_buffer[i_sample];
		#endif
	}
	#ifdef PROCESS_OUTPUT_BUFFER
		process_output_buffer(&record_buffer[FRAME_SIZE/2]);
 80115e4:	4818      	ldr	r0, [pc, #96]	@ (8011648 <BSP_AUDIO_IN_TransferComplete_CallBack+0x110>)
 80115e6:	f7ff fdcd 	bl	8011184 <process_output_buffer>
 80115ea:	4b1b      	ldr	r3, [pc, #108]	@ (8011658 <BSP_AUDIO_IN_TransferComplete_CallBack+0x120>)
 80115ec:	61bb      	str	r3, [r7, #24]
 80115ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80115f2:	617b      	str	r3, [r7, #20]
    if ( dsize > 0 ) { 
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	dd1d      	ble.n	8011636 <BSP_AUDIO_IN_TransferComplete_CallBack+0xfe>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80115fa:	69bb      	ldr	r3, [r7, #24]
 80115fc:	f003 021f 	and.w	r2, r3, #31
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	4413      	add	r3, r2
 8011604:	613b      	str	r3, [r7, #16]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8011606:	69bb      	ldr	r3, [r7, #24]
 8011608:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801160a:	f3bf 8f4f 	dsb	sy
}
 801160e:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8011610:	4a0e      	ldr	r2, [pc, #56]	@ (801164c <BSP_AUDIO_IN_TransferComplete_CallBack+0x114>)
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	3320      	adds	r3, #32
 801161c:	60fb      	str	r3, [r7, #12]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	3b20      	subs	r3, #32
 8011622:	613b      	str	r3, [r7, #16]
      } while ( op_size > 0 );
 8011624:	693b      	ldr	r3, [r7, #16]
 8011626:	2b00      	cmp	r3, #0
 8011628:	dcf2      	bgt.n	8011610 <BSP_AUDIO_IN_TransferComplete_CallBack+0xd8>
  __ASM volatile ("dsb 0xF":::"memory");
 801162a:	f3bf 8f4f 	dsb	sy
}
 801162e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011630:	f3bf 8f6f 	isb	sy
}
 8011634:	bf00      	nop
}
 8011636:	bf00      	nop
	#endif
    SCB_CleanDCache_by_Addr((uint32_t*) &play_buffer[FRAME_SIZE/2], FRAME_SIZE);
    audio_buffer_offset  = BUFFER_OFFSET_FULL;
 8011638:	4b08      	ldr	r3, [pc, #32]	@ (801165c <BSP_AUDIO_IN_TransferComplete_CallBack+0x124>)
 801163a:	2202      	movs	r2, #2
 801163c:	601a      	str	r2, [r3, #0]
}
 801163e:	bf00      	nop
 8011640:	3730      	adds	r7, #48	@ 0x30
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}
 8011646:	bf00      	nop
 8011648:	2400dd00 	.word	0x2400dd00
 801164c:	e000ed00 	.word	0xe000ed00
 8011650:	2400bd00 	.word	0x2400bd00
 8011654:	24007d00 	.word	0x24007d00
 8011658:	24009d00 	.word	0x24009d00
 801165c:	24007cf4 	.word	0x24007cf4

08011660 <SystemClock_Config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b09e      	sub	sp, #120	@ 0x78
 8011664:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8011666:	2300      	movs	r3, #0
 8011668:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 801166c:	2004      	movs	r0, #4
 801166e:	f7fb f889 	bl	800c784 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8011672:	2300      	movs	r3, #0
 8011674:	607b      	str	r3, [r7, #4]
 8011676:	4b3d      	ldr	r3, [pc, #244]	@ (801176c <SystemClock_Config+0x10c>)
 8011678:	699b      	ldr	r3, [r3, #24]
 801167a:	4a3c      	ldr	r2, [pc, #240]	@ (801176c <SystemClock_Config+0x10c>)
 801167c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8011680:	6193      	str	r3, [r2, #24]
 8011682:	4b3a      	ldr	r3, [pc, #232]	@ (801176c <SystemClock_Config+0x10c>)
 8011684:	699b      	ldr	r3, [r3, #24]
 8011686:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801168a:	607b      	str	r3, [r7, #4]
 801168c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 801168e:	bf00      	nop
 8011690:	4b36      	ldr	r3, [pc, #216]	@ (801176c <SystemClock_Config+0x10c>)
 8011692:	699b      	ldr	r3, [r3, #24]
 8011694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011698:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801169c:	d1f8      	bne.n	8011690 <SystemClock_Config+0x30>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801169e:	2301      	movs	r3, #1
 80116a0:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80116a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80116a6:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80116a8:	2300      	movs	r3, #0
 80116aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80116ac:	2300      	movs	r3, #0
 80116ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80116b0:	2302      	movs	r3, #2
 80116b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80116b4:	2302      	movs	r3, #2
 80116b6:	633b      	str	r3, [r7, #48]	@ 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 80116b8:	2305      	movs	r3, #5
 80116ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 104;
 80116bc:	2368      	movs	r3, #104	@ 0x68
 80116be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80116c0:	2300      	movs	r3, #0
 80116c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = 1;
 80116c4:	2301      	movs	r3, #1
 80116c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80116c8:	2302      	movs	r3, #2
 80116ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80116cc:	2304      	movs	r3, #4
 80116ce:	643b      	str	r3, [r7, #64]	@ 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80116d0:	2300      	movs	r3, #0
 80116d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80116d4:	2308      	movs	r3, #8
 80116d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80116d8:	f107 0308 	add.w	r3, r7, #8
 80116dc:	4618      	mov	r0, r3
 80116de:	f7fb f8ab 	bl	800c838 <HAL_RCC_OscConfig>
 80116e2:	4603      	mov	r3, r0
 80116e4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 80116e8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d001      	beq.n	80116f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80116f0:	f000 f95a 	bl	80119a8 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 80116f4:	233f      	movs	r3, #63	@ 0x3f
 80116f6:	657b      	str	r3, [r7, #84]	@ 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80116f8:	2303      	movs	r3, #3
 80116fa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80116fc:	2300      	movs	r3, #0
 80116fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8011700:	2308      	movs	r3, #8
 8011702:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8011704:	2340      	movs	r3, #64	@ 0x40
 8011706:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8011708:	2340      	movs	r3, #64	@ 0x40
 801170a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 801170c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011710:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8011712:	2340      	movs	r3, #64	@ 0x40
 8011714:	673b      	str	r3, [r7, #112]	@ 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);
 8011716:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801171a:	2103      	movs	r1, #3
 801171c:	4618      	mov	r0, r3
 801171e:	f7fb fc1b 	bl	800cf58 <HAL_RCC_ClockConfig>
 8011722:	4603      	mov	r3, r0
 8011724:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 8011728:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801172c:	2b00      	cmp	r3, #0
 801172e:	d001      	beq.n	8011734 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8011730:	f000 f93a 	bl	80119a8 <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
*/


  __HAL_RCC_CSI_ENABLE() ;
 8011734:	4b0e      	ldr	r3, [pc, #56]	@ (8011770 <SystemClock_Config+0x110>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	4a0d      	ldr	r2, [pc, #52]	@ (8011770 <SystemClock_Config+0x110>)
 801173a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801173e:	6013      	str	r3, [r2, #0]

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8011740:	4b0b      	ldr	r3, [pc, #44]	@ (8011770 <SystemClock_Config+0x110>)
 8011742:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8011746:	4a0a      	ldr	r2, [pc, #40]	@ (8011770 <SystemClock_Config+0x110>)
 8011748:	f043 0302 	orr.w	r3, r3, #2
 801174c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8011750:	4b07      	ldr	r3, [pc, #28]	@ (8011770 <SystemClock_Config+0x110>)
 8011752:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8011756:	f003 0302 	and.w	r3, r3, #2
 801175a:	603b      	str	r3, [r7, #0]
 801175c:	683b      	ldr	r3, [r7, #0]

  HAL_EnableCompensationCell();
 801175e:	f7f5 fdd1 	bl	8007304 <HAL_EnableCompensationCell>

}
 8011762:	bf00      	nop
 8011764:	3778      	adds	r7, #120	@ 0x78
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}
 801176a:	bf00      	nop
 801176c:	58024800 	.word	0x58024800
 8011770:	58024400 	.word	0x58024400

08011774 <Display_DemoDescription>:
/**
  * @brief  Display main demo messages
  * @retval None
  */
static void Display_DemoDescription(void)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b084      	sub	sp, #16
 8011778:	af02      	add	r7, sp, #8
  uint32_t x_size;
  uint32_t y_size;

  UTIL_LCD_SetFont(&UTIL_LCD_DEFAULT_FONT);
 801177a:	482c      	ldr	r0, [pc, #176]	@ (801182c <Display_DemoDescription+0xb8>)
 801177c:	f000 fa9e 	bl	8011cbc <UTIL_LCD_SetFont>

  /* Clear the LCD */
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8011780:	f04f 30ff 	mov.w	r0, #4294967295
 8011784:	f000 fa86 	bl	8011c94 <UTIL_LCD_SetBackColor>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8011788:	f04f 30ff 	mov.w	r0, #4294967295
 801178c:	f000 fafc 	bl	8011d88 <UTIL_LCD_Clear>

  /* Set the LCD Text Color */
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_DARKBLUE);
 8011790:	4827      	ldr	r0, [pc, #156]	@ (8011830 <Display_DemoDescription+0xbc>)
 8011792:	f000 fa6b 	bl	8011c6c <UTIL_LCD_SetTextColor>

  /* Display LCD messages */
  UTIL_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32H735G-DK", CENTER_MODE);
 8011796:	2301      	movs	r3, #1
 8011798:	4a26      	ldr	r2, [pc, #152]	@ (8011834 <Display_DemoDescription+0xc0>)
 801179a:	210a      	movs	r1, #10
 801179c:	2000      	movs	r0, #0
 801179e:	f000 fb3f 	bl	8011e20 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 35, (uint8_t *)"Stereo DMA Talkthrough", CENTER_MODE);
 80117a2:	2301      	movs	r3, #1
 80117a4:	4a24      	ldr	r2, [pc, #144]	@ (8011838 <Display_DemoDescription+0xc4>)
 80117a6:	2123      	movs	r1, #35	@ 0x23
 80117a8:	2000      	movs	r0, #0
 80117aa:	f000 fb39 	bl	8011e20 <UTIL_LCD_DisplayStringAt>

  BSP_LCD_GetXSize(0, &x_size);
 80117ae:	1d3b      	adds	r3, r7, #4
 80117b0:	4619      	mov	r1, r3
 80117b2:	2000      	movs	r0, #0
 80117b4:	f7f4 fafa 	bl	8005dac <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 80117b8:	463b      	mov	r3, r7
 80117ba:	4619      	mov	r1, r3
 80117bc:	2000      	movs	r0, #0
 80117be:	f7f4 fb17 	bl	8005df0 <BSP_LCD_GetYSize>

  UTIL_LCD_SetFont(&Font12);
 80117c2:	481e      	ldr	r0, [pc, #120]	@ (801183c <Display_DemoDescription+0xc8>)
 80117c4:	f000 fa7a 	bl	8011cbc <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, y_size - 20, (uint8_t *)"Copyright (c) STMicroelectronics 2019", CENTER_MODE);
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	f1a3 0114 	sub.w	r1, r3, #20
 80117ce:	2301      	movs	r3, #1
 80117d0:	4a1b      	ldr	r2, [pc, #108]	@ (8011840 <Display_DemoDescription+0xcc>)
 80117d2:	2000      	movs	r0, #0
 80117d4:	f000 fb24 	bl	8011e20 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_SetFont(&Font16);
 80117d8:	481a      	ldr	r0, [pc, #104]	@ (8011844 <Display_DemoDescription+0xd0>)
 80117da:	f000 fa6f 	bl	8011cbc <UTIL_LCD_SetFont>
  BSP_LCD_FillRect(0, 0, y_size/2 , x_size, 30, UTIL_LCD_COLOR_BLUE);
 80117de:	683b      	ldr	r3, [r7, #0]
 80117e0:	085a      	lsrs	r2, r3, #1
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	4918      	ldr	r1, [pc, #96]	@ (8011848 <Display_DemoDescription+0xd4>)
 80117e6:	9101      	str	r1, [sp, #4]
 80117e8:	211e      	movs	r1, #30
 80117ea:	9100      	str	r1, [sp, #0]
 80117ec:	2100      	movs	r1, #0
 80117ee:	2000      	movs	r0, #0
 80117f0:	f7f4 fcc6 	bl	8006180 <BSP_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 80117f4:	f04f 30ff 	mov.w	r0, #4294967295
 80117f8:	f000 fa38 	bl	8011c6c <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 80117fc:	4812      	ldr	r0, [pc, #72]	@ (8011848 <Display_DemoDescription+0xd4>)
 80117fe:	f000 fa49 	bl	8011c94 <UTIL_LCD_SetBackColor>
  UTIL_LCD_DisplayStringAt(0, y_size / 2 , (uint8_t *)"Plug input device into blue jack", CENTER_MODE);
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	0859      	lsrs	r1, r3, #1
 8011806:	2301      	movs	r3, #1
 8011808:	4a10      	ldr	r2, [pc, #64]	@ (801184c <Display_DemoDescription+0xd8>)
 801180a:	2000      	movs	r0, #0
 801180c:	f000 fb08 	bl	8011e20 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, y_size/2 + 15, (uint8_t *)"Plug output device into green jack", CENTER_MODE);
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	085b      	lsrs	r3, r3, #1
 8011814:	f103 010f 	add.w	r1, r3, #15
 8011818:	2301      	movs	r3, #1
 801181a:	4a0d      	ldr	r2, [pc, #52]	@ (8011850 <Display_DemoDescription+0xdc>)
 801181c:	2000      	movs	r0, #0
 801181e:	f000 faff 	bl	8011e20 <UTIL_LCD_DisplayStringAt>
}
 8011822:	bf00      	nop
 8011824:	3708      	adds	r7, #8
 8011826:	46bd      	mov	sp, r7
 8011828:	bd80      	pop	{r7, pc}
 801182a:	bf00      	nop
 801182c:	240005ac 	.word	0x240005ac
 8011830:	ff000080 	.word	0xff000080
 8011834:	080158a8 	.word	0x080158a8
 8011838:	080158b8 	.word	0x080158b8
 801183c:	2400059c 	.word	0x2400059c
 8011840:	080158d0 	.word	0x080158d0
 8011844:	240005a4 	.word	0x240005a4
 8011848:	ff0000ff 	.word	0xff0000ff
 801184c:	080158f8 	.word	0x080158f8
 8011850:	0801591c 	.word	0x0801591c

08011854 <BSP_PB_Callback>:
  * @brief  Button Callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8011854:	b480      	push	{r7}
 8011856:	b083      	sub	sp, #12
 8011858:	af00      	add	r7, sp, #0
 801185a:	4603      	mov	r3, r0
 801185c:	71fb      	strb	r3, [r7, #7]
  if(Button == BUTTON_USER)
 801185e:	79fb      	ldrb	r3, [r7, #7]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d102      	bne.n	801186a <BSP_PB_Callback+0x16>
  {
    button_state = 1;
 8011864:	4b04      	ldr	r3, [pc, #16]	@ (8011878 <BSP_PB_Callback+0x24>)
 8011866:	2201      	movs	r2, #1
 8011868:	601a      	str	r2, [r3, #0]
  }
}
 801186a:	bf00      	nop
 801186c:	370c      	adds	r7, #12
 801186e:	46bd      	mov	sp, r7
 8011870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011874:	4770      	bx	lr
 8011876:	bf00      	nop
 8011878:	24007cf0 	.word	0x24007cf0

0801187c <MPU_Config>:
  * @brief  CPU MPU Config.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b084      	sub	sp, #16
 8011880:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 8011882:	f7f5 fe5f 	bl	8007544 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for OctoSPI RAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8011886:	2301      	movs	r3, #1
 8011888:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = OSPI_RAM_WRITE_READ_ADDR;
 801188a:	4b0f      	ldr	r3, [pc, #60]	@ (80118c8 <MPU_Config+0x4c>)
 801188c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 801188e:	2317      	movs	r3, #23
 8011890:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8011892:	2303      	movs	r3, #3
 8011894:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8011896:	2300      	movs	r3, #0
 8011898:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 801189a:	2301      	movs	r3, #1
 801189c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 801189e:	2300      	movs	r3, #0
 80118a0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80118a2:	2300      	movs	r3, #0
 80118a4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80118a6:	2300      	movs	r3, #0
 80118a8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80118aa:	2300      	movs	r3, #0
 80118ac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80118ae:	2300      	movs	r3, #0
 80118b0:	733b      	strb	r3, [r7, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80118b2:	463b      	mov	r3, r7
 80118b4:	4618      	mov	r0, r3
 80118b6:	f7f5 fe7d 	bl	80075b4 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80118ba:	2004      	movs	r0, #4
 80118bc:	f7f5 fe5a 	bl	8007574 <HAL_MPU_Enable>
}
 80118c0:	bf00      	nop
 80118c2:	3710      	adds	r7, #16
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	70400000 	.word	0x70400000

080118cc <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 80118cc:	b480      	push	{r7}
 80118ce:	b085      	sub	sp, #20
 80118d0:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80118d2:	4b34      	ldr	r3, [pc, #208]	@ (80119a4 <CPU_CACHE_Enable+0xd8>)
 80118d4:	695b      	ldr	r3, [r3, #20]
 80118d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d11b      	bne.n	8011916 <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80118de:	f3bf 8f4f 	dsb	sy
}
 80118e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80118e4:	f3bf 8f6f 	isb	sy
}
 80118e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80118ea:	4b2e      	ldr	r3, [pc, #184]	@ (80119a4 <CPU_CACHE_Enable+0xd8>)
 80118ec:	2200      	movs	r2, #0
 80118ee:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80118f2:	f3bf 8f4f 	dsb	sy
}
 80118f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80118f8:	f3bf 8f6f 	isb	sy
}
 80118fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80118fe:	4b29      	ldr	r3, [pc, #164]	@ (80119a4 <CPU_CACHE_Enable+0xd8>)
 8011900:	695b      	ldr	r3, [r3, #20]
 8011902:	4a28      	ldr	r2, [pc, #160]	@ (80119a4 <CPU_CACHE_Enable+0xd8>)
 8011904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011908:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 801190a:	f3bf 8f4f 	dsb	sy
}
 801190e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011910:	f3bf 8f6f 	isb	sy
}
 8011914:	e000      	b.n	8011918 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8011916:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8011918:	4b22      	ldr	r3, [pc, #136]	@ (80119a4 <CPU_CACHE_Enable+0xd8>)
 801191a:	695b      	ldr	r3, [r3, #20]
 801191c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011920:	2b00      	cmp	r3, #0
 8011922:	d138      	bne.n	8011996 <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8011924:	4b1f      	ldr	r3, [pc, #124]	@ (80119a4 <CPU_CACHE_Enable+0xd8>)
 8011926:	2200      	movs	r2, #0
 8011928:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801192c:	f3bf 8f4f 	dsb	sy
}
 8011930:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8011932:	4b1c      	ldr	r3, [pc, #112]	@ (80119a4 <CPU_CACHE_Enable+0xd8>)
 8011934:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011938:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	0b5b      	lsrs	r3, r3, #13
 801193e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011942:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	08db      	lsrs	r3, r3, #3
 8011948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801194c:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	015a      	lsls	r2, r3, #5
 8011952:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8011956:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8011958:	687a      	ldr	r2, [r7, #4]
 801195a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801195c:	4911      	ldr	r1, [pc, #68]	@ (80119a4 <CPU_CACHE_Enable+0xd8>)
 801195e:	4313      	orrs	r3, r2
 8011960:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	1e5a      	subs	r2, r3, #1
 8011968:	607a      	str	r2, [r7, #4]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d1ef      	bne.n	801194e <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	1e5a      	subs	r2, r3, #1
 8011972:	60ba      	str	r2, [r7, #8]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d1e5      	bne.n	8011944 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8011978:	f3bf 8f4f 	dsb	sy
}
 801197c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 801197e:	4b09      	ldr	r3, [pc, #36]	@ (80119a4 <CPU_CACHE_Enable+0xd8>)
 8011980:	695b      	ldr	r3, [r3, #20]
 8011982:	4a08      	ldr	r2, [pc, #32]	@ (80119a4 <CPU_CACHE_Enable+0xd8>)
 8011984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011988:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 801198a:	f3bf 8f4f 	dsb	sy
}
 801198e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011990:	f3bf 8f6f 	isb	sy
}
 8011994:	e000      	b.n	8011998 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8011996:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8011998:	bf00      	nop
 801199a:	3714      	adds	r7, #20
 801199c:	46bd      	mov	sp, r7
 801199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a2:	4770      	bx	lr
 80119a4:	e000ed00 	.word	0xe000ed00

080119a8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80119a8:	b480      	push	{r7}
 80119aa:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while(1)
 80119ac:	bf00      	nop
 80119ae:	e7fd      	b.n	80119ac <Error_Handler+0x4>

080119b0 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80119b0:	b480      	push	{r7}
 80119b2:	af00      	add	r7, sp, #0
}
 80119b4:	bf00      	nop
 80119b6:	46bd      	mov	sp, r7
 80119b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119bc:	4770      	bx	lr

080119be <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80119be:	b480      	push	{r7}
 80119c0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80119c2:	bf00      	nop
 80119c4:	e7fd      	b.n	80119c2 <HardFault_Handler+0x4>

080119c6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80119c6:	b480      	push	{r7}
 80119c8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80119ca:	bf00      	nop
 80119cc:	e7fd      	b.n	80119ca <MemManage_Handler+0x4>

080119ce <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80119ce:	b480      	push	{r7}
 80119d0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80119d2:	bf00      	nop
 80119d4:	e7fd      	b.n	80119d2 <BusFault_Handler+0x4>

080119d6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80119d6:	b480      	push	{r7}
 80119d8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80119da:	bf00      	nop
 80119dc:	e7fd      	b.n	80119da <UsageFault_Handler+0x4>

080119de <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80119de:	b480      	push	{r7}
 80119e0:	af00      	add	r7, sp, #0
}
 80119e2:	bf00      	nop
 80119e4:	46bd      	mov	sp, r7
 80119e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ea:	4770      	bx	lr

080119ec <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80119ec:	b480      	push	{r7}
 80119ee:	af00      	add	r7, sp, #0
}
 80119f0:	bf00      	nop
 80119f2:	46bd      	mov	sp, r7
 80119f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f8:	4770      	bx	lr

080119fa <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80119fa:	b480      	push	{r7}
 80119fc:	af00      	add	r7, sp, #0
}
 80119fe:	bf00      	nop
 8011a00:	46bd      	mov	sp, r7
 8011a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a06:	4770      	bx	lr

08011a08 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8011a0c:	f7f5 fc36 	bl	800727c <HAL_IncTick>
}
 8011a10:	bf00      	nop
 8011a12:	bd80      	pop	{r7, pc}

08011a14 <SDMMC1_IRQHandler>:
/**
  * @brief  Handles SD1 card interrupt request.
  * @retval None
  */
void SDMMC1_IRQHandler(void)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	af00      	add	r7, sp, #0
  BSP_SD_IRQHandler(0);
 8011a18:	2000      	movs	r0, #0
 8011a1a:	f7f5 fb5b 	bl	80070d4 <BSP_SD_IRQHandler>
}
 8011a1e:	bf00      	nop
 8011a20:	bd80      	pop	{r7, pc}

08011a22 <EXTI2_IRQHandler>:
  * @brief  This function handles External line 2 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
 8011a22:	b580      	push	{r7, lr}
 8011a24:	af00      	add	r7, sp, #0
  BSP_TS_IRQHandler(0);
 8011a26:	2000      	movs	r0, #0
 8011a28:	f7f5 fba4 	bl	8007174 <BSP_TS_IRQHandler>
}
 8011a2c:	bf00      	nop
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <EXTI9_5_IRQHandler>:
  * @brief  This function handles External lines 9 to 5 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI9_5_IRQHandler(void)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	af00      	add	r7, sp, #0
  BSP_SD_DETECT_IRQHandler(0);
 8011a34:	2000      	movs	r0, #0
 8011a36:	f7f5 fb3b 	bl	80070b0 <BSP_SD_DETECT_IRQHandler>
}
 8011a3a:	bf00      	nop
 8011a3c:	bd80      	pop	{r7, pc}

08011a3e <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8011a3e:	b580      	push	{r7, lr}
 8011a40:	af00      	add	r7, sp, #0
  BSP_PB_IRQHandler(BUTTON_USER);
 8011a42:	2000      	movs	r0, #0
 8011a44:	f7f0 fdee 	bl	8002624 <BSP_PB_IRQHandler>
}
 8011a48:	bf00      	nop
 8011a4a:	bd80      	pop	{r7, pc}

08011a4c <DMA2_Stream0_IRQHandler>:
/**
  * @brief  This function handles DMA2 Stream0 interrupt request.
  * @retval None
  */
void DMA2_Stream0_IRQHandler(void)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(2, AUDIO_IN_DEVICE_DIGITAL_MIC2);
 8011a50:	2120      	movs	r1, #32
 8011a52:	2002      	movs	r0, #2
 8011a54:	f7f2 fb2e 	bl	80040b4 <BSP_AUDIO_IN_IRQHandler>
}
 8011a58:	bf00      	nop
 8011a5a:	bd80      	pop	{r7, pc}

08011a5c <DMA2_Stream2_IRQHandler>:
/**
  * @brief  This function handles DMA2 Stream2 interrupt request.
  * @retval None
  */
void DMA2_Stream2_IRQHandler(void)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(2, AUDIO_IN_DEVICE_DIGITAL_MIC4);
 8011a60:	2180      	movs	r1, #128	@ 0x80
 8011a62:	2002      	movs	r0, #2
 8011a64:	f7f2 fb26 	bl	80040b4 <BSP_AUDIO_IN_IRQHandler>
}
 8011a68:	bf00      	nop
 8011a6a:	bd80      	pop	{r7, pc}

08011a6c <DMA2_Stream3_IRQHandler>:
/**
  * @brief  This function handles DMA2 Stream3 interrupt request.
  * @retval None
  */
void DMA2_Stream3_IRQHandler(void)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(2, AUDIO_IN_DEVICE_DIGITAL_MIC3);
 8011a70:	2140      	movs	r1, #64	@ 0x40
 8011a72:	2002      	movs	r0, #2
 8011a74:	f7f2 fb1e 	bl	80040b4 <BSP_AUDIO_IN_IRQHandler>
}
 8011a78:	bf00      	nop
 8011a7a:	bd80      	pop	{r7, pc}

08011a7c <DMA2_Stream4_IRQHandler>:
/**
  * @brief  This function handles DMA2 Stream4 interrupt request.
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0, AUDIO_IN_DEVICE_ANALOG_MIC);
 8011a80:	2100      	movs	r1, #0
 8011a82:	2000      	movs	r0, #0
 8011a84:	f7f2 fb16 	bl	80040b4 <BSP_AUDIO_IN_IRQHandler>
}
 8011a88:	bf00      	nop
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <DMA2_Stream6_IRQHandler>:
  * @brief  This function handles DMA2 Stream6 interrupt request.
  * @param  None
  * @retval None
  */
void DMA2_Stream6_IRQHandler(void)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 8011a90:	2000      	movs	r0, #0
 8011a92:	f7f0 fedf 	bl	8002854 <BSP_AUDIO_OUT_IRQHandler>
}
 8011a96:	bf00      	nop
 8011a98:	bd80      	pop	{r7, pc}

08011a9a <DMA2_Stream7_IRQHandler>:
/**
  * @brief  This function handles DMA2 Stream7 interrupt request.
  * @retval None
  */
void DMA2_Stream7_IRQHandler(void)
{
 8011a9a:	b580      	push	{r7, lr}
 8011a9c:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(2, AUDIO_IN_DEVICE_DIGITAL_MIC1);
 8011a9e:	2110      	movs	r1, #16
 8011aa0:	2002      	movs	r0, #2
 8011aa2:	f7f2 fb07 	bl	80040b4 <BSP_AUDIO_IN_IRQHandler>
}
 8011aa6:	bf00      	nop
 8011aa8:	bd80      	pop	{r7, pc}

08011aaa <BDMA_Channel1_IRQHandler>:

void BDMA_Channel1_IRQHandler(void)
{
 8011aaa:	b580      	push	{r7, lr}
 8011aac:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC1);
 8011aae:	2110      	movs	r1, #16
 8011ab0:	2001      	movs	r0, #1
 8011ab2:	f7f2 faff 	bl	80040b4 <BSP_AUDIO_IN_IRQHandler>
}
 8011ab6:	bf00      	nop
 8011ab8:	bd80      	pop	{r7, pc}
	...

08011abc <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8011abc:	b480      	push	{r7}
 8011abe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8011ac0:	4b26      	ldr	r3, [pc, #152]	@ (8011b5c <SystemInit+0xa0>)
 8011ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011ac6:	4a25      	ldr	r2, [pc, #148]	@ (8011b5c <SystemInit+0xa0>)
 8011ac8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011acc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8011ad0:	4b23      	ldr	r3, [pc, #140]	@ (8011b60 <SystemInit+0xa4>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	4a22      	ldr	r2, [pc, #136]	@ (8011b60 <SystemInit+0xa4>)
 8011ad6:	f043 0301 	orr.w	r3, r3, #1
 8011ada:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011adc:	4b20      	ldr	r3, [pc, #128]	@ (8011b60 <SystemInit+0xa4>)
 8011ade:	2200      	movs	r2, #0
 8011ae0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8011ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8011b60 <SystemInit+0xa4>)
 8011ae4:	681a      	ldr	r2, [r3, #0]
 8011ae6:	491e      	ldr	r1, [pc, #120]	@ (8011b60 <SystemInit+0xa4>)
 8011ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8011b64 <SystemInit+0xa8>)
 8011aea:	4013      	ands	r3, r2
 8011aec:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8011aee:	4b1c      	ldr	r3, [pc, #112]	@ (8011b60 <SystemInit+0xa4>)
 8011af0:	2200      	movs	r2, #0
 8011af2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8011af4:	4b1a      	ldr	r3, [pc, #104]	@ (8011b60 <SystemInit+0xa4>)
 8011af6:	2200      	movs	r2, #0
 8011af8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8011afa:	4b19      	ldr	r3, [pc, #100]	@ (8011b60 <SystemInit+0xa4>)
 8011afc:	2200      	movs	r2, #0
 8011afe:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8011b00:	4b17      	ldr	r3, [pc, #92]	@ (8011b60 <SystemInit+0xa4>)
 8011b02:	2200      	movs	r2, #0
 8011b04:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8011b06:	4b16      	ldr	r3, [pc, #88]	@ (8011b60 <SystemInit+0xa4>)
 8011b08:	2200      	movs	r2, #0
 8011b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8011b0c:	4b14      	ldr	r3, [pc, #80]	@ (8011b60 <SystemInit+0xa4>)
 8011b0e:	2200      	movs	r2, #0
 8011b10:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8011b12:	4b13      	ldr	r3, [pc, #76]	@ (8011b60 <SystemInit+0xa4>)
 8011b14:	2200      	movs	r2, #0
 8011b16:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8011b18:	4b11      	ldr	r3, [pc, #68]	@ (8011b60 <SystemInit+0xa4>)
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8011b1e:	4b10      	ldr	r3, [pc, #64]	@ (8011b60 <SystemInit+0xa4>)
 8011b20:	2200      	movs	r2, #0
 8011b22:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8011b24:	4b0e      	ldr	r3, [pc, #56]	@ (8011b60 <SystemInit+0xa4>)
 8011b26:	2200      	movs	r2, #0
 8011b28:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8011b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8011b60 <SystemInit+0xa4>)
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8011b30:	4b0b      	ldr	r3, [pc, #44]	@ (8011b60 <SystemInit+0xa4>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	4a0a      	ldr	r2, [pc, #40]	@ (8011b60 <SystemInit+0xa4>)
 8011b36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011b3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8011b3c:	4b08      	ldr	r3, [pc, #32]	@ (8011b60 <SystemInit+0xa4>)
 8011b3e:	2200      	movs	r2, #0
 8011b40:	661a      	str	r2, [r3, #96]	@ 0x60
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8011b42:	4b09      	ldr	r3, [pc, #36]	@ (8011b68 <SystemInit+0xac>)
 8011b44:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8011b48:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8011b4a:	4b04      	ldr	r3, [pc, #16]	@ (8011b5c <SystemInit+0xa0>)
 8011b4c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8011b50:	609a      	str	r2, [r3, #8]
#endif


}
 8011b52:	bf00      	nop
 8011b54:	46bd      	mov	sp, r7
 8011b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5a:	4770      	bx	lr
 8011b5c:	e000ed00 	.word	0xe000ed00
 8011b60:	58024400 	.word	0x58024400
 8011b64:	eaf6ed7f 	.word	0xeaf6ed7f
 8011b68:	52004000 	.word	0x52004000

08011b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
;  ldr   sp, =_estack      /* set stack pointer */
 8011b6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8011ba4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011b70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011b72:	e003      	b.n	8011b7c <LoopCopyDataInit>

08011b74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011b74:	4b0c      	ldr	r3, [pc, #48]	@ (8011ba8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8011b76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8011b78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8011b7a:	3104      	adds	r1, #4

08011b7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011b7c:	480b      	ldr	r0, [pc, #44]	@ (8011bac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8011bb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011b80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011b82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011b84:	d3f6      	bcc.n	8011b74 <CopyDataInit>
  ldr  r2, =_sbss
 8011b86:	4a0b      	ldr	r2, [pc, #44]	@ (8011bb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8011b88:	e002      	b.n	8011b90 <LoopFillZerobss>

08011b8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8011b8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011b8c:	f842 3b04 	str.w	r3, [r2], #4

08011b90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011b90:	4b09      	ldr	r3, [pc, #36]	@ (8011bb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011b92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011b94:	d3f9      	bcc.n	8011b8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8011b96:	f7ff ff91 	bl	8011abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011b9a:	f003 fbcd 	bl	8015338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011b9e:	f7ff fafb 	bl	8011198 <main>
  bx  lr    
 8011ba2:	4770      	bx	lr
;  ldr   sp, =_estack      /* set stack pointer */
 8011ba4:	24050000 	.word	0x24050000
  ldr  r3, =_sidata
 8011ba8:	0802b8d8 	.word	0x0802b8d8
  ldr  r0, =_sdata
 8011bac:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8011bb0:	24000604 	.word	0x24000604
  ldr  r2, =_sbss
 8011bb4:	24000620 	.word	0x24000620
  ldr  r3, = _ebss
 8011bb8:	24014ee4 	.word	0x24014ee4

08011bbc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011bbc:	e7fe      	b.n	8011bbc <ADC3_IRQHandler>
	...

08011bc0 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	4a22      	ldr	r2, [pc, #136]	@ (8011c58 <UTIL_LCD_SetFuncDriver+0x98>)
 8011bce:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	685b      	ldr	r3, [r3, #4]
 8011bd4:	4a20      	ldr	r2, [pc, #128]	@ (8011c58 <UTIL_LCD_SetFuncDriver+0x98>)
 8011bd6:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	689b      	ldr	r3, [r3, #8]
 8011bdc:	4a1e      	ldr	r2, [pc, #120]	@ (8011c58 <UTIL_LCD_SetFuncDriver+0x98>)
 8011bde:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	68db      	ldr	r3, [r3, #12]
 8011be4:	4a1c      	ldr	r2, [pc, #112]	@ (8011c58 <UTIL_LCD_SetFuncDriver+0x98>)
 8011be6:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	691b      	ldr	r3, [r3, #16]
 8011bec:	4a1a      	ldr	r2, [pc, #104]	@ (8011c58 <UTIL_LCD_SetFuncDriver+0x98>)
 8011bee:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	695b      	ldr	r3, [r3, #20]
 8011bf4:	4a18      	ldr	r2, [pc, #96]	@ (8011c58 <UTIL_LCD_SetFuncDriver+0x98>)
 8011bf6:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	699b      	ldr	r3, [r3, #24]
 8011bfc:	4a16      	ldr	r2, [pc, #88]	@ (8011c58 <UTIL_LCD_SetFuncDriver+0x98>)
 8011bfe:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	69db      	ldr	r3, [r3, #28]
 8011c04:	4a14      	ldr	r2, [pc, #80]	@ (8011c58 <UTIL_LCD_SetFuncDriver+0x98>)
 8011c06:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	6a1b      	ldr	r3, [r3, #32]
 8011c0c:	4a12      	ldr	r2, [pc, #72]	@ (8011c58 <UTIL_LCD_SetFuncDriver+0x98>)
 8011c0e:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c14:	4a10      	ldr	r2, [pc, #64]	@ (8011c58 <UTIL_LCD_SetFuncDriver+0x98>)
 8011c16:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c1c:	4a0e      	ldr	r2, [pc, #56]	@ (8011c58 <UTIL_LCD_SetFuncDriver+0x98>)
 8011c1e:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
 8011c20:	4b0e      	ldr	r3, [pc, #56]	@ (8011c5c <UTIL_LCD_SetFuncDriver+0x9c>)
 8011c22:	2200      	movs	r2, #0
 8011c24:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8011c26:	4b0d      	ldr	r3, [pc, #52]	@ (8011c5c <UTIL_LCD_SetFuncDriver+0x9c>)
 8011c28:	2200      	movs	r2, #0
 8011c2a:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8011c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8011c58 <UTIL_LCD_SetFuncDriver+0x98>)
 8011c2e:	69db      	ldr	r3, [r3, #28]
 8011c30:	4a0b      	ldr	r2, [pc, #44]	@ (8011c60 <UTIL_LCD_SetFuncDriver+0xa0>)
 8011c32:	4611      	mov	r1, r2
 8011c34:	2000      	movs	r0, #0
 8011c36:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8011c38:	4b07      	ldr	r3, [pc, #28]	@ (8011c58 <UTIL_LCD_SetFuncDriver+0x98>)
 8011c3a:	6a1b      	ldr	r3, [r3, #32]
 8011c3c:	4a09      	ldr	r2, [pc, #36]	@ (8011c64 <UTIL_LCD_SetFuncDriver+0xa4>)
 8011c3e:	4611      	mov	r1, r2
 8011c40:	2000      	movs	r0, #0
 8011c42:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8011c44:	4b04      	ldr	r3, [pc, #16]	@ (8011c58 <UTIL_LCD_SetFuncDriver+0x98>)
 8011c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c48:	4a07      	ldr	r2, [pc, #28]	@ (8011c68 <UTIL_LCD_SetFuncDriver+0xa8>)
 8011c4a:	4611      	mov	r1, r2
 8011c4c:	2000      	movs	r0, #0
 8011c4e:	4798      	blx	r3
}
 8011c50:	bf00      	nop
 8011c52:	3708      	adds	r7, #8
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd80      	pop	{r7, pc}
 8011c58:	24014d80 	.word	0x24014d80
 8011c5c:	24014d40 	.word	0x24014d40
 8011c60:	24014d54 	.word	0x24014d54
 8011c64:	24014d58 	.word	0x24014d58
 8011c68:	24014d5c 	.word	0x24014d5c

08011c6c <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b083      	sub	sp, #12
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8011c74:	4b06      	ldr	r3, [pc, #24]	@ (8011c90 <UTIL_LCD_SetTextColor+0x24>)
 8011c76:	68db      	ldr	r3, [r3, #12]
 8011c78:	4a05      	ldr	r2, [pc, #20]	@ (8011c90 <UTIL_LCD_SetTextColor+0x24>)
 8011c7a:	015b      	lsls	r3, r3, #5
 8011c7c:	4413      	add	r3, r2
 8011c7e:	687a      	ldr	r2, [r7, #4]
 8011c80:	601a      	str	r2, [r3, #0]
}
 8011c82:	bf00      	nop
 8011c84:	370c      	adds	r7, #12
 8011c86:	46bd      	mov	sp, r7
 8011c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8c:	4770      	bx	lr
 8011c8e:	bf00      	nop
 8011c90:	24014d40 	.word	0x24014d40

08011c94 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8011c94:	b480      	push	{r7}
 8011c96:	b083      	sub	sp, #12
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8011c9c:	4b06      	ldr	r3, [pc, #24]	@ (8011cb8 <UTIL_LCD_SetBackColor+0x24>)
 8011c9e:	68db      	ldr	r3, [r3, #12]
 8011ca0:	4a05      	ldr	r2, [pc, #20]	@ (8011cb8 <UTIL_LCD_SetBackColor+0x24>)
 8011ca2:	015b      	lsls	r3, r3, #5
 8011ca4:	4413      	add	r3, r2
 8011ca6:	3304      	adds	r3, #4
 8011ca8:	687a      	ldr	r2, [r7, #4]
 8011caa:	601a      	str	r2, [r3, #0]
}
 8011cac:	bf00      	nop
 8011cae:	370c      	adds	r7, #12
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb6:	4770      	bx	lr
 8011cb8:	24014d40 	.word	0x24014d40

08011cbc <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8011cbc:	b480      	push	{r7}
 8011cbe:	b083      	sub	sp, #12
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8011cc4:	4b06      	ldr	r3, [pc, #24]	@ (8011ce0 <UTIL_LCD_SetFont+0x24>)
 8011cc6:	68db      	ldr	r3, [r3, #12]
 8011cc8:	4a05      	ldr	r2, [pc, #20]	@ (8011ce0 <UTIL_LCD_SetFont+0x24>)
 8011cca:	015b      	lsls	r3, r3, #5
 8011ccc:	4413      	add	r3, r2
 8011cce:	3308      	adds	r3, #8
 8011cd0:	687a      	ldr	r2, [r7, #4]
 8011cd2:	601a      	str	r2, [r3, #0]
}
 8011cd4:	bf00      	nop
 8011cd6:	370c      	adds	r7, #12
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cde:	4770      	bx	lr
 8011ce0:	24014d40 	.word	0x24014d40

08011ce4 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8011ce4:	b590      	push	{r4, r7, lr}
 8011ce6:	b087      	sub	sp, #28
 8011ce8:	af02      	add	r7, sp, #8
 8011cea:	60f8      	str	r0, [r7, #12]
 8011cec:	60b9      	str	r1, [r7, #8]
 8011cee:	607a      	str	r2, [r7, #4]
 8011cf0:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8011cf2:	4b08      	ldr	r3, [pc, #32]	@ (8011d14 <UTIL_LCD_FillRGBRect+0x30>)
 8011cf4:	685c      	ldr	r4, [r3, #4]
 8011cf6:	4b08      	ldr	r3, [pc, #32]	@ (8011d18 <UTIL_LCD_FillRGBRect+0x34>)
 8011cf8:	6918      	ldr	r0, [r3, #16]
 8011cfa:	6a3b      	ldr	r3, [r7, #32]
 8011cfc:	9301      	str	r3, [sp, #4]
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	9300      	str	r3, [sp, #0]
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	68ba      	ldr	r2, [r7, #8]
 8011d06:	68f9      	ldr	r1, [r7, #12]
 8011d08:	47a0      	blx	r4
}
 8011d0a:	bf00      	nop
 8011d0c:	3714      	adds	r7, #20
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd90      	pop	{r4, r7, pc}
 8011d12:	bf00      	nop
 8011d14:	24014d80 	.word	0x24014d80
 8011d18:	24014d40 	.word	0x24014d40

08011d1c <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8011d1c:	b590      	push	{r4, r7, lr}
 8011d1e:	b087      	sub	sp, #28
 8011d20:	af02      	add	r7, sp, #8
 8011d22:	60f8      	str	r0, [r7, #12]
 8011d24:	60b9      	str	r1, [r7, #8]
 8011d26:	607a      	str	r2, [r7, #4]
 8011d28:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8011d2a:	4b15      	ldr	r3, [pc, #84]	@ (8011d80 <UTIL_LCD_DrawVLine+0x64>)
 8011d2c:	69db      	ldr	r3, [r3, #28]
 8011d2e:	2b02      	cmp	r3, #2
 8011d30:	d118      	bne.n	8011d64 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8011d32:	4b14      	ldr	r3, [pc, #80]	@ (8011d84 <UTIL_LCD_DrawVLine+0x68>)
 8011d34:	68dc      	ldr	r4, [r3, #12]
 8011d36:	4b12      	ldr	r3, [pc, #72]	@ (8011d80 <UTIL_LCD_DrawVLine+0x64>)
 8011d38:	6918      	ldr	r0, [r3, #16]
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	08db      	lsrs	r3, r3, #3
 8011d3e:	f003 021f 	and.w	r2, r3, #31
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	0a9b      	lsrs	r3, r3, #10
 8011d46:	015b      	lsls	r3, r3, #5
 8011d48:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011d4c:	431a      	orrs	r2, r3
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	0cdb      	lsrs	r3, r3, #19
 8011d52:	02db      	lsls	r3, r3, #11
 8011d54:	b29b      	uxth	r3, r3
 8011d56:	4313      	orrs	r3, r2
 8011d58:	9300      	str	r3, [sp, #0]
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	68ba      	ldr	r2, [r7, #8]
 8011d5e:	68f9      	ldr	r1, [r7, #12]
 8011d60:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8011d62:	e009      	b.n	8011d78 <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8011d64:	4b07      	ldr	r3, [pc, #28]	@ (8011d84 <UTIL_LCD_DrawVLine+0x68>)
 8011d66:	68dc      	ldr	r4, [r3, #12]
 8011d68:	4b05      	ldr	r3, [pc, #20]	@ (8011d80 <UTIL_LCD_DrawVLine+0x64>)
 8011d6a:	6918      	ldr	r0, [r3, #16]
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	9300      	str	r3, [sp, #0]
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	68ba      	ldr	r2, [r7, #8]
 8011d74:	68f9      	ldr	r1, [r7, #12]
 8011d76:	47a0      	blx	r4
}
 8011d78:	bf00      	nop
 8011d7a:	3714      	adds	r7, #20
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd90      	pop	{r4, r7, pc}
 8011d80:	24014d40 	.word	0x24014d40
 8011d84:	24014d80 	.word	0x24014d80

08011d88 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b084      	sub	sp, #16
 8011d8c:	af02      	add	r7, sp, #8
 8011d8e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8011d90:	4b07      	ldr	r3, [pc, #28]	@ (8011db0 <UTIL_LCD_Clear+0x28>)
 8011d92:	695a      	ldr	r2, [r3, #20]
 8011d94:	4b06      	ldr	r3, [pc, #24]	@ (8011db0 <UTIL_LCD_Clear+0x28>)
 8011d96:	6999      	ldr	r1, [r3, #24]
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	9300      	str	r3, [sp, #0]
 8011d9c:	460b      	mov	r3, r1
 8011d9e:	2100      	movs	r1, #0
 8011da0:	2000      	movs	r0, #0
 8011da2:	f000 f8eb 	bl	8011f7c <UTIL_LCD_FillRect>
}
 8011da6:	bf00      	nop
 8011da8:	3708      	adds	r7, #8
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}
 8011dae:	bf00      	nop
 8011db0:	24014d40 	.word	0x24014d40

08011db4 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b084      	sub	sp, #16
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	60f8      	str	r0, [r7, #12]
 8011dbc:	60b9      	str	r1, [r7, #8]
 8011dbe:	4613      	mov	r3, r2
 8011dc0:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8011dc2:	4b16      	ldr	r3, [pc, #88]	@ (8011e1c <UTIL_LCD_DisplayChar+0x68>)
 8011dc4:	68db      	ldr	r3, [r3, #12]
 8011dc6:	4a15      	ldr	r2, [pc, #84]	@ (8011e1c <UTIL_LCD_DisplayChar+0x68>)
 8011dc8:	015b      	lsls	r3, r3, #5
 8011dca:	4413      	add	r3, r2
 8011dcc:	3308      	adds	r3, #8
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	681a      	ldr	r2, [r3, #0]
 8011dd2:	79fb      	ldrb	r3, [r7, #7]
 8011dd4:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8011dd6:	4911      	ldr	r1, [pc, #68]	@ (8011e1c <UTIL_LCD_DisplayChar+0x68>)
 8011dd8:	68c9      	ldr	r1, [r1, #12]
 8011dda:	4810      	ldr	r0, [pc, #64]	@ (8011e1c <UTIL_LCD_DisplayChar+0x68>)
 8011ddc:	0149      	lsls	r1, r1, #5
 8011dde:	4401      	add	r1, r0
 8011de0:	3108      	adds	r1, #8
 8011de2:	6809      	ldr	r1, [r1, #0]
 8011de4:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8011de6:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8011dea:	4b0c      	ldr	r3, [pc, #48]	@ (8011e1c <UTIL_LCD_DisplayChar+0x68>)
 8011dec:	68db      	ldr	r3, [r3, #12]
 8011dee:	480b      	ldr	r0, [pc, #44]	@ (8011e1c <UTIL_LCD_DisplayChar+0x68>)
 8011df0:	015b      	lsls	r3, r3, #5
 8011df2:	4403      	add	r3, r0
 8011df4:	3308      	adds	r3, #8
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	889b      	ldrh	r3, [r3, #4]
 8011dfa:	3307      	adds	r3, #7
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	da00      	bge.n	8011e02 <UTIL_LCD_DisplayChar+0x4e>
 8011e00:	3307      	adds	r3, #7
 8011e02:	10db      	asrs	r3, r3, #3
 8011e04:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8011e08:	4413      	add	r3, r2
 8011e0a:	461a      	mov	r2, r3
 8011e0c:	68b9      	ldr	r1, [r7, #8]
 8011e0e:	68f8      	ldr	r0, [r7, #12]
 8011e10:	f000 f8ee 	bl	8011ff0 <DrawChar>
}
 8011e14:	bf00      	nop
 8011e16:	3710      	adds	r7, #16
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}
 8011e1c:	24014d40 	.word	0x24014d40

08011e20 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b08a      	sub	sp, #40	@ 0x28
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	60f8      	str	r0, [r7, #12]
 8011e28:	60b9      	str	r1, [r7, #8]
 8011e2a:	607a      	str	r2, [r7, #4]
 8011e2c:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8011e2e:	2301      	movs	r3, #1
 8011e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e32:	2300      	movs	r3, #0
 8011e34:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 8011e36:	2300      	movs	r3, #0
 8011e38:	61fb      	str	r3, [r7, #28]
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8011e42:	e002      	b.n	8011e4a <UTIL_LCD_DisplayStringAt+0x2a>
 8011e44:	69fb      	ldr	r3, [r7, #28]
 8011e46:	3301      	adds	r3, #1
 8011e48:	61fb      	str	r3, [r7, #28]
 8011e4a:	69bb      	ldr	r3, [r7, #24]
 8011e4c:	1c5a      	adds	r2, r3, #1
 8011e4e:	61ba      	str	r2, [r7, #24]
 8011e50:	781b      	ldrb	r3, [r3, #0]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d1f6      	bne.n	8011e44 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8011e56:	4b48      	ldr	r3, [pc, #288]	@ (8011f78 <UTIL_LCD_DisplayStringAt+0x158>)
 8011e58:	695b      	ldr	r3, [r3, #20]
 8011e5a:	4a47      	ldr	r2, [pc, #284]	@ (8011f78 <UTIL_LCD_DisplayStringAt+0x158>)
 8011e5c:	68d2      	ldr	r2, [r2, #12]
 8011e5e:	4946      	ldr	r1, [pc, #280]	@ (8011f78 <UTIL_LCD_DisplayStringAt+0x158>)
 8011e60:	0152      	lsls	r2, r2, #5
 8011e62:	440a      	add	r2, r1
 8011e64:	3208      	adds	r2, #8
 8011e66:	6812      	ldr	r2, [r2, #0]
 8011e68:	8892      	ldrh	r2, [r2, #4]
 8011e6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011e6e:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8011e70:	78fb      	ldrb	r3, [r7, #3]
 8011e72:	2b03      	cmp	r3, #3
 8011e74:	d018      	beq.n	8011ea8 <UTIL_LCD_DisplayStringAt+0x88>
 8011e76:	2b03      	cmp	r3, #3
 8011e78:	dc2a      	bgt.n	8011ed0 <UTIL_LCD_DisplayStringAt+0xb0>
 8011e7a:	2b01      	cmp	r3, #1
 8011e7c:	d002      	beq.n	8011e84 <UTIL_LCD_DisplayStringAt+0x64>
 8011e7e:	2b02      	cmp	r3, #2
 8011e80:	d015      	beq.n	8011eae <UTIL_LCD_DisplayStringAt+0x8e>
 8011e82:	e025      	b.n	8011ed0 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8011e84:	697a      	ldr	r2, [r7, #20]
 8011e86:	69fb      	ldr	r3, [r7, #28]
 8011e88:	1ad3      	subs	r3, r2, r3
 8011e8a:	4a3b      	ldr	r2, [pc, #236]	@ (8011f78 <UTIL_LCD_DisplayStringAt+0x158>)
 8011e8c:	68d2      	ldr	r2, [r2, #12]
 8011e8e:	493a      	ldr	r1, [pc, #232]	@ (8011f78 <UTIL_LCD_DisplayStringAt+0x158>)
 8011e90:	0152      	lsls	r2, r2, #5
 8011e92:	440a      	add	r2, r1
 8011e94:	3208      	adds	r2, #8
 8011e96:	6812      	ldr	r2, [r2, #0]
 8011e98:	8892      	ldrh	r2, [r2, #4]
 8011e9a:	fb02 f303 	mul.w	r3, r2, r3
 8011e9e:	085b      	lsrs	r3, r3, #1
 8011ea0:	68fa      	ldr	r2, [r7, #12]
 8011ea2:	4413      	add	r3, r2
 8011ea4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8011ea6:	e016      	b.n	8011ed6 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8011eac:	e013      	b.n	8011ed6 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 8011eae:	697a      	ldr	r2, [r7, #20]
 8011eb0:	69fb      	ldr	r3, [r7, #28]
 8011eb2:	1ad3      	subs	r3, r2, r3
 8011eb4:	4a30      	ldr	r2, [pc, #192]	@ (8011f78 <UTIL_LCD_DisplayStringAt+0x158>)
 8011eb6:	68d2      	ldr	r2, [r2, #12]
 8011eb8:	492f      	ldr	r1, [pc, #188]	@ (8011f78 <UTIL_LCD_DisplayStringAt+0x158>)
 8011eba:	0152      	lsls	r2, r2, #5
 8011ebc:	440a      	add	r2, r1
 8011ebe:	3208      	adds	r2, #8
 8011ec0:	6812      	ldr	r2, [r2, #0]
 8011ec2:	8892      	ldrh	r2, [r2, #4]
 8011ec4:	fb03 f202 	mul.w	r2, r3, r2
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	1ad3      	subs	r3, r2, r3
 8011ecc:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8011ece:	e002      	b.n	8011ed6 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8011ed4:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8011ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d003      	beq.n	8011ee4 <UTIL_LCD_DisplayStringAt+0xc4>
 8011edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ede:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011ee2:	d31b      	bcc.n	8011f1c <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8011ee4:	2301      	movs	r3, #1
 8011ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8011ee8:	e018      	b.n	8011f1c <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	781b      	ldrb	r3, [r3, #0]
 8011eee:	461a      	mov	r2, r3
 8011ef0:	68b9      	ldr	r1, [r7, #8]
 8011ef2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011ef4:	f7ff ff5e 	bl	8011db4 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8011ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8011f78 <UTIL_LCD_DisplayStringAt+0x158>)
 8011efa:	68db      	ldr	r3, [r3, #12]
 8011efc:	4a1e      	ldr	r2, [pc, #120]	@ (8011f78 <UTIL_LCD_DisplayStringAt+0x158>)
 8011efe:	015b      	lsls	r3, r3, #5
 8011f00:	4413      	add	r3, r2
 8011f02:	3308      	adds	r3, #8
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	889b      	ldrh	r3, [r3, #4]
 8011f08:	461a      	mov	r2, r3
 8011f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f0c:	4413      	add	r3, r2
 8011f0e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	3301      	adds	r3, #1
 8011f14:	607b      	str	r3, [r7, #4]
    i++;
 8011f16:	6a3b      	ldr	r3, [r7, #32]
 8011f18:	3301      	adds	r3, #1
 8011f1a:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	781b      	ldrb	r3, [r3, #0]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	bf14      	ite	ne
 8011f24:	2301      	movne	r3, #1
 8011f26:	2300      	moveq	r3, #0
 8011f28:	b2da      	uxtb	r2, r3
 8011f2a:	4b13      	ldr	r3, [pc, #76]	@ (8011f78 <UTIL_LCD_DisplayStringAt+0x158>)
 8011f2c:	6959      	ldr	r1, [r3, #20]
 8011f2e:	4b12      	ldr	r3, [pc, #72]	@ (8011f78 <UTIL_LCD_DisplayStringAt+0x158>)
 8011f30:	68db      	ldr	r3, [r3, #12]
 8011f32:	4811      	ldr	r0, [pc, #68]	@ (8011f78 <UTIL_LCD_DisplayStringAt+0x158>)
 8011f34:	015b      	lsls	r3, r3, #5
 8011f36:	4403      	add	r3, r0
 8011f38:	3308      	adds	r3, #8
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	889b      	ldrh	r3, [r3, #4]
 8011f3e:	4618      	mov	r0, r3
 8011f40:	6a3b      	ldr	r3, [r7, #32]
 8011f42:	fb00 f303 	mul.w	r3, r0, r3
 8011f46:	1acb      	subs	r3, r1, r3
 8011f48:	b29b      	uxth	r3, r3
 8011f4a:	490b      	ldr	r1, [pc, #44]	@ (8011f78 <UTIL_LCD_DisplayStringAt+0x158>)
 8011f4c:	68c9      	ldr	r1, [r1, #12]
 8011f4e:	480a      	ldr	r0, [pc, #40]	@ (8011f78 <UTIL_LCD_DisplayStringAt+0x158>)
 8011f50:	0149      	lsls	r1, r1, #5
 8011f52:	4401      	add	r1, r0
 8011f54:	3108      	adds	r1, #8
 8011f56:	6809      	ldr	r1, [r1, #0]
 8011f58:	8889      	ldrh	r1, [r1, #4]
 8011f5a:	428b      	cmp	r3, r1
 8011f5c:	bf2c      	ite	cs
 8011f5e:	2301      	movcs	r3, #1
 8011f60:	2300      	movcc	r3, #0
 8011f62:	b2db      	uxtb	r3, r3
 8011f64:	4013      	ands	r3, r2
 8011f66:	b2db      	uxtb	r3, r3
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d1be      	bne.n	8011eea <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8011f6c:	bf00      	nop
 8011f6e:	bf00      	nop
 8011f70:	3728      	adds	r7, #40	@ 0x28
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}
 8011f76:	bf00      	nop
 8011f78:	24014d40 	.word	0x24014d40

08011f7c <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8011f7c:	b590      	push	{r4, r7, lr}
 8011f7e:	b087      	sub	sp, #28
 8011f80:	af02      	add	r7, sp, #8
 8011f82:	60f8      	str	r0, [r7, #12]
 8011f84:	60b9      	str	r1, [r7, #8]
 8011f86:	607a      	str	r2, [r7, #4]
 8011f88:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8011f8a:	4b17      	ldr	r3, [pc, #92]	@ (8011fe8 <UTIL_LCD_FillRect+0x6c>)
 8011f8c:	69db      	ldr	r3, [r3, #28]
 8011f8e:	2b02      	cmp	r3, #2
 8011f90:	d11a      	bne.n	8011fc8 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8011f92:	4b16      	ldr	r3, [pc, #88]	@ (8011fec <UTIL_LCD_FillRect+0x70>)
 8011f94:	691c      	ldr	r4, [r3, #16]
 8011f96:	4b14      	ldr	r3, [pc, #80]	@ (8011fe8 <UTIL_LCD_FillRect+0x6c>)
 8011f98:	6918      	ldr	r0, [r3, #16]
 8011f9a:	6a3b      	ldr	r3, [r7, #32]
 8011f9c:	08db      	lsrs	r3, r3, #3
 8011f9e:	f003 021f 	and.w	r2, r3, #31
 8011fa2:	6a3b      	ldr	r3, [r7, #32]
 8011fa4:	0a9b      	lsrs	r3, r3, #10
 8011fa6:	015b      	lsls	r3, r3, #5
 8011fa8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011fac:	431a      	orrs	r2, r3
 8011fae:	6a3b      	ldr	r3, [r7, #32]
 8011fb0:	0cdb      	lsrs	r3, r3, #19
 8011fb2:	02db      	lsls	r3, r3, #11
 8011fb4:	b29b      	uxth	r3, r3
 8011fb6:	4313      	orrs	r3, r2
 8011fb8:	9301      	str	r3, [sp, #4]
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	9300      	str	r3, [sp, #0]
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	68ba      	ldr	r2, [r7, #8]
 8011fc2:	68f9      	ldr	r1, [r7, #12]
 8011fc4:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8011fc6:	e00b      	b.n	8011fe0 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8011fc8:	4b08      	ldr	r3, [pc, #32]	@ (8011fec <UTIL_LCD_FillRect+0x70>)
 8011fca:	691c      	ldr	r4, [r3, #16]
 8011fcc:	4b06      	ldr	r3, [pc, #24]	@ (8011fe8 <UTIL_LCD_FillRect+0x6c>)
 8011fce:	6918      	ldr	r0, [r3, #16]
 8011fd0:	6a3b      	ldr	r3, [r7, #32]
 8011fd2:	9301      	str	r3, [sp, #4]
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	9300      	str	r3, [sp, #0]
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	68ba      	ldr	r2, [r7, #8]
 8011fdc:	68f9      	ldr	r1, [r7, #12]
 8011fde:	47a0      	blx	r4
}
 8011fe0:	bf00      	nop
 8011fe2:	3714      	adds	r7, #20
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd90      	pop	{r4, r7, pc}
 8011fe8:	24014d40 	.word	0x24014d40
 8011fec:	24014d80 	.word	0x24014d80

08011ff0 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b0b2      	sub	sp, #200	@ 0xc8
 8011ff4:	af02      	add	r7, sp, #8
 8011ff6:	60f8      	str	r0, [r7, #12]
 8011ff8:	60b9      	str	r1, [r7, #8]
 8011ffa:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012002:	2300      	movs	r3, #0
 8012004:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8012008:	4ba5      	ldr	r3, [pc, #660]	@ (80122a0 <DrawChar+0x2b0>)
 801200a:	68db      	ldr	r3, [r3, #12]
 801200c:	4aa4      	ldr	r2, [pc, #656]	@ (80122a0 <DrawChar+0x2b0>)
 801200e:	015b      	lsls	r3, r3, #5
 8012010:	4413      	add	r3, r2
 8012012:	3308      	adds	r3, #8
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	88db      	ldrh	r3, [r3, #6]
 8012018:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 801201c:	4ba0      	ldr	r3, [pc, #640]	@ (80122a0 <DrawChar+0x2b0>)
 801201e:	68db      	ldr	r3, [r3, #12]
 8012020:	4a9f      	ldr	r2, [pc, #636]	@ (80122a0 <DrawChar+0x2b0>)
 8012022:	015b      	lsls	r3, r3, #5
 8012024:	4413      	add	r3, r2
 8012026:	3308      	adds	r3, #8
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	889b      	ldrh	r3, [r3, #4]
 801202c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8012030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012034:	3307      	adds	r3, #7
 8012036:	f023 0207 	bic.w	r2, r3, #7
 801203a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801203e:	1ad3      	subs	r3, r2, r3
 8012040:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
 8012044:	2300      	movs	r3, #0
 8012046:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801204a:	e11c      	b.n	8012286 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 801204c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012050:	3307      	adds	r3, #7
 8012052:	08db      	lsrs	r3, r3, #3
 8012054:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012058:	fb02 f303 	mul.w	r3, r2, r3
 801205c:	687a      	ldr	r2, [r7, #4]
 801205e:	4413      	add	r3, r2
 8012060:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
 8012064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012068:	3307      	adds	r3, #7
 801206a:	08db      	lsrs	r3, r3, #3
 801206c:	2b01      	cmp	r3, #1
 801206e:	d002      	beq.n	8012076 <DrawChar+0x86>
 8012070:	2b02      	cmp	r3, #2
 8012072:	d006      	beq.n	8012082 <DrawChar+0x92>
 8012074:	e011      	b.n	801209a <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 8012076:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801207a:	781b      	ldrb	r3, [r3, #0]
 801207c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8012080:	e01d      	b.n	80120be <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8012082:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012086:	781b      	ldrb	r3, [r3, #0]
 8012088:	021b      	lsls	r3, r3, #8
 801208a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801208e:	3201      	adds	r2, #1
 8012090:	7812      	ldrb	r2, [r2, #0]
 8012092:	4313      	orrs	r3, r2
 8012094:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8012098:	e011      	b.n	80120be <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801209a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801209e:	781b      	ldrb	r3, [r3, #0]
 80120a0:	041a      	lsls	r2, r3, #16
 80120a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80120a6:	3301      	adds	r3, #1
 80120a8:	781b      	ldrb	r3, [r3, #0]
 80120aa:	021b      	lsls	r3, r3, #8
 80120ac:	4313      	orrs	r3, r2
 80120ae:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80120b2:	3202      	adds	r2, #2
 80120b4:	7812      	ldrb	r2, [r2, #0]
 80120b6:	4313      	orrs	r3, r2
 80120b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 80120bc:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80120be:	4b78      	ldr	r3, [pc, #480]	@ (80122a0 <DrawChar+0x2b0>)
 80120c0:	68db      	ldr	r3, [r3, #12]
 80120c2:	4a77      	ldr	r2, [pc, #476]	@ (80122a0 <DrawChar+0x2b0>)
 80120c4:	015b      	lsls	r3, r3, #5
 80120c6:	4413      	add	r3, r2
 80120c8:	331c      	adds	r3, #28
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	2b02      	cmp	r3, #2
 80120ce:	f040 808c 	bne.w	80121ea <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 80120d2:	2300      	movs	r3, #0
 80120d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80120d8:	e074      	b.n	80121c4 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 80120da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80120de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80120e2:	1ad2      	subs	r2, r2, r3
 80120e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80120e8:	4413      	add	r3, r2
 80120ea:	3b01      	subs	r3, #1
 80120ec:	2201      	movs	r2, #1
 80120ee:	fa02 f303 	lsl.w	r3, r2, r3
 80120f2:	461a      	mov	r2, r3
 80120f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80120f8:	4013      	ands	r3, r2
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d02d      	beq.n	801215a <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 80120fe:	4b68      	ldr	r3, [pc, #416]	@ (80122a0 <DrawChar+0x2b0>)
 8012100:	68db      	ldr	r3, [r3, #12]
 8012102:	4a67      	ldr	r2, [pc, #412]	@ (80122a0 <DrawChar+0x2b0>)
 8012104:	015b      	lsls	r3, r3, #5
 8012106:	4413      	add	r3, r2
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	08db      	lsrs	r3, r3, #3
 801210c:	b29b      	uxth	r3, r3
 801210e:	f003 031f 	and.w	r3, r3, #31
 8012112:	b29a      	uxth	r2, r3
 8012114:	4b62      	ldr	r3, [pc, #392]	@ (80122a0 <DrawChar+0x2b0>)
 8012116:	68db      	ldr	r3, [r3, #12]
 8012118:	4961      	ldr	r1, [pc, #388]	@ (80122a0 <DrawChar+0x2b0>)
 801211a:	015b      	lsls	r3, r3, #5
 801211c:	440b      	add	r3, r1
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	0a9b      	lsrs	r3, r3, #10
 8012122:	b29b      	uxth	r3, r3
 8012124:	015b      	lsls	r3, r3, #5
 8012126:	b29b      	uxth	r3, r3
 8012128:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801212c:	b29b      	uxth	r3, r3
 801212e:	4313      	orrs	r3, r2
 8012130:	b29a      	uxth	r2, r3
 8012132:	4b5b      	ldr	r3, [pc, #364]	@ (80122a0 <DrawChar+0x2b0>)
 8012134:	68db      	ldr	r3, [r3, #12]
 8012136:	495a      	ldr	r1, [pc, #360]	@ (80122a0 <DrawChar+0x2b0>)
 8012138:	015b      	lsls	r3, r3, #5
 801213a:	440b      	add	r3, r1
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	0cdb      	lsrs	r3, r3, #19
 8012140:	b29b      	uxth	r3, r3
 8012142:	02db      	lsls	r3, r3, #11
 8012144:	b29b      	uxth	r3, r3
 8012146:	4313      	orrs	r3, r2
 8012148:	b29a      	uxth	r2, r3
 801214a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801214e:	005b      	lsls	r3, r3, #1
 8012150:	33c0      	adds	r3, #192	@ 0xc0
 8012152:	443b      	add	r3, r7
 8012154:	f823 2c4c 	strh.w	r2, [r3, #-76]
 8012158:	e02f      	b.n	80121ba <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 801215a:	4b51      	ldr	r3, [pc, #324]	@ (80122a0 <DrawChar+0x2b0>)
 801215c:	68db      	ldr	r3, [r3, #12]
 801215e:	4a50      	ldr	r2, [pc, #320]	@ (80122a0 <DrawChar+0x2b0>)
 8012160:	015b      	lsls	r3, r3, #5
 8012162:	4413      	add	r3, r2
 8012164:	3304      	adds	r3, #4
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	08db      	lsrs	r3, r3, #3
 801216a:	b29b      	uxth	r3, r3
 801216c:	f003 031f 	and.w	r3, r3, #31
 8012170:	b29a      	uxth	r2, r3
 8012172:	4b4b      	ldr	r3, [pc, #300]	@ (80122a0 <DrawChar+0x2b0>)
 8012174:	68db      	ldr	r3, [r3, #12]
 8012176:	494a      	ldr	r1, [pc, #296]	@ (80122a0 <DrawChar+0x2b0>)
 8012178:	015b      	lsls	r3, r3, #5
 801217a:	440b      	add	r3, r1
 801217c:	3304      	adds	r3, #4
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	0a9b      	lsrs	r3, r3, #10
 8012182:	b29b      	uxth	r3, r3
 8012184:	015b      	lsls	r3, r3, #5
 8012186:	b29b      	uxth	r3, r3
 8012188:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801218c:	b29b      	uxth	r3, r3
 801218e:	4313      	orrs	r3, r2
 8012190:	b29a      	uxth	r2, r3
 8012192:	4b43      	ldr	r3, [pc, #268]	@ (80122a0 <DrawChar+0x2b0>)
 8012194:	68db      	ldr	r3, [r3, #12]
 8012196:	4942      	ldr	r1, [pc, #264]	@ (80122a0 <DrawChar+0x2b0>)
 8012198:	015b      	lsls	r3, r3, #5
 801219a:	440b      	add	r3, r1
 801219c:	3304      	adds	r3, #4
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	0cdb      	lsrs	r3, r3, #19
 80121a2:	b29b      	uxth	r3, r3
 80121a4:	02db      	lsls	r3, r3, #11
 80121a6:	b29b      	uxth	r3, r3
 80121a8:	4313      	orrs	r3, r2
 80121aa:	b29a      	uxth	r2, r3
 80121ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80121b0:	005b      	lsls	r3, r3, #1
 80121b2:	33c0      	adds	r3, #192	@ 0xc0
 80121b4:	443b      	add	r3, r7
 80121b6:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 80121ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80121be:	3301      	adds	r3, #1
 80121c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80121c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80121c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121cc:	429a      	cmp	r2, r3
 80121ce:	d384      	bcc.n	80120da <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 80121d0:	68b9      	ldr	r1, [r7, #8]
 80121d2:	1c4b      	adds	r3, r1, #1
 80121d4:	60bb      	str	r3, [r7, #8]
 80121d6:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80121da:	2301      	movs	r3, #1
 80121dc:	9300      	str	r3, [sp, #0]
 80121de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121e2:	68f8      	ldr	r0, [r7, #12]
 80121e4:	f7ff fd7e 	bl	8011ce4 <UTIL_LCD_FillRGBRect>
 80121e8:	e048      	b.n	801227c <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 80121ea:	2300      	movs	r3, #0
 80121ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80121f0:	e032      	b.n	8012258 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 80121f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80121f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80121fa:	1ad2      	subs	r2, r2, r3
 80121fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012200:	4413      	add	r3, r2
 8012202:	3b01      	subs	r3, #1
 8012204:	2201      	movs	r2, #1
 8012206:	fa02 f303 	lsl.w	r3, r2, r3
 801220a:	461a      	mov	r2, r3
 801220c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012210:	4013      	ands	r3, r2
 8012212:	2b00      	cmp	r3, #0
 8012214:	d00d      	beq.n	8012232 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 8012216:	4b22      	ldr	r3, [pc, #136]	@ (80122a0 <DrawChar+0x2b0>)
 8012218:	68db      	ldr	r3, [r3, #12]
 801221a:	4a21      	ldr	r2, [pc, #132]	@ (80122a0 <DrawChar+0x2b0>)
 801221c:	015b      	lsls	r3, r3, #5
 801221e:	4413      	add	r3, r2
 8012220:	681a      	ldr	r2, [r3, #0]
 8012222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012226:	009b      	lsls	r3, r3, #2
 8012228:	33c0      	adds	r3, #192	@ 0xc0
 801222a:	443b      	add	r3, r7
 801222c:	f843 2cac 	str.w	r2, [r3, #-172]
 8012230:	e00d      	b.n	801224e <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 8012232:	4b1b      	ldr	r3, [pc, #108]	@ (80122a0 <DrawChar+0x2b0>)
 8012234:	68db      	ldr	r3, [r3, #12]
 8012236:	4a1a      	ldr	r2, [pc, #104]	@ (80122a0 <DrawChar+0x2b0>)
 8012238:	015b      	lsls	r3, r3, #5
 801223a:	4413      	add	r3, r2
 801223c:	3304      	adds	r3, #4
 801223e:	681a      	ldr	r2, [r3, #0]
 8012240:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012244:	009b      	lsls	r3, r3, #2
 8012246:	33c0      	adds	r3, #192	@ 0xc0
 8012248:	443b      	add	r3, r7
 801224a:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 801224e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012252:	3301      	adds	r3, #1
 8012254:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012258:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801225c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012260:	429a      	cmp	r2, r3
 8012262:	d3c6      	bcc.n	80121f2 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 8012264:	68b9      	ldr	r1, [r7, #8]
 8012266:	1c4b      	adds	r3, r1, #1
 8012268:	60bb      	str	r3, [r7, #8]
 801226a:	f107 0214 	add.w	r2, r7, #20
 801226e:	2301      	movs	r3, #1
 8012270:	9300      	str	r3, [sp, #0]
 8012272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012276:	68f8      	ldr	r0, [r7, #12]
 8012278:	f7ff fd34 	bl	8011ce4 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 801227c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012280:	3301      	adds	r3, #1
 8012282:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012286:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801228a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801228e:	429a      	cmp	r2, r3
 8012290:	f4ff aedc 	bcc.w	801204c <DrawChar+0x5c>
    }
  }
}
 8012294:	bf00      	nop
 8012296:	bf00      	nop
 8012298:	37c0      	adds	r7, #192	@ 0xc0
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}
 801229e:	bf00      	nop
 80122a0:	24014d40 	.word	0x24014d40

080122a4 <D16_GENERIC>:
 80122a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122a8:	b089      	sub	sp, #36	@ 0x24
 80122aa:	6993      	ldr	r3, [r2, #24]
 80122ac:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80122ae:	9103      	str	r1, [sp, #12]
 80122b0:	9307      	str	r3, [sp, #28]
 80122b2:	69d3      	ldr	r3, [r2, #28]
 80122b4:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 80122b8:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 80122bc:	9106      	str	r1, [sp, #24]
 80122be:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	@ 0x30
 80122c2:	2d00      	cmp	r5, #0
 80122c4:	d063      	beq.n	801238e <D16_GENERIC+0xea>
 80122c6:	f001 0520 	and.w	r5, r1, #32
 80122ca:	f001 0110 	and.w	r1, r1, #16
 80122ce:	f8df e0e0 	ldr.w	lr, [pc, #224]	@ 80123b0 <D16_GENERIC+0x10c>
 80122d2:	46c1      	mov	r9, r8
 80122d4:	9104      	str	r1, [sp, #16]
 80122d6:	2100      	movs	r1, #0
 80122d8:	9505      	str	r5, [sp, #20]
 80122da:	e04d      	b.n	8012378 <D16_GENERIC+0xd4>
 80122dc:	5d87      	ldrb	r7, [r0, r6]
 80122de:	7805      	ldrb	r5, [r0, #0]
 80122e0:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80122e4:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 80122e8:	b2fe      	uxtb	r6, r7
 80122ea:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80122ee:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 80122f2:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 80122f6:	441d      	add	r5, r3
 80122f8:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 80122fc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8012300:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8012304:	0a9b      	lsrs	r3, r3, #10
 8012306:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 801230a:	4d27      	ldr	r5, [pc, #156]	@ (80123a8 <D16_GENERIC+0x104>)
 801230c:	fb26 c505 	smlad	r5, r6, r5, ip
 8012310:	4f26      	ldr	r7, [pc, #152]	@ (80123ac <D16_GENERIC+0x108>)
 8012312:	fb26 fc07 	smuad	ip, r6, r7
 8012316:	9e04      	ldr	r6, [sp, #16]
 8012318:	f101 0801 	add.w	r8, r1, #1
 801231c:	f5a5 6500 	sub.w	r5, r5, #2048	@ 0x800
 8012320:	b1ae      	cbz	r6, 801234e <D16_GENERIC+0xaa>
 8012322:	442c      	add	r4, r5
 8012324:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8012328:	eba4 040a 	sub.w	r4, r4, sl
 801232c:	46aa      	mov	sl, r5
 801232e:	17e7      	asrs	r7, r4, #31
 8012330:	fba4 450b 	umull	r4, r5, r4, fp
 8012334:	e9cd 4500 	strd	r4, r5, [sp]
 8012338:	fb0b 5407 	mla	r4, fp, r7, r5
 801233c:	9401      	str	r4, [sp, #4]
 801233e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012342:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 8012346:	f145 0500 	adc.w	r5, r5, #0
 801234a:	006c      	lsls	r4, r5, #1
 801234c:	4625      	mov	r5, r4
 801234e:	f8b2 b028 	ldrh.w	fp, [r2, #40]	@ 0x28
 8012352:	042d      	lsls	r5, r5, #16
 8012354:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8012358:	2700      	movs	r7, #0
 801235a:	fb01 fb0b 	mul.w	fp, r1, fp
 801235e:	fa1f f188 	uxth.w	r1, r8
 8012362:	fbc9 6705 	smlal	r6, r7, r9, r5
 8012366:	9e03      	ldr	r6, [sp, #12]
 8012368:	10bd      	asrs	r5, r7, #2
 801236a:	f305 050f 	ssat	r5, #16, r5
 801236e:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8012372:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8012374:	428d      	cmp	r5, r1
 8012376:	d90a      	bls.n	801238e <D16_GENERIC+0xea>
 8012378:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 801237a:	2d01      	cmp	r5, #1
 801237c:	b2ee      	uxtb	r6, r5
 801237e:	d1ad      	bne.n	80122dc <D16_GENERIC+0x38>
 8012380:	9d05      	ldr	r5, [sp, #20]
 8012382:	f850 7b02 	ldr.w	r7, [r0], #2
 8012386:	2d00      	cmp	r5, #0
 8012388:	d0ae      	beq.n	80122e8 <D16_GENERIC+0x44>
 801238a:	ba7f      	rev16	r7, r7
 801238c:	e7ac      	b.n	80122e8 <D16_GENERIC+0x44>
 801238e:	2000      	movs	r0, #0
 8012390:	9906      	ldr	r1, [sp, #24]
 8012392:	61d3      	str	r3, [r2, #28]
 8012394:	9b07      	ldr	r3, [sp, #28]
 8012396:	f8c2 c008 	str.w	ip, [r2, #8]
 801239a:	60d1      	str	r1, [r2, #12]
 801239c:	6193      	str	r3, [r2, #24]
 801239e:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 80123a2:	b009      	add	sp, #36	@ 0x24
 80123a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123a8:	00030001 	.word	0x00030001
 80123ac:	00010003 	.word	0x00010003
 80123b0:	24000000 	.word	0x24000000

080123b4 <D24_GENERIC>:
 80123b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123b8:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 80123bc:	b089      	sub	sp, #36	@ 0x24
 80123be:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 80123c0:	9303      	str	r3, [sp, #12]
 80123c2:	6993      	ldr	r3, [r2, #24]
 80123c4:	9104      	str	r1, [sp, #16]
 80123c6:	9307      	str	r3, [sp, #28]
 80123c8:	69d1      	ldr	r1, [r2, #28]
 80123ca:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 80123ce:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	@ 0x30
 80123d2:	2e00      	cmp	r6, #0
 80123d4:	f000 8088 	beq.w	80124e8 <D24_GENERIC+0x134>
 80123d8:	f005 0620 	and.w	r6, r5, #32
 80123dc:	f005 0510 	and.w	r5, r5, #16
 80123e0:	f04f 0c00 	mov.w	ip, #0
 80123e4:	f8df e140 	ldr.w	lr, [pc, #320]	@ 8012528 <D24_GENERIC+0x174>
 80123e8:	9606      	str	r6, [sp, #24]
 80123ea:	9505      	str	r5, [sp, #20]
 80123ec:	e064      	b.n	80124b8 <D24_GENERIC+0x104>
 80123ee:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80123f2:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80123f6:	f810 b007 	ldrb.w	fp, [r0, r7]
 80123fa:	042d      	lsls	r5, r5, #16
 80123fc:	19f0      	adds	r0, r6, r7
 80123fe:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 8012402:	44a9      	add	r9, r5
 8012404:	fa5f f689 	uxtb.w	r6, r9
 8012408:	f3c9 2707 	ubfx	r7, r9, #8, #8
 801240c:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8012410:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8012414:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8012418:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 801241c:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 8012420:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8012424:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8012428:	f3c7 0509 	ubfx	r5, r7, #0, #10
 801242c:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8012430:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8012434:	4d3a      	ldr	r5, [pc, #232]	@ (8012520 <D24_GENERIC+0x16c>)
 8012436:	fb26 8705 	smlad	r7, r6, r5, r8
 801243a:	4d3a      	ldr	r5, [pc, #232]	@ (8012524 <D24_GENERIC+0x170>)
 801243c:	fb26 3805 	smlad	r8, r6, r5, r3
 8012440:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8012444:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8012448:	2301      	movs	r3, #1
 801244a:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 801244e:	fb26 f603 	smuad	r6, r6, r3
 8012452:	eb0c 0903 	add.w	r9, ip, r3
 8012456:	eb0b 0306 	add.w	r3, fp, r6
 801245a:	9e05      	ldr	r6, [sp, #20]
 801245c:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 8012460:	b1ae      	cbz	r6, 801248e <D24_GENERIC+0xda>
 8012462:	442c      	add	r4, r5
 8012464:	9e03      	ldr	r6, [sp, #12]
 8012466:	f8d2 b020 	ldr.w	fp, [r2, #32]
 801246a:	1ba4      	subs	r4, r4, r6
 801246c:	9503      	str	r5, [sp, #12]
 801246e:	17e7      	asrs	r7, r4, #31
 8012470:	fba4 450b 	umull	r4, r5, r4, fp
 8012474:	e9cd 4500 	strd	r4, r5, [sp]
 8012478:	fb0b 5407 	mla	r4, fp, r7, r5
 801247c:	9401      	str	r4, [sp, #4]
 801247e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012482:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 8012486:	f145 0500 	adc.w	r5, r5, #0
 801248a:	006c      	lsls	r4, r5, #1
 801248c:	4625      	mov	r5, r4
 801248e:	f8b2 b028 	ldrh.w	fp, [r2, #40]	@ 0x28
 8012492:	03ad      	lsls	r5, r5, #14
 8012494:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8012498:	2700      	movs	r7, #0
 801249a:	fb0c fb0b 	mul.w	fp, ip, fp
 801249e:	fa1f fc89 	uxth.w	ip, r9
 80124a2:	fbca 6705 	smlal	r6, r7, sl, r5
 80124a6:	9e04      	ldr	r6, [sp, #16]
 80124a8:	10bd      	asrs	r5, r7, #2
 80124aa:	f305 050f 	ssat	r5, #16, r5
 80124ae:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80124b2:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80124b4:	4565      	cmp	r5, ip
 80124b6:	d917      	bls.n	80124e8 <D24_GENERIC+0x134>
 80124b8:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 80124ba:	f890 9000 	ldrb.w	r9, [r0]
 80124be:	b2ef      	uxtb	r7, r5
 80124c0:	2d01      	cmp	r5, #1
 80124c2:	b23e      	sxth	r6, r7
 80124c4:	d193      	bne.n	80123ee <D24_GENERIC+0x3a>
 80124c6:	9d06      	ldr	r5, [sp, #24]
 80124c8:	b1dd      	cbz	r5, 8012502 <D24_GENERIC+0x14e>
 80124ca:	78c7      	ldrb	r7, [r0, #3]
 80124cc:	ea4f 2609 	mov.w	r6, r9, lsl #8
 80124d0:	f01c 0f01 	tst.w	ip, #1
 80124d4:	ea4f 2507 	mov.w	r5, r7, lsl #8
 80124d8:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 80124dc:	d11a      	bne.n	8012514 <D24_GENERIC+0x160>
 80124de:	f890 9001 	ldrb.w	r9, [r0, #1]
 80124e2:	3002      	adds	r0, #2
 80124e4:	44b1      	add	r9, r6
 80124e6:	e78d      	b.n	8012404 <D24_GENERIC+0x50>
 80124e8:	6093      	str	r3, [r2, #8]
 80124ea:	2000      	movs	r0, #0
 80124ec:	9b03      	ldr	r3, [sp, #12]
 80124ee:	f8c2 800c 	str.w	r8, [r2, #12]
 80124f2:	6153      	str	r3, [r2, #20]
 80124f4:	9b07      	ldr	r3, [sp, #28]
 80124f6:	61d1      	str	r1, [r2, #28]
 80124f8:	6114      	str	r4, [r2, #16]
 80124fa:	6193      	str	r3, [r2, #24]
 80124fc:	b009      	add	sp, #36	@ 0x24
 80124fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012502:	7845      	ldrb	r5, [r0, #1]
 8012504:	3003      	adds	r0, #3
 8012506:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 801250a:	022d      	lsls	r5, r5, #8
 801250c:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8012510:	44a9      	add	r9, r5
 8012512:	e777      	b.n	8012404 <D24_GENERIC+0x50>
 8012514:	7886      	ldrb	r6, [r0, #2]
 8012516:	3004      	adds	r0, #4
 8012518:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 801251c:	44a9      	add	r9, r5
 801251e:	e771      	b.n	8012404 <D24_GENERIC+0x50>
 8012520:	00030001 	.word	0x00030001
 8012524:	00060007 	.word	0x00060007
 8012528:	24000000 	.word	0x24000000

0801252c <D32_GENERIC>:
 801252c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012530:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8012534:	b089      	sub	sp, #36	@ 0x24
 8012536:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8012538:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 801253a:	9302      	str	r3, [sp, #8]
 801253c:	6993      	ldr	r3, [r2, #24]
 801253e:	9104      	str	r1, [sp, #16]
 8012540:	9307      	str	r3, [sp, #28]
 8012542:	9503      	str	r5, [sp, #12]
 8012544:	69d1      	ldr	r1, [r2, #28]
 8012546:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8012548:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 801254c:	2e00      	cmp	r6, #0
 801254e:	f000 8097 	beq.w	8012680 <D32_GENERIC+0x154>
 8012552:	f005 0620 	and.w	r6, r5, #32
 8012556:	f005 0510 	and.w	r5, r5, #16
 801255a:	f04f 0e00 	mov.w	lr, #0
 801255e:	f8df c150 	ldr.w	ip, [pc, #336]	@ 80126b0 <D32_GENERIC+0x184>
 8012562:	9606      	str	r6, [sp, #24]
 8012564:	9505      	str	r5, [sp, #20]
 8012566:	e079      	b.n	801265c <D32_GENERIC+0x130>
 8012568:	783d      	ldrb	r5, [r7, #0]
 801256a:	f810 b009 	ldrb.w	fp, [r0, r9]
 801256e:	042d      	lsls	r5, r5, #16
 8012570:	f810 a006 	ldrb.w	sl, [r0, r6]
 8012574:	f890 9000 	ldrb.w	r9, [r0]
 8012578:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 801257c:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8012580:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8012584:	44a9      	add	r9, r5
 8012586:	fa5f f789 	uxtb.w	r7, r9
 801258a:	f3c9 2507 	ubfx	r5, r9, #8, #8
 801258e:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8012592:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8012596:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 801259a:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 801259e:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 80125a2:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 80125a6:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 80125aa:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80125ae:	f3c1 0909 	ubfx	r9, r1, #0, #10
 80125b2:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 80125b6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80125ba:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 80125be:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80125c2:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 80125c6:	f3c1 0509 	ubfx	r5, r1, #0, #10
 80125ca:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80125ce:	4d34      	ldr	r5, [pc, #208]	@ (80126a0 <D32_GENERIC+0x174>)
 80125d0:	fb29 8805 	smlad	r8, r9, r5, r8
 80125d4:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
 80125d8:	fb26 8705 	smlad	r7, r6, r5, r8
 80125dc:	4d31      	ldr	r5, [pc, #196]	@ (80126a4 <D32_GENERIC+0x178>)
 80125de:	fb29 3305 	smlad	r3, r9, r5, r3
 80125e2:	4d31      	ldr	r5, [pc, #196]	@ (80126a8 <D32_GENERIC+0x17c>)
 80125e4:	fb26 3805 	smlad	r8, r6, r5, r3
 80125e8:	2301      	movs	r3, #1
 80125ea:	fb29 f903 	smuad	r9, r9, r3
 80125ee:	4b2f      	ldr	r3, [pc, #188]	@ (80126ac <D32_GENERIC+0x180>)
 80125f0:	fb26 9303 	smlad	r3, r6, r3, r9
 80125f4:	9e05      	ldr	r6, [sp, #20]
 80125f6:	f10e 0901 	add.w	r9, lr, #1
 80125fa:	f5a7 4580 	sub.w	r5, r7, #16384	@ 0x4000
 80125fe:	b1ae      	cbz	r6, 801262c <D32_GENERIC+0x100>
 8012600:	442c      	add	r4, r5
 8012602:	9e02      	ldr	r6, [sp, #8]
 8012604:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8012608:	1ba4      	subs	r4, r4, r6
 801260a:	9502      	str	r5, [sp, #8]
 801260c:	17e7      	asrs	r7, r4, #31
 801260e:	fba4 450a 	umull	r4, r5, r4, sl
 8012612:	e9cd 4500 	strd	r4, r5, [sp]
 8012616:	fb0a 5407 	mla	r4, sl, r7, r5
 801261a:	9401      	str	r4, [sp, #4]
 801261c:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012620:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 8012624:	f145 0500 	adc.w	r5, r5, #0
 8012628:	006c      	lsls	r4, r5, #1
 801262a:	4625      	mov	r5, r4
 801262c:	f8b2 a028 	ldrh.w	sl, [r2, #40]	@ 0x28
 8012630:	036d      	lsls	r5, r5, #13
 8012632:	9f03      	ldr	r7, [sp, #12]
 8012634:	fb0e fb0a 	mul.w	fp, lr, sl
 8012638:	fa1f fe89 	uxth.w	lr, r9
 801263c:	f04f 0a00 	mov.w	sl, #0
 8012640:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 8012644:	9e04      	ldr	r6, [sp, #16]
 8012646:	fbc7 9a05 	smlal	r9, sl, r7, r5
 801264a:	4657      	mov	r7, sl
 801264c:	10bd      	asrs	r5, r7, #2
 801264e:	f305 050f 	ssat	r5, #16, r5
 8012652:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8012656:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8012658:	4575      	cmp	r5, lr
 801265a:	d911      	bls.n	8012680 <D32_GENERIC+0x154>
 801265c:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 801265e:	b2ee      	uxtb	r6, r5
 8012660:	2d01      	cmp	r5, #1
 8012662:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 8012666:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 801266a:	f47f af7d 	bne.w	8012568 <D32_GENERIC+0x3c>
 801266e:	1d05      	adds	r5, r0, #4
 8012670:	f8d0 9000 	ldr.w	r9, [r0]
 8012674:	9806      	ldr	r0, [sp, #24]
 8012676:	b180      	cbz	r0, 801269a <D32_GENERIC+0x16e>
 8012678:	fa99 f999 	rev16.w	r9, r9
 801267c:	4628      	mov	r0, r5
 801267e:	e782      	b.n	8012586 <D32_GENERIC+0x5a>
 8012680:	6093      	str	r3, [r2, #8]
 8012682:	2000      	movs	r0, #0
 8012684:	9b02      	ldr	r3, [sp, #8]
 8012686:	f8c2 800c 	str.w	r8, [r2, #12]
 801268a:	6153      	str	r3, [r2, #20]
 801268c:	9b07      	ldr	r3, [sp, #28]
 801268e:	61d1      	str	r1, [r2, #28]
 8012690:	6114      	str	r4, [r2, #16]
 8012692:	6193      	str	r3, [r2, #24]
 8012694:	b009      	add	sp, #36	@ 0x24
 8012696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801269a:	4628      	mov	r0, r5
 801269c:	e773      	b.n	8012586 <D32_GENERIC+0x5a>
 801269e:	bf00      	nop
 80126a0:	00060003 	.word	0x00060003
 80126a4:	000a000c 	.word	0x000a000c
 80126a8:	000c000a 	.word	0x000c000a
 80126ac:	00030006 	.word	0x00030006
 80126b0:	24000000 	.word	0x24000000

080126b4 <D48_GENERIC>:
 80126b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b8:	6913      	ldr	r3, [r2, #16]
 80126ba:	b089      	sub	sp, #36	@ 0x24
 80126bc:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 80126be:	9301      	str	r3, [sp, #4]
 80126c0:	6953      	ldr	r3, [r2, #20]
 80126c2:	9104      	str	r1, [sp, #16]
 80126c4:	9302      	str	r3, [sp, #8]
 80126c6:	6993      	ldr	r3, [r2, #24]
 80126c8:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80126cc:	9307      	str	r3, [sp, #28]
 80126ce:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 80126d2:	9100      	str	r1, [sp, #0]
 80126d4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80126d6:	9103      	str	r1, [sp, #12]
 80126d8:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 80126da:	2c00      	cmp	r4, #0
 80126dc:	f000 80be 	beq.w	801285c <D48_GENERIC+0x1a8>
 80126e0:	f001 0420 	and.w	r4, r1, #32
 80126e4:	f001 0110 	and.w	r1, r1, #16
 80126e8:	f04f 0e00 	mov.w	lr, #0
 80126ec:	9105      	str	r1, [sp, #20]
 80126ee:	9406      	str	r4, [sp, #24]
 80126f0:	4962      	ldr	r1, [pc, #392]	@ (801287c <D48_GENERIC+0x1c8>)
 80126f2:	e0a0      	b.n	8012836 <D48_GENERIC+0x182>
 80126f4:	eb00 0608 	add.w	r6, r0, r8
 80126f8:	f810 a008 	ldrb.w	sl, [r0, r8]
 80126fc:	f810 9005 	ldrb.w	r9, [r0, r5]
 8012700:	5df4      	ldrb	r4, [r6, r7]
 8012702:	443e      	add	r6, r7
 8012704:	f890 b000 	ldrb.w	fp, [r0]
 8012708:	0420      	lsls	r0, r4, #16
 801270a:	eb06 0408 	add.w	r4, r6, r8
 801270e:	f816 6008 	ldrb.w	r6, [r6, r8]
 8012712:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 8012716:	f814 8007 	ldrb.w	r8, [r4, r7]
 801271a:	4427      	add	r7, r4
 801271c:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 8012720:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 8012724:	eb0a 040b 	add.w	r4, sl, fp
 8012728:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 801272c:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8012730:	b2f7      	uxtb	r7, r6
 8012732:	b2e6      	uxtb	r6, r4
 8012734:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8012738:	f3c4 4907 	ubfx	r9, r4, #16, #8
 801273c:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8012740:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8012744:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8012748:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 801274c:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 8012750:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 8012754:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8012758:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 801275c:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 8012760:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8012764:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8012768:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801276c:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8012770:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8012774:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8012778:	9d00      	ldr	r5, [sp, #0]
 801277a:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 801277e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8012782:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8012786:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801278a:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 801278e:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8012792:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8012796:	4c3a      	ldr	r4, [pc, #232]	@ (8012880 <D48_GENERIC+0x1cc>)
 8012798:	fb26 5a04 	smlad	sl, r6, r4, r5
 801279c:	4c39      	ldr	r4, [pc, #228]	@ (8012884 <D48_GENERIC+0x1d0>)
 801279e:	fb29 aa04 	smlad	sl, r9, r4, sl
 80127a2:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 80127a6:	fb27 aa04 	smlad	sl, r7, r4, sl
 80127aa:	4c37      	ldr	r4, [pc, #220]	@ (8012888 <D48_GENERIC+0x1d4>)
 80127ac:	fb26 3304 	smlad	r3, r6, r4, r3
 80127b0:	f04f 141b 	mov.w	r4, #1769499	@ 0x1b001b
 80127b4:	fb29 3304 	smlad	r3, r9, r4, r3
 80127b8:	4c34      	ldr	r4, [pc, #208]	@ (801288c <D48_GENERIC+0x1d8>)
 80127ba:	fb27 3304 	smlad	r3, r7, r4, r3
 80127be:	2501      	movs	r5, #1
 80127c0:	9300      	str	r3, [sp, #0]
 80127c2:	fb26 f605 	smuad	r6, r6, r5
 80127c6:	4b32      	ldr	r3, [pc, #200]	@ (8012890 <D48_GENERIC+0x1dc>)
 80127c8:	fb29 6903 	smlad	r9, r9, r3, r6
 80127cc:	4b31      	ldr	r3, [pc, #196]	@ (8012894 <D48_GENERIC+0x1e0>)
 80127ce:	fb27 9303 	smlad	r3, r7, r3, r9
 80127d2:	9c05      	ldr	r4, [sp, #20]
 80127d4:	eb0e 0805 	add.w	r8, lr, r5
 80127d8:	f5aa 4a58 	sub.w	sl, sl, #55296	@ 0xd800
 80127dc:	b19c      	cbz	r4, 8012806 <D48_GENERIC+0x152>
 80127de:	9c01      	ldr	r4, [sp, #4]
 80127e0:	9d02      	ldr	r5, [sp, #8]
 80127e2:	4454      	add	r4, sl
 80127e4:	f8d2 9020 	ldr.w	r9, [r2, #32]
 80127e8:	f8cd a008 	str.w	sl, [sp, #8]
 80127ec:	1b64      	subs	r4, r4, r5
 80127ee:	fba4 ab09 	umull	sl, fp, r4, r9
 80127f2:	17e7      	asrs	r7, r4, #31
 80127f4:	f11a 4400 	adds.w	r4, sl, #2147483648	@ 0x80000000
 80127f8:	fb09 bb07 	mla	fp, r9, r7, fp
 80127fc:	f14b 0500 	adc.w	r5, fp, #0
 8012800:	006c      	lsls	r4, r5, #1
 8012802:	46a2      	mov	sl, r4
 8012804:	9401      	str	r4, [sp, #4]
 8012806:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8012808:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 801280c:	9d03      	ldr	r5, [sp, #12]
 801280e:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8012812:	fb0e f606 	mul.w	r6, lr, r6
 8012816:	fa1f fe88 	uxth.w	lr, r8
 801281a:	f04f 0800 	mov.w	r8, #0
 801281e:	fbc5 780a 	smlal	r7, r8, r5, sl
 8012822:	4645      	mov	r5, r8
 8012824:	10ac      	asrs	r4, r5, #2
 8012826:	9d04      	ldr	r5, [sp, #16]
 8012828:	f304 040f 	ssat	r4, #16, r4
 801282c:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8012830:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8012832:	4574      	cmp	r4, lr
 8012834:	d912      	bls.n	801285c <D48_GENERIC+0x1a8>
 8012836:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8012838:	b2e5      	uxtb	r5, r4
 801283a:	2c01      	cmp	r4, #1
 801283c:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8012840:	f1c5 0700 	rsb	r7, r5, #0
 8012844:	f47f af56 	bne.w	80126f4 <D48_GENERIC+0x40>
 8012848:	9d06      	ldr	r5, [sp, #24]
 801284a:	e9d0 4600 	ldrd	r4, r6, [r0]
 801284e:	3006      	adds	r0, #6
 8012850:	2d00      	cmp	r5, #0
 8012852:	f43f af6b 	beq.w	801272c <D48_GENERIC+0x78>
 8012856:	ba64      	rev16	r4, r4
 8012858:	ba76      	rev16	r6, r6
 801285a:	e767      	b.n	801272c <D48_GENERIC+0x78>
 801285c:	6093      	str	r3, [r2, #8]
 801285e:	2000      	movs	r0, #0
 8012860:	9b00      	ldr	r3, [sp, #0]
 8012862:	f8c2 c01c 	str.w	ip, [r2, #28]
 8012866:	60d3      	str	r3, [r2, #12]
 8012868:	9b01      	ldr	r3, [sp, #4]
 801286a:	6113      	str	r3, [r2, #16]
 801286c:	9b02      	ldr	r3, [sp, #8]
 801286e:	6153      	str	r3, [r2, #20]
 8012870:	9b07      	ldr	r3, [sp, #28]
 8012872:	6193      	str	r3, [r2, #24]
 8012874:	b009      	add	sp, #36	@ 0x24
 8012876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801287a:	bf00      	nop
 801287c:	24000000 	.word	0x24000000
 8012880:	000f000a 	.word	0x000f000a
 8012884:	00060003 	.word	0x00060003
 8012888:	00150019 	.word	0x00150019
 801288c:	00190015 	.word	0x00190015
 8012890:	00030006 	.word	0x00030006
 8012894:	000a000f 	.word	0x000a000f

08012898 <D64_GENERIC>:
 8012898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801289c:	6913      	ldr	r3, [r2, #16]
 801289e:	b089      	sub	sp, #36	@ 0x24
 80128a0:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 80128a2:	9300      	str	r3, [sp, #0]
 80128a4:	6953      	ldr	r3, [r2, #20]
 80128a6:	9105      	str	r1, [sp, #20]
 80128a8:	9303      	str	r3, [sp, #12]
 80128aa:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 80128ac:	6993      	ldr	r3, [r2, #24]
 80128ae:	69d4      	ldr	r4, [r2, #28]
 80128b0:	9307      	str	r3, [sp, #28]
 80128b2:	9504      	str	r5, [sp, #16]
 80128b4:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 80128b8:	2900      	cmp	r1, #0
 80128ba:	f000 80e8 	beq.w	8012a8e <D64_GENERIC+0x1f6>
 80128be:	6a11      	ldr	r1, [r2, #32]
 80128c0:	2500      	movs	r5, #0
 80128c2:	46b3      	mov	fp, r6
 80128c4:	9302      	str	r3, [sp, #8]
 80128c6:	9106      	str	r1, [sp, #24]
 80128c8:	4978      	ldr	r1, [pc, #480]	@ (8012aac <D64_GENERIC+0x214>)
 80128ca:	e0cc      	b.n	8012a66 <D64_GENERIC+0x1ce>
 80128cc:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 80128d0:	f1ce 0c00 	rsb	ip, lr, #0
 80128d4:	f890 9000 	ldrb.w	r9, [r0]
 80128d8:	eb00 0708 	add.w	r7, r0, r8
 80128dc:	f810 6008 	ldrb.w	r6, [r0, r8]
 80128e0:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 80128e4:	f817 000c 	ldrb.w	r0, [r7, ip]
 80128e8:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 80128ec:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 80128f0:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 80128f4:	ea4f 4800 	mov.w	r8, r0, lsl #16
 80128f8:	f817 000c 	ldrb.w	r0, [r7, ip]
 80128fc:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 8012900:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 8012904:	0400      	lsls	r0, r0, #16
 8012906:	4467      	add	r7, ip
 8012908:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 801290c:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8012910:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 8012914:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8012918:	444e      	add	r6, r9
 801291a:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 801291e:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 8012922:	44c2      	add	sl, r8
 8012924:	b2f7      	uxtb	r7, r6
 8012926:	f3c6 2807 	ubfx	r8, r6, #8, #8
 801292a:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801292e:	0e36      	lsrs	r6, r6, #24
 8012930:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8012934:	fa5f fc8a 	uxtb.w	ip, sl
 8012938:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 801293c:	f3ca 2907 	ubfx	r9, sl, #8, #8
 8012940:	443c      	add	r4, r7
 8012942:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 8012946:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801294a:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 801294e:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8012952:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8012956:	4b56      	ldr	r3, [pc, #344]	@ (8012ab0 <D64_GENERIC+0x218>)
 8012958:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 801295c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8012960:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 8012964:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 8012968:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801296c:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8012970:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8012974:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8012978:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801297c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8012980:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8012984:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 8012988:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801298c:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8012990:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8012994:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8012998:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801299c:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 80129a0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80129a4:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 80129a8:	f3c9 0709 	ubfx	r7, r9, #0, #10
 80129ac:	ea4f 2499 	mov.w	r4, r9, lsr #10
 80129b0:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 80129b4:	fb28 b903 	smlad	r9, r8, r3, fp
 80129b8:	4b3e      	ldr	r3, [pc, #248]	@ (8012ab4 <D64_GENERIC+0x21c>)
 80129ba:	fb26 9903 	smlad	r9, r6, r3, r9
 80129be:	4b3e      	ldr	r3, [pc, #248]	@ (8012ab8 <D64_GENERIC+0x220>)
 80129c0:	fb2c 9703 	smlad	r7, ip, r3, r9
 80129c4:	f44f 3980 	mov.w	r9, #65536	@ 0x10000
 80129c8:	fb2a 7909 	smlad	r9, sl, r9, r7
 80129cc:	4f3b      	ldr	r7, [pc, #236]	@ (8012abc <D64_GENERIC+0x224>)
 80129ce:	9b02      	ldr	r3, [sp, #8]
 80129d0:	fb28 3307 	smlad	r3, r8, r7, r3
 80129d4:	fb2a 3317 	smladx	r3, sl, r7, r3
 80129d8:	4f39      	ldr	r7, [pc, #228]	@ (8012ac0 <D64_GENERIC+0x228>)
 80129da:	fb26 3307 	smlad	r3, r6, r7, r3
 80129de:	fb2c 3b17 	smladx	fp, ip, r7, r3
 80129e2:	f04f 0e01 	mov.w	lr, #1
 80129e6:	fb28 f80e 	smuad	r8, r8, lr
 80129ea:	4b36      	ldr	r3, [pc, #216]	@ (8012ac4 <D64_GENERIC+0x22c>)
 80129ec:	fb26 8603 	smlad	r6, r6, r3, r8
 80129f0:	4b35      	ldr	r3, [pc, #212]	@ (8012ac8 <D64_GENERIC+0x230>)
 80129f2:	fb2c 6c03 	smlad	ip, ip, r3, r6
 80129f6:	4b35      	ldr	r3, [pc, #212]	@ (8012acc <D64_GENERIC+0x234>)
 80129f8:	fb2a c303 	smlad	r3, sl, r3, ip
 80129fc:	9f06      	ldr	r7, [sp, #24]
 80129fe:	f5a9 3900 	sub.w	r9, r9, #131072	@ 0x20000
 8012a02:	9302      	str	r3, [sp, #8]
 8012a04:	b1cf      	cbz	r7, 8012a3a <D64_GENERIC+0x1a2>
 8012a06:	9b00      	ldr	r3, [sp, #0]
 8012a08:	444b      	add	r3, r9
 8012a0a:	461e      	mov	r6, r3
 8012a0c:	9b03      	ldr	r3, [sp, #12]
 8012a0e:	f8cd 900c 	str.w	r9, [sp, #12]
 8012a12:	1af6      	subs	r6, r6, r3
 8012a14:	46b0      	mov	r8, r6
 8012a16:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8012a1a:	e9cd 8900 	strd	r8, r9, [sp]
 8012a1e:	fba6 8907 	umull	r8, r9, r6, r7
 8012a22:	9e01      	ldr	r6, [sp, #4]
 8012a24:	fb07 9306 	mla	r3, r7, r6, r9
 8012a28:	4646      	mov	r6, r8
 8012a2a:	f116 4600 	adds.w	r6, r6, #2147483648	@ 0x80000000
 8012a2e:	f143 0700 	adc.w	r7, r3, #0
 8012a32:	fa07 f30e 	lsl.w	r3, r7, lr
 8012a36:	4699      	mov	r9, r3
 8012a38:	9300      	str	r3, [sp, #0]
 8012a3a:	f8b2 c028 	ldrh.w	ip, [r2, #40]	@ 0x28
 8012a3e:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8012a42:	9b04      	ldr	r3, [sp, #16]
 8012a44:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8012a48:	2700      	movs	r7, #0
 8012a4a:	fb05 fc0c 	mul.w	ip, r5, ip
 8012a4e:	3501      	adds	r5, #1
 8012a50:	fbc3 6709 	smlal	r6, r7, r3, r9
 8012a54:	9b05      	ldr	r3, [sp, #20]
 8012a56:	10be      	asrs	r6, r7, #2
 8012a58:	f306 060f 	ssat	r6, #16, r6
 8012a5c:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 8012a60:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 8012a62:	42ae      	cmp	r6, r5
 8012a64:	dd11      	ble.n	8012a8a <D64_GENERIC+0x1f2>
 8012a66:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	@ 0x2a
 8012a6a:	f1be 0f01 	cmp.w	lr, #1
 8012a6e:	f47f af2d 	bne.w	80128cc <D64_GENERIC+0x34>
 8012a72:	6b57      	ldr	r7, [r2, #52]	@ 0x34
 8012a74:	f100 0c08 	add.w	ip, r0, #8
 8012a78:	06bb      	lsls	r3, r7, #26
 8012a7a:	e9d0 6a00 	ldrd	r6, sl, [r0]
 8012a7e:	d513      	bpl.n	8012aa8 <D64_GENERIC+0x210>
 8012a80:	ba76      	rev16	r6, r6
 8012a82:	fa9a fa9a 	rev16.w	sl, sl
 8012a86:	4660      	mov	r0, ip
 8012a88:	e74c      	b.n	8012924 <D64_GENERIC+0x8c>
 8012a8a:	465e      	mov	r6, fp
 8012a8c:	9b02      	ldr	r3, [sp, #8]
 8012a8e:	6093      	str	r3, [r2, #8]
 8012a90:	2000      	movs	r0, #0
 8012a92:	9b00      	ldr	r3, [sp, #0]
 8012a94:	60d6      	str	r6, [r2, #12]
 8012a96:	6113      	str	r3, [r2, #16]
 8012a98:	9b03      	ldr	r3, [sp, #12]
 8012a9a:	61d4      	str	r4, [r2, #28]
 8012a9c:	6153      	str	r3, [r2, #20]
 8012a9e:	9b07      	ldr	r3, [sp, #28]
 8012aa0:	6193      	str	r3, [r2, #24]
 8012aa2:	b009      	add	sp, #36	@ 0x24
 8012aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aa8:	4660      	mov	r0, ip
 8012aaa:	e73b      	b.n	8012924 <D64_GENERIC+0x8c>
 8012aac:	24000000 	.word	0x24000000
 8012ab0:	001c0015 	.word	0x001c0015
 8012ab4:	000f000a 	.word	0x000f000a
 8012ab8:	00060003 	.word	0x00060003
 8012abc:	0024002a 	.word	0x0024002a
 8012ac0:	002e0030 	.word	0x002e0030
 8012ac4:	00030006 	.word	0x00030006
 8012ac8:	000a000f 	.word	0x000a000f
 8012acc:	0015001c 	.word	0x0015001c

08012ad0 <D80_GENERIC>:
 8012ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ad4:	b08b      	sub	sp, #44	@ 0x2c
 8012ad6:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8012ad8:	9107      	str	r1, [sp, #28]
 8012ada:	6911      	ldr	r1, [r2, #16]
 8012adc:	9104      	str	r1, [sp, #16]
 8012ade:	6951      	ldr	r1, [r2, #20]
 8012ae0:	9105      	str	r1, [sp, #20]
 8012ae2:	6991      	ldr	r1, [r2, #24]
 8012ae4:	9109      	str	r1, [sp, #36]	@ 0x24
 8012ae6:	69d1      	ldr	r1, [r2, #28]
 8012ae8:	9102      	str	r1, [sp, #8]
 8012aea:	6891      	ldr	r1, [r2, #8]
 8012aec:	9103      	str	r1, [sp, #12]
 8012aee:	68d1      	ldr	r1, [r2, #12]
 8012af0:	9101      	str	r1, [sp, #4]
 8012af2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8012af4:	9106      	str	r1, [sp, #24]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	f000 810b 	beq.w	8012d12 <D80_GENERIC+0x242>
 8012afc:	6a13      	ldr	r3, [r2, #32]
 8012afe:	f04f 0800 	mov.w	r8, #0
 8012b02:	f8df c260 	ldr.w	ip, [pc, #608]	@ 8012d64 <D80_GENERIC+0x294>
 8012b06:	9308      	str	r3, [sp, #32]
 8012b08:	9200      	str	r2, [sp, #0]
 8012b0a:	e0ee      	b.n	8012cea <D80_GENERIC+0x21a>
 8012b0c:	b2db      	uxtb	r3, r3
 8012b0e:	f890 e000 	ldrb.w	lr, [r0]
 8012b12:	b219      	sxth	r1, r3
 8012b14:	425c      	negs	r4, r3
 8012b16:	f810 9003 	ldrb.w	r9, [r0, r3]
 8012b1a:	004e      	lsls	r6, r1, #1
 8012b1c:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8012b20:	4431      	add	r1, r6
 8012b22:	1843      	adds	r3, r0, r1
 8012b24:	f810 b001 	ldrb.w	fp, [r0, r1]
 8012b28:	1919      	adds	r1, r3, r4
 8012b2a:	5d1b      	ldrb	r3, [r3, r4]
 8012b2c:	1948      	adds	r0, r1, r5
 8012b2e:	f811 a005 	ldrb.w	sl, [r1, r5]
 8012b32:	041b      	lsls	r3, r3, #16
 8012b34:	1907      	adds	r7, r0, r4
 8012b36:	5d01      	ldrb	r1, [r0, r4]
 8012b38:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8012b3c:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8012b40:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8012b44:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 8012b48:	0409      	lsls	r1, r1, #16
 8012b4a:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 8012b4e:	eb0b 0905 	add.w	r9, fp, r5
 8012b52:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8012b56:	f81b 5005 	ldrb.w	r5, [fp, r5]
 8012b5a:	eb09 0b04 	add.w	fp, r9, r4
 8012b5e:	f819 4004 	ldrb.w	r4, [r9, r4]
 8012b62:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8012b66:	4473      	add	r3, lr
 8012b68:	eb0b 0006 	add.w	r0, fp, r6
 8012b6c:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8012b70:	4439      	add	r1, r7
 8012b72:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8012b76:	b2df      	uxtb	r7, r3
 8012b78:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8012b7c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8012b80:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8012b84:	fa5f fa81 	uxtb.w	sl, r1
 8012b88:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8012b8c:	9c02      	ldr	r4, [sp, #8]
 8012b8e:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8012b92:	441c      	add	r4, r3
 8012b94:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 8012b98:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 8012b9c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8012ba0:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8012ba4:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8012ba8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8012bac:	b2ed      	uxtb	r5, r5
 8012bae:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8012bb2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8012bb6:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8012bba:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8012bbe:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8012bc2:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8012bc6:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8012bca:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8012bce:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 8012bd2:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8012bd6:	0e09      	lsrs	r1, r1, #24
 8012bd8:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8012bdc:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8012be0:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8012be4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8012be8:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8012bec:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8012bf0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8012bf4:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8012bf8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8012bfc:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8012c00:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8012c04:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8012c08:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8012c0c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8012c10:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8012c14:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8012c18:	ea4f 229a 	mov.w	r2, sl, lsr #10
 8012c1c:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8012c20:	9202      	str	r2, [sp, #8]
 8012c22:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8012c26:	4a43      	ldr	r2, [pc, #268]	@ (8012d34 <D80_GENERIC+0x264>)
 8012c28:	9f01      	ldr	r7, [sp, #4]
 8012c2a:	fb23 7a02 	smlad	sl, r3, r2, r7
 8012c2e:	4a42      	ldr	r2, [pc, #264]	@ (8012d38 <D80_GENERIC+0x268>)
 8012c30:	fb26 aa02 	smlad	sl, r6, r2, sl
 8012c34:	4a41      	ldr	r2, [pc, #260]	@ (8012d3c <D80_GENERIC+0x26c>)
 8012c36:	fb24 aa02 	smlad	sl, r4, r2, sl
 8012c3a:	4a41      	ldr	r2, [pc, #260]	@ (8012d40 <D80_GENERIC+0x270>)
 8012c3c:	fb21 a702 	smlad	r7, r1, r2, sl
 8012c40:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
 8012c44:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8012c48:	4a3e      	ldr	r2, [pc, #248]	@ (8012d44 <D80_GENERIC+0x274>)
 8012c4a:	9f03      	ldr	r7, [sp, #12]
 8012c4c:	fb23 7e02 	smlad	lr, r3, r2, r7
 8012c50:	4a3d      	ldr	r2, [pc, #244]	@ (8012d48 <D80_GENERIC+0x278>)
 8012c52:	fb26 ee02 	smlad	lr, r6, r2, lr
 8012c56:	f04f 174b 	mov.w	r7, #4915275	@ 0x4b004b
 8012c5a:	fb24 e707 	smlad	r7, r4, r7, lr
 8012c5e:	4a3b      	ldr	r2, [pc, #236]	@ (8012d4c <D80_GENERIC+0x27c>)
 8012c60:	fb21 7702 	smlad	r7, r1, r2, r7
 8012c64:	4a3a      	ldr	r2, [pc, #232]	@ (8012d50 <D80_GENERIC+0x280>)
 8012c66:	fb25 7202 	smlad	r2, r5, r2, r7
 8012c6a:	f04f 0901 	mov.w	r9, #1
 8012c6e:	9201      	str	r2, [sp, #4]
 8012c70:	fb23 f909 	smuad	r9, r3, r9
 8012c74:	4b37      	ldr	r3, [pc, #220]	@ (8012d54 <D80_GENERIC+0x284>)
 8012c76:	fb26 9603 	smlad	r6, r6, r3, r9
 8012c7a:	4f37      	ldr	r7, [pc, #220]	@ (8012d58 <D80_GENERIC+0x288>)
 8012c7c:	fb24 6407 	smlad	r4, r4, r7, r6
 8012c80:	4f36      	ldr	r7, [pc, #216]	@ (8012d5c <D80_GENERIC+0x28c>)
 8012c82:	fb21 4707 	smlad	r7, r1, r7, r4
 8012c86:	4936      	ldr	r1, [pc, #216]	@ (8012d60 <D80_GENERIC+0x290>)
 8012c88:	fb25 7301 	smlad	r3, r5, r1, r7
 8012c8c:	9303      	str	r3, [sp, #12]
 8012c8e:	f5aa 3a7a 	sub.w	sl, sl, #256000	@ 0x3e800
 8012c92:	9b08      	ldr	r3, [sp, #32]
 8012c94:	b193      	cbz	r3, 8012cbc <D80_GENERIC+0x1ec>
 8012c96:	9a04      	ldr	r2, [sp, #16]
 8012c98:	4452      	add	r2, sl
 8012c9a:	4614      	mov	r4, r2
 8012c9c:	9a05      	ldr	r2, [sp, #20]
 8012c9e:	f8cd a014 	str.w	sl, [sp, #20]
 8012ca2:	1aa4      	subs	r4, r4, r2
 8012ca4:	fba4 1203 	umull	r1, r2, r4, r3
 8012ca8:	17e7      	asrs	r7, r4, #31
 8012caa:	f111 4400 	adds.w	r4, r1, #2147483648	@ 0x80000000
 8012cae:	fb03 2207 	mla	r2, r3, r7, r2
 8012cb2:	f142 0500 	adc.w	r5, r2, #0
 8012cb6:	006b      	lsls	r3, r5, #1
 8012cb8:	469a      	mov	sl, r3
 8012cba:	9304      	str	r3, [sp, #16]
 8012cbc:	9e00      	ldr	r6, [sp, #0]
 8012cbe:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8012cc2:	9a06      	ldr	r2, [sp, #24]
 8012cc4:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8012cc8:	8d33      	ldrh	r3, [r6, #40]	@ 0x28
 8012cca:	2500      	movs	r5, #0
 8012ccc:	fb08 f303 	mul.w	r3, r8, r3
 8012cd0:	fbc2 450a 	smlal	r4, r5, r2, sl
 8012cd4:	9a07      	ldr	r2, [sp, #28]
 8012cd6:	f108 0801 	add.w	r8, r8, #1
 8012cda:	10a9      	asrs	r1, r5, #2
 8012cdc:	f301 010f 	ssat	r1, #16, r1
 8012ce0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8012ce4:	8cf3      	ldrh	r3, [r6, #38]	@ 0x26
 8012ce6:	4543      	cmp	r3, r8
 8012ce8:	dd12      	ble.n	8012d10 <D80_GENERIC+0x240>
 8012cea:	9b00      	ldr	r3, [sp, #0]
 8012cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012cee:	2b01      	cmp	r3, #1
 8012cf0:	f47f af0c 	bne.w	8012b0c <D80_GENERIC+0x3c>
 8012cf4:	9b00      	ldr	r3, [sp, #0]
 8012cf6:	6885      	ldr	r5, [r0, #8]
 8012cf8:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8012cfa:	06b2      	lsls	r2, r6, #26
 8012cfc:	e9d0 3100 	ldrd	r3, r1, [r0]
 8012d00:	f100 000a 	add.w	r0, r0, #10
 8012d04:	f57f af35 	bpl.w	8012b72 <D80_GENERIC+0xa2>
 8012d08:	ba5b      	rev16	r3, r3
 8012d0a:	ba49      	rev16	r1, r1
 8012d0c:	ba6d      	rev16	r5, r5
 8012d0e:	e730      	b.n	8012b72 <D80_GENERIC+0xa2>
 8012d10:	4632      	mov	r2, r6
 8012d12:	9b03      	ldr	r3, [sp, #12]
 8012d14:	2000      	movs	r0, #0
 8012d16:	6093      	str	r3, [r2, #8]
 8012d18:	9b01      	ldr	r3, [sp, #4]
 8012d1a:	60d3      	str	r3, [r2, #12]
 8012d1c:	9b02      	ldr	r3, [sp, #8]
 8012d1e:	61d3      	str	r3, [r2, #28]
 8012d20:	9b04      	ldr	r3, [sp, #16]
 8012d22:	6113      	str	r3, [r2, #16]
 8012d24:	9b05      	ldr	r3, [sp, #20]
 8012d26:	6153      	str	r3, [r2, #20]
 8012d28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d2a:	6193      	str	r3, [r2, #24]
 8012d2c:	b00b      	add	sp, #44	@ 0x2c
 8012d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d32:	bf00      	nop
 8012d34:	002d0024 	.word	0x002d0024
 8012d38:	001c0015 	.word	0x001c0015
 8012d3c:	000f000a 	.word	0x000f000a
 8012d40:	00060003 	.word	0x00060003
 8012d44:	0037003f 	.word	0x0037003f
 8012d48:	00450049 	.word	0x00450049
 8012d4c:	00490045 	.word	0x00490045
 8012d50:	003f0037 	.word	0x003f0037
 8012d54:	00030006 	.word	0x00030006
 8012d58:	000a000f 	.word	0x000a000f
 8012d5c:	0015001c 	.word	0x0015001c
 8012d60:	0024002d 	.word	0x0024002d
 8012d64:	24000000 	.word	0x24000000

08012d68 <D128_GENERIC>:
 8012d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d6c:	b08d      	sub	sp, #52	@ 0x34
 8012d6e:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8012d70:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8012d74:	9109      	str	r1, [sp, #36]	@ 0x24
 8012d76:	6911      	ldr	r1, [r2, #16]
 8012d78:	9201      	str	r2, [sp, #4]
 8012d7a:	9106      	str	r1, [sp, #24]
 8012d7c:	6951      	ldr	r1, [r2, #20]
 8012d7e:	9107      	str	r1, [sp, #28]
 8012d80:	6991      	ldr	r1, [r2, #24]
 8012d82:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012d84:	6891      	ldr	r1, [r2, #8]
 8012d86:	9103      	str	r1, [sp, #12]
 8012d88:	68d1      	ldr	r1, [r2, #12]
 8012d8a:	9102      	str	r1, [sp, #8]
 8012d8c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8012d8e:	9108      	str	r1, [sp, #32]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	f000 8183 	beq.w	801309c <D128_GENERIC+0x334>
 8012d96:	2300      	movs	r3, #0
 8012d98:	6a12      	ldr	r2, [r2, #32]
 8012d9a:	4681      	mov	r9, r0
 8012d9c:	920a      	str	r2, [sp, #40]	@ 0x28
 8012d9e:	e9cd a304 	strd	sl, r3, [sp, #16]
 8012da2:	e165      	b.n	8013070 <D128_GENERIC+0x308>
 8012da4:	b2d2      	uxtb	r2, r2
 8012da6:	f899 b000 	ldrb.w	fp, [r9]
 8012daa:	b213      	sxth	r3, r2
 8012dac:	4255      	negs	r5, r2
 8012dae:	f819 0002 	ldrb.w	r0, [r9, r2]
 8012db2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012db6:	009f      	lsls	r7, r3, #2
 8012db8:	eb09 0402 	add.w	r4, r9, r2
 8012dbc:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8012dc0:	f819 8002 	ldrb.w	r8, [r9, r2]
 8012dc4:	443b      	add	r3, r7
 8012dc6:	1962      	adds	r2, r4, r5
 8012dc8:	5d64      	ldrb	r4, [r4, r5]
 8012dca:	eb02 0c03 	add.w	ip, r2, r3
 8012dce:	0424      	lsls	r4, r4, #16
 8012dd0:	5cd3      	ldrb	r3, [r2, r3]
 8012dd2:	eb0c 0e05 	add.w	lr, ip, r5
 8012dd6:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 8012dda:	f81c 2005 	ldrb.w	r2, [ip, r5]
 8012dde:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 8012de2:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 8012de6:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 8012dea:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8012dee:	eb0c 0e06 	add.w	lr, ip, r6
 8012df2:	f81c a006 	ldrb.w	sl, [ip, r6]
 8012df6:	0412      	lsls	r2, r2, #16
 8012df8:	445c      	add	r4, fp
 8012dfa:	eb0e 0c05 	add.w	ip, lr, r5
 8012dfe:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 8012e02:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8012e06:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 8012e0a:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8012e0e:	041b      	lsls	r3, r3, #16
 8012e10:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8012e14:	eb00 0b06 	add.w	fp, r0, r6
 8012e18:	5d80      	ldrb	r0, [r0, r6]
 8012e1a:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 8012e1e:	f81b 6005 	ldrb.w	r6, [fp, r5]
 8012e22:	eb0b 0a05 	add.w	sl, fp, r5
 8012e26:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 8012e2a:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 8012e2e:	0436      	lsls	r6, r6, #16
 8012e30:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8012e34:	4442      	add	r2, r8
 8012e36:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 8012e3a:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 8012e3e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8012e42:	44b9      	add	r9, r7
 8012e44:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8012e48:	4463      	add	r3, ip
 8012e4a:	eb06 0508 	add.w	r5, r6, r8
 8012e4e:	b2e7      	uxtb	r7, r4
 8012e50:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8012e54:	499b      	ldr	r1, [pc, #620]	@ (80130c4 <D128_GENERIC+0x35c>)
 8012e56:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8012e5a:	0e24      	lsrs	r4, r4, #24
 8012e5c:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 8012e60:	b2d7      	uxtb	r7, r2
 8012e62:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 8012e66:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8012e6a:	9904      	ldr	r1, [sp, #16]
 8012e6c:	4461      	add	r1, ip
 8012e6e:	468c      	mov	ip, r1
 8012e70:	4994      	ldr	r1, [pc, #592]	@ (80130c4 <D128_GENERIC+0x35c>)
 8012e72:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 8012e76:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8012e7a:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 8012e7e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8012e82:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 8012e86:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 8012e8a:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 8012e8e:	0e12      	lsrs	r2, r2, #24
 8012e90:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 8012e94:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8012e98:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8012e9c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8012ea0:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 8012ea4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8012ea8:	b2da      	uxtb	r2, r3
 8012eaa:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8012eae:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8012eb2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8012eb6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8012eba:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 8012ebe:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8012ec2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8012ec6:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 8012eca:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8012ece:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 8012ed2:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8012ed6:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8012eda:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8012ede:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8012ee2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8012ee6:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8012eea:	0e1b      	lsrs	r3, r3, #24
 8012eec:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 8012ef0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8012ef4:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8012ef8:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 8012efc:	b2eb      	uxtb	r3, r5
 8012efe:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8012f02:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 8012f06:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8012f0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012f0e:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8012f12:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 8012f16:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8012f1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012f1e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8012f22:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 8012f26:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 8012f2a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8012f2e:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8012f32:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8012f36:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8012f3a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8012f3e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8012f42:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 8012f46:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8012f4a:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8012f4e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8012f52:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 8012f56:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8012f5a:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 8012f5e:	ea4f 219e 	mov.w	r1, lr, lsr #10
 8012f62:	f3ce 0209 	ubfx	r2, lr, #0, #10
 8012f66:	9104      	str	r1, [sp, #16]
 8012f68:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8012f6c:	9902      	ldr	r1, [sp, #8]
 8012f6e:	4a56      	ldr	r2, [pc, #344]	@ (80130c8 <D128_GENERIC+0x360>)
 8012f70:	fb2b 1202 	smlad	r2, fp, r2, r1
 8012f74:	4955      	ldr	r1, [pc, #340]	@ (80130cc <D128_GENERIC+0x364>)
 8012f76:	fb28 2201 	smlad	r2, r8, r1, r2
 8012f7a:	4955      	ldr	r1, [pc, #340]	@ (80130d0 <D128_GENERIC+0x368>)
 8012f7c:	fb27 2201 	smlad	r2, r7, r1, r2
 8012f80:	4954      	ldr	r1, [pc, #336]	@ (80130d4 <D128_GENERIC+0x36c>)
 8012f82:	fb26 2201 	smlad	r2, r6, r1, r2
 8012f86:	4954      	ldr	r1, [pc, #336]	@ (80130d8 <D128_GENERIC+0x370>)
 8012f88:	fb24 2201 	smlad	r2, r4, r1, r2
 8012f8c:	4953      	ldr	r1, [pc, #332]	@ (80130dc <D128_GENERIC+0x374>)
 8012f8e:	fb20 2201 	smlad	r2, r0, r1, r2
 8012f92:	4953      	ldr	r1, [pc, #332]	@ (80130e0 <D128_GENERIC+0x378>)
 8012f94:	fb23 2201 	smlad	r2, r3, r1, r2
 8012f98:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 8012f9c:	fb25 2a0c 	smlad	sl, r5, ip, r2
 8012fa0:	4950      	ldr	r1, [pc, #320]	@ (80130e4 <D128_GENERIC+0x37c>)
 8012fa2:	9a03      	ldr	r2, [sp, #12]
 8012fa4:	fb2b 2c01 	smlad	ip, fp, r1, r2
 8012fa8:	4a4f      	ldr	r2, [pc, #316]	@ (80130e8 <D128_GENERIC+0x380>)
 8012faa:	fb28 ce02 	smlad	lr, r8, r2, ip
 8012fae:	f8df c150 	ldr.w	ip, [pc, #336]	@ 8013100 <D128_GENERIC+0x398>
 8012fb2:	fb27 ec0c 	smlad	ip, r7, ip, lr
 8012fb6:	f8df e14c 	ldr.w	lr, [pc, #332]	@ 8013104 <D128_GENERIC+0x39c>
 8012fba:	fb26 cc0e 	smlad	ip, r6, lr, ip
 8012fbe:	f8df e148 	ldr.w	lr, [pc, #328]	@ 8013108 <D128_GENERIC+0x3a0>
 8012fc2:	fb24 ce0e 	smlad	lr, r4, lr, ip
 8012fc6:	f8df c144 	ldr.w	ip, [pc, #324]	@ 801310c <D128_GENERIC+0x3a4>
 8012fca:	fb20 ee0c 	smlad	lr, r0, ip, lr
 8012fce:	f8df c140 	ldr.w	ip, [pc, #320]	@ 8013110 <D128_GENERIC+0x3a8>
 8012fd2:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8012fd6:	f8df e13c 	ldr.w	lr, [pc, #316]	@ 8013114 <D128_GENERIC+0x3ac>
 8012fda:	fb25 c20e 	smlad	r2, r5, lr, ip
 8012fde:	f04f 0c01 	mov.w	ip, #1
 8012fe2:	9202      	str	r2, [sp, #8]
 8012fe4:	fb2b fb0c 	smuad	fp, fp, ip
 8012fe8:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 8013118 <D128_GENERIC+0x3b0>
 8012fec:	fb28 bb0c 	smlad	fp, r8, ip, fp
 8012ff0:	f8df c128 	ldr.w	ip, [pc, #296]	@ 801311c <D128_GENERIC+0x3b4>
 8012ff4:	fb27 bb0c 	smlad	fp, r7, ip, fp
 8012ff8:	4f3c      	ldr	r7, [pc, #240]	@ (80130ec <D128_GENERIC+0x384>)
 8012ffa:	fb26 bb07 	smlad	fp, r6, r7, fp
 8012ffe:	4f3c      	ldr	r7, [pc, #240]	@ (80130f0 <D128_GENERIC+0x388>)
 8013000:	fb24 bb07 	smlad	fp, r4, r7, fp
 8013004:	4f3b      	ldr	r7, [pc, #236]	@ (80130f4 <D128_GENERIC+0x38c>)
 8013006:	fb20 bb07 	smlad	fp, r0, r7, fp
 801300a:	4f3b      	ldr	r7, [pc, #236]	@ (80130f8 <D128_GENERIC+0x390>)
 801300c:	fb23 bb07 	smlad	fp, r3, r7, fp
 8013010:	4b3a      	ldr	r3, [pc, #232]	@ (80130fc <D128_GENERIC+0x394>)
 8013012:	fb25 b303 	smlad	r3, r5, r3, fp
 8013016:	9303      	str	r3, [sp, #12]
 8013018:	f5aa 1480 	sub.w	r4, sl, #1048576	@ 0x100000
 801301c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801301e:	b183      	cbz	r3, 8013042 <D128_GENERIC+0x2da>
 8013020:	9a06      	ldr	r2, [sp, #24]
 8013022:	9907      	ldr	r1, [sp, #28]
 8013024:	4422      	add	r2, r4
 8013026:	9407      	str	r4, [sp, #28]
 8013028:	1a52      	subs	r2, r2, r1
 801302a:	fba2 0103 	umull	r0, r1, r2, r3
 801302e:	17d5      	asrs	r5, r2, #31
 8013030:	f110 4200 	adds.w	r2, r0, #2147483648	@ 0x80000000
 8013034:	fb03 1105 	mla	r1, r3, r5, r1
 8013038:	f141 0300 	adc.w	r3, r1, #0
 801303c:	005b      	lsls	r3, r3, #1
 801303e:	461c      	mov	r4, r3
 8013040:	9306      	str	r3, [sp, #24]
 8013042:	9d01      	ldr	r5, [sp, #4]
 8013044:	01e4      	lsls	r4, r4, #7
 8013046:	9e05      	ldr	r6, [sp, #20]
 8013048:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801304c:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 801304e:	2300      	movs	r3, #0
 8013050:	9908      	ldr	r1, [sp, #32]
 8013052:	fb06 f000 	mul.w	r0, r6, r0
 8013056:	3601      	adds	r6, #1
 8013058:	fbc1 2304 	smlal	r2, r3, r1, r4
 801305c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801305e:	109b      	asrs	r3, r3, #2
 8013060:	9605      	str	r6, [sp, #20]
 8013062:	f303 030f 	ssat	r3, #16, r3
 8013066:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 801306a:	8ceb      	ldrh	r3, [r5, #38]	@ 0x26
 801306c:	42b3      	cmp	r3, r6
 801306e:	dd13      	ble.n	8013098 <D128_GENERIC+0x330>
 8013070:	9b01      	ldr	r3, [sp, #4]
 8013072:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013074:	2a01      	cmp	r2, #1
 8013076:	f47f ae95 	bne.w	8012da4 <D128_GENERIC+0x3c>
 801307a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801307c:	f109 0610 	add.w	r6, r9, #16
 8013080:	0681      	lsls	r1, r0, #26
 8013082:	e9d9 4200 	ldrd	r4, r2, [r9]
 8013086:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 801308a:	d518      	bpl.n	80130be <D128_GENERIC+0x356>
 801308c:	ba64      	rev16	r4, r4
 801308e:	ba52      	rev16	r2, r2
 8013090:	ba5b      	rev16	r3, r3
 8013092:	ba6d      	rev16	r5, r5
 8013094:	46b1      	mov	r9, r6
 8013096:	e6da      	b.n	8012e4e <D128_GENERIC+0xe6>
 8013098:	f8dd a010 	ldr.w	sl, [sp, #16]
 801309c:	9b01      	ldr	r3, [sp, #4]
 801309e:	2000      	movs	r0, #0
 80130a0:	9903      	ldr	r1, [sp, #12]
 80130a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80130a4:	6099      	str	r1, [r3, #8]
 80130a6:	9902      	ldr	r1, [sp, #8]
 80130a8:	f8c3 a01c 	str.w	sl, [r3, #28]
 80130ac:	60d9      	str	r1, [r3, #12]
 80130ae:	9906      	ldr	r1, [sp, #24]
 80130b0:	619a      	str	r2, [r3, #24]
 80130b2:	6119      	str	r1, [r3, #16]
 80130b4:	9907      	ldr	r1, [sp, #28]
 80130b6:	6159      	str	r1, [r3, #20]
 80130b8:	b00d      	add	sp, #52	@ 0x34
 80130ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130be:	46b1      	mov	r9, r6
 80130c0:	e6c5      	b.n	8012e4e <D128_GENERIC+0xe6>
 80130c2:	bf00      	nop
 80130c4:	24000000 	.word	0x24000000
 80130c8:	00780069 	.word	0x00780069
 80130cc:	005b004e 	.word	0x005b004e
 80130d0:	00420037 	.word	0x00420037
 80130d4:	002d0024 	.word	0x002d0024
 80130d8:	001c0015 	.word	0x001c0015
 80130dc:	000f000a 	.word	0x000f000a
 80130e0:	00060003 	.word	0x00060003
 80130e4:	00880096 	.word	0x00880096
 80130e8:	00a200ac 	.word	0x00a200ac
 80130ec:	0015001c 	.word	0x0015001c
 80130f0:	0024002d 	.word	0x0024002d
 80130f4:	00370042 	.word	0x00370042
 80130f8:	004e005b 	.word	0x004e005b
 80130fc:	00690078 	.word	0x00690078
 8013100:	00b400ba 	.word	0x00b400ba
 8013104:	00be00c0 	.word	0x00be00c0
 8013108:	00c000be 	.word	0x00c000be
 801310c:	00ba00b4 	.word	0x00ba00b4
 8013110:	00ac00a2 	.word	0x00ac00a2
 8013114:	00960088 	.word	0x00960088
 8013118:	00030006 	.word	0x00030006
 801311c:	000a000f 	.word	0x000a000f

08013120 <D16_1CH_HTONS_VOL_HP>:
 8013120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013124:	6993      	ldr	r3, [r2, #24]
 8013126:	b087      	sub	sp, #28
 8013128:	4682      	mov	sl, r0
 801312a:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 801312c:	9304      	str	r3, [sp, #16]
 801312e:	f8d2 b030 	ldr.w	fp, [r2, #48]	@ 0x30
 8013132:	69d3      	ldr	r3, [r2, #28]
 8013134:	f8d2 e020 	ldr.w	lr, [r2, #32]
 8013138:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 801313c:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 8013140:	9403      	str	r4, [sp, #12]
 8013142:	2800      	cmp	r0, #0
 8013144:	d054      	beq.n	80131f0 <D16_1CH_HTONS_VOL_HP+0xd0>
 8013146:	f1a1 0902 	sub.w	r9, r1, #2
 801314a:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 801314e:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 80131fc <D16_1CH_HTONS_VOL_HP+0xdc>
 8013152:	4650      	mov	r0, sl
 8013154:	9101      	str	r1, [sp, #4]
 8013156:	4619      	mov	r1, r3
 8013158:	f8cd b008 	str.w	fp, [sp, #8]
 801315c:	9205      	str	r2, [sp, #20]
 801315e:	f850 3b02 	ldr.w	r3, [r0], #2
 8013162:	ba5b      	rev16	r3, r3
 8013164:	b2dc      	uxtb	r4, r3
 8013166:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801316a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801316e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8013172:	4419      	add	r1, r3
 8013174:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 8013178:	f3c1 0309 	ubfx	r3, r1, #0, #10
 801317c:	f3c4 0209 	ubfx	r2, r4, #0, #10
 8013180:	0aa1      	lsrs	r1, r4, #10
 8013182:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8013186:	4a1b      	ldr	r2, [pc, #108]	@ (80131f4 <D16_1CH_HTONS_VOL_HP+0xd4>)
 8013188:	fb23 5402 	smlad	r4, r3, r2, r5
 801318c:	4a1a      	ldr	r2, [pc, #104]	@ (80131f8 <D16_1CH_HTONS_VOL_HP+0xd8>)
 801318e:	fb23 f502 	smuad	r5, r3, r2
 8013192:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8013196:	f04f 4a00 	mov.w	sl, #2147483648	@ 0x80000000
 801319a:	f04f 0b00 	mov.w	fp, #0
 801319e:	19a2      	adds	r2, r4, r6
 80131a0:	eba2 020c 	sub.w	r2, r2, ip
 80131a4:	46a4      	mov	ip, r4
 80131a6:	17d7      	asrs	r7, r2, #31
 80131a8:	fba2 230e 	umull	r2, r3, r2, lr
 80131ac:	f112 4600 	adds.w	r6, r2, #2147483648	@ 0x80000000
 80131b0:	fb0e 3307 	mla	r3, lr, r7, r3
 80131b4:	f143 0700 	adc.w	r7, r3, #0
 80131b8:	9b02      	ldr	r3, [sp, #8]
 80131ba:	047a      	lsls	r2, r7, #17
 80131bc:	007e      	lsls	r6, r7, #1
 80131be:	fbc3 ab02 	smlal	sl, fp, r3, r2
 80131c2:	ea4f 03ab 	mov.w	r3, fp, asr #2
 80131c6:	f303 030f 	ssat	r3, #16, r3
 80131ca:	f829 3f02 	strh.w	r3, [r9, #2]!
 80131ce:	9b01      	ldr	r3, [sp, #4]
 80131d0:	4298      	cmp	r0, r3
 80131d2:	d1c4      	bne.n	801315e <D16_1CH_HTONS_VOL_HP+0x3e>
 80131d4:	460b      	mov	r3, r1
 80131d6:	9a05      	ldr	r2, [sp, #20]
 80131d8:	2000      	movs	r0, #0
 80131da:	9903      	ldr	r1, [sp, #12]
 80131dc:	61d3      	str	r3, [r2, #28]
 80131de:	9b04      	ldr	r3, [sp, #16]
 80131e0:	6095      	str	r5, [r2, #8]
 80131e2:	60d1      	str	r1, [r2, #12]
 80131e4:	6193      	str	r3, [r2, #24]
 80131e6:	e9c2 6404 	strd	r6, r4, [r2, #16]
 80131ea:	b007      	add	sp, #28
 80131ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131f0:	4664      	mov	r4, ip
 80131f2:	e7f1      	b.n	80131d8 <D16_1CH_HTONS_VOL_HP+0xb8>
 80131f4:	00030001 	.word	0x00030001
 80131f8:	00010003 	.word	0x00010003
 80131fc:	24000000 	.word	0x24000000

08013200 <D24_1CH_HTONS_VOL_HP>:
 8013200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013204:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 8013206:	b089      	sub	sp, #36	@ 0x24
 8013208:	6993      	ldr	r3, [r2, #24]
 801320a:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 801320c:	9604      	str	r6, [sp, #16]
 801320e:	6a16      	ldr	r6, [r2, #32]
 8013210:	9306      	str	r3, [sp, #24]
 8013212:	9505      	str	r5, [sp, #20]
 8013214:	69d3      	ldr	r3, [r2, #28]
 8013216:	9600      	str	r6, [sp, #0]
 8013218:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 801321c:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 8013220:	2d00      	cmp	r5, #0
 8013222:	f000 8083 	beq.w	801332c <D24_1CH_HTONS_VOL_HP+0x12c>
 8013226:	9207      	str	r2, [sp, #28]
 8013228:	2600      	movs	r6, #0
 801322a:	4622      	mov	r2, r4
 801322c:	f1a1 0b02 	sub.w	fp, r1, #2
 8013230:	4f3f      	ldr	r7, [pc, #252]	@ (8013330 <D24_1CH_HTONS_VOL_HP+0x130>)
 8013232:	461d      	mov	r5, r3
 8013234:	f8cd a00c 	str.w	sl, [sp, #12]
 8013238:	9c00      	ldr	r4, [sp, #0]
 801323a:	e056      	b.n	80132ea <D24_1CH_HTONS_VOL_HP+0xea>
 801323c:	7841      	ldrb	r1, [r0, #1]
 801323e:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 8013242:	3002      	adds	r0, #2
 8013244:	4488      	add	r8, r1
 8013246:	fa5f f388 	uxtb.w	r3, r8
 801324a:	f3c8 2907 	ubfx	r9, r8, #8, #8
 801324e:	ea4f 4818 	mov.w	r8, r8, lsr #16
 8013252:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8013256:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 801325a:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 801325e:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 8013262:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8013266:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801326a:	f3c8 0309 	ubfx	r3, r8, #0, #10
 801326e:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8013272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8013276:	492f      	ldr	r1, [pc, #188]	@ (8013334 <D24_1CH_HTONS_VOL_HP+0x134>)
 8013278:	fb23 e901 	smlad	r9, r3, r1, lr
 801327c:	492e      	ldr	r1, [pc, #184]	@ (8013338 <D24_1CH_HTONS_VOL_HP+0x138>)
 801327e:	fb23 ce01 	smlad	lr, r3, r1, ip
 8013282:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 8013286:	2101      	movs	r1, #1
 8013288:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 801328c:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 8013290:	fb23 f301 	smuad	r3, r3, r1
 8013294:	f5a9 51d8 	sub.w	r1, r9, #6912	@ 0x1b00
 8013298:	eb08 0c03 	add.w	ip, r8, r3
 801329c:	9b03      	ldr	r3, [sp, #12]
 801329e:	f04f 0a00 	mov.w	sl, #0
 80132a2:	440a      	add	r2, r1
 80132a4:	3601      	adds	r6, #1
 80132a6:	9103      	str	r1, [sp, #12]
 80132a8:	1ad2      	subs	r2, r2, r3
 80132aa:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80132ae:	fba2 2304 	umull	r2, r3, r2, r4
 80132b2:	e9cd 2300 	strd	r2, r3, [sp]
 80132b6:	fb04 3309 	mla	r3, r4, r9, r3
 80132ba:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 80132be:	9301      	str	r3, [sp, #4]
 80132c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80132c4:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 80132c8:	f143 0300 	adc.w	r3, r3, #0
 80132cc:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 80132d0:	005a      	lsls	r2, r3, #1
 80132d2:	9b04      	ldr	r3, [sp, #16]
 80132d4:	fbc3 9a08 	smlal	r9, sl, r3, r8
 80132d8:	ea4f 03aa 	mov.w	r3, sl, asr #2
 80132dc:	f303 030f 	ssat	r3, #16, r3
 80132e0:	f82b 3f02 	strh.w	r3, [fp, #2]!
 80132e4:	9b05      	ldr	r3, [sp, #20]
 80132e6:	429e      	cmp	r6, r3
 80132e8:	d010      	beq.n	801330c <D24_1CH_HTONS_VOL_HP+0x10c>
 80132ea:	f890 9003 	ldrb.w	r9, [r0, #3]
 80132ee:	f016 0f01 	tst.w	r6, #1
 80132f2:	7801      	ldrb	r1, [r0, #0]
 80132f4:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80132f8:	ea4f 2801 	mov.w	r8, r1, lsl #8
 80132fc:	d09e      	beq.n	801323c <D24_1CH_HTONS_VOL_HP+0x3c>
 80132fe:	f890 8002 	ldrb.w	r8, [r0, #2]
 8013302:	3004      	adds	r0, #4
 8013304:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 8013308:	4488      	add	r8, r1
 801330a:	e79c      	b.n	8013246 <D24_1CH_HTONS_VOL_HP+0x46>
 801330c:	4614      	mov	r4, r2
 801330e:	462b      	mov	r3, r5
 8013310:	9a07      	ldr	r2, [sp, #28]
 8013312:	2000      	movs	r0, #0
 8013314:	61d3      	str	r3, [r2, #28]
 8013316:	9b06      	ldr	r3, [sp, #24]
 8013318:	f8c2 c008 	str.w	ip, [r2, #8]
 801331c:	f8c2 e00c 	str.w	lr, [r2, #12]
 8013320:	6193      	str	r3, [r2, #24]
 8013322:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8013326:	b009      	add	sp, #36	@ 0x24
 8013328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801332c:	4651      	mov	r1, sl
 801332e:	e7f0      	b.n	8013312 <D24_1CH_HTONS_VOL_HP+0x112>
 8013330:	24000000 	.word	0x24000000
 8013334:	00030001 	.word	0x00030001
 8013338:	00060007 	.word	0x00060007

0801333c <D32_1CH_HTONS_VOL_HP>:
 801333c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013340:	6993      	ldr	r3, [r2, #24]
 8013342:	b087      	sub	sp, #28
 8013344:	4683      	mov	fp, r0
 8013346:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8013348:	9304      	str	r3, [sp, #16]
 801334a:	69d5      	ldr	r5, [r2, #28]
 801334c:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 801334e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8013352:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 8013356:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 801335a:	2800      	cmp	r0, #0
 801335c:	d077      	beq.n	801344e <D32_1CH_HTONS_VOL_HP+0x112>
 801335e:	460f      	mov	r7, r1
 8013360:	46f1      	mov	r9, lr
 8013362:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8013366:	f8cd 8000 	str.w	r8, [sp]
 801336a:	4e3a      	ldr	r6, [pc, #232]	@ (8013454 <D32_1CH_HTONS_VOL_HP+0x118>)
 801336c:	469e      	mov	lr, r3
 801336e:	46a0      	mov	r8, r4
 8013370:	9103      	str	r1, [sp, #12]
 8013372:	9205      	str	r2, [sp, #20]
 8013374:	f85b 4b04 	ldr.w	r4, [fp], #4
 8013378:	ba64      	rev16	r4, r4
 801337a:	b2e0      	uxtb	r0, r4
 801337c:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8013380:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8013384:	0e24      	lsrs	r4, r4, #24
 8013386:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801338a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801338e:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 8013392:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8013396:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 801339a:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 801339e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80133a2:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 80133a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80133aa:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80133ae:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80133b2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80133b6:	f3c5 0009 	ubfx	r0, r5, #0, #10
 80133ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80133be:	4826      	ldr	r0, [pc, #152]	@ (8013458 <D32_1CH_HTONS_VOL_HP+0x11c>)
 80133c0:	fb23 c400 	smlad	r4, r3, r0, ip
 80133c4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80133c8:	fb21 4402 	smlad	r4, r1, r2, r4
 80133cc:	4823      	ldr	r0, [pc, #140]	@ (801345c <D32_1CH_HTONS_VOL_HP+0x120>)
 80133ce:	fb23 ec00 	smlad	ip, r3, r0, lr
 80133d2:	4823      	ldr	r0, [pc, #140]	@ (8013460 <D32_1CH_HTONS_VOL_HP+0x124>)
 80133d4:	fb21 cc00 	smlad	ip, r1, r0, ip
 80133d8:	2201      	movs	r2, #1
 80133da:	fb23 f302 	smuad	r3, r3, r2
 80133de:	4821      	ldr	r0, [pc, #132]	@ (8013464 <D32_1CH_HTONS_VOL_HP+0x128>)
 80133e0:	fb21 3e00 	smlad	lr, r1, r0, r3
 80133e4:	9b00      	ldr	r3, [sp, #0]
 80133e6:	f5a4 4480 	sub.w	r4, r4, #16384	@ 0x4000
 80133ea:	4423      	add	r3, r4
 80133ec:	eba3 0209 	sub.w	r2, r3, r9
 80133f0:	46a1      	mov	r9, r4
 80133f2:	17d1      	asrs	r1, r2, #31
 80133f4:	fba2 230a 	umull	r2, r3, r2, sl
 80133f8:	e9cd 2300 	strd	r2, r3, [sp]
 80133fc:	fb0a 3301 	mla	r3, sl, r1, r3
 8013400:	9301      	str	r3, [sp, #4]
 8013402:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013406:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 801340a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801340e:	f143 0300 	adc.w	r3, r3, #0
 8013412:	0399      	lsls	r1, r3, #14
 8013414:	005b      	lsls	r3, r3, #1
 8013416:	9300      	str	r3, [sp, #0]
 8013418:	2300      	movs	r3, #0
 801341a:	fbc8 2301 	smlal	r2, r3, r8, r1
 801341e:	109b      	asrs	r3, r3, #2
 8013420:	f303 030f 	ssat	r3, #16, r3
 8013424:	f827 3b02 	strh.w	r3, [r7], #2
 8013428:	9b03      	ldr	r3, [sp, #12]
 801342a:	429f      	cmp	r7, r3
 801342c:	d1a2      	bne.n	8013374 <D32_1CH_HTONS_VOL_HP+0x38>
 801342e:	4673      	mov	r3, lr
 8013430:	f8dd 8000 	ldr.w	r8, [sp]
 8013434:	9a05      	ldr	r2, [sp, #20]
 8013436:	6093      	str	r3, [r2, #8]
 8013438:	2000      	movs	r0, #0
 801343a:	9b04      	ldr	r3, [sp, #16]
 801343c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8013440:	61d5      	str	r5, [r2, #28]
 8013442:	6193      	str	r3, [r2, #24]
 8013444:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8013448:	b007      	add	sp, #28
 801344a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801344e:	4674      	mov	r4, lr
 8013450:	e7f1      	b.n	8013436 <D32_1CH_HTONS_VOL_HP+0xfa>
 8013452:	bf00      	nop
 8013454:	24000000 	.word	0x24000000
 8013458:	00060003 	.word	0x00060003
 801345c:	000a000c 	.word	0x000a000c
 8013460:	000c000a 	.word	0x000c000a
 8013464:	00030006 	.word	0x00030006

08013468 <D48_1CH_HTONS_VOL_HP>:
 8013468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801346c:	6b17      	ldr	r7, [r2, #48]	@ 0x30
 801346e:	b087      	sub	sp, #28
 8013470:	6993      	ldr	r3, [r2, #24]
 8013472:	9701      	str	r7, [sp, #4]
 8013474:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8013476:	6a17      	ldr	r7, [r2, #32]
 8013478:	9304      	str	r3, [sp, #16]
 801347a:	69d6      	ldr	r6, [r2, #28]
 801347c:	9702      	str	r7, [sp, #8]
 801347e:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 8013482:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8013486:	2d00      	cmp	r5, #0
 8013488:	f000 8093 	beq.w	80135b2 <D48_1CH_HTONS_VOL_HP+0x14a>
 801348c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013490:	f1a1 0b02 	sub.w	fp, r1, #2
 8013494:	46f2      	mov	sl, lr
 8013496:	4f48      	ldr	r7, [pc, #288]	@ (80135b8 <D48_1CH_HTONS_VOL_HP+0x150>)
 8013498:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 801349c:	469e      	mov	lr, r3
 801349e:	9205      	str	r2, [sp, #20]
 80134a0:	9103      	str	r1, [sp, #12]
 80134a2:	e9d0 3200 	ldrd	r3, r2, [r0]
 80134a6:	3006      	adds	r0, #6
 80134a8:	ba5b      	rev16	r3, r3
 80134aa:	fa92 f992 	rev16.w	r9, r2
 80134ae:	b2dd      	uxtb	r5, r3
 80134b0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80134b4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80134b8:	0e1b      	lsrs	r3, r3, #24
 80134ba:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80134be:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80134c2:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 80134c6:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 80134ca:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80134ce:	fa5f f289 	uxtb.w	r2, r9
 80134d2:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 80134d6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80134da:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80134de:	f3c6 0809 	ubfx	r8, r6, #0, #10
 80134e2:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80134e6:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 80134ea:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80134ee:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 80134f2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80134f6:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 80134fa:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 80134fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013502:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8013506:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801350a:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 801350e:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8013512:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8013516:	4b29      	ldr	r3, [pc, #164]	@ (80135bc <D48_1CH_HTONS_VOL_HP+0x154>)
 8013518:	fb28 c103 	smlad	r1, r8, r3, ip
 801351c:	4b28      	ldr	r3, [pc, #160]	@ (80135c0 <D48_1CH_HTONS_VOL_HP+0x158>)
 801351e:	fb25 1103 	smlad	r1, r5, r3, r1
 8013522:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8013526:	fb22 1903 	smlad	r9, r2, r3, r1
 801352a:	4b26      	ldr	r3, [pc, #152]	@ (80135c4 <D48_1CH_HTONS_VOL_HP+0x15c>)
 801352c:	fb28 ec03 	smlad	ip, r8, r3, lr
 8013530:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 8013534:	fb25 cc03 	smlad	ip, r5, r3, ip
 8013538:	4b23      	ldr	r3, [pc, #140]	@ (80135c8 <D48_1CH_HTONS_VOL_HP+0x160>)
 801353a:	fb22 cc03 	smlad	ip, r2, r3, ip
 801353e:	2101      	movs	r1, #1
 8013540:	fb28 f801 	smuad	r8, r8, r1
 8013544:	4b21      	ldr	r3, [pc, #132]	@ (80135cc <D48_1CH_HTONS_VOL_HP+0x164>)
 8013546:	fb25 8503 	smlad	r5, r5, r3, r8
 801354a:	4b21      	ldr	r3, [pc, #132]	@ (80135d0 <D48_1CH_HTONS_VOL_HP+0x168>)
 801354c:	fb22 5e03 	smlad	lr, r2, r3, r5
 8013550:	f5a9 4158 	sub.w	r1, r9, #55296	@ 0xd800
 8013554:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8013558:	190a      	adds	r2, r1, r4
 801355a:	9c02      	ldr	r4, [sp, #8]
 801355c:	eba2 020a 	sub.w	r2, r2, sl
 8013560:	468a      	mov	sl, r1
 8013562:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8013566:	fba2 2304 	umull	r2, r3, r2, r4
 801356a:	fb04 3309 	mla	r3, r4, r9, r3
 801356e:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 8013572:	f04f 0900 	mov.w	r9, #0
 8013576:	f143 0500 	adc.w	r5, r3, #0
 801357a:	9b01      	ldr	r3, [sp, #4]
 801357c:	032a      	lsls	r2, r5, #12
 801357e:	006c      	lsls	r4, r5, #1
 8013580:	fbc3 8902 	smlal	r8, r9, r3, r2
 8013584:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8013588:	f303 030f 	ssat	r3, #16, r3
 801358c:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8013590:	9b03      	ldr	r3, [sp, #12]
 8013592:	4283      	cmp	r3, r0
 8013594:	d185      	bne.n	80134a2 <D48_1CH_HTONS_VOL_HP+0x3a>
 8013596:	4673      	mov	r3, lr
 8013598:	9a05      	ldr	r2, [sp, #20]
 801359a:	6093      	str	r3, [r2, #8]
 801359c:	2000      	movs	r0, #0
 801359e:	9b04      	ldr	r3, [sp, #16]
 80135a0:	f8c2 c00c 	str.w	ip, [r2, #12]
 80135a4:	61d6      	str	r6, [r2, #28]
 80135a6:	6193      	str	r3, [r2, #24]
 80135a8:	e9c2 4104 	strd	r4, r1, [r2, #16]
 80135ac:	b007      	add	sp, #28
 80135ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135b2:	4671      	mov	r1, lr
 80135b4:	e7f1      	b.n	801359a <D48_1CH_HTONS_VOL_HP+0x132>
 80135b6:	bf00      	nop
 80135b8:	24000000 	.word	0x24000000
 80135bc:	000f000a 	.word	0x000f000a
 80135c0:	00060003 	.word	0x00060003
 80135c4:	00150019 	.word	0x00150019
 80135c8:	00190015 	.word	0x00190015
 80135cc:	00030006 	.word	0x00030006
 80135d0:	000a000f 	.word	0x000a000f

080135d4 <D64_1CH_HTONS_VOL_HP>:
 80135d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135d8:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 80135da:	b089      	sub	sp, #36	@ 0x24
 80135dc:	6993      	ldr	r3, [r2, #24]
 80135de:	4686      	mov	lr, r0
 80135e0:	9503      	str	r5, [sp, #12]
 80135e2:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 80135e4:	6a15      	ldr	r5, [r2, #32]
 80135e6:	9306      	str	r3, [sp, #24]
 80135e8:	69d6      	ldr	r6, [r2, #28]
 80135ea:	9504      	str	r5, [sp, #16]
 80135ec:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 80135f0:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80135f4:	2800      	cmp	r0, #0
 80135f6:	f000 80a4 	beq.w	8013742 <D64_1CH_HTONS_VOL_HP+0x16e>
 80135fa:	460f      	mov	r7, r1
 80135fc:	46f1      	mov	r9, lr
 80135fe:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8013602:	4d56      	ldr	r5, [pc, #344]	@ (801375c <D64_1CH_HTONS_VOL_HP+0x188>)
 8013604:	46a2      	mov	sl, r4
 8013606:	469e      	mov	lr, r3
 8013608:	9105      	str	r1, [sp, #20]
 801360a:	9207      	str	r2, [sp, #28]
 801360c:	f859 1b08 	ldr.w	r1, [r9], #8
 8013610:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8013614:	ba49      	rev16	r1, r1
 8013616:	fa93 fb93 	rev16.w	fp, r3
 801361a:	b2cb      	uxtb	r3, r1
 801361c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8013620:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8013624:	0e09      	lsrs	r1, r1, #24
 8013626:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 801362a:	fa5f f38b 	uxtb.w	r3, fp
 801362e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8013632:	4426      	add	r6, r4
 8013634:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8013638:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801363c:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8013640:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8013644:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8013648:	f3cb 2307 	ubfx	r3, fp, #8, #8
 801364c:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8013650:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8013654:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8013658:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 801365c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8013660:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8013664:	f3cb 4607 	ubfx	r6, fp, #16, #8
 8013668:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 801366c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013670:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8013674:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 8013678:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 801367c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8013680:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 8013684:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013688:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 801368c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013690:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 8013694:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8013698:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801369c:	f3cb 0009 	ubfx	r0, fp, #0, #10
 80136a0:	ea4f 269b 	mov.w	r6, fp, lsr #10
 80136a4:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 80136a8:	482d      	ldr	r0, [pc, #180]	@ (8013760 <D64_1CH_HTONS_VOL_HP+0x18c>)
 80136aa:	fb22 cc00 	smlad	ip, r2, r0, ip
 80136ae:	482d      	ldr	r0, [pc, #180]	@ (8013764 <D64_1CH_HTONS_VOL_HP+0x190>)
 80136b0:	fb21 cc00 	smlad	ip, r1, r0, ip
 80136b4:	482c      	ldr	r0, [pc, #176]	@ (8013768 <D64_1CH_HTONS_VOL_HP+0x194>)
 80136b6:	fb23 cc00 	smlad	ip, r3, r0, ip
 80136ba:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 80136be:	fb2b c404 	smlad	r4, fp, r4, ip
 80136c2:	482a      	ldr	r0, [pc, #168]	@ (801376c <D64_1CH_HTONS_VOL_HP+0x198>)
 80136c4:	fb22 ec00 	smlad	ip, r2, r0, lr
 80136c8:	fb2b cc10 	smladx	ip, fp, r0, ip
 80136cc:	4828      	ldr	r0, [pc, #160]	@ (8013770 <D64_1CH_HTONS_VOL_HP+0x19c>)
 80136ce:	fb21 cc00 	smlad	ip, r1, r0, ip
 80136d2:	fb23 cc10 	smladx	ip, r3, r0, ip
 80136d6:	f04f 0e01 	mov.w	lr, #1
 80136da:	fb22 f20e 	smuad	r2, r2, lr
 80136de:	4825      	ldr	r0, [pc, #148]	@ (8013774 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 80136e0:	fb21 2100 	smlad	r1, r1, r0, r2
 80136e4:	4a24      	ldr	r2, [pc, #144]	@ (8013778 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 80136e6:	fb23 1302 	smlad	r3, r3, r2, r1
 80136ea:	4a24      	ldr	r2, [pc, #144]	@ (801377c <D64_1CH_HTONS_VOL_HP+0x1a8>)
 80136ec:	fb2b 3e02 	smlad	lr, fp, r2, r3
 80136f0:	f5a4 3400 	sub.w	r4, r4, #131072	@ 0x20000
 80136f4:	eb04 0208 	add.w	r2, r4, r8
 80136f8:	eba2 020a 	sub.w	r2, r2, sl
 80136fc:	46a2      	mov	sl, r4
 80136fe:	4610      	mov	r0, r2
 8013700:	17d1      	asrs	r1, r2, #31
 8013702:	e9cd 0100 	strd	r0, r1, [sp]
 8013706:	9904      	ldr	r1, [sp, #16]
 8013708:	9801      	ldr	r0, [sp, #4]
 801370a:	fba2 2301 	umull	r2, r3, r2, r1
 801370e:	fb01 3300 	mla	r3, r1, r0, r3
 8013712:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 8013716:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801371a:	f143 0100 	adc.w	r1, r3, #0
 801371e:	9b03      	ldr	r3, [sp, #12]
 8013720:	02ca      	lsls	r2, r1, #11
 8013722:	ea4f 0841 	mov.w	r8, r1, lsl #1
 8013726:	2100      	movs	r1, #0
 8013728:	fbc3 0102 	smlal	r0, r1, r3, r2
 801372c:	108b      	asrs	r3, r1, #2
 801372e:	f303 030f 	ssat	r3, #16, r3
 8013732:	f827 3b02 	strh.w	r3, [r7], #2
 8013736:	9b05      	ldr	r3, [sp, #20]
 8013738:	429f      	cmp	r7, r3
 801373a:	f47f af67 	bne.w	801360c <D64_1CH_HTONS_VOL_HP+0x38>
 801373e:	4673      	mov	r3, lr
 8013740:	9a07      	ldr	r2, [sp, #28]
 8013742:	6093      	str	r3, [r2, #8]
 8013744:	2000      	movs	r0, #0
 8013746:	9b06      	ldr	r3, [sp, #24]
 8013748:	f8c2 c00c 	str.w	ip, [r2, #12]
 801374c:	61d6      	str	r6, [r2, #28]
 801374e:	6193      	str	r3, [r2, #24]
 8013750:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8013754:	b009      	add	sp, #36	@ 0x24
 8013756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801375a:	bf00      	nop
 801375c:	24000000 	.word	0x24000000
 8013760:	001c0015 	.word	0x001c0015
 8013764:	000f000a 	.word	0x000f000a
 8013768:	00060003 	.word	0x00060003
 801376c:	0024002a 	.word	0x0024002a
 8013770:	002e0030 	.word	0x002e0030
 8013774:	00030006 	.word	0x00030006
 8013778:	000a000f 	.word	0x000a000f
 801377c:	0015001c 	.word	0x0015001c

08013780 <D80_1CH_HTONS_VOL_HP>:
 8013780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013784:	6913      	ldr	r3, [r2, #16]
 8013786:	b089      	sub	sp, #36	@ 0x24
 8013788:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 801378a:	9301      	str	r3, [sp, #4]
 801378c:	9603      	str	r6, [sp, #12]
 801378e:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8013790:	6a16      	ldr	r6, [r2, #32]
 8013792:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 8013796:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 801379a:	9306      	str	r3, [sp, #24]
 801379c:	9604      	str	r6, [sp, #16]
 801379e:	69d3      	ldr	r3, [r2, #28]
 80137a0:	2c00      	cmp	r4, #0
 80137a2:	f000 80ce 	beq.w	8013942 <D80_1CH_HTONS_VOL_HP+0x1c2>
 80137a6:	3902      	subs	r1, #2
 80137a8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80137ac:	4e66      	ldr	r6, [pc, #408]	@ (8013948 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 80137ae:	469e      	mov	lr, r3
 80137b0:	9102      	str	r1, [sp, #8]
 80137b2:	46aa      	mov	sl, r5
 80137b4:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 80137b8:	9207      	str	r2, [sp, #28]
 80137ba:	9105      	str	r1, [sp, #20]
 80137bc:	6883      	ldr	r3, [r0, #8]
 80137be:	e9d0 4200 	ldrd	r4, r2, [r0]
 80137c2:	300a      	adds	r0, #10
 80137c4:	ba64      	rev16	r4, r4
 80137c6:	ba52      	rev16	r2, r2
 80137c8:	fa93 fb93 	rev16.w	fp, r3
 80137cc:	b2e5      	uxtb	r5, r4
 80137ce:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80137d2:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80137d6:	0e24      	lsrs	r4, r4, #24
 80137d8:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 80137dc:	b2d5      	uxtb	r5, r2
 80137de:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80137e2:	44c6      	add	lr, r8
 80137e4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80137e8:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 80137ec:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 80137f0:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 80137f4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80137f8:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 80137fc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8013800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013804:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8013808:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801380c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8013810:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 8013814:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 8013818:	f3c2 4507 	ubfx	r5, r2, #16, #8
 801381c:	0e12      	lsrs	r2, r2, #24
 801381e:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 8013822:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8013826:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 801382a:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801382e:	fa5f fb8b 	uxtb.w	fp, fp
 8013832:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8013836:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801383a:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 801383e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013842:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 8013846:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801384a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801384e:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 8013852:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 8013856:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801385a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801385e:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 8013862:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8013866:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 801386a:	f3ce 0109 	ubfx	r1, lr, #0, #10
 801386e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8013872:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 8013876:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 801387a:	4934      	ldr	r1, [pc, #208]	@ (801394c <D80_1CH_HTONS_VOL_HP+0x1cc>)
 801387c:	fb23 cc01 	smlad	ip, r3, r1, ip
 8013880:	4933      	ldr	r1, [pc, #204]	@ (8013950 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 8013882:	fb24 cc01 	smlad	ip, r4, r1, ip
 8013886:	4933      	ldr	r1, [pc, #204]	@ (8013954 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8013888:	fb28 cc01 	smlad	ip, r8, r1, ip
 801388c:	4932      	ldr	r1, [pc, #200]	@ (8013958 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 801388e:	fb22 cc01 	smlad	ip, r2, r1, ip
 8013892:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8013896:	fb2b c901 	smlad	r9, fp, r1, ip
 801389a:	4930      	ldr	r1, [pc, #192]	@ (801395c <D80_1CH_HTONS_VOL_HP+0x1dc>)
 801389c:	fb23 7701 	smlad	r7, r3, r1, r7
 80138a0:	492f      	ldr	r1, [pc, #188]	@ (8013960 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 80138a2:	fb24 7701 	smlad	r7, r4, r1, r7
 80138a6:	f04f 1c4b 	mov.w	ip, #4915275	@ 0x4b004b
 80138aa:	fb28 7c0c 	smlad	ip, r8, ip, r7
 80138ae:	492d      	ldr	r1, [pc, #180]	@ (8013964 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 80138b0:	fb22 cc01 	smlad	ip, r2, r1, ip
 80138b4:	492c      	ldr	r1, [pc, #176]	@ (8013968 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 80138b6:	fb2b cc01 	smlad	ip, fp, r1, ip
 80138ba:	2101      	movs	r1, #1
 80138bc:	fb23 f301 	smuad	r3, r3, r1
 80138c0:	492a      	ldr	r1, [pc, #168]	@ (801396c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 80138c2:	fb24 3401 	smlad	r4, r4, r1, r3
 80138c6:	492a      	ldr	r1, [pc, #168]	@ (8013970 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80138c8:	fb28 4101 	smlad	r1, r8, r1, r4
 80138cc:	4f29      	ldr	r7, [pc, #164]	@ (8013974 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 80138ce:	fb22 1207 	smlad	r2, r2, r7, r1
 80138d2:	4f29      	ldr	r7, [pc, #164]	@ (8013978 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 80138d4:	fb2b 2707 	smlad	r7, fp, r7, r2
 80138d8:	f5a9 317a 	sub.w	r1, r9, #256000	@ 0x3e800
 80138dc:	9b01      	ldr	r3, [sp, #4]
 80138de:	9c04      	ldr	r4, [sp, #16]
 80138e0:	440b      	add	r3, r1
 80138e2:	eba3 020a 	sub.w	r2, r3, sl
 80138e6:	468a      	mov	sl, r1
 80138e8:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80138ec:	fba2 2304 	umull	r2, r3, r2, r4
 80138f0:	fb04 3309 	mla	r3, r4, r9, r3
 80138f4:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 80138f8:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80138fc:	f143 0500 	adc.w	r5, r3, #0
 8013900:	006b      	lsls	r3, r5, #1
 8013902:	02aa      	lsls	r2, r5, #10
 8013904:	2500      	movs	r5, #0
 8013906:	9301      	str	r3, [sp, #4]
 8013908:	9b03      	ldr	r3, [sp, #12]
 801390a:	fbc3 4502 	smlal	r4, r5, r3, r2
 801390e:	9a02      	ldr	r2, [sp, #8]
 8013910:	10ab      	asrs	r3, r5, #2
 8013912:	f303 030f 	ssat	r3, #16, r3
 8013916:	f822 3f02 	strh.w	r3, [r2, #2]!
 801391a:	9b05      	ldr	r3, [sp, #20]
 801391c:	9202      	str	r2, [sp, #8]
 801391e:	4298      	cmp	r0, r3
 8013920:	f47f af4c 	bne.w	80137bc <D80_1CH_HTONS_VOL_HP+0x3c>
 8013924:	4673      	mov	r3, lr
 8013926:	9a07      	ldr	r2, [sp, #28]
 8013928:	61d3      	str	r3, [r2, #28]
 801392a:	2000      	movs	r0, #0
 801392c:	9b01      	ldr	r3, [sp, #4]
 801392e:	6097      	str	r7, [r2, #8]
 8013930:	f8c2 c00c 	str.w	ip, [r2, #12]
 8013934:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8013938:	9b06      	ldr	r3, [sp, #24]
 801393a:	6193      	str	r3, [r2, #24]
 801393c:	b009      	add	sp, #36	@ 0x24
 801393e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013942:	4629      	mov	r1, r5
 8013944:	e7f0      	b.n	8013928 <D80_1CH_HTONS_VOL_HP+0x1a8>
 8013946:	bf00      	nop
 8013948:	24000000 	.word	0x24000000
 801394c:	002d0024 	.word	0x002d0024
 8013950:	001c0015 	.word	0x001c0015
 8013954:	000f000a 	.word	0x000f000a
 8013958:	00060003 	.word	0x00060003
 801395c:	0037003f 	.word	0x0037003f
 8013960:	00450049 	.word	0x00450049
 8013964:	00490045 	.word	0x00490045
 8013968:	003f0037 	.word	0x003f0037
 801396c:	00030006 	.word	0x00030006
 8013970:	000a000f 	.word	0x000a000f
 8013974:	0015001c 	.word	0x0015001c
 8013978:	0024002d 	.word	0x0024002d

0801397c <D128_1CH_HTONS_VOL_HP>:
 801397c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013980:	6914      	ldr	r4, [r2, #16]
 8013982:	b08d      	sub	sp, #52	@ 0x34
 8013984:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8013986:	9404      	str	r4, [sp, #16]
 8013988:	6954      	ldr	r4, [r2, #20]
 801398a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801398c:	9405      	str	r4, [sp, #20]
 801398e:	6994      	ldr	r4, [r2, #24]
 8013990:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8013994:	940a      	str	r4, [sp, #40]	@ 0x28
 8013996:	6894      	ldr	r4, [r2, #8]
 8013998:	9403      	str	r4, [sp, #12]
 801399a:	68d4      	ldr	r4, [r2, #12]
 801399c:	9402      	str	r4, [sp, #8]
 801399e:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80139a0:	6a12      	ldr	r2, [r2, #32]
 80139a2:	9407      	str	r4, [sp, #28]
 80139a4:	9208      	str	r2, [sp, #32]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	f000 812e 	beq.w	8013c08 <D128_1CH_HTONS_VOL_HP+0x28c>
 80139ac:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80139b0:	f100 0b10 	add.w	fp, r0, #16
 80139b4:	f8df 9290 	ldr.w	r9, [pc, #656]	@ 8013c48 <D128_1CH_HTONS_VOL_HP+0x2cc>
 80139b8:	9106      	str	r1, [sp, #24]
 80139ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80139bc:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 80139c0:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 80139c4:	ba40      	rev16	r0, r0
 80139c6:	ba52      	rev16	r2, r2
 80139c8:	ba5b      	rev16	r3, r3
 80139ca:	ba76      	rev16	r6, r6
 80139cc:	b2c5      	uxtb	r5, r0
 80139ce:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80139d2:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80139d6:	0e00      	lsrs	r0, r0, #24
 80139d8:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 80139dc:	b2d5      	uxtb	r5, r2
 80139de:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 80139e2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80139e6:	44bc      	add	ip, r7
 80139e8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80139ec:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 80139f0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80139f4:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 80139f8:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 80139fc:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8013a00:	0e12      	lsrs	r2, r2, #24
 8013a02:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 8013a06:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8013a0a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8013a0e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8013a12:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8013a16:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8013a1a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013a1e:	b2da      	uxtb	r2, r3
 8013a20:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 8013a24:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8013a28:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 8013a2c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8013a30:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8013a34:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8013a38:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8013a3c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013a40:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 8013a44:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8013a48:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 8013a4c:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8013a50:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8013a54:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8013a58:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 8013a5c:	0e1b      	lsrs	r3, r3, #24
 8013a5e:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8013a62:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8013a66:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8013a6a:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8013a6e:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 8013a72:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8013a76:	b2f3      	uxtb	r3, r6
 8013a78:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 8013a7c:	f3c8 0009 	ubfx	r0, r8, #0, #10
 8013a80:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013a84:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8013a88:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8013a8c:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8013a90:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8013a94:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8013a98:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8013a9c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8013aa0:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8013aa4:	0e36      	lsrs	r6, r6, #24
 8013aa6:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8013aaa:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013aae:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 8013ab2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8013ab6:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 8013aba:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013abe:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 8013ac2:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8013ac6:	9101      	str	r1, [sp, #4]
 8013ac8:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 8013acc:	9b02      	ldr	r3, [sp, #8]
 8013ace:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8013ad2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8013ad6:	4611      	mov	r1, r2
 8013ad8:	f3cc 0209 	ubfx	r2, ip, #0, #10
 8013adc:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 8013ae0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8013ae4:	4a49      	ldr	r2, [pc, #292]	@ (8013c0c <D128_1CH_HTONS_VOL_HP+0x290>)
 8013ae6:	fb2e 3202 	smlad	r2, lr, r2, r3
 8013aea:	4b49      	ldr	r3, [pc, #292]	@ (8013c10 <D128_1CH_HTONS_VOL_HP+0x294>)
 8013aec:	fb27 2203 	smlad	r2, r7, r3, r2
 8013af0:	4b48      	ldr	r3, [pc, #288]	@ (8013c14 <D128_1CH_HTONS_VOL_HP+0x298>)
 8013af2:	fb25 2203 	smlad	r2, r5, r3, r2
 8013af6:	4b48      	ldr	r3, [pc, #288]	@ (8013c18 <D128_1CH_HTONS_VOL_HP+0x29c>)
 8013af8:	fb24 2203 	smlad	r2, r4, r3, r2
 8013afc:	4b47      	ldr	r3, [pc, #284]	@ (8013c1c <D128_1CH_HTONS_VOL_HP+0x2a0>)
 8013afe:	fb20 2803 	smlad	r8, r0, r3, r2
 8013b02:	4b47      	ldr	r3, [pc, #284]	@ (8013c20 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 8013b04:	9a01      	ldr	r2, [sp, #4]
 8013b06:	fb22 8203 	smlad	r2, r2, r3, r8
 8013b0a:	4b46      	ldr	r3, [pc, #280]	@ (8013c24 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 8013b0c:	9102      	str	r1, [sp, #8]
 8013b0e:	fb21 2203 	smlad	r2, r1, r3, r2
 8013b12:	f44f 3880 	mov.w	r8, #65536	@ 0x10000
 8013b16:	fb26 2308 	smlad	r3, r6, r8, r2
 8013b1a:	4619      	mov	r1, r3
 8013b1c:	9a03      	ldr	r2, [sp, #12]
 8013b1e:	4b42      	ldr	r3, [pc, #264]	@ (8013c28 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 8013b20:	fb2e 2803 	smlad	r8, lr, r3, r2
 8013b24:	4b41      	ldr	r3, [pc, #260]	@ (8013c2c <D128_1CH_HTONS_VOL_HP+0x2b0>)
 8013b26:	fb27 8a03 	smlad	sl, r7, r3, r8
 8013b2a:	f8df 8120 	ldr.w	r8, [pc, #288]	@ 8013c4c <D128_1CH_HTONS_VOL_HP+0x2d0>
 8013b2e:	fb25 a808 	smlad	r8, r5, r8, sl
 8013b32:	f8df a11c 	ldr.w	sl, [pc, #284]	@ 8013c50 <D128_1CH_HTONS_VOL_HP+0x2d4>
 8013b36:	fb24 880a 	smlad	r8, r4, sl, r8
 8013b3a:	f8df a118 	ldr.w	sl, [pc, #280]	@ 8013c54 <D128_1CH_HTONS_VOL_HP+0x2d8>
 8013b3e:	fb20 8a0a 	smlad	sl, r0, sl, r8
 8013b42:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 8013c58 <D128_1CH_HTONS_VOL_HP+0x2dc>
 8013b46:	9b01      	ldr	r3, [sp, #4]
 8013b48:	fb23 aa08 	smlad	sl, r3, r8, sl
 8013b4c:	f8df 810c 	ldr.w	r8, [pc, #268]	@ 8013c5c <D128_1CH_HTONS_VOL_HP+0x2e0>
 8013b50:	9a02      	ldr	r2, [sp, #8]
 8013b52:	fb22 a808 	smlad	r8, r2, r8, sl
 8013b56:	f8df a108 	ldr.w	sl, [pc, #264]	@ 8013c60 <D128_1CH_HTONS_VOL_HP+0x2e4>
 8013b5a:	fb26 830a 	smlad	r3, r6, sl, r8
 8013b5e:	f04f 0801 	mov.w	r8, #1
 8013b62:	9302      	str	r3, [sp, #8]
 8013b64:	fb2e fe08 	smuad	lr, lr, r8
 8013b68:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 8013c64 <D128_1CH_HTONS_VOL_HP+0x2e8>
 8013b6c:	fb27 ee08 	smlad	lr, r7, r8, lr
 8013b70:	4f2f      	ldr	r7, [pc, #188]	@ (8013c30 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 8013b72:	fb25 ee07 	smlad	lr, r5, r7, lr
 8013b76:	4f2f      	ldr	r7, [pc, #188]	@ (8013c34 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 8013b78:	fb24 ee07 	smlad	lr, r4, r7, lr
 8013b7c:	4f2e      	ldr	r7, [pc, #184]	@ (8013c38 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 8013b7e:	fb20 ee07 	smlad	lr, r0, r7, lr
 8013b82:	4f2e      	ldr	r7, [pc, #184]	@ (8013c3c <D128_1CH_HTONS_VOL_HP+0x2c0>)
 8013b84:	9b01      	ldr	r3, [sp, #4]
 8013b86:	fb23 ee07 	smlad	lr, r3, r7, lr
 8013b8a:	4f2d      	ldr	r7, [pc, #180]	@ (8013c40 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 8013b8c:	fb22 e707 	smlad	r7, r2, r7, lr
 8013b90:	4b2c      	ldr	r3, [pc, #176]	@ (8013c44 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8013b92:	fb26 7303 	smlad	r3, r6, r3, r7
 8013b96:	f5a1 1680 	sub.w	r6, r1, #1048576	@ 0x100000
 8013b9a:	9303      	str	r3, [sp, #12]
 8013b9c:	9b04      	ldr	r3, [sp, #16]
 8013b9e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8013ba2:	9f08      	ldr	r7, [sp, #32]
 8013ba4:	2100      	movs	r1, #0
 8013ba6:	4433      	add	r3, r6
 8013ba8:	f10b 0b10 	add.w	fp, fp, #16
 8013bac:	461a      	mov	r2, r3
 8013bae:	9b05      	ldr	r3, [sp, #20]
 8013bb0:	9605      	str	r6, [sp, #20]
 8013bb2:	1ad2      	subs	r2, r2, r3
 8013bb4:	17d5      	asrs	r5, r2, #31
 8013bb6:	fba2 2307 	umull	r2, r3, r2, r7
 8013bba:	1814      	adds	r4, r2, r0
 8013bbc:	fb07 3305 	mla	r3, r7, r5, r3
 8013bc0:	eb43 0501 	adc.w	r5, r3, r1
 8013bc4:	006b      	lsls	r3, r5, #1
 8013bc6:	022a      	lsls	r2, r5, #8
 8013bc8:	9304      	str	r3, [sp, #16]
 8013bca:	9b07      	ldr	r3, [sp, #28]
 8013bcc:	fbc3 0102 	smlal	r0, r1, r3, r2
 8013bd0:	9a06      	ldr	r2, [sp, #24]
 8013bd2:	108b      	asrs	r3, r1, #2
 8013bd4:	f303 030f 	ssat	r3, #16, r3
 8013bd8:	f822 3b02 	strh.w	r3, [r2], #2
 8013bdc:	4613      	mov	r3, r2
 8013bde:	9206      	str	r2, [sp, #24]
 8013be0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013be2:	4293      	cmp	r3, r2
 8013be4:	f47f aeea 	bne.w	80139bc <D128_1CH_HTONS_VOL_HP+0x40>
 8013be8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013bea:	2000      	movs	r0, #0
 8013bec:	9903      	ldr	r1, [sp, #12]
 8013bee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013bf0:	6099      	str	r1, [r3, #8]
 8013bf2:	9902      	ldr	r1, [sp, #8]
 8013bf4:	f8c3 c01c 	str.w	ip, [r3, #28]
 8013bf8:	60d9      	str	r1, [r3, #12]
 8013bfa:	9904      	ldr	r1, [sp, #16]
 8013bfc:	619a      	str	r2, [r3, #24]
 8013bfe:	e9c3 1604 	strd	r1, r6, [r3, #16]
 8013c02:	b00d      	add	sp, #52	@ 0x34
 8013c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c08:	9e05      	ldr	r6, [sp, #20]
 8013c0a:	e7ed      	b.n	8013be8 <D128_1CH_HTONS_VOL_HP+0x26c>
 8013c0c:	00780069 	.word	0x00780069
 8013c10:	005b004e 	.word	0x005b004e
 8013c14:	00420037 	.word	0x00420037
 8013c18:	002d0024 	.word	0x002d0024
 8013c1c:	001c0015 	.word	0x001c0015
 8013c20:	000f000a 	.word	0x000f000a
 8013c24:	00060003 	.word	0x00060003
 8013c28:	00880096 	.word	0x00880096
 8013c2c:	00a200ac 	.word	0x00a200ac
 8013c30:	000a000f 	.word	0x000a000f
 8013c34:	0015001c 	.word	0x0015001c
 8013c38:	0024002d 	.word	0x0024002d
 8013c3c:	00370042 	.word	0x00370042
 8013c40:	004e005b 	.word	0x004e005b
 8013c44:	00690078 	.word	0x00690078
 8013c48:	24000000 	.word	0x24000000
 8013c4c:	00b400ba 	.word	0x00b400ba
 8013c50:	00be00c0 	.word	0x00be00c0
 8013c54:	00c000be 	.word	0x00c000be
 8013c58:	00ba00b4 	.word	0x00ba00b4
 8013c5c:	00ac00a2 	.word	0x00ac00a2
 8013c60:	00960088 	.word	0x00960088
 8013c64:	00030006 	.word	0x00030006

08013c68 <PDM_Filter_Init>:
 8013c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c6a:	2240      	movs	r2, #64	@ 0x40
 8013c6c:	2100      	movs	r1, #0
 8013c6e:	4604      	mov	r4, r0
 8013c70:	300c      	adds	r0, #12
 8013c72:	f001 fb53 	bl	801531c <memset>
 8013c76:	4a56      	ldr	r2, [pc, #344]	@ (8013dd0 <PDM_Filter_Init+0x168>)
 8013c78:	4856      	ldr	r0, [pc, #344]	@ (8013dd4 <PDM_Filter_Init+0x16c>)
 8013c7a:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 8013c7e:	6813      	ldr	r3, [r2, #0]
 8013c80:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8013c84:	f023 0301 	bic.w	r3, r3, #1
 8013c88:	6013      	str	r3, [r2, #0]
 8013c8a:	6803      	ldr	r3, [r0, #0]
 8013c8c:	400b      	ands	r3, r1
 8013c8e:	42ab      	cmp	r3, r5
 8013c90:	d040      	beq.n	8013d14 <PDM_Filter_Init+0xac>
 8013c92:	6803      	ldr	r3, [r0, #0]
 8013c94:	f24c 2270 	movw	r2, #49776	@ 0xc270
 8013c98:	4019      	ands	r1, r3
 8013c9a:	4291      	cmp	r1, r2
 8013c9c:	d03a      	beq.n	8013d14 <PDM_Filter_Init+0xac>
 8013c9e:	4b4e      	ldr	r3, [pc, #312]	@ (8013dd8 <PDM_Filter_Init+0x170>)
 8013ca0:	2101      	movs	r1, #1
 8013ca2:	461a      	mov	r2, r3
 8013ca4:	6019      	str	r1, [r3, #0]
 8013ca6:	6813      	ldr	r3, [r2, #0]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d1fc      	bne.n	8013ca6 <PDM_Filter_Init+0x3e>
 8013cac:	4b4b      	ldr	r3, [pc, #300]	@ (8013ddc <PDM_Filter_Init+0x174>)
 8013cae:	494c      	ldr	r1, [pc, #304]	@ (8013de0 <PDM_Filter_Init+0x178>)
 8013cb0:	4a4c      	ldr	r2, [pc, #304]	@ (8013de4 <PDM_Filter_Init+0x17c>)
 8013cb2:	6019      	str	r1, [r3, #0]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	8820      	ldrh	r0, [r4, #0]
 8013cb8:	4293      	cmp	r3, r2
 8013cba:	8961      	ldrh	r1, [r4, #10]
 8013cbc:	f04f 0300 	mov.w	r3, #0
 8013cc0:	8922      	ldrh	r2, [r4, #8]
 8013cc2:	bf14      	ite	ne
 8013cc4:	2500      	movne	r5, #0
 8013cc6:	4d47      	ldreq	r5, [pc, #284]	@ (8013de4 <PDM_Filter_Init+0x17c>)
 8013cc8:	2801      	cmp	r0, #1
 8013cca:	61a3      	str	r3, [r4, #24]
 8013ccc:	6465      	str	r5, [r4, #68]	@ 0x44
 8013cce:	60e3      	str	r3, [r4, #12]
 8013cd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8013cd2:	6423      	str	r3, [r4, #64]	@ 0x40
 8013cd4:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8013cd6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8013cd8:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8013cdc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8013ce0:	d936      	bls.n	8013d50 <PDM_Filter_Init+0xe8>
 8013ce2:	2003      	movs	r0, #3
 8013ce4:	2302      	movs	r3, #2
 8013ce6:	8862      	ldrh	r2, [r4, #2]
 8013ce8:	2a01      	cmp	r2, #1
 8013cea:	d92e      	bls.n	8013d4a <PDM_Filter_Init+0xe2>
 8013cec:	2140      	movs	r1, #64	@ 0x40
 8013cee:	2300      	movs	r3, #0
 8013cf0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8013cf2:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8013cf6:	d101      	bne.n	8013cfc <PDM_Filter_Init+0x94>
 8013cf8:	460b      	mov	r3, r1
 8013cfa:	6421      	str	r1, [r4, #64]	@ 0x40
 8013cfc:	6862      	ldr	r2, [r4, #4]
 8013cfe:	b11a      	cbz	r2, 8013d08 <PDM_Filter_Init+0xa0>
 8013d00:	f043 0310 	orr.w	r3, r3, #16
 8013d04:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8013d06:	6423      	str	r3, [r4, #64]	@ 0x40
 8013d08:	2200      	movs	r2, #0
 8013d0a:	8722      	strh	r2, [r4, #56]	@ 0x38
 8013d0c:	b908      	cbnz	r0, 8013d12 <PDM_Filter_Init+0xaa>
 8013d0e:	3380      	adds	r3, #128	@ 0x80
 8013d10:	6423      	str	r3, [r4, #64]	@ 0x40
 8013d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d14:	4b34      	ldr	r3, [pc, #208]	@ (8013de8 <PDM_Filter_Init+0x180>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d1c0      	bne.n	8013c9e <PDM_Filter_Init+0x36>
 8013d1c:	4a33      	ldr	r2, [pc, #204]	@ (8013dec <PDM_Filter_Init+0x184>)
 8013d1e:	6813      	ldr	r3, [r2, #0]
 8013d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013d24:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8013d28:	d006      	beq.n	8013d38 <PDM_Filter_Init+0xd0>
 8013d2a:	6813      	ldr	r3, [r2, #0]
 8013d2c:	f240 4283 	movw	r2, #1155	@ 0x483
 8013d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013d34:	4293      	cmp	r3, r2
 8013d36:	d1b2      	bne.n	8013c9e <PDM_Filter_Init+0x36>
 8013d38:	4b2d      	ldr	r3, [pc, #180]	@ (8013df0 <PDM_Filter_Init+0x188>)
 8013d3a:	2101      	movs	r1, #1
 8013d3c:	461a      	mov	r2, r3
 8013d3e:	6019      	str	r1, [r3, #0]
 8013d40:	6813      	ldr	r3, [r2, #0]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d1fc      	bne.n	8013d40 <PDM_Filter_Init+0xd8>
 8013d46:	4b2b      	ldr	r3, [pc, #172]	@ (8013df4 <PDM_Filter_Init+0x18c>)
 8013d48:	e7b1      	b.n	8013cae <PDM_Filter_Init+0x46>
 8013d4a:	d03a      	beq.n	8013dc2 <PDM_Filter_Init+0x15a>
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	e7cd      	b.n	8013cec <PDM_Filter_Init+0x84>
 8013d50:	4d29      	ldr	r5, [pc, #164]	@ (8013df8 <PDM_Filter_Init+0x190>)
 8013d52:	782a      	ldrb	r2, [r5, #0]
 8013d54:	d01b      	beq.n	8013d8e <PDM_Filter_Init+0x126>
 8013d56:	2a01      	cmp	r2, #1
 8013d58:	d001      	beq.n	8013d5e <PDM_Filter_Init+0xf6>
 8013d5a:	2001      	movs	r0, #1
 8013d5c:	e7c3      	b.n	8013ce6 <PDM_Filter_Init+0x7e>
 8013d5e:	4927      	ldr	r1, [pc, #156]	@ (8013dfc <PDM_Filter_Init+0x194>)
 8013d60:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8013e04 <PDM_Filter_Init+0x19c>
 8013d64:	f501 6780 	add.w	r7, r1, #1024	@ 0x400
 8013d68:	4e25      	ldr	r6, [pc, #148]	@ (8013e00 <PDM_Filter_Init+0x198>)
 8013d6a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8013d6e:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8013d72:	ea02 0006 	and.w	r0, r2, r6
 8013d76:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8013d7a:	428f      	cmp	r7, r1
 8013d7c:	ea43 0300 	orr.w	r3, r3, r0
 8013d80:	4413      	add	r3, r2
 8013d82:	600b      	str	r3, [r1, #0]
 8013d84:	d1f1      	bne.n	8013d6a <PDM_Filter_Init+0x102>
 8013d86:	2300      	movs	r3, #0
 8013d88:	2001      	movs	r0, #1
 8013d8a:	702b      	strb	r3, [r5, #0]
 8013d8c:	e7ab      	b.n	8013ce6 <PDM_Filter_Init+0x7e>
 8013d8e:	2a00      	cmp	r2, #0
 8013d90:	d1a9      	bne.n	8013ce6 <PDM_Filter_Init+0x7e>
 8013d92:	491a      	ldr	r1, [pc, #104]	@ (8013dfc <PDM_Filter_Init+0x194>)
 8013d94:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 8013e04 <PDM_Filter_Init+0x19c>
 8013d98:	f501 6780 	add.w	r7, r1, #1024	@ 0x400
 8013d9c:	4e18      	ldr	r6, [pc, #96]	@ (8013e00 <PDM_Filter_Init+0x198>)
 8013d9e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8013da2:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8013da6:	ea02 0006 	and.w	r0, r2, r6
 8013daa:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8013dae:	428f      	cmp	r7, r1
 8013db0:	ea43 0300 	orr.w	r3, r3, r0
 8013db4:	4413      	add	r3, r2
 8013db6:	600b      	str	r3, [r1, #0]
 8013db8:	d1f1      	bne.n	8013d9e <PDM_Filter_Init+0x136>
 8013dba:	2001      	movs	r0, #1
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	7028      	strb	r0, [r5, #0]
 8013dc0:	e791      	b.n	8013ce6 <PDM_Filter_Init+0x7e>
 8013dc2:	2220      	movs	r2, #32
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	2160      	movs	r1, #96	@ 0x60
 8013dc8:	6422      	str	r2, [r4, #64]	@ 0x40
 8013dca:	4613      	mov	r3, r2
 8013dcc:	e790      	b.n	8013cf0 <PDM_Filter_Init+0x88>
 8013dce:	bf00      	nop
 8013dd0:	e0002000 	.word	0xe0002000
 8013dd4:	e000ed00 	.word	0xe000ed00
 8013dd8:	40023008 	.word	0x40023008
 8013ddc:	40023000 	.word	0x40023000
 8013de0:	f407a5c2 	.word	0xf407a5c2
 8013de4:	b5e8b5cd 	.word	0xb5e8b5cd
 8013de8:	e0042000 	.word	0xe0042000
 8013dec:	5c001000 	.word	0x5c001000
 8013df0:	58024c08 	.word	0x58024c08
 8013df4:	58024c00 	.word	0x58024c00
 8013df8:	2400063c 	.word	0x2400063c
 8013dfc:	23fffffc 	.word	0x23fffffc
 8013e00:	000ffc00 	.word	0x000ffc00
 8013e04:	3ff00000 	.word	0x3ff00000

08013e08 <PDM_Filter_setConfig>:
 8013e08:	4b67      	ldr	r3, [pc, #412]	@ (8013fa8 <PDM_Filter_setConfig+0x1a0>)
 8013e0a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8013e0c:	429a      	cmp	r2, r3
 8013e0e:	d128      	bne.n	8013e62 <PDM_Filter_setConfig+0x5a>
 8013e10:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8013e12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e14:	880e      	ldrh	r6, [r1, #0]
 8013e16:	460d      	mov	r5, r1
 8013e18:	4604      	mov	r4, r0
 8013e1a:	f422 7180 	bic.w	r1, r2, #256	@ 0x100
 8013e1e:	1e73      	subs	r3, r6, #1
 8013e20:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 8013e24:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	@ 0x38
 8013e28:	2b06      	cmp	r3, #6
 8013e2a:	ed2d 8b02 	vpush	{d8}
 8013e2e:	6421      	str	r1, [r4, #64]	@ 0x40
 8013e30:	b083      	sub	sp, #12
 8013e32:	d820      	bhi.n	8013e76 <PDM_Filter_setConfig+0x6e>
 8013e34:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8013e36:	42b3      	cmp	r3, r6
 8013e38:	d03d      	beq.n	8013eb6 <PDM_Filter_setConfig+0xae>
 8013e3a:	4b5c      	ldr	r3, [pc, #368]	@ (8013fac <PDM_Filter_setConfig+0x1a4>)
 8013e3c:	4013      	ands	r3, r2
 8013e3e:	4333      	orrs	r3, r6
 8013e40:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8013e44:	6423      	str	r3, [r4, #64]	@ 0x40
 8013e46:	f003 030f 	and.w	r3, r3, #15
 8013e4a:	2a70      	cmp	r2, #112	@ 0x70
 8013e4c:	f103 33ff 	add.w	r3, r3, #4294967295
 8013e50:	d009      	beq.n	8013e66 <PDM_Filter_setConfig+0x5e>
 8013e52:	2b06      	cmp	r3, #6
 8013e54:	d824      	bhi.n	8013ea0 <PDM_Filter_setConfig+0x98>
 8013e56:	e8df f003 	tbb	[pc, r3]
 8013e5a:	878a      	.short	0x878a
 8013e5c:	7b7e8184 	.word	0x7b7e8184
 8013e60:	78          	.byte	0x78
 8013e61:	00          	.byte	0x00
 8013e62:	2004      	movs	r0, #4
 8013e64:	4770      	bx	lr
 8013e66:	2b06      	cmp	r3, #6
 8013e68:	d81a      	bhi.n	8013ea0 <PDM_Filter_setConfig+0x98>
 8013e6a:	e8df f003 	tbb	[pc, r3]
 8013e6e:	8f92      	.short	0x8f92
 8013e70:	8617898c 	.word	0x8617898c
 8013e74:	83          	.byte	0x83
 8013e75:	00          	.byte	0x00
 8013e76:	4287      	cmp	r7, r0
 8013e78:	f000 808e 	beq.w	8013f98 <PDM_Filter_setConfig+0x190>
 8013e7c:	f117 0f0c 	cmn.w	r7, #12
 8013e80:	f04f 0008 	mov.w	r0, #8
 8013e84:	da11      	bge.n	8013eaa <PDM_Filter_setConfig+0xa2>
 8013e86:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 8013e8a:	3040      	adds	r0, #64	@ 0x40
 8013e8c:	80ab      	strh	r3, [r5, #4]
 8013e8e:	886b      	ldrh	r3, [r5, #2]
 8013e90:	8626      	strh	r6, [r4, #48]	@ 0x30
 8013e92:	8663      	strh	r3, [r4, #50]	@ 0x32
 8013e94:	b003      	add	sp, #12
 8013e96:	ecbd 8b02 	vpop	{d8}
 8013e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e9c:	4b44      	ldr	r3, [pc, #272]	@ (8013fb0 <PDM_Filter_setConfig+0x1a8>)
 8013e9e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013ea0:	f117 0f0c 	cmn.w	r7, #12
 8013ea4:	f04f 0000 	mov.w	r0, #0
 8013ea8:	dbed      	blt.n	8013e86 <PDM_Filter_setConfig+0x7e>
 8013eaa:	2f33      	cmp	r7, #51	@ 0x33
 8013eac:	dd10      	ble.n	8013ed0 <PDM_Filter_setConfig+0xc8>
 8013eae:	2333      	movs	r3, #51	@ 0x33
 8013eb0:	3040      	adds	r0, #64	@ 0x40
 8013eb2:	80ab      	strh	r3, [r5, #4]
 8013eb4:	e7eb      	b.n	8013e8e <PDM_Filter_setConfig+0x86>
 8013eb6:	4287      	cmp	r7, r0
 8013eb8:	d1f2      	bne.n	8013ea0 <PDM_Filter_setConfig+0x98>
 8013eba:	886b      	ldrh	r3, [r5, #2]
 8013ebc:	8663      	strh	r3, [r4, #50]	@ 0x32
 8013ebe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013ec0:	2000      	movs	r0, #0
 8013ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013ec6:	6423      	str	r3, [r4, #64]	@ 0x40
 8013ec8:	b003      	add	sp, #12
 8013eca:	ecbd 8b02 	vpop	{d8}
 8013ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ed0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013ed2:	f003 030f 	and.w	r3, r3, #15
 8013ed6:	3b01      	subs	r3, #1
 8013ed8:	2b06      	cmp	r3, #6
 8013eda:	d831      	bhi.n	8013f40 <PDM_Filter_setConfig+0x138>
 8013edc:	4a35      	ldr	r2, [pc, #212]	@ (8013fb4 <PDM_Filter_setConfig+0x1ac>)
 8013ede:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8013ee2:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8013fb8 <PDM_Filter_setConfig+0x1b0>
 8013ee6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013eea:	9001      	str	r0, [sp, #4]
 8013eec:	edd3 7a07 	vldr	s15, [r3, #28]
 8013ef0:	ed93 8a00 	vldr	s16, [r3]
 8013ef4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013ef8:	f001 fade 	bl	80154b8 <powf>
 8013efc:	eef0 8a40 	vmov.f32	s17, s0
 8013f00:	9801      	ldr	r0, [sp, #4]
 8013f02:	ee07 7a90 	vmov	s15, r7
 8013f06:	ee28 8a28 	vmul.f32	s16, s16, s17
 8013f0a:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8013f0e:	9001      	str	r0, [sp, #4]
 8013f10:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8013f14:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8013fbc <PDM_Filter_setConfig+0x1b4>
 8013f18:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8013f1c:	f001 facc 	bl	80154b8 <powf>
 8013f20:	ee28 8a00 	vmul.f32	s16, s16, s0
 8013f24:	886b      	ldrh	r3, [r5, #2]
 8013f26:	9801      	ldr	r0, [sp, #4]
 8013f28:	feb8 8a48 	vrinta.f32	s16, s16
 8013f2c:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8013f30:	8727      	strh	r7, [r4, #56]	@ 0x38
 8013f32:	8663      	strh	r3, [r4, #50]	@ 0x32
 8013f34:	8626      	strh	r6, [r4, #48]	@ 0x30
 8013f36:	ed84 8a0f 	vstr	s16, [r4, #60]	@ 0x3c
 8013f3a:	2800      	cmp	r0, #0
 8013f3c:	d0bf      	beq.n	8013ebe <PDM_Filter_setConfig+0xb6>
 8013f3e:	e7a9      	b.n	8013e94 <PDM_Filter_setConfig+0x8c>
 8013f40:	eddf 8a1f 	vldr	s17, [pc, #124]	@ 8013fc0 <PDM_Filter_setConfig+0x1b8>
 8013f44:	ed9f 8a1f 	vldr	s16, [pc, #124]	@ 8013fc4 <PDM_Filter_setConfig+0x1bc>
 8013f48:	e7db      	b.n	8013f02 <PDM_Filter_setConfig+0xfa>
 8013f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8013fc8 <PDM_Filter_setConfig+0x1c0>)
 8013f4c:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013f4e:	e7a7      	b.n	8013ea0 <PDM_Filter_setConfig+0x98>
 8013f50:	4b1e      	ldr	r3, [pc, #120]	@ (8013fcc <PDM_Filter_setConfig+0x1c4>)
 8013f52:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013f54:	e7a4      	b.n	8013ea0 <PDM_Filter_setConfig+0x98>
 8013f56:	4b1e      	ldr	r3, [pc, #120]	@ (8013fd0 <PDM_Filter_setConfig+0x1c8>)
 8013f58:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013f5a:	e7a1      	b.n	8013ea0 <PDM_Filter_setConfig+0x98>
 8013f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8013fd4 <PDM_Filter_setConfig+0x1cc>)
 8013f5e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013f60:	e79e      	b.n	8013ea0 <PDM_Filter_setConfig+0x98>
 8013f62:	4b1d      	ldr	r3, [pc, #116]	@ (8013fd8 <PDM_Filter_setConfig+0x1d0>)
 8013f64:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013f66:	e79b      	b.n	8013ea0 <PDM_Filter_setConfig+0x98>
 8013f68:	4b1c      	ldr	r3, [pc, #112]	@ (8013fdc <PDM_Filter_setConfig+0x1d4>)
 8013f6a:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013f6c:	e798      	b.n	8013ea0 <PDM_Filter_setConfig+0x98>
 8013f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8013fe0 <PDM_Filter_setConfig+0x1d8>)
 8013f70:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013f72:	e795      	b.n	8013ea0 <PDM_Filter_setConfig+0x98>
 8013f74:	4b1b      	ldr	r3, [pc, #108]	@ (8013fe4 <PDM_Filter_setConfig+0x1dc>)
 8013f76:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013f78:	e792      	b.n	8013ea0 <PDM_Filter_setConfig+0x98>
 8013f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8013fe8 <PDM_Filter_setConfig+0x1e0>)
 8013f7c:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013f7e:	e78f      	b.n	8013ea0 <PDM_Filter_setConfig+0x98>
 8013f80:	4b1a      	ldr	r3, [pc, #104]	@ (8013fec <PDM_Filter_setConfig+0x1e4>)
 8013f82:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013f84:	e78c      	b.n	8013ea0 <PDM_Filter_setConfig+0x98>
 8013f86:	4b1a      	ldr	r3, [pc, #104]	@ (8013ff0 <PDM_Filter_setConfig+0x1e8>)
 8013f88:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013f8a:	e789      	b.n	8013ea0 <PDM_Filter_setConfig+0x98>
 8013f8c:	4b19      	ldr	r3, [pc, #100]	@ (8013ff4 <PDM_Filter_setConfig+0x1ec>)
 8013f8e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013f90:	e786      	b.n	8013ea0 <PDM_Filter_setConfig+0x98>
 8013f92:	4b19      	ldr	r3, [pc, #100]	@ (8013ff8 <PDM_Filter_setConfig+0x1f0>)
 8013f94:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013f96:	e783      	b.n	8013ea0 <PDM_Filter_setConfig+0x98>
 8013f98:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8013f9a:	42b3      	cmp	r3, r6
 8013f9c:	f47f af6e 	bne.w	8013e7c <PDM_Filter_setConfig+0x74>
 8013fa0:	886b      	ldrh	r3, [r5, #2]
 8013fa2:	2008      	movs	r0, #8
 8013fa4:	8663      	strh	r3, [r4, #50]	@ 0x32
 8013fa6:	e775      	b.n	8013e94 <PDM_Filter_setConfig+0x8c>
 8013fa8:	b5e8b5cd 	.word	0xb5e8b5cd
 8013fac:	fffffef0 	.word	0xfffffef0
 8013fb0:	08013121 	.word	0x08013121
 8013fb4:	08015940 	.word	0x08015940
 8013fb8:	42000000 	.word	0x42000000
 8013fbc:	3d4ccccd 	.word	0x3d4ccccd
 8013fc0:	4f800000 	.word	0x4f800000
 8013fc4:	00000000 	.word	0x00000000
 8013fc8:	0801252d 	.word	0x0801252d
 8013fcc:	080123b5 	.word	0x080123b5
 8013fd0:	080122a5 	.word	0x080122a5
 8013fd4:	08012d69 	.word	0x08012d69
 8013fd8:	08012ad1 	.word	0x08012ad1
 8013fdc:	08012899 	.word	0x08012899
 8013fe0:	080126b5 	.word	0x080126b5
 8013fe4:	0801333d 	.word	0x0801333d
 8013fe8:	08013201 	.word	0x08013201
 8013fec:	0801397d 	.word	0x0801397d
 8013ff0:	08013781 	.word	0x08013781
 8013ff4:	080135d5 	.word	0x080135d5
 8013ff8:	08013469 	.word	0x08013469

08013ffc <arm_rfft_32_fast_init_f32>:
 8013ffc:	b180      	cbz	r0, 8014020 <arm_rfft_32_fast_init_f32+0x24>
 8013ffe:	4603      	mov	r3, r0
 8014000:	2220      	movs	r2, #32
 8014002:	2010      	movs	r0, #16
 8014004:	4908      	ldr	r1, [pc, #32]	@ (8014028 <arm_rfft_32_fast_init_f32+0x2c>)
 8014006:	b430      	push	{r4, r5}
 8014008:	2514      	movs	r5, #20
 801400a:	4c08      	ldr	r4, [pc, #32]	@ (801402c <arm_rfft_32_fast_init_f32+0x30>)
 801400c:	821a      	strh	r2, [r3, #16]
 801400e:	4a08      	ldr	r2, [pc, #32]	@ (8014030 <arm_rfft_32_fast_init_f32+0x34>)
 8014010:	8018      	strh	r0, [r3, #0]
 8014012:	2000      	movs	r0, #0
 8014014:	819d      	strh	r5, [r3, #12]
 8014016:	615a      	str	r2, [r3, #20]
 8014018:	e9c3 1401 	strd	r1, r4, [r3, #4]
 801401c:	bc30      	pop	{r4, r5}
 801401e:	4770      	bx	lr
 8014020:	f04f 30ff 	mov.w	r0, #4294967295
 8014024:	4770      	bx	lr
 8014026:	bf00      	nop
 8014028:	0801de40 	.word	0x0801de40
 801402c:	08019508 	.word	0x08019508
 8014030:	08026bc0 	.word	0x08026bc0

08014034 <arm_rfft_64_fast_init_f32>:
 8014034:	b180      	cbz	r0, 8014058 <arm_rfft_64_fast_init_f32+0x24>
 8014036:	4603      	mov	r3, r0
 8014038:	2240      	movs	r2, #64	@ 0x40
 801403a:	2020      	movs	r0, #32
 801403c:	4908      	ldr	r1, [pc, #32]	@ (8014060 <arm_rfft_64_fast_init_f32+0x2c>)
 801403e:	b430      	push	{r4, r5}
 8014040:	2530      	movs	r5, #48	@ 0x30
 8014042:	4c08      	ldr	r4, [pc, #32]	@ (8014064 <arm_rfft_64_fast_init_f32+0x30>)
 8014044:	821a      	strh	r2, [r3, #16]
 8014046:	4a08      	ldr	r2, [pc, #32]	@ (8014068 <arm_rfft_64_fast_init_f32+0x34>)
 8014048:	8018      	strh	r0, [r3, #0]
 801404a:	2000      	movs	r0, #0
 801404c:	819d      	strh	r5, [r3, #12]
 801404e:	615a      	str	r2, [r3, #20]
 8014050:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8014054:	bc30      	pop	{r4, r5}
 8014056:	4770      	bx	lr
 8014058:	f04f 30ff 	mov.w	r0, #4294967295
 801405c:	4770      	bx	lr
 801405e:	bf00      	nop
 8014060:	080226c0 	.word	0x080226c0
 8014064:	0801b660 	.word	0x0801b660
 8014068:	0802b440 	.word	0x0802b440

0801406c <arm_rfft_256_fast_init_f32>:
 801406c:	b188      	cbz	r0, 8014092 <arm_rfft_256_fast_init_f32+0x26>
 801406e:	4603      	mov	r3, r0
 8014070:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014074:	2080      	movs	r0, #128	@ 0x80
 8014076:	4908      	ldr	r1, [pc, #32]	@ (8014098 <arm_rfft_256_fast_init_f32+0x2c>)
 8014078:	b430      	push	{r4, r5}
 801407a:	25d0      	movs	r5, #208	@ 0xd0
 801407c:	4c07      	ldr	r4, [pc, #28]	@ (801409c <arm_rfft_256_fast_init_f32+0x30>)
 801407e:	821a      	strh	r2, [r3, #16]
 8014080:	4a07      	ldr	r2, [pc, #28]	@ (80140a0 <arm_rfft_256_fast_init_f32+0x34>)
 8014082:	8018      	strh	r0, [r3, #0]
 8014084:	2000      	movs	r0, #0
 8014086:	819d      	strh	r5, [r3, #12]
 8014088:	615a      	str	r2, [r3, #20]
 801408a:	e9c3 1401 	strd	r1, r4, [r3, #4]
 801408e:	bc30      	pop	{r4, r5}
 8014090:	4770      	bx	lr
 8014092:	f04f 30ff 	mov.w	r0, #4294967295
 8014096:	4770      	bx	lr
 8014098:	0801da40 	.word	0x0801da40
 801409c:	08019368 	.word	0x08019368
 80140a0:	080267c0 	.word	0x080267c0

080140a4 <arm_rfft_512_fast_init_f32>:
 80140a4:	b198      	cbz	r0, 80140ce <arm_rfft_512_fast_init_f32+0x2a>
 80140a6:	4603      	mov	r3, r0
 80140a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80140ac:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80140b0:	4908      	ldr	r1, [pc, #32]	@ (80140d4 <arm_rfft_512_fast_init_f32+0x30>)
 80140b2:	b430      	push	{r4, r5}
 80140b4:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 80140b8:	4c07      	ldr	r4, [pc, #28]	@ (80140d8 <arm_rfft_512_fast_init_f32+0x34>)
 80140ba:	821a      	strh	r2, [r3, #16]
 80140bc:	4a07      	ldr	r2, [pc, #28]	@ (80140dc <arm_rfft_512_fast_init_f32+0x38>)
 80140be:	8018      	strh	r0, [r3, #0]
 80140c0:	2000      	movs	r0, #0
 80140c2:	819d      	strh	r5, [r3, #12]
 80140c4:	615a      	str	r2, [r3, #20]
 80140c6:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80140ca:	bc30      	pop	{r4, r5}
 80140cc:	4770      	bx	lr
 80140ce:	f04f 30ff 	mov.w	r0, #4294967295
 80140d2:	4770      	bx	lr
 80140d4:	08021ec0 	.word	0x08021ec0
 80140d8:	0801b2f0 	.word	0x0801b2f0
 80140dc:	0802ac40 	.word	0x0802ac40

080140e0 <arm_rfft_1024_fast_init_f32>:
 80140e0:	b198      	cbz	r0, 801410a <arm_rfft_1024_fast_init_f32+0x2a>
 80140e2:	4603      	mov	r3, r0
 80140e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80140e8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80140ec:	4908      	ldr	r1, [pc, #32]	@ (8014110 <arm_rfft_1024_fast_init_f32+0x30>)
 80140ee:	b430      	push	{r4, r5}
 80140f0:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 80140f4:	4c07      	ldr	r4, [pc, #28]	@ (8014114 <arm_rfft_1024_fast_init_f32+0x34>)
 80140f6:	821a      	strh	r2, [r3, #16]
 80140f8:	4a07      	ldr	r2, [pc, #28]	@ (8014118 <arm_rfft_1024_fast_init_f32+0x38>)
 80140fa:	8018      	strh	r0, [r3, #0]
 80140fc:	2000      	movs	r0, #0
 80140fe:	819d      	strh	r5, [r3, #12]
 8014100:	615a      	str	r2, [r3, #20]
 8014102:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8014106:	bc30      	pop	{r4, r5}
 8014108:	4770      	bx	lr
 801410a:	f04f 30ff 	mov.w	r0, #4294967295
 801410e:	4770      	bx	lr
 8014110:	080227c0 	.word	0x080227c0
 8014114:	0801b6c0 	.word	0x0801b6c0
 8014118:	080237c0 	.word	0x080237c0

0801411c <arm_rfft_2048_fast_init_f32>:
 801411c:	b198      	cbz	r0, 8014146 <arm_rfft_2048_fast_init_f32+0x2a>
 801411e:	4603      	mov	r3, r0
 8014120:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014124:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8014128:	4908      	ldr	r1, [pc, #32]	@ (801414c <arm_rfft_2048_fast_init_f32+0x30>)
 801412a:	b430      	push	{r4, r5}
 801412c:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 8014130:	4c07      	ldr	r4, [pc, #28]	@ (8014150 <arm_rfft_2048_fast_init_f32+0x34>)
 8014132:	821a      	strh	r2, [r3, #16]
 8014134:	4a07      	ldr	r2, [pc, #28]	@ (8014154 <arm_rfft_2048_fast_init_f32+0x38>)
 8014136:	8018      	strh	r0, [r3, #0]
 8014138:	2000      	movs	r0, #0
 801413a:	819d      	strh	r5, [r3, #12]
 801413c:	615a      	str	r2, [r3, #20]
 801413e:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8014142:	bc30      	pop	{r4, r5}
 8014144:	4770      	bx	lr
 8014146:	f04f 30ff 	mov.w	r0, #4294967295
 801414a:	4770      	bx	lr
 801414c:	0801ba40 	.word	0x0801ba40
 8014150:	08018558 	.word	0x08018558
 8014154:	080247c0 	.word	0x080247c0

08014158 <arm_rfft_4096_fast_init_f32>:
 8014158:	b198      	cbz	r0, 8014182 <arm_rfft_4096_fast_init_f32+0x2a>
 801415a:	4603      	mov	r3, r0
 801415c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8014160:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8014164:	4908      	ldr	r1, [pc, #32]	@ (8014188 <arm_rfft_4096_fast_init_f32+0x30>)
 8014166:	b430      	push	{r4, r5}
 8014168:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 801416c:	4c07      	ldr	r4, [pc, #28]	@ (801418c <arm_rfft_4096_fast_init_f32+0x34>)
 801416e:	821a      	strh	r2, [r3, #16]
 8014170:	4a07      	ldr	r2, [pc, #28]	@ (8014190 <arm_rfft_4096_fast_init_f32+0x38>)
 8014172:	8018      	strh	r0, [r3, #0]
 8014174:	2000      	movs	r0, #0
 8014176:	819d      	strh	r5, [r3, #12]
 8014178:	615a      	str	r2, [r3, #20]
 801417a:	e9c3 1401 	strd	r1, r4, [r3, #4]
 801417e:	bc30      	pop	{r4, r5}
 8014180:	4770      	bx	lr
 8014182:	f04f 30ff 	mov.w	r0, #4294967295
 8014186:	4770      	bx	lr
 8014188:	0801dec0 	.word	0x0801dec0
 801418c:	08019530 	.word	0x08019530
 8014190:	08026c40 	.word	0x08026c40

08014194 <arm_rfft_fast_init_f32>:
 8014194:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8014198:	d01f      	beq.n	80141da <arm_rfft_fast_init_f32+0x46>
 801419a:	d90b      	bls.n	80141b4 <arm_rfft_fast_init_f32+0x20>
 801419c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80141a0:	d019      	beq.n	80141d6 <arm_rfft_fast_init_f32+0x42>
 80141a2:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80141a6:	d012      	beq.n	80141ce <arm_rfft_fast_init_f32+0x3a>
 80141a8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80141ac:	d00d      	beq.n	80141ca <arm_rfft_fast_init_f32+0x36>
 80141ae:	f04f 30ff 	mov.w	r0, #4294967295
 80141b2:	4770      	bx	lr
 80141b4:	2940      	cmp	r1, #64	@ 0x40
 80141b6:	d00c      	beq.n	80141d2 <arm_rfft_fast_init_f32+0x3e>
 80141b8:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80141bc:	d003      	beq.n	80141c6 <arm_rfft_fast_init_f32+0x32>
 80141be:	2920      	cmp	r1, #32
 80141c0:	d1f5      	bne.n	80141ae <arm_rfft_fast_init_f32+0x1a>
 80141c2:	4b07      	ldr	r3, [pc, #28]	@ (80141e0 <arm_rfft_fast_init_f32+0x4c>)
 80141c4:	4718      	bx	r3
 80141c6:	4b07      	ldr	r3, [pc, #28]	@ (80141e4 <arm_rfft_fast_init_f32+0x50>)
 80141c8:	4718      	bx	r3
 80141ca:	4b07      	ldr	r3, [pc, #28]	@ (80141e8 <arm_rfft_fast_init_f32+0x54>)
 80141cc:	4718      	bx	r3
 80141ce:	4b07      	ldr	r3, [pc, #28]	@ (80141ec <arm_rfft_fast_init_f32+0x58>)
 80141d0:	4718      	bx	r3
 80141d2:	4b07      	ldr	r3, [pc, #28]	@ (80141f0 <arm_rfft_fast_init_f32+0x5c>)
 80141d4:	e7f6      	b.n	80141c4 <arm_rfft_fast_init_f32+0x30>
 80141d6:	4b07      	ldr	r3, [pc, #28]	@ (80141f4 <arm_rfft_fast_init_f32+0x60>)
 80141d8:	e7f4      	b.n	80141c4 <arm_rfft_fast_init_f32+0x30>
 80141da:	4b07      	ldr	r3, [pc, #28]	@ (80141f8 <arm_rfft_fast_init_f32+0x64>)
 80141dc:	e7f2      	b.n	80141c4 <arm_rfft_fast_init_f32+0x30>
 80141de:	bf00      	nop
 80141e0:	08013ffd 	.word	0x08013ffd
 80141e4:	0801406d 	.word	0x0801406d
 80141e8:	080140e1 	.word	0x080140e1
 80141ec:	08014159 	.word	0x08014159
 80141f0:	08014035 	.word	0x08014035
 80141f4:	0801411d 	.word	0x0801411d
 80141f8:	080140a5 	.word	0x080140a5

080141fc <stage_rfft_f32>:
 80141fc:	b470      	push	{r4, r5, r6}
 80141fe:	edd1 7a00 	vldr	s15, [r1]
 8014202:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8014206:	ed91 7a01 	vldr	s14, [r1, #4]
 801420a:	f101 0510 	add.w	r5, r1, #16
 801420e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014212:	8806      	ldrh	r6, [r0, #0]
 8014214:	ee37 7a07 	vadd.f32	s14, s14, s14
 8014218:	6943      	ldr	r3, [r0, #20]
 801421a:	1e70      	subs	r0, r6, #1
 801421c:	eeb0 4a46 	vmov.f32	s8, s12
 8014220:	f102 0410 	add.w	r4, r2, #16
 8014224:	3310      	adds	r3, #16
 8014226:	ee77 6a87 	vadd.f32	s13, s15, s14
 801422a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801422e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014232:	3908      	subs	r1, #8
 8014234:	ee26 7a86 	vmul.f32	s14, s13, s12
 8014238:	ee67 7a86 	vmul.f32	s15, s15, s12
 801423c:	ed82 7a00 	vstr	s14, [r2]
 8014240:	edc2 7a01 	vstr	s15, [r2, #4]
 8014244:	ed15 6a02 	vldr	s12, [r5, #-8]
 8014248:	3801      	subs	r0, #1
 801424a:	ed91 7a02 	vldr	s14, [r1, #8]
 801424e:	f105 0508 	add.w	r5, r5, #8
 8014252:	ed53 6a02 	vldr	s13, [r3, #-8]
 8014256:	f1a1 0108 	sub.w	r1, r1, #8
 801425a:	ee77 5a46 	vsub.f32	s11, s14, s12
 801425e:	edd1 4a05 	vldr	s9, [r1, #20]
 8014262:	ed55 7a03 	vldr	s15, [r5, #-12]
 8014266:	ee37 7a06 	vadd.f32	s14, s14, s12
 801426a:	ed13 6a01 	vldr	s12, [r3, #-4]
 801426e:	f104 0408 	add.w	r4, r4, #8
 8014272:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8014276:	f103 0308 	add.w	r3, r3, #8
 801427a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 801427e:	ee66 5a25 	vmul.f32	s11, s12, s11
 8014282:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8014286:	ee37 7a23 	vadd.f32	s14, s14, s7
 801428a:	ee66 6a85 	vmul.f32	s13, s13, s10
 801428e:	ee26 6a05 	vmul.f32	s12, s12, s10
 8014292:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8014296:	ee37 7a06 	vadd.f32	s14, s14, s12
 801429a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801429e:	ee27 7a04 	vmul.f32	s14, s14, s8
 80142a2:	ee67 7a84 	vmul.f32	s15, s15, s8
 80142a6:	ed04 7a04 	vstr	s14, [r4, #-16]
 80142aa:	ed44 7a03 	vstr	s15, [r4, #-12]
 80142ae:	d1c9      	bne.n	8014244 <stage_rfft_f32+0x48>
 80142b0:	bc70      	pop	{r4, r5, r6}
 80142b2:	4770      	bx	lr

080142b4 <merge_rfft_f32>:
 80142b4:	b410      	push	{r4}
 80142b6:	edd1 7a00 	vldr	s15, [r1]
 80142ba:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80142be:	edd1 6a01 	vldr	s13, [r1, #4]
 80142c2:	8804      	ldrh	r4, [r0, #0]
 80142c4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80142c8:	6940      	ldr	r0, [r0, #20]
 80142ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80142ce:	3c01      	subs	r4, #1
 80142d0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80142d4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80142d8:	ed82 7a00 	vstr	s14, [r2]
 80142dc:	edc2 7a01 	vstr	s15, [r2, #4]
 80142e0:	b3dc      	cbz	r4, 801435a <merge_rfft_f32+0xa6>
 80142e2:	00e3      	lsls	r3, r4, #3
 80142e4:	3010      	adds	r0, #16
 80142e6:	3210      	adds	r2, #16
 80142e8:	3b08      	subs	r3, #8
 80142ea:	440b      	add	r3, r1
 80142ec:	3110      	adds	r1, #16
 80142ee:	ed11 6a02 	vldr	s12, [r1, #-8]
 80142f2:	3c01      	subs	r4, #1
 80142f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80142f8:	f101 0108 	add.w	r1, r1, #8
 80142fc:	ed50 6a02 	vldr	s13, [r0, #-8]
 8014300:	f1a3 0308 	sub.w	r3, r3, #8
 8014304:	ee76 5a47 	vsub.f32	s11, s12, s14
 8014308:	edd3 4a05 	vldr	s9, [r3, #20]
 801430c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8014310:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014314:	ed10 6a01 	vldr	s12, [r0, #-4]
 8014318:	f102 0208 	add.w	r2, r2, #8
 801431c:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8014320:	f100 0008 	add.w	r0, r0, #8
 8014324:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8014328:	ee66 5a25 	vmul.f32	s11, s12, s11
 801432c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8014330:	ee37 7a63 	vsub.f32	s14, s14, s7
 8014334:	ee66 6a85 	vmul.f32	s13, s13, s10
 8014338:	ee26 6a05 	vmul.f32	s12, s12, s10
 801433c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8014340:	ee37 7a46 	vsub.f32	s14, s14, s12
 8014344:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014348:	ee27 7a04 	vmul.f32	s14, s14, s8
 801434c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014350:	ed02 7a04 	vstr	s14, [r2, #-16]
 8014354:	ed42 7a03 	vstr	s15, [r2, #-12]
 8014358:	d1c9      	bne.n	80142ee <merge_rfft_f32+0x3a>
 801435a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801435e:	4770      	bx	lr

08014360 <arm_rfft_fast_f32>:
 8014360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014364:	8a05      	ldrh	r5, [r0, #16]
 8014366:	4604      	mov	r4, r0
 8014368:	4617      	mov	r7, r2
 801436a:	461e      	mov	r6, r3
 801436c:	086d      	lsrs	r5, r5, #1
 801436e:	8005      	strh	r5, [r0, #0]
 8014370:	b14b      	cbz	r3, 8014386 <arm_rfft_fast_f32+0x26>
 8014372:	f7ff ff9f 	bl	80142b4 <merge_rfft_f32>
 8014376:	4632      	mov	r2, r6
 8014378:	4639      	mov	r1, r7
 801437a:	4620      	mov	r0, r4
 801437c:	2301      	movs	r3, #1
 801437e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014382:	f000 bb35 	b.w	80149f0 <arm_cfft_f32>
 8014386:	4688      	mov	r8, r1
 8014388:	461a      	mov	r2, r3
 801438a:	2301      	movs	r3, #1
 801438c:	f000 fb30 	bl	80149f0 <arm_cfft_f32>
 8014390:	463a      	mov	r2, r7
 8014392:	4641      	mov	r1, r8
 8014394:	4620      	mov	r0, r4
 8014396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801439a:	f7ff bf2f 	b.w	80141fc <stage_rfft_f32>
 801439e:	bf00      	nop

080143a0 <arm_cfft_radix8by2_f32>:
 80143a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143a4:	4607      	mov	r7, r0
 80143a6:	4608      	mov	r0, r1
 80143a8:	ed2d 8b06 	vpush	{d8-d10}
 80143ac:	f8b7 c000 	ldrh.w	ip, [r7]
 80143b0:	687a      	ldr	r2, [r7, #4]
 80143b2:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80143b6:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80143ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80143be:	f000 80ac 	beq.w	801451a <arm_cfft_radix8by2_f32+0x17a>
 80143c2:	008c      	lsls	r4, r1, #2
 80143c4:	f100 0310 	add.w	r3, r0, #16
 80143c8:	3210      	adds	r2, #16
 80143ca:	f108 0610 	add.w	r6, r8, #16
 80143ce:	3410      	adds	r4, #16
 80143d0:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80143d4:	1905      	adds	r5, r0, r4
 80143d6:	4444      	add	r4, r8
 80143d8:	ed16 7a04 	vldr	s14, [r6, #-16]
 80143dc:	3310      	adds	r3, #16
 80143de:	ed53 4a08 	vldr	s9, [r3, #-32]	@ 0xffffffe0
 80143e2:	3510      	adds	r5, #16
 80143e4:	ed56 0a03 	vldr	s1, [r6, #-12]
 80143e8:	3210      	adds	r2, #16
 80143ea:	ee74 9a87 	vadd.f32	s19, s9, s14
 80143ee:	ed56 7a02 	vldr	s15, [r6, #-8]
 80143f2:	ed56 2a01 	vldr	s5, [r6, #-4]
 80143f6:	ee74 4ac7 	vsub.f32	s9, s9, s14
 80143fa:	ed54 5a04 	vldr	s11, [r4, #-16]
 80143fe:	3610      	adds	r6, #16
 8014400:	ed14 5a03 	vldr	s10, [r4, #-12]
 8014404:	3410      	adds	r4, #16
 8014406:	ed14 3a06 	vldr	s6, [r4, #-24]	@ 0xffffffe8
 801440a:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 801440e:	ed55 6a08 	vldr	s13, [r5, #-32]	@ 0xffffffe0
 8014412:	ed55 3a06 	vldr	s7, [r5, #-24]	@ 0xffffffe8
 8014416:	ed15 4a05 	vldr	s8, [r5, #-20]	@ 0xffffffec
 801441a:	ee36 9aa5 	vadd.f32	s18, s13, s11
 801441e:	ed14 6a05 	vldr	s12, [r4, #-20]	@ 0xffffffec
 8014422:	ee33 8a83 	vadd.f32	s16, s7, s6
 8014426:	ed13 7a07 	vldr	s14, [r3, #-28]	@ 0xffffffe4
 801442a:	ee75 5ae6 	vsub.f32	s11, s11, s13
 801442e:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 8014432:	ee34 0a06 	vadd.f32	s0, s8, s12
 8014436:	ed15 1a07 	vldr	s2, [r5, #-28]	@ 0xffffffe4
 801443a:	ee77 aa20 	vadd.f32	s21, s14, s1
 801443e:	ed43 9a08 	vstr	s19, [r3, #-32]	@ 0xffffffe0
 8014442:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8014446:	ee72 9a22 	vadd.f32	s19, s4, s5
 801444a:	ee71 8a05 	vadd.f32	s17, s2, s10
 801444e:	ed43 aa07 	vstr	s21, [r3, #-28]	@ 0xffffffe4
 8014452:	ee37 7a60 	vsub.f32	s14, s14, s1
 8014456:	ed03 aa06 	vstr	s20, [r3, #-24]	@ 0xffffffe8
 801445a:	ee35 5a41 	vsub.f32	s10, s10, s2
 801445e:	ed43 9a05 	vstr	s19, [r3, #-20]	@ 0xffffffec
 8014462:	ee36 6a44 	vsub.f32	s12, s12, s8
 8014466:	ed05 9a08 	vstr	s18, [r5, #-32]	@ 0xffffffe0
 801446a:	ed45 8a07 	vstr	s17, [r5, #-28]	@ 0xffffffe4
 801446e:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8014472:	ed05 8a06 	vstr	s16, [r5, #-24]	@ 0xffffffe8
 8014476:	ee72 7a62 	vsub.f32	s15, s4, s5
 801447a:	ed05 0a05 	vstr	s0, [r5, #-20]	@ 0xffffffec
 801447e:	ee73 2a63 	vsub.f32	s5, s6, s7
 8014482:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 8014486:	4563      	cmp	r3, ip
 8014488:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 801448c:	ee24 3a84 	vmul.f32	s6, s9, s8
 8014490:	ee27 2a26 	vmul.f32	s4, s14, s13
 8014494:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8014498:	ee65 3aa6 	vmul.f32	s7, s11, s13
 801449c:	ee27 7a04 	vmul.f32	s14, s14, s8
 80144a0:	ee65 5a84 	vmul.f32	s11, s11, s8
 80144a4:	ee65 6a26 	vmul.f32	s13, s10, s13
 80144a8:	ee25 5a04 	vmul.f32	s10, s10, s8
 80144ac:	ee37 7a64 	vsub.f32	s14, s14, s9
 80144b0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80144b4:	ee33 4a02 	vadd.f32	s8, s6, s4
 80144b8:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80144bc:	ed06 7a07 	vstr	s14, [r6, #-28]	@ 0xffffffe4
 80144c0:	ed06 4a08 	vstr	s8, [r6, #-32]	@ 0xffffffe0
 80144c4:	ed04 5a08 	vstr	s10, [r4, #-32]	@ 0xffffffe0
 80144c8:	ed44 6a07 	vstr	s13, [r4, #-28]	@ 0xffffffe4
 80144cc:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 80144d0:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 80144d4:	ee61 4aa6 	vmul.f32	s9, s3, s13
 80144d8:	ee27 4a87 	vmul.f32	s8, s15, s14
 80144dc:	ee61 5a87 	vmul.f32	s11, s3, s14
 80144e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80144e4:	ee22 5a87 	vmul.f32	s10, s5, s14
 80144e8:	ee26 7a07 	vmul.f32	s14, s12, s14
 80144ec:	ee26 6a26 	vmul.f32	s12, s12, s13
 80144f0:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80144f4:	ee74 4a84 	vadd.f32	s9, s9, s8
 80144f8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80144fc:	ee35 6a46 	vsub.f32	s12, s10, s12
 8014500:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014504:	ed46 4a06 	vstr	s9, [r6, #-24]	@ 0xffffffe8
 8014508:	ed46 7a05 	vstr	s15, [r6, #-20]	@ 0xffffffec
 801450c:	ed04 6a06 	vstr	s12, [r4, #-24]	@ 0xffffffe8
 8014510:	ed04 7a05 	vstr	s14, [r4, #-20]	@ 0xffffffec
 8014514:	f47f af60 	bne.w	80143d8 <arm_cfft_radix8by2_f32+0x38>
 8014518:	687a      	ldr	r2, [r7, #4]
 801451a:	b28c      	uxth	r4, r1
 801451c:	2302      	movs	r3, #2
 801451e:	4621      	mov	r1, r4
 8014520:	f000 fc3a 	bl	8014d98 <arm_radix8_butterfly_f32>
 8014524:	4621      	mov	r1, r4
 8014526:	687a      	ldr	r2, [r7, #4]
 8014528:	4640      	mov	r0, r8
 801452a:	2302      	movs	r3, #2
 801452c:	ecbd 8b06 	vpop	{d8-d10}
 8014530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014534:	f000 bc30 	b.w	8014d98 <arm_radix8_butterfly_f32>

08014538 <arm_cfft_radix8by4_f32>:
 8014538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801453c:	ed2d 8b04 	vpush	{d8-d9}
 8014540:	8804      	ldrh	r4, [r0, #0]
 8014542:	b08d      	sub	sp, #52	@ 0x34
 8014544:	6842      	ldr	r2, [r0, #4]
 8014546:	460d      	mov	r5, r1
 8014548:	0864      	lsrs	r4, r4, #1
 801454a:	edd1 7a00 	vldr	s15, [r1]
 801454e:	edd1 5a01 	vldr	s11, [r1, #4]
 8014552:	00a3      	lsls	r3, r4, #2
 8014554:	18ce      	adds	r6, r1, r3
 8014556:	18f7      	adds	r7, r6, r3
 8014558:	ed96 7a00 	vldr	s14, [r6]
 801455c:	ed96 4a01 	vldr	s8, [r6, #4]
 8014560:	ed97 6a00 	vldr	s12, [r7]
 8014564:	edd7 4a01 	vldr	s9, [r7, #4]
 8014568:	ee77 6a86 	vadd.f32	s13, s15, s12
 801456c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014570:	ee35 6aa4 	vadd.f32	s12, s11, s9
 8014574:	ee77 2a26 	vadd.f32	s5, s14, s13
 8014578:	ee75 5ae4 	vsub.f32	s11, s11, s9
 801457c:	ee74 3a27 	vadd.f32	s7, s8, s15
 8014580:	ee76 4a44 	vsub.f32	s9, s12, s8
 8014584:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8014588:	ee77 7ac4 	vsub.f32	s15, s15, s8
 801458c:	ee35 4ac7 	vsub.f32	s8, s11, s14
 8014590:	ee37 7a25 	vadd.f32	s14, s14, s11
 8014594:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8014598:	0860      	lsrs	r0, r4, #1
 801459a:	f102 0408 	add.w	r4, r2, #8
 801459e:	9405      	str	r4, [sp, #20]
 80145a0:	f102 0410 	add.w	r4, r2, #16
 80145a4:	9009      	str	r0, [sp, #36]	@ 0x24
 80145a6:	f1a0 0902 	sub.w	r9, r0, #2
 80145aa:	9403      	str	r4, [sp, #12]
 80145ac:	18fc      	adds	r4, r7, r3
 80145ae:	f102 0018 	add.w	r0, r2, #24
 80145b2:	ed94 5a00 	vldr	s10, [r4]
 80145b6:	ed94 3a01 	vldr	s6, [r4, #4]
 80145ba:	ee72 2a85 	vadd.f32	s5, s5, s10
 80145be:	9004      	str	r0, [sp, #16]
 80145c0:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80145c4:	4620      	mov	r0, r4
 80145c6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80145ca:	9408      	str	r4, [sp, #32]
 80145cc:	ee12 ca90 	vmov	ip, s5
 80145d0:	ee74 5ac3 	vsub.f32	s11, s9, s6
 80145d4:	ee77 7a83 	vadd.f32	s15, s15, s6
 80145d8:	f845 cb08 	str.w	ip, [r5], #8
 80145dc:	ee13 ca90 	vmov	ip, s7
 80145e0:	ed96 2a01 	vldr	s4, [r6, #4]
 80145e4:	ee74 4a05 	vadd.f32	s9, s8, s10
 80145e8:	edd4 2a01 	vldr	s5, [r4, #4]
 80145ec:	ee37 7a45 	vsub.f32	s14, s14, s10
 80145f0:	ee36 6a02 	vadd.f32	s12, s12, s4
 80145f4:	9500      	str	r5, [sp, #0]
 80145f6:	460d      	mov	r5, r1
 80145f8:	ee36 6a22 	vadd.f32	s12, s12, s5
 80145fc:	ed81 6a01 	vstr	s12, [r1, #4]
 8014600:	4631      	mov	r1, r6
 8014602:	f841 cb08 	str.w	ip, [r1], #8
 8014606:	ee16 ca90 	vmov	ip, s13
 801460a:	9106      	str	r1, [sp, #24]
 801460c:	4639      	mov	r1, r7
 801460e:	edc6 4a01 	vstr	s9, [r6, #4]
 8014612:	f841 cb08 	str.w	ip, [r1], #8
 8014616:	9102      	str	r1, [sp, #8]
 8014618:	ee17 1a90 	vmov	r1, s15
 801461c:	edc7 5a01 	vstr	s11, [r7, #4]
 8014620:	f840 1b08 	str.w	r1, [r0], #8
 8014624:	ea5f 0159 	movs.w	r1, r9, lsr #1
 8014628:	9001      	str	r0, [sp, #4]
 801462a:	ed84 7a01 	vstr	s14, [r4, #4]
 801462e:	9107      	str	r1, [sp, #28]
 8014630:	f000 8135 	beq.w	801489e <arm_cfft_radix8by4_f32+0x366>
 8014634:	3b0c      	subs	r3, #12
 8014636:	f102 0920 	add.w	r9, r2, #32
 801463a:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 801463e:	4622      	mov	r2, r4
 8014640:	468b      	mov	fp, r1
 8014642:	f105 0e10 	add.w	lr, r5, #16
 8014646:	4423      	add	r3, r4
 8014648:	f1a6 0c0c 	sub.w	ip, r6, #12
 801464c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8014650:	f106 0010 	add.w	r0, r6, #16
 8014654:	f1a7 010c 	sub.w	r1, r7, #12
 8014658:	f107 0510 	add.w	r5, r7, #16
 801465c:	3c0c      	subs	r4, #12
 801465e:	3210      	adds	r2, #16
 8014660:	ed15 7a02 	vldr	s14, [r5, #-8]
 8014664:	f1bb 0b01 	subs.w	fp, fp, #1
 8014668:	ed5e 7a02 	vldr	s15, [lr, #-8]
 801466c:	f1ac 0c08 	sub.w	ip, ip, #8
 8014670:	ed50 6a02 	vldr	s13, [r0, #-8]
 8014674:	f10e 0e08 	add.w	lr, lr, #8
 8014678:	ee77 1a87 	vadd.f32	s3, s15, s14
 801467c:	ed52 4a02 	vldr	s9, [r2, #-8]
 8014680:	ed55 5a01 	vldr	s11, [r5, #-4]
 8014684:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014688:	ed1e 7a03 	vldr	s14, [lr, #-12]
 801468c:	f10a 0a08 	add.w	sl, sl, #8
 8014690:	ee36 6aa1 	vadd.f32	s12, s13, s3
 8014694:	ed10 3a01 	vldr	s6, [r0, #-4]
 8014698:	ee37 4a25 	vadd.f32	s8, s14, s11
 801469c:	ed52 3a01 	vldr	s7, [r2, #-4]
 80146a0:	ee37 7a65 	vsub.f32	s14, s14, s11
 80146a4:	f100 0008 	add.w	r0, r0, #8
 80146a8:	ee36 6a24 	vadd.f32	s12, s12, s9
 80146ac:	f1a1 0108 	sub.w	r1, r1, #8
 80146b0:	ee73 2a27 	vadd.f32	s5, s6, s15
 80146b4:	f109 0910 	add.w	r9, r9, #16
 80146b8:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80146bc:	f105 0508 	add.w	r5, r5, #8
 80146c0:	ed0e 6a04 	vstr	s12, [lr, #-16]
 80146c4:	ee37 5a66 	vsub.f32	s10, s14, s13
 80146c8:	ed50 5a03 	vldr	s11, [r0, #-12]
 80146cc:	ee71 1ae6 	vsub.f32	s3, s3, s13
 80146d0:	ed12 6a01 	vldr	s12, [r2, #-4]
 80146d4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80146d8:	ee74 5a25 	vadd.f32	s11, s8, s11
 80146dc:	f1a4 0408 	sub.w	r4, r4, #8
 80146e0:	ee34 4a43 	vsub.f32	s8, s8, s6
 80146e4:	f108 0818 	add.w	r8, r8, #24
 80146e8:	ee32 0ae3 	vsub.f32	s0, s5, s7
 80146ec:	f102 0208 	add.w	r2, r2, #8
 80146f0:	ee75 5a86 	vadd.f32	s11, s11, s12
 80146f4:	f1a3 0308 	sub.w	r3, r3, #8
 80146f8:	ee34 6a63 	vsub.f32	s12, s8, s7
 80146fc:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8014700:	ed4e 5a03 	vstr	s11, [lr, #-12]
 8014704:	ee35 5a24 	vadd.f32	s10, s10, s9
 8014708:	ed94 4a04 	vldr	s8, [r4, #16]
 801470c:	ee71 1ae4 	vsub.f32	s3, s3, s9
 8014710:	ed9c 3a04 	vldr	s6, [ip, #16]
 8014714:	ee37 7a64 	vsub.f32	s14, s14, s9
 8014718:	edd1 7a04 	vldr	s15, [r1, #16]
 801471c:	ee73 6a04 	vadd.f32	s13, s6, s8
 8014720:	ed93 8a04 	vldr	s16, [r3, #16]
 8014724:	edd4 5a03 	vldr	s11, [r4, #12]
 8014728:	ee33 3a44 	vsub.f32	s6, s6, s8
 801472c:	ed9c 2a03 	vldr	s4, [ip, #12]
 8014730:	ee77 8ac8 	vsub.f32	s17, s15, s16
 8014734:	ee77 0aa6 	vadd.f32	s1, s15, s13
 8014738:	ed91 1a03 	vldr	s2, [r1, #12]
 801473c:	ee32 4a25 	vadd.f32	s8, s4, s11
 8014740:	edd3 2a03 	vldr	s5, [r3, #12]
 8014744:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8014748:	ee70 0a88 	vadd.f32	s1, s1, s16
 801474c:	ee73 4a41 	vsub.f32	s9, s6, s2
 8014750:	ee32 2a65 	vsub.f32	s4, s4, s11
 8014754:	edcc 0a04 	vstr	s1, [ip, #16]
 8014758:	ee74 0a41 	vsub.f32	s1, s8, s2
 801475c:	edd1 6a03 	vldr	s13, [r1, #12]
 8014760:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8014764:	ed93 9a03 	vldr	s18, [r3, #12]
 8014768:	ee78 5a82 	vadd.f32	s11, s17, s4
 801476c:	ee34 4a26 	vadd.f32	s8, s8, s13
 8014770:	ee70 0ae2 	vsub.f32	s1, s1, s5
 8014774:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8014778:	ee34 4a09 	vadd.f32	s8, s8, s18
 801477c:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8014780:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8014784:	ed8c 4a03 	vstr	s8, [ip, #12]
 8014788:	ee38 2ac2 	vsub.f32	s4, s17, s4
 801478c:	ed1a 1a03 	vldr	s2, [sl, #-12]
 8014790:	ed1a 4a04 	vldr	s8, [sl, #-16]
 8014794:	ee60 2a01 	vmul.f32	s5, s0, s2
 8014798:	ee64 6a81 	vmul.f32	s13, s9, s2
 801479c:	ee20 8a04 	vmul.f32	s16, s0, s8
 80147a0:	ee64 4a84 	vmul.f32	s9, s9, s8
 80147a4:	ee25 0a01 	vmul.f32	s0, s10, s2
 80147a8:	ee25 5a04 	vmul.f32	s10, s10, s8
 80147ac:	ee25 4a84 	vmul.f32	s8, s11, s8
 80147b0:	ee65 5a81 	vmul.f32	s11, s11, s2
 80147b4:	ee35 5a62 	vsub.f32	s10, s10, s5
 80147b8:	ee36 4ac4 	vsub.f32	s8, s13, s8
 80147bc:	ee75 5aa4 	vadd.f32	s11, s11, s9
 80147c0:	ee38 1a00 	vadd.f32	s2, s16, s0
 80147c4:	ed00 5a03 	vstr	s10, [r0, #-12]
 80147c8:	ed00 1a04 	vstr	s2, [r0, #-16]
 80147cc:	ed81 4a04 	vstr	s8, [r1, #16]
 80147d0:	edc1 5a03 	vstr	s11, [r1, #12]
 80147d4:	ed19 5a08 	vldr	s10, [r9, #-32]	@ 0xffffffe0
 80147d8:	ed59 5a07 	vldr	s11, [r9, #-28]	@ 0xffffffe4
 80147dc:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 80147e0:	ee66 2a25 	vmul.f32	s5, s12, s11
 80147e4:	ee67 6aa5 	vmul.f32	s13, s15, s11
 80147e8:	ee21 4a85 	vmul.f32	s8, s3, s10
 80147ec:	ee60 7a85 	vmul.f32	s15, s1, s10
 80147f0:	ee61 1aa5 	vmul.f32	s3, s3, s11
 80147f4:	ee26 6a05 	vmul.f32	s12, s12, s10
 80147f8:	ee60 5aa5 	vmul.f32	s11, s1, s11
 80147fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8014800:	ee34 5a22 	vadd.f32	s10, s8, s5
 8014804:	ee36 6a61 	vsub.f32	s12, s12, s3
 8014808:	ee74 5ae5 	vsub.f32	s11, s9, s11
 801480c:	ed05 5a04 	vstr	s10, [r5, #-16]
 8014810:	ed05 6a03 	vstr	s12, [r5, #-12]
 8014814:	edc4 5a04 	vstr	s11, [r4, #16]
 8014818:	edc4 6a03 	vstr	s13, [r4, #12]
 801481c:	ed58 2a0c 	vldr	s5, [r8, #-48]	@ 0xffffffd0
 8014820:	ed58 7a0b 	vldr	s15, [r8, #-44]	@ 0xffffffd4
 8014824:	ee23 6aa2 	vmul.f32	s12, s7, s5
 8014828:	ee67 5a27 	vmul.f32	s11, s14, s15
 801482c:	ee63 6a27 	vmul.f32	s13, s6, s15
 8014830:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8014834:	ee27 7a22 	vmul.f32	s14, s14, s5
 8014838:	ee62 7a27 	vmul.f32	s15, s4, s15
 801483c:	ee23 3a22 	vmul.f32	s6, s6, s5
 8014840:	ee22 2a22 	vmul.f32	s4, s4, s5
 8014844:	ee36 6a25 	vadd.f32	s12, s12, s11
 8014848:	ee37 7a63 	vsub.f32	s14, s14, s7
 801484c:	ee36 2ac2 	vsub.f32	s4, s13, s4
 8014850:	ee77 7a83 	vadd.f32	s15, s15, s6
 8014854:	ed02 6a04 	vstr	s12, [r2, #-16]
 8014858:	ed02 7a03 	vstr	s14, [r2, #-12]
 801485c:	ed83 2a04 	vstr	s4, [r3, #16]
 8014860:	edc3 7a03 	vstr	s15, [r3, #12]
 8014864:	f47f aefc 	bne.w	8014660 <arm_cfft_radix8by4_f32+0x128>
 8014868:	9907      	ldr	r1, [sp, #28]
 801486a:	9803      	ldr	r0, [sp, #12]
 801486c:	00cb      	lsls	r3, r1, #3
 801486e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8014872:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8014876:	9103      	str	r1, [sp, #12]
 8014878:	9900      	ldr	r1, [sp, #0]
 801487a:	4419      	add	r1, r3
 801487c:	9100      	str	r1, [sp, #0]
 801487e:	9905      	ldr	r1, [sp, #20]
 8014880:	4419      	add	r1, r3
 8014882:	9105      	str	r1, [sp, #20]
 8014884:	9906      	ldr	r1, [sp, #24]
 8014886:	4419      	add	r1, r3
 8014888:	9106      	str	r1, [sp, #24]
 801488a:	9902      	ldr	r1, [sp, #8]
 801488c:	4419      	add	r1, r3
 801488e:	9102      	str	r1, [sp, #8]
 8014890:	9901      	ldr	r1, [sp, #4]
 8014892:	4419      	add	r1, r3
 8014894:	9b04      	ldr	r3, [sp, #16]
 8014896:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801489a:	9101      	str	r1, [sp, #4]
 801489c:	9304      	str	r3, [sp, #16]
 801489e:	9b00      	ldr	r3, [sp, #0]
 80148a0:	9902      	ldr	r1, [sp, #8]
 80148a2:	ed93 7a00 	vldr	s14, [r3]
 80148a6:	edd1 7a00 	vldr	s15, [r1]
 80148aa:	9a06      	ldr	r2, [sp, #24]
 80148ac:	ee37 6a27 	vadd.f32	s12, s14, s15
 80148b0:	9d01      	ldr	r5, [sp, #4]
 80148b2:	edd2 6a00 	vldr	s13, [r2]
 80148b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80148ba:	9b02      	ldr	r3, [sp, #8]
 80148bc:	ee76 3a86 	vadd.f32	s7, s13, s12
 80148c0:	ed95 3a00 	vldr	s6, [r5]
 80148c4:	ed93 5a01 	vldr	s10, [r3, #4]
 80148c8:	ee36 6a66 	vsub.f32	s12, s12, s13
 80148cc:	9b00      	ldr	r3, [sp, #0]
 80148ce:	ee73 3a83 	vadd.f32	s7, s7, s6
 80148d2:	edd5 2a01 	vldr	s5, [r5, #4]
 80148d6:	ed93 4a01 	vldr	s8, [r3, #4]
 80148da:	ee36 6a43 	vsub.f32	s12, s12, s6
 80148de:	9b00      	ldr	r3, [sp, #0]
 80148e0:	ee74 5a05 	vadd.f32	s11, s8, s10
 80148e4:	edd2 7a01 	vldr	s15, [r2, #4]
 80148e8:	edc3 3a00 	vstr	s7, [r3]
 80148ec:	ee34 4a45 	vsub.f32	s8, s8, s10
 80148f0:	edd2 3a01 	vldr	s7, [r2, #4]
 80148f4:	ee77 4a87 	vadd.f32	s9, s15, s14
 80148f8:	ed95 2a01 	vldr	s4, [r5, #4]
 80148fc:	ee75 3aa3 	vadd.f32	s7, s11, s7
 8014900:	9d05      	ldr	r5, [sp, #20]
 8014902:	ee34 5a66 	vsub.f32	s10, s8, s13
 8014906:	9b00      	ldr	r3, [sp, #0]
 8014908:	ee74 4ae2 	vsub.f32	s9, s9, s5
 801490c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8014910:	ee73 3a82 	vadd.f32	s7, s7, s4
 8014914:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8014916:	ee35 5a03 	vadd.f32	s10, s10, s6
 801491a:	4621      	mov	r1, r4
 801491c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8014920:	edc3 3a01 	vstr	s7, [r3, #4]
 8014924:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014928:	edd5 3a00 	vldr	s7, [r5]
 801492c:	ee76 6a84 	vadd.f32	s13, s13, s8
 8014930:	ed95 7a01 	vldr	s14, [r5, #4]
 8014934:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8014938:	ee24 4aa3 	vmul.f32	s8, s9, s7
 801493c:	2304      	movs	r3, #4
 801493e:	ee64 4a87 	vmul.f32	s9, s9, s14
 8014942:	ee25 7a07 	vmul.f32	s14, s10, s14
 8014946:	ee25 5a23 	vmul.f32	s10, s10, s7
 801494a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 801494e:	ee34 7a07 	vadd.f32	s14, s8, s14
 8014952:	ee35 5a64 	vsub.f32	s10, s10, s9
 8014956:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801495a:	ed82 7a00 	vstr	s14, [r2]
 801495e:	ed82 5a01 	vstr	s10, [r2, #4]
 8014962:	9a03      	ldr	r2, [sp, #12]
 8014964:	edd2 4a01 	vldr	s9, [r2, #4]
 8014968:	ed92 7a00 	vldr	s14, [r2]
 801496c:	9a02      	ldr	r2, [sp, #8]
 801496e:	ee26 5a07 	vmul.f32	s10, s12, s14
 8014972:	ee26 6a24 	vmul.f32	s12, s12, s9
 8014976:	ee25 7a87 	vmul.f32	s14, s11, s14
 801497a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801497e:	ee37 6a46 	vsub.f32	s12, s14, s12
 8014982:	ee75 5a25 	vadd.f32	s11, s10, s11
 8014986:	edc2 5a00 	vstr	s11, [r2]
 801498a:	ed82 6a01 	vstr	s12, [r2, #4]
 801498e:	9a04      	ldr	r2, [sp, #16]
 8014990:	9d01      	ldr	r5, [sp, #4]
 8014992:	edd2 5a01 	vldr	s11, [r2, #4]
 8014996:	ed92 7a00 	vldr	s14, [r2]
 801499a:	ee27 6a87 	vmul.f32	s12, s15, s14
 801499e:	ee26 7a87 	vmul.f32	s14, s13, s14
 80149a2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80149a6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80149aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80149ae:	ee76 6a26 	vadd.f32	s13, s12, s13
 80149b2:	edc5 7a01 	vstr	s15, [r5, #4]
 80149b6:	edc5 6a00 	vstr	s13, [r5]
 80149ba:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80149bc:	686a      	ldr	r2, [r5, #4]
 80149be:	f000 f9eb 	bl	8014d98 <arm_radix8_butterfly_f32>
 80149c2:	4630      	mov	r0, r6
 80149c4:	4621      	mov	r1, r4
 80149c6:	686a      	ldr	r2, [r5, #4]
 80149c8:	2304      	movs	r3, #4
 80149ca:	f000 f9e5 	bl	8014d98 <arm_radix8_butterfly_f32>
 80149ce:	4638      	mov	r0, r7
 80149d0:	4621      	mov	r1, r4
 80149d2:	686a      	ldr	r2, [r5, #4]
 80149d4:	2304      	movs	r3, #4
 80149d6:	f000 f9df 	bl	8014d98 <arm_radix8_butterfly_f32>
 80149da:	4621      	mov	r1, r4
 80149dc:	686a      	ldr	r2, [r5, #4]
 80149de:	2304      	movs	r3, #4
 80149e0:	9808      	ldr	r0, [sp, #32]
 80149e2:	b00d      	add	sp, #52	@ 0x34
 80149e4:	ecbd 8b04 	vpop	{d8-d9}
 80149e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149ec:	f000 b9d4 	b.w	8014d98 <arm_radix8_butterfly_f32>

080149f0 <arm_cfft_f32>:
 80149f0:	2a01      	cmp	r2, #1
 80149f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149f6:	4606      	mov	r6, r0
 80149f8:	4617      	mov	r7, r2
 80149fa:	460c      	mov	r4, r1
 80149fc:	4698      	mov	r8, r3
 80149fe:	8805      	ldrh	r5, [r0, #0]
 8014a00:	d055      	beq.n	8014aae <arm_cfft_f32+0xbe>
 8014a02:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8014a06:	d061      	beq.n	8014acc <arm_cfft_f32+0xdc>
 8014a08:	d916      	bls.n	8014a38 <arm_cfft_f32+0x48>
 8014a0a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8014a0e:	d01a      	beq.n	8014a46 <arm_cfft_f32+0x56>
 8014a10:	d946      	bls.n	8014aa0 <arm_cfft_f32+0xb0>
 8014a12:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8014a16:	d059      	beq.n	8014acc <arm_cfft_f32+0xdc>
 8014a18:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8014a1c:	d105      	bne.n	8014a2a <arm_cfft_f32+0x3a>
 8014a1e:	2301      	movs	r3, #1
 8014a20:	6872      	ldr	r2, [r6, #4]
 8014a22:	4629      	mov	r1, r5
 8014a24:	4620      	mov	r0, r4
 8014a26:	f000 f9b7 	bl	8014d98 <arm_radix8_butterfly_f32>
 8014a2a:	f1b8 0f00 	cmp.w	r8, #0
 8014a2e:	d111      	bne.n	8014a54 <arm_cfft_f32+0x64>
 8014a30:	2f01      	cmp	r7, #1
 8014a32:	d016      	beq.n	8014a62 <arm_cfft_f32+0x72>
 8014a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a38:	2d20      	cmp	r5, #32
 8014a3a:	d047      	beq.n	8014acc <arm_cfft_f32+0xdc>
 8014a3c:	d934      	bls.n	8014aa8 <arm_cfft_f32+0xb8>
 8014a3e:	2d40      	cmp	r5, #64	@ 0x40
 8014a40:	d0ed      	beq.n	8014a1e <arm_cfft_f32+0x2e>
 8014a42:	2d80      	cmp	r5, #128	@ 0x80
 8014a44:	d1f1      	bne.n	8014a2a <arm_cfft_f32+0x3a>
 8014a46:	4621      	mov	r1, r4
 8014a48:	4630      	mov	r0, r6
 8014a4a:	f7ff fca9 	bl	80143a0 <arm_cfft_radix8by2_f32>
 8014a4e:	f1b8 0f00 	cmp.w	r8, #0
 8014a52:	d0ed      	beq.n	8014a30 <arm_cfft_f32+0x40>
 8014a54:	68b2      	ldr	r2, [r6, #8]
 8014a56:	4620      	mov	r0, r4
 8014a58:	89b1      	ldrh	r1, [r6, #12]
 8014a5a:	f000 f83f 	bl	8014adc <arm_bitreversal_32>
 8014a5e:	2f01      	cmp	r7, #1
 8014a60:	d1e8      	bne.n	8014a34 <arm_cfft_f32+0x44>
 8014a62:	ee07 5a90 	vmov	s15, r5
 8014a66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014a6e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014a72:	2d00      	cmp	r5, #0
 8014a74:	d0de      	beq.n	8014a34 <arm_cfft_f32+0x44>
 8014a76:	f104 0108 	add.w	r1, r4, #8
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	ed11 7a02 	vldr	s14, [r1, #-8]
 8014a80:	3301      	adds	r3, #1
 8014a82:	ed51 7a01 	vldr	s15, [r1, #-4]
 8014a86:	3108      	adds	r1, #8
 8014a88:	429d      	cmp	r5, r3
 8014a8a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014a8e:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8014a92:	ed01 7a04 	vstr	s14, [r1, #-16]
 8014a96:	ed41 7a03 	vstr	s15, [r1, #-12]
 8014a9a:	d1ef      	bne.n	8014a7c <arm_cfft_f32+0x8c>
 8014a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014aa0:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8014aa4:	d0bb      	beq.n	8014a1e <arm_cfft_f32+0x2e>
 8014aa6:	e7c0      	b.n	8014a2a <arm_cfft_f32+0x3a>
 8014aa8:	2d10      	cmp	r5, #16
 8014aaa:	d0cc      	beq.n	8014a46 <arm_cfft_f32+0x56>
 8014aac:	e7bd      	b.n	8014a2a <arm_cfft_f32+0x3a>
 8014aae:	b195      	cbz	r5, 8014ad6 <arm_cfft_f32+0xe6>
 8014ab0:	f101 030c 	add.w	r3, r1, #12
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	ed53 7a02 	vldr	s15, [r3, #-8]
 8014aba:	3201      	adds	r2, #1
 8014abc:	3308      	adds	r3, #8
 8014abe:	eef1 7a67 	vneg.f32	s15, s15
 8014ac2:	4295      	cmp	r5, r2
 8014ac4:	ed43 7a04 	vstr	s15, [r3, #-16]
 8014ac8:	d1f5      	bne.n	8014ab6 <arm_cfft_f32+0xc6>
 8014aca:	e79a      	b.n	8014a02 <arm_cfft_f32+0x12>
 8014acc:	4621      	mov	r1, r4
 8014ace:	4630      	mov	r0, r6
 8014ad0:	f7ff fd32 	bl	8014538 <arm_cfft_radix8by4_f32>
 8014ad4:	e7a9      	b.n	8014a2a <arm_cfft_f32+0x3a>
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d0ac      	beq.n	8014a34 <arm_cfft_f32+0x44>
 8014ada:	e7bb      	b.n	8014a54 <arm_cfft_f32+0x64>

08014adc <arm_bitreversal_32>:
 8014adc:	b321      	cbz	r1, 8014b28 <arm_bitreversal_32+0x4c>
 8014ade:	f102 0c02 	add.w	ip, r2, #2
 8014ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ae6:	4690      	mov	r8, r2
 8014ae8:	2500      	movs	r5, #0
 8014aea:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 8014aee:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 8014af2:	3502      	adds	r5, #2
 8014af4:	08a4      	lsrs	r4, r4, #2
 8014af6:	089b      	lsrs	r3, r3, #2
 8014af8:	428d      	cmp	r5, r1
 8014afa:	ea4f 0784 	mov.w	r7, r4, lsl #2
 8014afe:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 8014b02:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8014b06:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8014b0a:	f107 0704 	add.w	r7, r7, #4
 8014b0e:	f106 0604 	add.w	r6, r6, #4
 8014b12:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8014b16:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 8014b1a:	59c4      	ldr	r4, [r0, r7]
 8014b1c:	5983      	ldr	r3, [r0, r6]
 8014b1e:	51c3      	str	r3, [r0, r7]
 8014b20:	5184      	str	r4, [r0, r6]
 8014b22:	d3e2      	bcc.n	8014aea <arm_bitreversal_32+0xe>
 8014b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b28:	4770      	bx	lr
 8014b2a:	bf00      	nop

08014b2c <arm_fir_init_f32>:
 8014b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b2e:	9f06      	ldr	r7, [sp, #24]
 8014b30:	f06f 4440 	mvn.w	r4, #3221225472	@ 0xc0000000
 8014b34:	460e      	mov	r6, r1
 8014b36:	6082      	str	r2, [r0, #8]
 8014b38:	443c      	add	r4, r7
 8014b3a:	4605      	mov	r5, r0
 8014b3c:	8006      	strh	r6, [r0, #0]
 8014b3e:	2100      	movs	r1, #0
 8014b40:	19a2      	adds	r2, r4, r6
 8014b42:	4618      	mov	r0, r3
 8014b44:	0092      	lsls	r2, r2, #2
 8014b46:	f000 fbe9 	bl	801531c <memset>
 8014b4a:	6068      	str	r0, [r5, #4]
 8014b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b4e:	bf00      	nop

08014b50 <arm_cmplx_mag_f32>:
 8014b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b54:	0897      	lsrs	r7, r2, #2
 8014b56:	ed2d 8b02 	vpush	{d8}
 8014b5a:	b084      	sub	sp, #16
 8014b5c:	d077      	beq.n	8014c4e <arm_cmplx_mag_f32+0xfe>
 8014b5e:	f100 0420 	add.w	r4, r0, #32
 8014b62:	f101 0510 	add.w	r5, r1, #16
 8014b66:	463e      	mov	r6, r7
 8014b68:	f04f 0800 	mov.w	r8, #0
 8014b6c:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 8014b70:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8014b74:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014b78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014b7c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014b80:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b88:	f2c0 80c1 	blt.w	8014d0e <arm_cmplx_mag_f32+0x1be>
 8014b8c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014b90:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8014b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b98:	f100 80d4 	bmi.w	8014d44 <arm_cmplx_mag_f32+0x1f4>
 8014b9c:	ed05 8a04 	vstr	s16, [r5, #-16]
 8014ba0:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8014ba4:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8014ba8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014bac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014bb0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014bb4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bbc:	f2c0 80a4 	blt.w	8014d08 <arm_cmplx_mag_f32+0x1b8>
 8014bc0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014bc4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8014bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bcc:	f100 80a8 	bmi.w	8014d20 <arm_cmplx_mag_f32+0x1d0>
 8014bd0:	ed05 8a03 	vstr	s16, [r5, #-12]
 8014bd4:	ed14 0a04 	vldr	s0, [r4, #-16]
 8014bd8:	ed54 7a03 	vldr	s15, [r4, #-12]
 8014bdc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014be0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014be4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014be8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bf0:	f2c0 8087 	blt.w	8014d02 <arm_cmplx_mag_f32+0x1b2>
 8014bf4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014bf8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8014bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c00:	f100 8097 	bmi.w	8014d32 <arm_cmplx_mag_f32+0x1e2>
 8014c04:	ed05 8a02 	vstr	s16, [r5, #-8]
 8014c08:	ed14 0a02 	vldr	s0, [r4, #-8]
 8014c0c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8014c10:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014c14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014c18:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014c1c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c24:	db6a      	blt.n	8014cfc <arm_cmplx_mag_f32+0x1ac>
 8014c26:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014c2a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8014c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c32:	f100 8090 	bmi.w	8014d56 <arm_cmplx_mag_f32+0x206>
 8014c36:	ed05 8a01 	vstr	s16, [r5, #-4]
 8014c3a:	3e01      	subs	r6, #1
 8014c3c:	f104 0420 	add.w	r4, r4, #32
 8014c40:	f105 0510 	add.w	r5, r5, #16
 8014c44:	d192      	bne.n	8014b6c <arm_cmplx_mag_f32+0x1c>
 8014c46:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8014c4a:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8014c4e:	f012 0203 	ands.w	r2, r2, #3
 8014c52:	d04e      	beq.n	8014cf2 <arm_cmplx_mag_f32+0x1a2>
 8014c54:	ed90 0a00 	vldr	s0, [r0]
 8014c58:	2300      	movs	r3, #0
 8014c5a:	edd0 7a01 	vldr	s15, [r0, #4]
 8014c5e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014c62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014c66:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014c6a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c72:	db4f      	blt.n	8014d14 <arm_cmplx_mag_f32+0x1c4>
 8014c74:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014c78:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8014c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c80:	d472      	bmi.n	8014d68 <arm_cmplx_mag_f32+0x218>
 8014c82:	ed81 8a00 	vstr	s16, [r1]
 8014c86:	3a01      	subs	r2, #1
 8014c88:	d033      	beq.n	8014cf2 <arm_cmplx_mag_f32+0x1a2>
 8014c8a:	ed90 0a02 	vldr	s0, [r0, #8]
 8014c8e:	2300      	movs	r3, #0
 8014c90:	edd0 7a03 	vldr	s15, [r0, #12]
 8014c94:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014c98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014c9c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014ca0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ca8:	db36      	blt.n	8014d18 <arm_cmplx_mag_f32+0x1c8>
 8014caa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014cae:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8014cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cb6:	d460      	bmi.n	8014d7a <arm_cmplx_mag_f32+0x22a>
 8014cb8:	ed81 8a01 	vstr	s16, [r1, #4]
 8014cbc:	2a01      	cmp	r2, #1
 8014cbe:	d018      	beq.n	8014cf2 <arm_cmplx_mag_f32+0x1a2>
 8014cc0:	ed90 0a04 	vldr	s0, [r0, #16]
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	edd0 7a05 	vldr	s15, [r0, #20]
 8014cca:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014cce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014cd2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014cd6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cde:	db1d      	blt.n	8014d1c <arm_cmplx_mag_f32+0x1cc>
 8014ce0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014ce4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8014ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cec:	d44e      	bmi.n	8014d8c <arm_cmplx_mag_f32+0x23c>
 8014cee:	ed81 8a02 	vstr	s16, [r1, #8]
 8014cf2:	b004      	add	sp, #16
 8014cf4:	ecbd 8b02 	vpop	{d8}
 8014cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cfc:	f845 8c04 	str.w	r8, [r5, #-4]
 8014d00:	e79b      	b.n	8014c3a <arm_cmplx_mag_f32+0xea>
 8014d02:	f845 8c08 	str.w	r8, [r5, #-8]
 8014d06:	e77f      	b.n	8014c08 <arm_cmplx_mag_f32+0xb8>
 8014d08:	f845 8c0c 	str.w	r8, [r5, #-12]
 8014d0c:	e762      	b.n	8014bd4 <arm_cmplx_mag_f32+0x84>
 8014d0e:	f845 8c10 	str.w	r8, [r5, #-16]
 8014d12:	e745      	b.n	8014ba0 <arm_cmplx_mag_f32+0x50>
 8014d14:	600b      	str	r3, [r1, #0]
 8014d16:	e7b6      	b.n	8014c86 <arm_cmplx_mag_f32+0x136>
 8014d18:	604b      	str	r3, [r1, #4]
 8014d1a:	e7cf      	b.n	8014cbc <arm_cmplx_mag_f32+0x16c>
 8014d1c:	608b      	str	r3, [r1, #8]
 8014d1e:	e7e8      	b.n	8014cf2 <arm_cmplx_mag_f32+0x1a2>
 8014d20:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8014d24:	9001      	str	r0, [sp, #4]
 8014d26:	f000 fb2b 	bl	8015380 <sqrtf>
 8014d2a:	9801      	ldr	r0, [sp, #4]
 8014d2c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014d30:	e74e      	b.n	8014bd0 <arm_cmplx_mag_f32+0x80>
 8014d32:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8014d36:	9001      	str	r0, [sp, #4]
 8014d38:	f000 fb22 	bl	8015380 <sqrtf>
 8014d3c:	9801      	ldr	r0, [sp, #4]
 8014d3e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014d42:	e75f      	b.n	8014c04 <arm_cmplx_mag_f32+0xb4>
 8014d44:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8014d48:	9001      	str	r0, [sp, #4]
 8014d4a:	f000 fb19 	bl	8015380 <sqrtf>
 8014d4e:	9801      	ldr	r0, [sp, #4]
 8014d50:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014d54:	e722      	b.n	8014b9c <arm_cmplx_mag_f32+0x4c>
 8014d56:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8014d5a:	9001      	str	r0, [sp, #4]
 8014d5c:	f000 fb10 	bl	8015380 <sqrtf>
 8014d60:	9801      	ldr	r0, [sp, #4]
 8014d62:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014d66:	e766      	b.n	8014c36 <arm_cmplx_mag_f32+0xe6>
 8014d68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014d6c:	9201      	str	r2, [sp, #4]
 8014d6e:	f000 fb07 	bl	8015380 <sqrtf>
 8014d72:	9903      	ldr	r1, [sp, #12]
 8014d74:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8014d78:	e783      	b.n	8014c82 <arm_cmplx_mag_f32+0x132>
 8014d7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014d7e:	9201      	str	r2, [sp, #4]
 8014d80:	f000 fafe 	bl	8015380 <sqrtf>
 8014d84:	9903      	ldr	r1, [sp, #12]
 8014d86:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8014d8a:	e795      	b.n	8014cb8 <arm_cmplx_mag_f32+0x168>
 8014d8c:	9101      	str	r1, [sp, #4]
 8014d8e:	f000 faf7 	bl	8015380 <sqrtf>
 8014d92:	9901      	ldr	r1, [sp, #4]
 8014d94:	e7ab      	b.n	8014cee <arm_cmplx_mag_f32+0x19e>
 8014d96:	bf00      	nop

08014d98 <arm_radix8_butterfly_f32>:
 8014d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d9c:	ed2d 8b10 	vpush	{d8-d15}
 8014da0:	b095      	sub	sp, #84	@ 0x54
 8014da2:	468a      	mov	sl, r1
 8014da4:	468b      	mov	fp, r1
 8014da6:	eddf 8abb 	vldr	s17, [pc, #748]	@ 8015094 <arm_radix8_butterfly_f32+0x2fc>
 8014daa:	9012      	str	r0, [sp, #72]	@ 0x48
 8014dac:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8014db0:	4603      	mov	r3, r0
 8014db2:	3304      	adds	r3, #4
 8014db4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014db6:	ea4f 02db 	mov.w	r2, fp, lsr #3
 8014dba:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014dbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8014dc0:	f8dd c04c 	ldr.w	ip, [sp, #76]	@ 0x4c
 8014dc4:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8014dc8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8014dca:	9303      	str	r3, [sp, #12]
 8014dcc:	0153      	lsls	r3, r2, #5
 8014dce:	0114      	lsls	r4, r2, #4
 8014dd0:	eba9 0002 	sub.w	r0, r9, r2
 8014dd4:	18ce      	adds	r6, r1, r3
 8014dd6:	9302      	str	r3, [sp, #8]
 8014dd8:	0097      	lsls	r7, r2, #2
 8014dda:	4613      	mov	r3, r2
 8014ddc:	eb06 0509 	add.w	r5, r6, r9
 8014de0:	9004      	str	r0, [sp, #16]
 8014de2:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 8014de6:	1bd2      	subs	r2, r2, r7
 8014de8:	eb05 0109 	add.w	r1, r5, r9
 8014dec:	441f      	add	r7, r3
 8014dee:	9405      	str	r4, [sp, #20]
 8014df0:	f109 0004 	add.w	r0, r9, #4
 8014df4:	9101      	str	r1, [sp, #4]
 8014df6:	1d21      	adds	r1, r4, #4
 8014df8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014dfa:	f04f 0e00 	mov.w	lr, #0
 8014dfe:	9c01      	ldr	r4, [sp, #4]
 8014e00:	4418      	add	r0, r3
 8014e02:	4419      	add	r1, r3
 8014e04:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8014e08:	9b02      	ldr	r3, [sp, #8]
 8014e0a:	00fc      	lsls	r4, r7, #3
 8014e0c:	18d7      	adds	r7, r2, r3
 8014e0e:	9b04      	ldr	r3, [sp, #16]
 8014e10:	9406      	str	r4, [sp, #24]
 8014e12:	00db      	lsls	r3, r3, #3
 8014e14:	9c01      	ldr	r4, [sp, #4]
 8014e16:	9307      	str	r3, [sp, #28]
 8014e18:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8014e1c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8014e20:	9304      	str	r3, [sp, #16]
 8014e22:	9b03      	ldr	r3, [sp, #12]
 8014e24:	edd6 6a00 	vldr	s13, [r6]
 8014e28:	44de      	add	lr, fp
 8014e2a:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8014e2e:	ed94 7a00 	vldr	s14, [r4]
 8014e32:	45f2      	cmp	sl, lr
 8014e34:	ed10 6a01 	vldr	s12, [r0, #-4]
 8014e38:	ee37 2aa6 	vadd.f32	s4, s15, s13
 8014e3c:	edd5 2a00 	vldr	s5, [r5]
 8014e40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014e44:	edd7 3a00 	vldr	s7, [r7]
 8014e48:	ed11 5a01 	vldr	s10, [r1, #-4]
 8014e4c:	ee36 3a22 	vadd.f32	s6, s12, s5
 8014e50:	edd2 6a00 	vldr	s13, [r2]
 8014e54:	ee75 5a07 	vadd.f32	s11, s10, s14
 8014e58:	ee36 4aa3 	vadd.f32	s8, s13, s7
 8014e5c:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8014e60:	ee72 4a25 	vadd.f32	s9, s4, s11
 8014e64:	ee73 3a04 	vadd.f32	s7, s6, s8
 8014e68:	ee35 5a47 	vsub.f32	s10, s10, s14
 8014e6c:	ee36 7a62 	vsub.f32	s14, s12, s5
 8014e70:	ee32 2a65 	vsub.f32	s4, s4, s11
 8014e74:	ee74 5aa3 	vadd.f32	s11, s9, s7
 8014e78:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8014e7c:	ee37 6a66 	vsub.f32	s12, s14, s13
 8014e80:	ed4c 5a01 	vstr	s11, [ip, #-4]
 8014e84:	ee33 3a44 	vsub.f32	s6, s6, s8
 8014e88:	edc6 4a00 	vstr	s9, [r6]
 8014e8c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014e90:	ed97 4a01 	vldr	s8, [r7, #4]
 8014e94:	ee66 6a28 	vmul.f32	s13, s12, s17
 8014e98:	edd0 5a00 	vldr	s11, [r0]
 8014e9c:	ed95 6a01 	vldr	s12, [r5, #4]
 8014ea0:	ee27 7a28 	vmul.f32	s14, s14, s17
 8014ea4:	edd2 3a01 	vldr	s7, [r2, #4]
 8014ea8:	ee77 2aa6 	vadd.f32	s5, s15, s13
 8014eac:	ee75 4ac6 	vsub.f32	s9, s11, s12
 8014eb0:	ed96 1a01 	vldr	s2, [r6, #4]
 8014eb4:	ee33 0ac4 	vsub.f32	s0, s7, s8
 8014eb8:	edd4 0a01 	vldr	s1, [r4, #4]
 8014ebc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014ec0:	eddc 6a00 	vldr	s13, [ip]
 8014ec4:	ee75 5a86 	vadd.f32	s11, s11, s12
 8014ec8:	ed91 6a00 	vldr	s12, [r1]
 8014ecc:	ee73 3a84 	vadd.f32	s7, s7, s8
 8014ed0:	ee74 1a80 	vadd.f32	s3, s9, s0
 8014ed4:	ee36 4a81 	vadd.f32	s8, s13, s2
 8014ed8:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8014edc:	ee76 6ac1 	vsub.f32	s13, s13, s2
 8014ee0:	ee36 1a20 	vadd.f32	s2, s12, s1
 8014ee4:	ee61 1aa8 	vmul.f32	s3, s3, s17
 8014ee8:	ee36 6a60 	vsub.f32	s12, s12, s1
 8014eec:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8014ef0:	ee75 0aa3 	vadd.f32	s1, s11, s7
 8014ef4:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8014ef8:	ee74 3a01 	vadd.f32	s7, s8, s2
 8014efc:	ee34 4a41 	vsub.f32	s8, s8, s2
 8014f00:	ee36 1a21 	vadd.f32	s2, s12, s3
 8014f04:	ee33 0aa0 	vadd.f32	s0, s7, s1
 8014f08:	ee36 6a61 	vsub.f32	s12, s12, s3
 8014f0c:	ee73 3ae0 	vsub.f32	s7, s7, s1
 8014f10:	ee76 1aa4 	vadd.f32	s3, s13, s9
 8014f14:	ed8c 0a00 	vstr	s0, [ip]
 8014f18:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8014f1c:	449c      	add	ip, r3
 8014f1e:	ee75 4a07 	vadd.f32	s9, s10, s14
 8014f22:	edc6 3a01 	vstr	s7, [r6, #4]
 8014f26:	ee35 7a47 	vsub.f32	s14, s10, s14
 8014f2a:	441e      	add	r6, r3
 8014f2c:	ee32 5a25 	vadd.f32	s10, s4, s11
 8014f30:	ee72 5a65 	vsub.f32	s11, s4, s11
 8014f34:	ee72 3a81 	vadd.f32	s7, s5, s2
 8014f38:	ed01 5a01 	vstr	s10, [r1, #-4]
 8014f3c:	ee34 2a43 	vsub.f32	s4, s8, s6
 8014f40:	edc4 5a00 	vstr	s11, [r4]
 8014f44:	ee37 5a86 	vadd.f32	s10, s15, s12
 8014f48:	ee71 5ae4 	vsub.f32	s11, s3, s9
 8014f4c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014f50:	ed81 2a00 	vstr	s4, [r1]
 8014f54:	ee36 6ac7 	vsub.f32	s12, s13, s14
 8014f58:	4419      	add	r1, r3
 8014f5a:	ee33 4a04 	vadd.f32	s8, s6, s8
 8014f5e:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8014f62:	ee74 4aa1 	vadd.f32	s9, s9, s3
 8014f66:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014f6a:	ed84 4a01 	vstr	s8, [r4, #4]
 8014f6e:	ed40 3a01 	vstr	s7, [r0, #-4]
 8014f72:	441c      	add	r4, r3
 8014f74:	edc7 2a00 	vstr	s5, [r7]
 8014f78:	ed85 5a00 	vstr	s10, [r5]
 8014f7c:	edc2 7a00 	vstr	s15, [r2]
 8014f80:	edc0 5a00 	vstr	s11, [r0]
 8014f84:	4418      	add	r0, r3
 8014f86:	edc7 4a01 	vstr	s9, [r7, #4]
 8014f8a:	441f      	add	r7, r3
 8014f8c:	ed85 6a01 	vstr	s12, [r5, #4]
 8014f90:	441d      	add	r5, r3
 8014f92:	ed82 7a01 	vstr	s14, [r2, #4]
 8014f96:	441a      	add	r2, r3
 8014f98:	f63f af44 	bhi.w	8014e24 <arm_radix8_butterfly_f32+0x8c>
 8014f9c:	469c      	mov	ip, r3
 8014f9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014fa0:	2b07      	cmp	r3, #7
 8014fa2:	f240 81b6 	bls.w	8015312 <arm_radix8_butterfly_f32+0x57a>
 8014fa6:	9a02      	ldr	r2, [sp, #8]
 8014fa8:	f109 0608 	add.w	r6, r9, #8
 8014fac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014fae:	f108 0408 	add.w	r4, r8, #8
 8014fb2:	3208      	adds	r2, #8
 8014fb4:	9f06      	ldr	r7, [sp, #24]
 8014fb6:	9d04      	ldr	r5, [sp, #16]
 8014fb8:	189a      	adds	r2, r3, r2
 8014fba:	3708      	adds	r7, #8
 8014fbc:	3508      	adds	r5, #8
 8014fbe:	9807      	ldr	r0, [sp, #28]
 8014fc0:	920c      	str	r2, [sp, #48]	@ 0x30
 8014fc2:	199a      	adds	r2, r3, r6
 8014fc4:	9905      	ldr	r1, [sp, #20]
 8014fc6:	3008      	adds	r0, #8
 8014fc8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8014fca:	19da      	adds	r2, r3, r7
 8014fcc:	310c      	adds	r1, #12
 8014fce:	920a      	str	r2, [sp, #40]	@ 0x28
 8014fd0:	195a      	adds	r2, r3, r5
 8014fd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8014fd4:	191a      	adds	r2, r3, r4
 8014fd6:	9208      	str	r2, [sp, #32]
 8014fd8:	181a      	adds	r2, r3, r0
 8014fda:	9207      	str	r2, [sp, #28]
 8014fdc:	185a      	adds	r2, r3, r1
 8014fde:	330c      	adds	r3, #12
 8014fe0:	9205      	str	r2, [sp, #20]
 8014fe2:	9306      	str	r3, [sp, #24]
 8014fe4:	2301      	movs	r3, #1
 8014fe6:	9304      	str	r3, [sp, #16]
 8014fe8:	2300      	movs	r3, #0
 8014fea:	930d      	str	r3, [sp, #52]	@ 0x34
 8014fec:	4663      	mov	r3, ip
 8014fee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014ff0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8014ff2:	f8dd c014 	ldr.w	ip, [sp, #20]
 8014ff6:	440a      	add	r2, r1
 8014ff8:	9f06      	ldr	r7, [sp, #24]
 8014ffa:	9e07      	ldr	r6, [sp, #28]
 8014ffc:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8015000:	920d      	str	r2, [sp, #52]	@ 0x34
 8015002:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 8015006:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015008:	9d08      	ldr	r5, [sp, #32]
 801500a:	4442      	add	r2, r8
 801500c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801500e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015010:	eb02 0108 	add.w	r1, r2, r8
 8015014:	ed92 ea00 	vldr	s28, [r2]
 8015018:	eb01 0208 	add.w	r2, r1, r8
 801501c:	edd1 da00 	vldr	s27, [r1]
 8015020:	eb02 0108 	add.w	r1, r2, r8
 8015024:	ed92 da00 	vldr	s26, [r2]
 8015028:	eb01 0208 	add.w	r2, r1, r8
 801502c:	edd1 ca00 	vldr	s25, [r1]
 8015030:	eb02 0108 	add.w	r1, r2, r8
 8015034:	ed92 ca00 	vldr	s24, [r2]
 8015038:	eb01 0208 	add.w	r2, r1, r8
 801503c:	edd1 ba00 	vldr	s23, [r1]
 8015040:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015042:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 8015046:	ed92 ba00 	vldr	s22, [r2]
 801504a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801504c:	eb0e 0908 	add.w	r9, lr, r8
 8015050:	910e      	str	r1, [sp, #56]	@ 0x38
 8015052:	9201      	str	r2, [sp, #4]
 8015054:	eb09 0208 	add.w	r2, r9, r8
 8015058:	ed99 aa01 	vldr	s20, [r9, #4]
 801505c:	edde aa01 	vldr	s21, [lr, #4]
 8015060:	eb02 0908 	add.w	r9, r2, r8
 8015064:	edd2 9a01 	vldr	s19, [r2, #4]
 8015068:	f8dd e010 	ldr.w	lr, [sp, #16]
 801506c:	eb09 0208 	add.w	r2, r9, r8
 8015070:	ed99 9a01 	vldr	s18, [r9, #4]
 8015074:	eb02 0908 	add.w	r9, r2, r8
 8015078:	ed92 8a01 	vldr	s16, [r2, #4]
 801507c:	9a01      	ldr	r2, [sp, #4]
 801507e:	edd9 7a01 	vldr	s15, [r9, #4]
 8015082:	44c8      	add	r8, r9
 8015084:	edcd 7a02 	vstr	s15, [sp, #8]
 8015088:	edd8 7a01 	vldr	s15, [r8, #4]
 801508c:	edcd 7a03 	vstr	s15, [sp, #12]
 8015090:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015092:	e001      	b.n	8015098 <arm_radix8_butterfly_f32+0x300>
 8015094:	3f3504f3 	.word	0x3f3504f3
 8015098:	ed92 7a00 	vldr	s14, [r2]
 801509c:	44de      	add	lr, fp
 801509e:	ed17 1a01 	vldr	s2, [r7, #-4]
 80150a2:	ed90 5a00 	vldr	s10, [r0]
 80150a6:	45f2      	cmp	sl, lr
 80150a8:	ed1c fa01 	vldr	s30, [ip, #-4]
 80150ac:	ee31 3a07 	vadd.f32	s6, s2, s14
 80150b0:	edd6 5a00 	vldr	s11, [r6]
 80150b4:	ee31 1a47 	vsub.f32	s2, s2, s14
 80150b8:	edd4 7a00 	vldr	s15, [r4]
 80150bc:	ed95 7a00 	vldr	s14, [r5]
 80150c0:	ed91 4a00 	vldr	s8, [r1]
 80150c4:	ee3f 6a27 	vadd.f32	s12, s30, s15
 80150c8:	ee77 6a25 	vadd.f32	s13, s14, s11
 80150cc:	edd7 ea00 	vldr	s29, [r7]
 80150d0:	ee74 fa05 	vadd.f32	s31, s8, s10
 80150d4:	ee73 1a06 	vadd.f32	s3, s6, s12
 80150d8:	ee34 4a45 	vsub.f32	s8, s8, s10
 80150dc:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 80150e0:	ee37 7a65 	vsub.f32	s14, s14, s11
 80150e4:	ee33 3a46 	vsub.f32	s6, s6, s12
 80150e8:	ee31 6a85 	vadd.f32	s12, s3, s10
 80150ec:	ee7f 7a67 	vsub.f32	s15, s30, s15
 80150f0:	ee34 fa07 	vadd.f32	s30, s8, s14
 80150f4:	ed07 6a01 	vstr	s12, [r7, #-4]
 80150f8:	ee34 4a47 	vsub.f32	s8, s8, s14
 80150fc:	edd5 3a01 	vldr	s7, [r5, #4]
 8015100:	ee7f fae6 	vsub.f32	s31, s31, s13
 8015104:	ed90 7a01 	vldr	s14, [r0, #4]
 8015108:	ee2f fa28 	vmul.f32	s30, s30, s17
 801510c:	edd1 5a01 	vldr	s11, [r1, #4]
 8015110:	ee24 4a28 	vmul.f32	s8, s8, s17
 8015114:	ed96 6a01 	vldr	s12, [r6, #4]
 8015118:	ee31 5ac5 	vsub.f32	s10, s3, s10
 801511c:	ee75 0ac7 	vsub.f32	s1, s11, s14
 8015120:	edd2 6a01 	vldr	s13, [r2, #4]
 8015124:	ee73 2ac6 	vsub.f32	s5, s7, s12
 8015128:	edd4 4a01 	vldr	s9, [r4, #4]
 801512c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8015130:	ed9c 7a00 	vldr	s14, [ip]
 8015134:	ee37 2a8f 	vadd.f32	s4, s15, s30
 8015138:	ee33 6a86 	vadd.f32	s12, s7, s12
 801513c:	ee37 facf 	vsub.f32	s30, s15, s30
 8015140:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 8015144:	ee70 7ae2 	vsub.f32	s15, s1, s5
 8015148:	ee7e eae6 	vsub.f32	s29, s29, s13
 801514c:	ee70 2aa2 	vadd.f32	s5, s1, s5
 8015150:	ee77 6a24 	vadd.f32	s13, s14, s9
 8015154:	ee75 0a86 	vadd.f32	s1, s11, s12
 8015158:	ee37 7a64 	vsub.f32	s14, s14, s9
 801515c:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8015160:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015164:	ee62 2aa8 	vmul.f32	s5, s5, s17
 8015168:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801516c:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8015170:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 8015174:	ee77 4a22 	vadd.f32	s9, s14, s5
 8015178:	ee7e eae7 	vsub.f32	s29, s29, s15
 801517c:	ee77 7a62 	vsub.f32	s15, s14, s5
 8015180:	ee71 2a04 	vadd.f32	s5, s2, s8
 8015184:	ee31 7a44 	vsub.f32	s14, s2, s8
 8015188:	ee30 1a60 	vsub.f32	s2, s0, s1
 801518c:	ee73 1a06 	vadd.f32	s3, s6, s12
 8015190:	ee33 6a46 	vsub.f32	s12, s6, s12
 8015194:	ee33 3aef 	vsub.f32	s6, s7, s31
 8015198:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 801519c:	ee3e 4acf 	vsub.f32	s8, s29, s30
 80151a0:	ee75 3ac2 	vsub.f32	s7, s11, s4
 80151a4:	ee72 5a25 	vadd.f32	s11, s4, s11
 80151a8:	ee32 2aa4 	vadd.f32	s4, s5, s9
 80151ac:	ee72 4ae4 	vsub.f32	s9, s5, s9
 80151b0:	ee77 2a27 	vadd.f32	s5, s14, s15
 80151b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80151b8:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 80151bc:	ee2c fa85 	vmul.f32	s30, s25, s10
 80151c0:	ee69 ea01 	vmul.f32	s29, s18, s2
 80151c4:	ee29 5a05 	vmul.f32	s10, s18, s10
 80151c8:	ee2c 1a81 	vmul.f32	s2, s25, s2
 80151cc:	ee6d faa1 	vmul.f32	s31, s27, s3
 80151d0:	ee70 0a20 	vadd.f32	s1, s0, s1
 80151d4:	ee6a 1a21 	vmul.f32	s3, s20, s3
 80151d8:	ee2a 0a03 	vmul.f32	s0, s20, s6
 80151dc:	ee2d 3a83 	vmul.f32	s6, s27, s6
 80151e0:	edc7 0a00 	vstr	s1, [r7]
 80151e4:	ee7f ea2e 	vadd.f32	s29, s30, s29
 80151e8:	441f      	add	r7, r3
 80151ea:	ee2a faa3 	vmul.f32	s30, s21, s7
 80151ee:	ee31 5a45 	vsub.f32	s10, s2, s10
 80151f2:	ee6e 3a23 	vmul.f32	s7, s28, s7
 80151f6:	edc2 ea00 	vstr	s29, [r2]
 80151fa:	ee3f 0a80 	vadd.f32	s0, s31, s0
 80151fe:	ee33 3a61 	vsub.f32	s6, s6, s3
 8015202:	ed82 5a01 	vstr	s10, [r2, #4]
 8015206:	ee6e 0a02 	vmul.f32	s1, s28, s4
 801520a:	edcd 3a01 	vstr	s7, [sp, #4]
 801520e:	ed9d 5a03 	vldr	s10, [sp, #12]
 8015212:	ee6b ea86 	vmul.f32	s29, s23, s12
 8015216:	eddd 3a02 	vldr	s7, [sp, #8]
 801521a:	ee6b fa24 	vmul.f32	s31, s22, s9
 801521e:	ed0c 0a01 	vstr	s0, [ip, #-4]
 8015222:	ee65 4a24 	vmul.f32	s9, s10, s9
 8015226:	ed8c 3a00 	vstr	s6, [ip]
 801522a:	ee23 1aa6 	vmul.f32	s2, s7, s13
 801522e:	ee23 6a86 	vmul.f32	s12, s7, s12
 8015232:	eddd 3a01 	vldr	s7, [sp, #4]
 8015236:	ee25 5a25 	vmul.f32	s10, s10, s11
 801523a:	441a      	add	r2, r3
 801523c:	ee2c 0a22 	vmul.f32	s0, s24, s5
 8015240:	449c      	add	ip, r3
 8015242:	ee68 1a04 	vmul.f32	s3, s16, s8
 8015246:	ee70 0a8f 	vadd.f32	s1, s1, s30
 801524a:	ee2d 3a07 	vmul.f32	s6, s26, s14
 801524e:	ee29 faa7 	vmul.f32	s30, s19, s15
 8015252:	ee2a 2a82 	vmul.f32	s4, s21, s4
 8015256:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 801525a:	ee6b 5a25 	vmul.f32	s11, s22, s11
 801525e:	ee68 2a22 	vmul.f32	s5, s16, s5
 8015262:	ee2c 4a04 	vmul.f32	s8, s24, s8
 8015266:	ee29 7a87 	vmul.f32	s14, s19, s14
 801526a:	ee6d 7a27 	vmul.f32	s15, s26, s15
 801526e:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8015272:	ee7e ea81 	vadd.f32	s29, s29, s2
 8015276:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801527a:	ee3f 5a85 	vadd.f32	s10, s31, s10
 801527e:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8015282:	edc4 ea00 	vstr	s29, [r4]
 8015286:	ee30 0a21 	vadd.f32	s0, s0, s3
 801528a:	ed84 6a01 	vstr	s12, [r4, #4]
 801528e:	ee74 2a62 	vsub.f32	s5, s8, s5
 8015292:	edc1 0a00 	vstr	s1, [r1]
 8015296:	ee33 3a0f 	vadd.f32	s6, s6, s30
 801529a:	edc1 3a01 	vstr	s7, [r1, #4]
 801529e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80152a2:	ed86 5a00 	vstr	s10, [r6]
 80152a6:	edc6 4a01 	vstr	s9, [r6, #4]
 80152aa:	4419      	add	r1, r3
 80152ac:	ed80 0a00 	vstr	s0, [r0]
 80152b0:	441c      	add	r4, r3
 80152b2:	edc0 2a01 	vstr	s5, [r0, #4]
 80152b6:	441e      	add	r6, r3
 80152b8:	ed85 3a00 	vstr	s6, [r5]
 80152bc:	4418      	add	r0, r3
 80152be:	ed85 7a01 	vstr	s14, [r5, #4]
 80152c2:	441d      	add	r5, r3
 80152c4:	f63f aee8 	bhi.w	8015098 <arm_radix8_butterfly_f32+0x300>
 80152c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80152ca:	9a04      	ldr	r2, [sp, #16]
 80152cc:	3108      	adds	r1, #8
 80152ce:	3201      	adds	r2, #1
 80152d0:	910c      	str	r1, [sp, #48]	@ 0x30
 80152d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80152d4:	9204      	str	r2, [sp, #16]
 80152d6:	3108      	adds	r1, #8
 80152d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80152da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80152dc:	3108      	adds	r1, #8
 80152de:	910a      	str	r1, [sp, #40]	@ 0x28
 80152e0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80152e2:	3108      	adds	r1, #8
 80152e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80152e6:	9908      	ldr	r1, [sp, #32]
 80152e8:	3108      	adds	r1, #8
 80152ea:	9108      	str	r1, [sp, #32]
 80152ec:	9907      	ldr	r1, [sp, #28]
 80152ee:	3108      	adds	r1, #8
 80152f0:	9107      	str	r1, [sp, #28]
 80152f2:	9906      	ldr	r1, [sp, #24]
 80152f4:	3108      	adds	r1, #8
 80152f6:	9106      	str	r1, [sp, #24]
 80152f8:	9905      	ldr	r1, [sp, #20]
 80152fa:	3108      	adds	r1, #8
 80152fc:	9105      	str	r1, [sp, #20]
 80152fe:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015300:	4291      	cmp	r1, r2
 8015302:	f47f ae74 	bne.w	8014fee <arm_radix8_butterfly_f32+0x256>
 8015306:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015308:	468b      	mov	fp, r1
 801530a:	00db      	lsls	r3, r3, #3
 801530c:	b29b      	uxth	r3, r3
 801530e:	9310      	str	r3, [sp, #64]	@ 0x40
 8015310:	e551      	b.n	8014db6 <arm_radix8_butterfly_f32+0x1e>
 8015312:	b015      	add	sp, #84	@ 0x54
 8015314:	ecbd 8b10 	vpop	{d8-d15}
 8015318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801531c <memset>:
 801531c:	4402      	add	r2, r0
 801531e:	4603      	mov	r3, r0
 8015320:	4293      	cmp	r3, r2
 8015322:	d100      	bne.n	8015326 <memset+0xa>
 8015324:	4770      	bx	lr
 8015326:	f803 1b01 	strb.w	r1, [r3], #1
 801532a:	e7f9      	b.n	8015320 <memset+0x4>

0801532c <__errno>:
 801532c:	4b01      	ldr	r3, [pc, #4]	@ (8015334 <__errno+0x8>)
 801532e:	6818      	ldr	r0, [r3, #0]
 8015330:	4770      	bx	lr
 8015332:	bf00      	nop
 8015334:	240005b4 	.word	0x240005b4

08015338 <__libc_init_array>:
 8015338:	b570      	push	{r4, r5, r6, lr}
 801533a:	4d0d      	ldr	r5, [pc, #52]	@ (8015370 <__libc_init_array+0x38>)
 801533c:	4c0d      	ldr	r4, [pc, #52]	@ (8015374 <__libc_init_array+0x3c>)
 801533e:	1b64      	subs	r4, r4, r5
 8015340:	10a4      	asrs	r4, r4, #2
 8015342:	2600      	movs	r6, #0
 8015344:	42a6      	cmp	r6, r4
 8015346:	d109      	bne.n	801535c <__libc_init_array+0x24>
 8015348:	4d0b      	ldr	r5, [pc, #44]	@ (8015378 <__libc_init_array+0x40>)
 801534a:	4c0c      	ldr	r4, [pc, #48]	@ (801537c <__libc_init_array+0x44>)
 801534c:	f000 fa64 	bl	8015818 <_init>
 8015350:	1b64      	subs	r4, r4, r5
 8015352:	10a4      	asrs	r4, r4, #2
 8015354:	2600      	movs	r6, #0
 8015356:	42a6      	cmp	r6, r4
 8015358:	d105      	bne.n	8015366 <__libc_init_array+0x2e>
 801535a:	bd70      	pop	{r4, r5, r6, pc}
 801535c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015360:	4798      	blx	r3
 8015362:	3601      	adds	r6, #1
 8015364:	e7ee      	b.n	8015344 <__libc_init_array+0xc>
 8015366:	f855 3b04 	ldr.w	r3, [r5], #4
 801536a:	4798      	blx	r3
 801536c:	3601      	adds	r6, #1
 801536e:	e7f2      	b.n	8015356 <__libc_init_array+0x1e>
 8015370:	0802b8d0 	.word	0x0802b8d0
 8015374:	0802b8d0 	.word	0x0802b8d0
 8015378:	0802b8d0 	.word	0x0802b8d0
 801537c:	0802b8d4 	.word	0x0802b8d4

08015380 <sqrtf>:
 8015380:	b508      	push	{r3, lr}
 8015382:	ed2d 8b02 	vpush	{d8}
 8015386:	eeb0 8a40 	vmov.f32	s16, s0
 801538a:	f000 fa42 	bl	8015812 <__ieee754_sqrtf>
 801538e:	eeb4 8a48 	vcmp.f32	s16, s16
 8015392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015396:	d60c      	bvs.n	80153b2 <sqrtf+0x32>
 8015398:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80153b8 <sqrtf+0x38>
 801539c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80153a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153a4:	d505      	bpl.n	80153b2 <sqrtf+0x32>
 80153a6:	f7ff ffc1 	bl	801532c <__errno>
 80153aa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80153ae:	2321      	movs	r3, #33	@ 0x21
 80153b0:	6003      	str	r3, [r0, #0]
 80153b2:	ecbd 8b02 	vpop	{d8}
 80153b6:	bd08      	pop	{r3, pc}
 80153b8:	00000000 	.word	0x00000000

080153bc <logf>:
 80153bc:	ee10 3a10 	vmov	r3, s0
 80153c0:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80153c4:	b410      	push	{r4}
 80153c6:	d055      	beq.n	8015474 <logf+0xb8>
 80153c8:	f5a3 0200 	sub.w	r2, r3, #8388608	@ 0x800000
 80153cc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80153d0:	d31a      	bcc.n	8015408 <logf+0x4c>
 80153d2:	005a      	lsls	r2, r3, #1
 80153d4:	d104      	bne.n	80153e0 <logf+0x24>
 80153d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153da:	2001      	movs	r0, #1
 80153dc:	f000 b9f8 	b.w	80157d0 <__math_divzerof>
 80153e0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80153e4:	d043      	beq.n	801546e <logf+0xb2>
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	db02      	blt.n	80153f0 <logf+0x34>
 80153ea:	f1b2 4f7f 	cmp.w	r2, #4278190080	@ 0xff000000
 80153ee:	d303      	bcc.n	80153f8 <logf+0x3c>
 80153f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153f4:	f000 b9fe 	b.w	80157f4 <__math_invalidf>
 80153f8:	eddf 7a20 	vldr	s15, [pc, #128]	@ 801547c <logf+0xc0>
 80153fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015400:	ee10 3a10 	vmov	r3, s0
 8015404:	f1a3 6338 	sub.w	r3, r3, #192937984	@ 0xb800000
 8015408:	f103 4240 	add.w	r2, r3, #3221225472	@ 0xc0000000
 801540c:	491c      	ldr	r1, [pc, #112]	@ (8015480 <logf+0xc4>)
 801540e:	eebf 0b00 	vmov.f64	d0, #240	@ 0xbf800000 -1.0
 8015412:	f502 024d 	add.w	r2, r2, #13434880	@ 0xcd0000
 8015416:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 801541a:	0dd4      	lsrs	r4, r2, #23
 801541c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8015420:	05e4      	lsls	r4, r4, #23
 8015422:	ed90 5b00 	vldr	d5, [r0]
 8015426:	1b1b      	subs	r3, r3, r4
 8015428:	ee07 3a90 	vmov	s15, r3
 801542c:	ed90 6b02 	vldr	d6, [r0, #8]
 8015430:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8015434:	15d2      	asrs	r2, r2, #23
 8015436:	eea5 0b07 	vfma.f64	d0, d5, d7
 801543a:	ed91 5b40 	vldr	d5, [r1, #256]	@ 0x100
 801543e:	ee20 4b00 	vmul.f64	d4, d0, d0
 8015442:	ee07 2a90 	vmov	s15, r2
 8015446:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801544a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801544e:	ed91 5b44 	vldr	d5, [r1, #272]	@ 0x110
 8015452:	ed91 7b46 	vldr	d7, [r1, #280]	@ 0x118
 8015456:	eea5 7b00 	vfma.f64	d7, d5, d0
 801545a:	ed91 5b42 	vldr	d5, [r1, #264]	@ 0x108
 801545e:	ee30 0b06 	vadd.f64	d0, d0, d6
 8015462:	eea5 7b04 	vfma.f64	d7, d5, d4
 8015466:	eea4 0b07 	vfma.f64	d0, d4, d7
 801546a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801546e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015472:	4770      	bx	lr
 8015474:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8015484 <logf+0xc8>
 8015478:	e7f9      	b.n	801546e <logf+0xb2>
 801547a:	bf00      	nop
 801547c:	4b000000 	.word	0x4b000000
 8015480:	0802b540 	.word	0x0802b540
 8015484:	00000000 	.word	0x00000000

08015488 <checkint>:
 8015488:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801548c:	2b7e      	cmp	r3, #126	@ 0x7e
 801548e:	d910      	bls.n	80154b2 <checkint+0x2a>
 8015490:	2b96      	cmp	r3, #150	@ 0x96
 8015492:	d80c      	bhi.n	80154ae <checkint+0x26>
 8015494:	2201      	movs	r2, #1
 8015496:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801549a:	fa02 f303 	lsl.w	r3, r2, r3
 801549e:	1e5a      	subs	r2, r3, #1
 80154a0:	4202      	tst	r2, r0
 80154a2:	d106      	bne.n	80154b2 <checkint+0x2a>
 80154a4:	4203      	tst	r3, r0
 80154a6:	bf0c      	ite	eq
 80154a8:	2002      	moveq	r0, #2
 80154aa:	2001      	movne	r0, #1
 80154ac:	4770      	bx	lr
 80154ae:	2002      	movs	r0, #2
 80154b0:	4770      	bx	lr
 80154b2:	2000      	movs	r0, #0
 80154b4:	4770      	bx	lr
	...

080154b8 <powf>:
 80154b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80154ba:	ee10 1a10 	vmov	r1, s0
 80154be:	ee10 4a90 	vmov	r4, s1
 80154c2:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 80154c6:	0063      	lsls	r3, r4, #1
 80154c8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80154cc:	eef0 7a40 	vmov.f32	s15, s0
 80154d0:	eeb0 7a60 	vmov.f32	s14, s1
 80154d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80154d8:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 80154dc:	d252      	bcs.n	8015584 <powf+0xcc>
 80154de:	4290      	cmp	r0, r2
 80154e0:	d258      	bcs.n	8015594 <powf+0xdc>
 80154e2:	2000      	movs	r0, #0
 80154e4:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 80154e8:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 80154ec:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 80154f0:	0ddb      	lsrs	r3, r3, #23
 80154f2:	4a9d      	ldr	r2, [pc, #628]	@ (8015768 <powf+0x2b0>)
 80154f4:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 80154f8:	05db      	lsls	r3, r3, #23
 80154fa:	1ac9      	subs	r1, r1, r3
 80154fc:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8015500:	ee07 1a90 	vmov	s15, r1
 8015504:	ed94 5b02 	vldr	d5, [r4, #8]
 8015508:	ed94 4b00 	vldr	d4, [r4]
 801550c:	15db      	asrs	r3, r3, #23
 801550e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8015512:	ee07 3a90 	vmov	s15, r3
 8015516:	eea4 2b06 	vfma.f64	d2, d4, d6
 801551a:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 801551e:	ee22 4b02 	vmul.f64	d4, d2, d2
 8015522:	ee24 0b04 	vmul.f64	d0, d4, d4
 8015526:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801552a:	ee36 6b05 	vadd.f64	d6, d6, d5
 801552e:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 8015532:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 8015536:	eea2 1b05 	vfma.f64	d1, d2, d5
 801553a:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 801553e:	eea2 5b03 	vfma.f64	d5, d2, d3
 8015542:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 8015546:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801554a:	eea2 6b03 	vfma.f64	d6, d2, d3
 801554e:	eea4 6b05 	vfma.f64	d6, d4, d5
 8015552:	eea1 6b00 	vfma.f64	d6, d1, d0
 8015556:	ee27 7b06 	vmul.f64	d7, d7, d6
 801555a:	ee17 3a90 	vmov	r3, s15
 801555e:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8015562:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 8015566:	429a      	cmp	r2, r3
 8015568:	f0c0 80b8 	bcc.w	80156dc <powf+0x224>
 801556c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8015748 <powf+0x290>
 8015570:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015578:	dd79      	ble.n	801566e <powf+0x1b6>
 801557a:	b003      	add	sp, #12
 801557c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015580:	f000 b920 	b.w	80157c4 <__math_oflowf>
 8015584:	4290      	cmp	r0, r2
 8015586:	d330      	bcc.n	80155ea <powf+0x132>
 8015588:	b12b      	cbz	r3, 8015596 <powf+0xde>
 801558a:	0049      	lsls	r1, r1, #1
 801558c:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 8015590:	d808      	bhi.n	80155a4 <powf+0xec>
 8015592:	e015      	b.n	80155c0 <powf+0x108>
 8015594:	b953      	cbnz	r3, 80155ac <powf+0xf4>
 8015596:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 801559a:	0049      	lsls	r1, r1, #1
 801559c:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 80155a0:	f240 80ca 	bls.w	8015738 <powf+0x280>
 80155a4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80155a8:	b003      	add	sp, #12
 80155aa:	bd30      	pop	{r4, r5, pc}
 80155ac:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 80155b0:	d105      	bne.n	80155be <powf+0x106>
 80155b2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80155b6:	0064      	lsls	r4, r4, #1
 80155b8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80155bc:	e7f0      	b.n	80155a0 <powf+0xe8>
 80155be:	0049      	lsls	r1, r1, #1
 80155c0:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 80155c4:	d1ee      	bne.n	80155a4 <powf+0xec>
 80155c6:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 80155ca:	f000 80b5 	beq.w	8015738 <powf+0x280>
 80155ce:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 80155d2:	ea6f 0404 	mvn.w	r4, r4
 80155d6:	bf34      	ite	cc
 80155d8:	2100      	movcc	r1, #0
 80155da:	2101      	movcs	r1, #1
 80155dc:	0fe4      	lsrs	r4, r4, #31
 80155de:	42a1      	cmp	r1, r4
 80155e0:	f040 80ad 	bne.w	801573e <powf+0x286>
 80155e4:	ee27 0a07 	vmul.f32	s0, s14, s14
 80155e8:	e7de      	b.n	80155a8 <powf+0xf0>
 80155ea:	004d      	lsls	r5, r1, #1
 80155ec:	1e6b      	subs	r3, r5, #1
 80155ee:	4293      	cmp	r3, r2
 80155f0:	d31b      	bcc.n	801562a <powf+0x172>
 80155f2:	2900      	cmp	r1, #0
 80155f4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80155f8:	da0e      	bge.n	8015618 <powf+0x160>
 80155fa:	4620      	mov	r0, r4
 80155fc:	f7ff ff44 	bl	8015488 <checkint>
 8015600:	2801      	cmp	r0, #1
 8015602:	d109      	bne.n	8015618 <powf+0x160>
 8015604:	eeb1 0a40 	vneg.f32	s0, s0
 8015608:	b945      	cbnz	r5, 801561c <powf+0x164>
 801560a:	2c00      	cmp	r4, #0
 801560c:	dacc      	bge.n	80155a8 <powf+0xf0>
 801560e:	b003      	add	sp, #12
 8015610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015614:	f000 b8dc 	b.w	80157d0 <__math_divzerof>
 8015618:	2000      	movs	r0, #0
 801561a:	e7f5      	b.n	8015608 <powf+0x150>
 801561c:	2c00      	cmp	r4, #0
 801561e:	dac3      	bge.n	80155a8 <powf+0xf0>
 8015620:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015624:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8015628:	e7be      	b.n	80155a8 <powf+0xf0>
 801562a:	2900      	cmp	r1, #0
 801562c:	da1d      	bge.n	801566a <powf+0x1b2>
 801562e:	4620      	mov	r0, r4
 8015630:	f7ff ff2a 	bl	8015488 <checkint>
 8015634:	b920      	cbnz	r0, 8015640 <powf+0x188>
 8015636:	b003      	add	sp, #12
 8015638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801563c:	f000 b8da 	b.w	80157f4 <__math_invalidf>
 8015640:	1e43      	subs	r3, r0, #1
 8015642:	4258      	negs	r0, r3
 8015644:	4158      	adcs	r0, r3
 8015646:	0400      	lsls	r0, r0, #16
 8015648:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801564c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8015650:	f4bf af48 	bcs.w	80154e4 <powf+0x2c>
 8015654:	eddf 6a45 	vldr	s13, [pc, #276]	@ 801576c <powf+0x2b4>
 8015658:	ee27 0aa6 	vmul.f32	s0, s15, s13
 801565c:	ee10 3a10 	vmov	r3, s0
 8015660:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015664:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 8015668:	e73c      	b.n	80154e4 <powf+0x2c>
 801566a:	2000      	movs	r0, #0
 801566c:	e7ee      	b.n	801564c <powf+0x194>
 801566e:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8015750 <powf+0x298>
 8015672:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801567a:	dd0f      	ble.n	801569c <powf+0x1e4>
 801567c:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 8015680:	b1c0      	cbz	r0, 80156b4 <powf+0x1fc>
 8015682:	9301      	str	r3, [sp, #4]
 8015684:	eddd 6a01 	vldr	s13, [sp, #4]
 8015688:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 801568c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8015690:	eef4 6a46 	vcmp.f32	s13, s12
 8015694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015698:	f47f af6f 	bne.w	801557a <powf+0xc2>
 801569c:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 8015758 <powf+0x2a0>
 80156a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80156a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156a8:	d80c      	bhi.n	80156c4 <powf+0x20c>
 80156aa:	b003      	add	sp, #12
 80156ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80156b0:	f000 b87c 	b.w	80157ac <__math_uflowf>
 80156b4:	9300      	str	r3, [sp, #0]
 80156b6:	eddd 6a00 	vldr	s13, [sp]
 80156ba:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80156be:	ee76 6a86 	vadd.f32	s13, s13, s12
 80156c2:	e7e5      	b.n	8015690 <powf+0x1d8>
 80156c4:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8015760 <powf+0x2a8>
 80156c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80156cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156d0:	d504      	bpl.n	80156dc <powf+0x224>
 80156d2:	b003      	add	sp, #12
 80156d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80156d8:	f000 b86e 	b.w	80157b8 <__math_may_uflowf>
 80156dc:	4b24      	ldr	r3, [pc, #144]	@ (8015770 <powf+0x2b8>)
 80156de:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80156e2:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 80156e6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80156ea:	ee16 2a10 	vmov	r2, s12
 80156ee:	ee36 6b45 	vsub.f64	d6, d6, d5
 80156f2:	f002 011f 	and.w	r1, r2, #31
 80156f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80156fa:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 80156fe:	ee27 4b07 	vmul.f64	d4, d7, d7
 8015702:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 8015706:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 801570a:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 801570e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015712:	686d      	ldr	r5, [r5, #4]
 8015714:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 8015718:	1880      	adds	r0, r0, r2
 801571a:	2100      	movs	r1, #0
 801571c:	190a      	adds	r2, r1, r4
 801571e:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8015722:	eea7 0b05 	vfma.f64	d0, d7, d5
 8015726:	ec43 2b17 	vmov	d7, r2, r3
 801572a:	eea6 0b04 	vfma.f64	d0, d6, d4
 801572e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015732:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015736:	e737      	b.n	80155a8 <powf+0xf0>
 8015738:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801573c:	e734      	b.n	80155a8 <powf+0xf0>
 801573e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8015774 <powf+0x2bc>
 8015742:	e731      	b.n	80155a8 <powf+0xf0>
 8015744:	f3af 8000 	nop.w
 8015748:	ffd1d571 	.word	0xffd1d571
 801574c:	405fffff 	.word	0x405fffff
 8015750:	ffa3aae2 	.word	0xffa3aae2
 8015754:	405fffff 	.word	0x405fffff
 8015758:	00000000 	.word	0x00000000
 801575c:	c062c000 	.word	0xc062c000
 8015760:	00000000 	.word	0x00000000
 8015764:	c062a000 	.word	0xc062a000
 8015768:	0802b7a8 	.word	0x0802b7a8
 801576c:	4b000000 	.word	0x4b000000
 8015770:	0802b660 	.word	0x0802b660
 8015774:	00000000 	.word	0x00000000

08015778 <with_errnof>:
 8015778:	b510      	push	{r4, lr}
 801577a:	ed2d 8b02 	vpush	{d8}
 801577e:	eeb0 8a40 	vmov.f32	s16, s0
 8015782:	4604      	mov	r4, r0
 8015784:	f7ff fdd2 	bl	801532c <__errno>
 8015788:	eeb0 0a48 	vmov.f32	s0, s16
 801578c:	ecbd 8b02 	vpop	{d8}
 8015790:	6004      	str	r4, [r0, #0]
 8015792:	bd10      	pop	{r4, pc}

08015794 <xflowf>:
 8015794:	b130      	cbz	r0, 80157a4 <xflowf+0x10>
 8015796:	eef1 7a40 	vneg.f32	s15, s0
 801579a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801579e:	2022      	movs	r0, #34	@ 0x22
 80157a0:	f7ff bfea 	b.w	8015778 <with_errnof>
 80157a4:	eef0 7a40 	vmov.f32	s15, s0
 80157a8:	e7f7      	b.n	801579a <xflowf+0x6>
	...

080157ac <__math_uflowf>:
 80157ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80157b4 <__math_uflowf+0x8>
 80157b0:	f7ff bff0 	b.w	8015794 <xflowf>
 80157b4:	10000000 	.word	0x10000000

080157b8 <__math_may_uflowf>:
 80157b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80157c0 <__math_may_uflowf+0x8>
 80157bc:	f7ff bfea 	b.w	8015794 <xflowf>
 80157c0:	1a200000 	.word	0x1a200000

080157c4 <__math_oflowf>:
 80157c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80157cc <__math_oflowf+0x8>
 80157c8:	f7ff bfe4 	b.w	8015794 <xflowf>
 80157cc:	70000000 	.word	0x70000000

080157d0 <__math_divzerof>:
 80157d0:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80157f0 <__math_divzerof+0x20>
 80157d4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80157d8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80157dc:	2800      	cmp	r0, #0
 80157de:	f04f 0022 	mov.w	r0, #34	@ 0x22
 80157e2:	fe47 7a87 	vseleq.f32	s15, s15, s14
 80157e6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80157ea:	f7ff bfc5 	b.w	8015778 <with_errnof>
 80157ee:	bf00      	nop
 80157f0:	00000000 	.word	0x00000000

080157f4 <__math_invalidf>:
 80157f4:	eef0 7a40 	vmov.f32	s15, s0
 80157f8:	ee30 7a40 	vsub.f32	s14, s0, s0
 80157fc:	eef4 7a67 	vcmp.f32	s15, s15
 8015800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015804:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8015808:	d602      	bvs.n	8015810 <__math_invalidf+0x1c>
 801580a:	2021      	movs	r0, #33	@ 0x21
 801580c:	f7ff bfb4 	b.w	8015778 <with_errnof>
 8015810:	4770      	bx	lr

08015812 <__ieee754_sqrtf>:
 8015812:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015816:	4770      	bx	lr

08015818 <_init>:
 8015818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801581a:	bf00      	nop
 801581c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801581e:	bc08      	pop	{r3}
 8015820:	469e      	mov	lr, r3
 8015822:	4770      	bx	lr

08015824 <_fini>:
 8015824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015826:	bf00      	nop
 8015828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801582a:	bc08      	pop	{r3}
 801582c:	469e      	mov	lr, r3
 801582e:	4770      	bx	lr
